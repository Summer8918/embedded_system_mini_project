ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB52:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "cmsis_os.h"
  22:Core/Src/main.c **** #include "stm32f072xb.h"
  23:Core/Src/main.c **** #include "motor.h"
  24:Core/Src/main.c **** #include "motor.c"
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** //Global variables
  27:Core/Src/main.c **** volatile uint16_t commandLED = 0;
  28:Core/Src/main.c **** volatile uint16_t commandMotor = 0;
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** // Semaphores
  31:Core/Src/main.c **** // osSemaphoreId_t binarySem03LEDWorkerHandle;
  32:Core/Src/main.c **** // osSemaphoreId_t binarySem04MotorWorkerHandle;
  33:Core/Src/main.c **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 2


  34:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* USER CODE END Includes */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* USER CODE END PTD */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  45:Core/Src/main.c **** /* USER CODE BEGIN PD */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* USER CODE END PD */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  50:Core/Src/main.c **** /* USER CODE BEGIN PM */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE END PM */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  55:Core/Src/main.c **** I2C_HandleTypeDef hi2c2;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** SPI_HandleTypeDef hspi2;
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** TSC_HandleTypeDef htsc;
  60:Core/Src/main.c **** /* For motor */
  61:Core/Src/main.c **** volatile uint32_t debouncer; 
  62:Core/Src/main.c **** // The speed we are setting the motor to (3rd and 4th digits)
  63:Core/Src/main.c **** volatile int16_t target_rpm = 0;
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** PCD_HandleTypeDef hpcd_USB_FS;
  66:Core/Src/main.c **** /* Definitions for task router */
  67:Core/Src/main.c **** osThreadId_t routerTaskHandle;
  68:Core/Src/main.c **** const osThreadAttr_t routerTask_attributes = {
  69:Core/Src/main.c ****   .name = "routerTask",
  70:Core/Src/main.c ****   .stack_size = 128 * 4,
  71:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
  72:Core/Src/main.c **** };
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /* Definitions for LED worker task */
  75:Core/Src/main.c **** osThreadId_t LEDTaskHandle;
  76:Core/Src/main.c **** const osThreadAttr_t LEDTask_attributes = {
  77:Core/Src/main.c ****   .name = "LEDTask",
  78:Core/Src/main.c ****   .stack_size = 128 * 4,
  79:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
  80:Core/Src/main.c **** };
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** /* Definitions for Motor worker task */
  83:Core/Src/main.c **** osThreadId_t motorTaskHandle;
  84:Core/Src/main.c **** const osThreadAttr_t motorTask_attributes = {
  85:Core/Src/main.c ****   .name = "motorTask",
  86:Core/Src/main.c ****   .stack_size = 128 * 4,
  87:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
  88:Core/Src/main.c **** };
  89:Core/Src/main.c **** 
  90:Core/Src/main.c **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 3


  91:Core/Src/main.c **** /* USER CODE BEGIN PV */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c **** /* USER CODE END PV */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  96:Core/Src/main.c **** void SystemClock_Config(void);
  97:Core/Src/main.c **** static void MX_GPIO_Init(void);
  98:Core/Src/main.c **** static void MX_I2C2_Init(void);
  99:Core/Src/main.c **** static void MX_SPI2_Init(void);
 100:Core/Src/main.c **** static void MX_TSC_Init(void);
 101:Core/Src/main.c **** static void MX_USB_PCD_Init(void);
 102:Core/Src/main.c **** void StartRouterTask(void *argument);
 103:Core/Src/main.c **** void StartMotorTask(void *argument);
 104:Core/Src/main.c **** void StartLEDTask(void *argument);
 105:Core/Src/main.c **** void initLEDs(void);
 106:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c **** /* USER CODE END PFP */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 111:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 112:Core/Src/main.c **** 
 113:Core/Src/main.c **** /* USER CODE END 0 */
 114:Core/Src/main.c **** 
 115:Core/Src/main.c **** /**
 116:Core/Src/main.c ****   * @brief  The application entry point.
 117:Core/Src/main.c ****   * @retval int
 118:Core/Src/main.c ****   */
 119:Core/Src/main.c **** int main(void)
 120:Core/Src/main.c **** {
 121:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 122:Core/Src/main.c ****   HAL_Init();
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   /* Configure the system clock */
 125:Core/Src/main.c ****   SystemClock_Config();
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****   /* Initialize all configured peripherals */
 128:Core/Src/main.c ****   MX_GPIO_Init();
 129:Core/Src/main.c ****   initUsart3();
 130:Core/Src/main.c ****   initLEDs();
 131:Core/Src/main.c ****   motor_init();
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****   /* Init scheduler */
 134:Core/Src/main.c ****   osKernelInitialize();
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 137:Core/Src/main.c ****   /* add mutexes, ... */
 138:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 141:Core/Src/main.c ****   /* add semaphores, ... */
 142:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 143:Core/Src/main.c **** 
 144:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 145:Core/Src/main.c ****   /* add queues, ... */
 146:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 147:Core/Src/main.c **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 4


 148:Core/Src/main.c ****   /* Create the thread(s) */
 149:Core/Src/main.c ****   // comment thread temprariely.
 150:Core/Src/main.c ****   /* creation of routerTask */
 151:Core/Src/main.c ****   routerTaskHandle = osThreadNew(StartRouterTask, NULL, &routerTask_attributes);
 152:Core/Src/main.c ****   /* creation of LEDTask */
 153:Core/Src/main.c ****   LEDTaskHandle = osThreadNew(StartLEDTask, NULL, &LEDTask_attributes);
 154:Core/Src/main.c ****   /* creation of motorTask */
 155:Core/Src/main.c ****   motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 156:Core/Src/main.c ****   /* creation of UARTTask */
 157:Core/Src/main.c ****   UARTTaskHandle = osThreadNew(StartParseUartTask, NULL, &UARTTask_attributes);
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****   // init the resources for the synchronization of router
 160:Core/Src/main.c ****   // uart parser, led and motor threads
 161:Core/Src/main.c ****   uint8_t status = syncInit();
 162:Core/Src/main.c ****   if (status != 0) {
 163:Core/Src/main.c ****     transmitCharArray("Fail to init sync resources!\n");
 164:Core/Src/main.c ****   }
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 167:Core/Src/main.c ****   /* add threads, ... */
 168:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_EVENTS */
 171:Core/Src/main.c ****   /* add events, ... */
 172:Core/Src/main.c ****   /* USER CODE END RTOS_EVENTS */
 173:Core/Src/main.c **** 
 174:Core/Src/main.c ****   /* Start scheduler */
 175:Core/Src/main.c ****   osKernelStart();
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /* Infinite loop */
 180:Core/Src/main.c ****   while (1)
 181:Core/Src/main.c ****   {
 182:Core/Src/main.c ****   }
 183:Core/Src/main.c **** }
 184:Core/Src/main.c **** 
 185:Core/Src/main.c **** /**
 186:Core/Src/main.c ****   * @brief System Clock Configuration
 187:Core/Src/main.c ****   * @retval None
 188:Core/Src/main.c ****   */
 189:Core/Src/main.c **** void SystemClock_Config(void)
 190:Core/Src/main.c **** {
 191:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 192:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 193:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 196:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 197:Core/Src/main.c ****   */
 198:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 199:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 200:Core/Src/main.c ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 201:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 202:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 203:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 204:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 5


 205:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 206:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 207:Core/Src/main.c ****   {
 208:Core/Src/main.c ****     Error_Handler();
 209:Core/Src/main.c ****   }
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 212:Core/Src/main.c ****   */
 213:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 214:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 215:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 216:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 217:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 220:Core/Src/main.c ****   {
 221:Core/Src/main.c ****     Error_Handler();
 222:Core/Src/main.c ****   }
 223:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 224:Core/Src/main.c ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 225:Core/Src/main.c **** 
 226:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 227:Core/Src/main.c ****   {
 228:Core/Src/main.c ****     Error_Handler();
 229:Core/Src/main.c ****   }
 230:Core/Src/main.c **** }
 231:Core/Src/main.c **** 
 232:Core/Src/main.c **** /**
 233:Core/Src/main.c ****   * @brief GPIO Initialization Function
 234:Core/Src/main.c ****   * @param None
 235:Core/Src/main.c ****   * @retval None
 236:Core/Src/main.c ****   */
 237:Core/Src/main.c **** static void MX_GPIO_Init(void)
 238:Core/Src/main.c **** {
  26              		.loc 1 238 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 20
  33              		.cfi_offset 4, -20
  34              		.cfi_offset 5, -16
  35              		.cfi_offset 6, -12
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 89B0     		sub	sp, sp, #36
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 239:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 239 3 view .LVU1
  42              		.loc 1 239 20 is_stmt 0 view .LVU2
  43 0004 1422     		movs	r2, #20
  44 0006 0021     		movs	r1, #0
  45 0008 03A8     		add	r0, sp, #12
  46 000a FFF7FEFF 		bl	memset
  47              	.LVL0:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 6


 240:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 241:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 242:Core/Src/main.c **** 
 243:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 244:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 244 3 is_stmt 1 view .LVU3
  49              	.LBB9:
  50              		.loc 1 244 3 view .LVU4
  51              		.loc 1 244 3 view .LVU5
  52 000e 204B     		ldr	r3, .L2
  53 0010 5A69     		ldr	r2, [r3, #20]
  54 0012 8021     		movs	r1, #128
  55 0014 0903     		lsls	r1, r1, #12
  56 0016 0A43     		orrs	r2, r1
  57 0018 5A61     		str	r2, [r3, #20]
  58              		.loc 1 244 3 view .LVU6
  59 001a 5A69     		ldr	r2, [r3, #20]
  60 001c 0A40     		ands	r2, r1
  61 001e 0092     		str	r2, [sp]
  62              		.loc 1 244 3 view .LVU7
  63 0020 009A     		ldr	r2, [sp]
  64              	.LBE9:
  65              		.loc 1 244 3 view .LVU8
 245:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  66              		.loc 1 245 3 view .LVU9
  67              	.LBB10:
  68              		.loc 1 245 3 view .LVU10
  69              		.loc 1 245 3 view .LVU11
  70 0022 5A69     		ldr	r2, [r3, #20]
  71 0024 8021     		movs	r1, #128
  72 0026 8902     		lsls	r1, r1, #10
  73 0028 0A43     		orrs	r2, r1
  74 002a 5A61     		str	r2, [r3, #20]
  75              		.loc 1 245 3 view .LVU12
  76 002c 5A69     		ldr	r2, [r3, #20]
  77 002e 0A40     		ands	r2, r1
  78 0030 0192     		str	r2, [sp, #4]
  79              		.loc 1 245 3 view .LVU13
  80 0032 019A     		ldr	r2, [sp, #4]
  81              	.LBE10:
  82              		.loc 1 245 3 view .LVU14
 246:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  83              		.loc 1 246 3 view .LVU15
  84              	.LBB11:
  85              		.loc 1 246 3 view .LVU16
  86              		.loc 1 246 3 view .LVU17
  87 0034 5A69     		ldr	r2, [r3, #20]
  88 0036 8021     		movs	r1, #128
  89 0038 C902     		lsls	r1, r1, #11
  90 003a 0A43     		orrs	r2, r1
  91 003c 5A61     		str	r2, [r3, #20]
  92              		.loc 1 246 3 view .LVU18
  93 003e 5B69     		ldr	r3, [r3, #20]
  94 0040 0B40     		ands	r3, r1
  95 0042 0293     		str	r3, [sp, #8]
  96              		.loc 1 246 3 view .LVU19
  97 0044 029B     		ldr	r3, [sp, #8]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 7


  98              	.LBE11:
  99              		.loc 1 246 3 view .LVU20
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 249:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 100              		.loc 1 249 3 view .LVU21
 101 0046 134C     		ldr	r4, .L2+4
 102 0048 134D     		ldr	r5, .L2+8
 103 004a 0022     		movs	r2, #0
 104 004c 2100     		movs	r1, r4
 105 004e 2800     		movs	r0, r5
 106 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 107              	.LVL1:
 250:Core/Src/main.c ****                           |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 251:Core/Src/main.c **** 
 252:Core/Src/main.c ****   /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
 253:Core/Src/main.c ****                            LD4_Pin LD5_Pin */
 254:Core/Src/main.c ****   GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 108              		.loc 1 254 3 view .LVU22
 109              		.loc 1 254 23 is_stmt 0 view .LVU23
 110 0054 0394     		str	r4, [sp, #12]
 255:Core/Src/main.c ****                           |LD4_Pin|LD5_Pin;
 256:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 111              		.loc 1 256 3 is_stmt 1 view .LVU24
 112              		.loc 1 256 24 is_stmt 0 view .LVU25
 113 0056 0127     		movs	r7, #1
 114 0058 0497     		str	r7, [sp, #16]
 257:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 115              		.loc 1 257 3 is_stmt 1 view .LVU26
 116              		.loc 1 257 24 is_stmt 0 view .LVU27
 117 005a 0024     		movs	r4, #0
 118 005c 0594     		str	r4, [sp, #20]
 258:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 119              		.loc 1 258 3 is_stmt 1 view .LVU28
 120              		.loc 1 258 25 is_stmt 0 view .LVU29
 121 005e 0694     		str	r4, [sp, #24]
 259:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 122              		.loc 1 259 3 is_stmt 1 view .LVU30
 123 0060 03A9     		add	r1, sp, #12
 124 0062 2800     		movs	r0, r5
 125 0064 FFF7FEFF 		bl	HAL_GPIO_Init
 126              	.LVL2:
 260:Core/Src/main.c **** 
 261:Core/Src/main.c ****   /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
 262:Core/Src/main.c ****   GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 127              		.loc 1 262 3 view .LVU31
 128              		.loc 1 262 23 is_stmt 0 view .LVU32
 129 0068 0623     		movs	r3, #6
 130 006a 0393     		str	r3, [sp, #12]
 263:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 131              		.loc 1 263 3 is_stmt 1 view .LVU33
 132              		.loc 1 263 24 is_stmt 0 view .LVU34
 133 006c 9026     		movs	r6, #144
 134 006e 7603     		lsls	r6, r6, #13
 135 0070 0496     		str	r6, [sp, #16]
 264:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 136              		.loc 1 264 3 is_stmt 1 view .LVU35
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 8


 137              		.loc 1 264 24 is_stmt 0 view .LVU36
 138 0072 0594     		str	r4, [sp, #20]
 265:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 139              		.loc 1 265 3 is_stmt 1 view .LVU37
 140 0074 03A9     		add	r1, sp, #12
 141 0076 2800     		movs	r0, r5
 142 0078 FFF7FEFF 		bl	HAL_GPIO_Init
 143              	.LVL3:
 266:Core/Src/main.c **** 
 267:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 268:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 144              		.loc 1 268 3 view .LVU38
 145              		.loc 1 268 23 is_stmt 0 view .LVU39
 146 007c 0397     		str	r7, [sp, #12]
 269:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 147              		.loc 1 269 3 is_stmt 1 view .LVU40
 148              		.loc 1 269 24 is_stmt 0 view .LVU41
 149 007e 0496     		str	r6, [sp, #16]
 270:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 150              		.loc 1 270 3 is_stmt 1 view .LVU42
 151              		.loc 1 270 24 is_stmt 0 view .LVU43
 152 0080 0594     		str	r4, [sp, #20]
 271:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 153              		.loc 1 271 3 is_stmt 1 view .LVU44
 154 0082 9020     		movs	r0, #144
 155 0084 03A9     		add	r1, sp, #12
 156 0086 C005     		lsls	r0, r0, #23
 157 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 158              	.LVL4:
 272:Core/Src/main.c **** 
 273:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 274:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 275:Core/Src/main.c **** }
 159              		.loc 1 275 1 is_stmt 0 view .LVU45
 160 008c 09B0     		add	sp, sp, #36
 161              		@ sp needed
 162 008e F0BD     		pop	{r4, r5, r6, r7, pc}
 163              	.L3:
 164              		.align	2
 165              	.L2:
 166 0090 00100240 		.word	1073876992
 167 0094 E1030000 		.word	993
 168 0098 00080048 		.word	1207961600
 169              		.cfi_endproc
 170              	.LFE52:
 172              		.section	.rodata.StartMotorTask.str1.4,"aMS",%progbits,1
 173              		.align	2
 174              	.LC2:
 175 0000 4D6F746F 		.ascii	"Motor worker Got the signal\012\000"
 175      7220776F 
 175      726B6572 
 175      20476F74 
 175      20746865 
 176 001d 000000   		.align	2
 177              	.LC8:
 178 0020 4D6F746F 		.ascii	"Motor worker go to sleep\012\000"
 178      7220776F 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 9


 178      726B6572 
 178      20676F20 
 178      746F2073 
 179              		.section	.text.StartMotorTask,"ax",%progbits
 180              		.align	1
 181              		.global	StartMotorTask
 182              		.syntax unified
 183              		.code	16
 184              		.thumb_func
 186              	StartMotorTask:
 187              	.LFB56:
 276:Core/Src/main.c **** 
 277:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 278:Core/Src/main.c **** 
 279:Core/Src/main.c **** /* USER CODE END 4 */
 280:Core/Src/main.c **** 
 281:Core/Src/main.c **** //New branch
 282:Core/Src/main.c **** 
 283:Core/Src/main.c **** /* USER CODE BEGIN Header_StartRouterTask */
 284:Core/Src/main.c **** /**
 285:Core/Src/main.c ****   * @brief  Function implementing the routerTask thread.
 286:Core/Src/main.c ****   * @param  argument: Not used
 287:Core/Src/main.c ****   * @retval None
 288:Core/Src/main.c ****   */
 289:Core/Src/main.c **** /* USER CODE END Header_StartRouterTask */
 290:Core/Src/main.c **** void StartRouterTask(void *argument)
 291:Core/Src/main.c **** { 
 292:Core/Src/main.c ****   //Global command queue
 293:Core/Src/main.c ****   extern Cmd_Queue * cmdQueue;
 294:Core/Src/main.c ****   //Global variables to pass command to worker threads
 295:Core/Src/main.c ****   extern volatile uint16_t commandLED;
 296:Core/Src/main.c ****   extern volatile uint16_t commandMotor;
 297:Core/Src/main.c ****   //Command popped from queue
 298:Core/Src/main.c ****   uint16_t commandIn = 0;
 299:Core/Src/main.c ****   /* Infinite loop */
 300:Core/Src/main.c ****   //uint16_t item = queuePop(cmdQueue);
 301:Core/Src/main.c ****   
 302:Core/Src/main.c ****   for(;;)
 303:Core/Src/main.c ****   {
 304:Core/Src/main.c ****     // wait until countSem01 >= 1
 305:Core/Src/main.c ****     osSemaphoreAcquire(countSem01, osWaitForever);
 306:Core/Src/main.c ****     transmitCharArray("Router: Get countSem01\n");
 307:Core/Src/main.c **** 
 308:Core/Src/main.c ****     //If queue is not empty
 309:Core/Src/main.c ****     if (!isQueueEmpty(cmdQueue)) {
 310:Core/Src/main.c ****       //Placeholder for task priorities
 311:Core/Src/main.c ****       //osDelay(1);
 312:Core/Src/main.c **** 
 313:Core/Src/main.c ****       // Acquire the mutex for led status
 314:Core/Src/main.c ****       osSemaphoreAcquire(workerStatusMutex, osWaitForever);
 315:Core/Src/main.c **** 
 316:Core/Src/main.c ****       // LED worker is not busy
 317:Core/Src/main.c ****       if (ledWorkerBusy == 0) {
 318:Core/Src/main.c ****         osSemaphoreRelease(workerStatusMutex);
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****         commandIn = queuePopItemByOpcode(cmdQueue, LED_COMMAND_OPCODE);
 321:Core/Src/main.c ****         // There is LED command in the queue
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 10


 322:Core/Src/main.c ****         if (commandIn != 0xFFFF) {
 323:Core/Src/main.c ****           commandLED = commandIn;
 324:Core/Src/main.c ****           transmitCharArray("Wake up led worker\n");
 325:Core/Src/main.c ****           //Wake up led worker thread
 326:Core/Src/main.c ****           osSemaphoreRelease(ledRouterSem01);
 327:Core/Src/main.c ****         } else {
 328:Core/Src/main.c ****           //transmitCharArray("LED thread not busy but no LED command in queue\n");
 329:Core/Src/main.c ****         }
 330:Core/Src/main.c ****       } else {
 331:Core/Src/main.c ****         osSemaphoreRelease(workerStatusMutex);
 332:Core/Src/main.c ****       }
 333:Core/Src/main.c **** 
 334:Core/Src/main.c ****       // Acquire the mutex for motor status
 335:Core/Src/main.c ****       osSemaphoreAcquire(workerStatusMutex, osWaitForever);
 336:Core/Src/main.c **** 
 337:Core/Src/main.c ****       if (motorWorkerBusy == 0) {
 338:Core/Src/main.c ****         osSemaphoreRelease(workerStatusMutex);
 339:Core/Src/main.c ****         commandIn = queuePopItemByOpcode(cmdQueue, MOTOR_COMMAND_OPCODE);
 340:Core/Src/main.c ****         // There is Motor command in the queue
 341:Core/Src/main.c ****         if (commandIn != 0xFFFF) {
 342:Core/Src/main.c ****           commandMotor = commandIn;
 343:Core/Src/main.c ****           transmitCharArray("Wake up motor worker\n");
 344:Core/Src/main.c ****           //Wake up motor worker thread
 345:Core/Src/main.c ****           osSemaphoreRelease(motorRouterSem01);
 346:Core/Src/main.c ****         } else {
 347:Core/Src/main.c ****           //transmitCharArray("Motor thread not busy but no motor command in queue\n");
 348:Core/Src/main.c ****         }
 349:Core/Src/main.c ****       } else {
 350:Core/Src/main.c ****         osSemaphoreRelease(workerStatusMutex);
 351:Core/Src/main.c ****       }
 352:Core/Src/main.c **** 
 353:Core/Src/main.c ****       // //Retrieve command from queue
 354:Core/Src/main.c ****       // commandIn = queuePop(cmdQueue);
 355:Core/Src/main.c ****       // //Determine which worker task corresponds to command
 356:Core/Src/main.c ****       //   switch (commandIn & 0xF000) {
 357:Core/Src/main.c ****       //   //LED command
 358:Core/Src/main.c ****       //   case 0xA000:
 359:Core/Src/main.c ****       //     commandLED = commandIn;
 360:Core/Src/main.c ****       //     break;
 361:Core/Src/main.c ****       //   //Motor command
 362:Core/Src/main.c ****       //   case 0xB000:
 363:Core/Src/main.c ****       //     commandMotor = commandIn;
 364:Core/Src/main.c ****       //     break;
 365:Core/Src/main.c ****       //   default:
 366:Core/Src/main.c ****       //   break;
 367:Core/Src/main.c ****       // }
 368:Core/Src/main.c ****     }
 369:Core/Src/main.c ****     //transmitCharArray("Router: go to sleep\n");
 370:Core/Src/main.c ****   }
 371:Core/Src/main.c **** }
 372:Core/Src/main.c ****   /* USER CODE END 5 */
 373:Core/Src/main.c **** 
 374:Core/Src/main.c **** void initLEDs(void) {
 375:Core/Src/main.c **** 	// red LED PC6, blue LED (PC7), green LED PC9, orange LED PC8
 376:Core/Src/main.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 377:Core/Src/main.c ****   // set the MODER, 01: General purpose output mode
 378:Core/Src/main.c **** 	// init PC6 MODER
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 11


 379:Core/Src/main.c **** 	GPIOC->MODER |= (1 << 12);
 380:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 13);
 381:Core/Src/main.c ****     // init PC7 MODER
 382:Core/Src/main.c **** 	GPIOC->MODER |= (1 << 14);
 383:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 15);
 384:Core/Src/main.c **** 	// init PC8 MODER
 385:Core/Src/main.c **** 	GPIOC->MODER |= (1 << 16);
 386:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 17);
 387:Core/Src/main.c **** 	// init PC9 MODER
 388:Core/Src/main.c **** 	GPIOC->MODER |= (1 << 18);
 389:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 19);
 390:Core/Src/main.c ****   // Set the pins to low speed in the OSPEEDR register
 391:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 12) | (1 << 13));
 392:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 14) | (1 << 15));
 393:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 16) | (1 << 17));
 394:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 18) | (1 << 19));
 395:Core/Src/main.c **** 
 396:Core/Src/main.c **** 	// Set LED to no pull-up/down resistors in the PUPDR register
 397:Core/Src/main.c **** 	// 00: No pull-up, pull-down
 398:Core/Src/main.c **** 	GPIOC->PUPDR &= ~((1 << 16) | (1 << 17) | (1 << 18) | (1 << 19));
 399:Core/Src/main.c **** 	GPIOC->PUPDR &= ~((1 << 12) | (1 << 13) | (1 << 14) | (1 << 15));
 400:Core/Src/main.c **** 	// set PC6-9 to 0
 401:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 6);
 402:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 7);
 403:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 8);
 404:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 9);
 405:Core/Src/main.c **** }
 406:Core/Src/main.c **** 
 407:Core/Src/main.c **** /* USER CODE BEGIN Header_StartLEDTask */
 408:Core/Src/main.c **** /**
 409:Core/Src/main.c ****   * @brief  Function implementing the LEDTask thread.
 410:Core/Src/main.c ****   * @param  argument: Not used
 411:Core/Src/main.c ****   * @retval None
 412:Core/Src/main.c ****   */
 413:Core/Src/main.c **** /* USER CODE END Header_StartLEDTask */
 414:Core/Src/main.c **** void StartLEDTask(void *argument)
 415:Core/Src/main.c **** {
 416:Core/Src/main.c ****   //binarySem03LEDWorkerHandle = osSemaphoreNew(1, 1, NULL);
 417:Core/Src/main.c **** 
 418:Core/Src/main.c ****   extern volatile uint16_t commandLED;
 419:Core/Src/main.c ****   volatile uint8_t LEDColor = 0, LEDAction = 0, LEDSpeed = 0;
 420:Core/Src/main.c ****   volatile uint32_t colorMask[5] = {GPIO_ODR_6, GPIO_ODR_9, GPIO_ODR_7, GPIO_ODR_8, GPIO_ODR_6 | GP
 421:Core/Src/main.c ****   volatile uint8_t blink[4] = {0,0,0,0};
 422:Core/Src/main.c ****   // volatile uint8_t blinkTime[4] = {0,0,0,0};
 423:Core/Src/main.c ****   uint8_t blinkInterval = 0;
 424:Core/Src/main.c ****   volatile uint32_t startTime[4] = {0,0,0,0};
 425:Core/Src/main.c ****   volatile uint32_t currentTime = 0;
 426:Core/Src/main.c **** 
 427:Core/Src/main.c ****   /* Infinite loop */
 428:Core/Src/main.c ****   for(;;)
 429:Core/Src/main.c ****   {
 430:Core/Src/main.c ****     //osSemaphoreAcquire(binarySem03LEDWorkerHandle, osWaitForever);
 431:Core/Src/main.c **** 
 432:Core/Src/main.c ****     // wait to be woken up by router
 433:Core/Src/main.c ****     osSemaphoreAcquire(ledRouterSem01, osWaitForever);
 434:Core/Src/main.c ****     transmitCharArray("LED worker Got the signal\n");
 435:Core/Src/main.c **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 12


 436:Core/Src/main.c ****     osSemaphoreAcquire(workerStatusMutex, osWaitForever);
 437:Core/Src/main.c ****     ledWorkerBusy = 1;
 438:Core/Src/main.c ****     osSemaphoreRelease(workerStatusMutex);
 439:Core/Src/main.c **** 
 440:Core/Src/main.c ****     LEDColor = (commandLED & 0x0F00) >> 8;
 441:Core/Src/main.c ****     LEDAction = (commandLED & 0x00F0) >> 4;
 442:Core/Src/main.c **** 
 443:Core/Src/main.c ****     uint8_t blinkFlag = 0;
 444:Core/Src/main.c **** 
 445:Core/Src/main.c ****     // clear all the blink flags
 446:Core/Src/main.c ****     for (int i = 0; i < 4; i++) {
 447:Core/Src/main.c ****       blink[i] = 0;
 448:Core/Src/main.c ****     }
 449:Core/Src/main.c ****     //LED action
 450:Core/Src/main.c ****     switch (LEDAction) {
 451:Core/Src/main.c ****       //On
 452:Core/Src/main.c ****       case 1:
 453:Core/Src/main.c ****         GPIOC->ODR |= colorMask[LEDColor-1];
 454:Core/Src/main.c ****         // if (LEDColor == 5) {
 455:Core/Src/main.c ****         //   blink[0] = 0;
 456:Core/Src/main.c ****         //   blink[1] = 0;
 457:Core/Src/main.c ****         //   blink[2] = 0;
 458:Core/Src/main.c ****         //   blink[3] = 0;
 459:Core/Src/main.c ****         // }
 460:Core/Src/main.c ****         // else
 461:Core/Src/main.c ****         //   blink[LEDColor-1] = 0;
 462:Core/Src/main.c ****         break;
 463:Core/Src/main.c ****       //Off
 464:Core/Src/main.c ****       case 2:
 465:Core/Src/main.c ****         GPIOC->ODR &= ~colorMask[LEDColor-1];
 466:Core/Src/main.c ****         // if (LEDColor == 5) {
 467:Core/Src/main.c ****         //   blink[0] = 0;
 468:Core/Src/main.c ****         //   blink[1] = 0;
 469:Core/Src/main.c ****         //   blink[2] = 0;
 470:Core/Src/main.c ****         //   blink[3] = 0;
 471:Core/Src/main.c ****         // }
 472:Core/Src/main.c ****         // else
 473:Core/Src/main.c ****         //   blink[LEDColor-1] = 0;
 474:Core/Src/main.c ****         break;
 475:Core/Src/main.c ****       //Toggle
 476:Core/Src/main.c ****       case 3:
 477:Core/Src/main.c ****         GPIOC->ODR ^= colorMask[LEDColor-1];
 478:Core/Src/main.c ****         // if (LEDColor == 5) {
 479:Core/Src/main.c ****         //   blink[0] = 0;
 480:Core/Src/main.c ****         //   blink[1] = 0;
 481:Core/Src/main.c ****         //   blink[2] = 0;
 482:Core/Src/main.c ****         //   blink[3] = 0;
 483:Core/Src/main.c ****         // }
 484:Core/Src/main.c ****         // else
 485:Core/Src/main.c ****         //   blink[LEDColor-1] = 0;
 486:Core/Src/main.c ****         break;
 487:Core/Src/main.c ****       //Blink
 488:Core/Src/main.c ****       case 4:
 489:Core/Src/main.c ****         blinkFlag = 1;
 490:Core/Src/main.c ****         if (LEDColor == 5) {
 491:Core/Src/main.c ****           blink[0] = 1;
 492:Core/Src/main.c ****           // blinkTime[0] = commandLED & 0xF;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 13


 493:Core/Src/main.c ****           blink[1] = 1;
 494:Core/Src/main.c ****           // blinkTime[1] = commandLED & 0xF;
 495:Core/Src/main.c ****           blink[2] = 1;
 496:Core/Src/main.c ****           // blinkTime[2] = commandLED & 0xF;
 497:Core/Src/main.c ****           blink[3] = 1;
 498:Core/Src/main.c ****           // blinkTime[3] = commandLED & 0xF;
 499:Core/Src/main.c ****           
 500:Core/Src/main.c ****         }
 501:Core/Src/main.c ****         else {
 502:Core/Src/main.c ****           blink[LEDColor-1] = 1;
 503:Core/Src/main.c ****         }
 504:Core/Src/main.c ****         // blinkTime[LEDColor-1] = commandLED & 0xF;
 505:Core/Src/main.c ****         blinkInterval = commandLED & 0xF;
 506:Core/Src/main.c ****         break;
 507:Core/Src/main.c ****       default:
 508:Core/Src/main.c ****     }
 509:Core/Src/main.c **** 
 510:Core/Src/main.c ****     //Blinking
 511:Core/Src/main.c ****     // currentTime = xTaskGetTickCount();
 512:Core/Src/main.c ****     // for (int i = 0; i < 4; i++) {
 513:Core/Src/main.c ****     //   if (blink[i]) {
 514:Core/Src/main.c ****     //     if (currentTime - startTime[i] > blinkTime[i]*100) {
 515:Core/Src/main.c ****     //       GPIOC->ODR ^= colorMask[i];
 516:Core/Src/main.c ****     //       startTime[i] = currentTime;
 517:Core/Src/main.c ****     //     }
 518:Core/Src/main.c ****     //   }
 519:Core/Src/main.c ****     //   else
 520:Core/Src/main.c ****     //     startTime[i] = currentTime;
 521:Core/Src/main.c ****     // }
 522:Core/Src/main.c **** 
 523:Core/Src/main.c ****     if (blinkFlag == 1) {
 524:Core/Src/main.c ****       // The LED bliks for 10s
 525:Core/Src/main.c ****       int16_t loopTimes = 10000 / (100 * blinkInterval);
 526:Core/Src/main.c ****       while (loopTimes > 0) {
 527:Core/Src/main.c ****         for (int i = 0; i < 4; i++) {
 528:Core/Src/main.c ****           if (blink[i]) {
 529:Core/Src/main.c ****             GPIOC->ODR ^= colorMask[i];
 530:Core/Src/main.c ****           }
 531:Core/Src/main.c ****         }
 532:Core/Src/main.c ****         osDelay(blinkInterval * 100);
 533:Core/Src/main.c ****         loopTimes--;
 534:Core/Src/main.c ****       }
 535:Core/Src/main.c ****     }
 536:Core/Src/main.c **** 
 537:Core/Src/main.c ****     commandLED = 0;
 538:Core/Src/main.c **** 
 539:Core/Src/main.c ****     transmitCharArray("LED worker go to sleep\n");
 540:Core/Src/main.c **** 
 541:Core/Src/main.c ****     osSemaphoreAcquire(workerStatusMutex, osWaitForever);
 542:Core/Src/main.c ****     ledWorkerBusy = 0;
 543:Core/Src/main.c ****     osSemaphoreRelease(workerStatusMutex);
 544:Core/Src/main.c **** 
 545:Core/Src/main.c ****     //osSemaphoreRelease(binarySem03LEDWorkerHandle);
 546:Core/Src/main.c ****   }
 547:Core/Src/main.c **** }
 548:Core/Src/main.c **** 
 549:Core/Src/main.c **** /* USER CODE BEGIN Header_StartLEDTask */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 14


 550:Core/Src/main.c **** /**
 551:Core/Src/main.c ****   * @brief  Function implementing the MotorTask thread.
 552:Core/Src/main.c ****   * @param  argument: Not used
 553:Core/Src/main.c ****   * @retval None
 554:Core/Src/main.c ****   */ 
 555:Core/Src/main.c **** /* USER CODE END Header_StartLEDTask */
 556:Core/Src/main.c **** void StartMotorTask(void *argument)
 557:Core/Src/main.c **** {
 188              		.loc 1 557 1 is_stmt 1 view -0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 192              	.LVL5:
 193              		.loc 1 557 1 is_stmt 0 view .LVU47
 194 0000 70B5     		push	{r4, r5, r6, lr}
 195              	.LCFI2:
 196              		.cfi_def_cfa_offset 16
 197              		.cfi_offset 4, -16
 198              		.cfi_offset 5, -12
 199              		.cfi_offset 6, -8
 200              		.cfi_offset 14, -4
 201 0002 24E0     		b	.L8
 202              	.LVL6:
 203              	.L9:
 204              	.LBB12:
 558:Core/Src/main.c ****   extern volatile uint16_t commandMotor;
 559:Core/Src/main.c ****   int speedAdjust = 0; // boolean that says if speed needs to be adjusted: speed accounted for 3rd 
 560:Core/Src/main.c ****   //command 0xB-[1/2/3/4]
 561:Core/Src/main.c ****   /* 2nd Digit
 562:Core/Src/main.c ****   *   - 1: Turn motor on (enable 3rd and 4th digit)
 563:Core/Src/main.c ****   *   - 2: Turn motor off
 564:Core/Src/main.c ****   *   - 3: Change motor speed (enable 3rd and 4th digit)
 565:Core/Src/main.c ****   * 3rd & 4th Digit: RPM of speed --> Clamped at < 100, done in motor.c 
 566:Core/Src/main.c ****   */
 567:Core/Src/main.c **** 
 568:Core/Src/main.c ****   /* Infinite loop */
 569:Core/Src/main.c ****   for(;;)
 570:Core/Src/main.c ****   {
 571:Core/Src/main.c ****     // wait to be woken up by router
 572:Core/Src/main.c ****     osSemaphoreAcquire(motorRouterSem01, osWaitForever);
 573:Core/Src/main.c ****     transmitCharArray("Motor worker Got the signal\n");
 574:Core/Src/main.c ****     osSemaphoreAcquire(workerStatusMutex, osWaitForever);
 575:Core/Src/main.c ****     motorWorkerBusy = 1;
 576:Core/Src/main.c ****     osSemaphoreRelease(workerStatusMutex);
 577:Core/Src/main.c **** 
 578:Core/Src/main.c ****     extern volatile uint16_t commandMotor;
 579:Core/Src/main.c ****     // 2nd character (turn motor on, off, or adjust speed)
 580:Core/Src/main.c ****     switch (commandMotor & 0x0F00) { 
 581:Core/Src/main.c ****       case 0x0100: 
 582:Core/Src/main.c ****         // turn motor on (will need to adjust speed)
 583:Core/Src/main.c ****         target_rpm = (commandMotor & 0x00FF);
 205              		.loc 1 583 9 is_stmt 1 view .LVU48
 206              		.loc 1 583 36 is_stmt 0 view .LVU49
 207 0004 2B4B     		ldr	r3, .L10
 208 0006 1B88     		ldrh	r3, [r3]
 209 0008 013A     		subs	r2, r2, #1
 210 000a 1340     		ands	r3, r2
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 15


 211              		.loc 1 583 20 view .LVU50
 212 000c 2A4A     		ldr	r2, .L10+4
 213 000e 1380     		strh	r3, [r2]
 584:Core/Src/main.c ****         NVIC_EnableIRQ(TIM7_IRQn);          // Enable interrupt in NVIC
 214              		.loc 1 584 9 is_stmt 1 view .LVU51
 215              	.LVL7:
 216              	.LBB13:
 217              	.LBI13:
 218              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 16


  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 17


 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 18


 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 19


 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 20


 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 21


 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 22


 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 23


 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 24


 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 25


 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 26


 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 219              		.loc 2 623 22 view .LVU52
 220              	.LBB14:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 221              		.loc 2 625 3 view .LVU53
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 222              		.loc 2 627 5 view .LVU54
 223              		.loc 2 627 20 is_stmt 0 view .LVU55
 224 0010 2A4B     		ldr	r3, .L10+8
 225 0012 8022     		movs	r2, #128
 226 0014 D202     		lsls	r2, r2, #11
 227 0016 1A60     		str	r2, [r3]
 228              	.LVL8:
 229              		.loc 2 627 20 view .LVU56
 230              	.LBE14:
 231              	.LBE13:
 585:Core/Src/main.c ****         NVIC_SetPriority(TIM7_IRQn,2);
 232              		.loc 1 585 9 is_stmt 1 view .LVU57
 233              	.LBB15:
 234              	.LBI15:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 27


 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 28


 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 235              		.loc 2 730 22 view .LVU58
 236              	.LBB16:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 237              		.loc 2 732 3 view .LVU59
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 238              		.loc 2 734 5 view .LVU60
 239              		.loc 2 734 52 is_stmt 0 view .LVU61
 240 0018 C420     		movs	r0, #196
 241 001a 8000     		lsls	r0, r0, #2
 242 001c 1958     		ldr	r1, [r3, r0]
 243              		.loc 2 734 33 view .LVU62
 244 001e 284A     		ldr	r2, .L10+12
 245 0020 1140     		ands	r1, r2
 246              		.loc 2 734 102 view .LVU63
 247 0022 8022     		movs	r2, #128
 248 0024 1204     		lsls	r2, r2, #16
 249 0026 0A43     		orrs	r2, r1
 250              		.loc 2 734 30 view .LVU64
 251 0028 1A50     		str	r2, [r3, r0]
 252              	.LVL9:
 253              		.loc 2 734 30 view .LVU65
 254              	.LBE16:
 255              	.LBE15:
 586:Core/Src/main.c ****         break;
 256              		.loc 1 586 9 is_stmt 1 view .LVU66
 257              	.L7:
 587:Core/Src/main.c ****       case 0x0200:
 588:Core/Src/main.c ****         // turn motor off
 589:Core/Src/main.c ****         target_rpm = 0;
 590:Core/Src/main.c ****         //NVIC_DisableIRQ(TIM7_IRQn);          // Enable interrupt in NVIC
 591:Core/Src/main.c ****         break;
 592:Core/Src/main.c ****       case 0x0300:
 593:Core/Src/main.c ****         // change motor speed 
 594:Core/Src/main.c ****         target_rpm = (commandMotor & 0x00FF);
 595:Core/Src/main.c ****         break;
 596:Core/Src/main.c ****       default:
 597:Core/Src/main.c ****         break;
 598:Core/Src/main.c ****     }
 599:Core/Src/main.c **** 
 600:Core/Src/main.c ****     commandMotor = 0;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 29


 258              		.loc 1 600 5 view .LVU67
 259              		.loc 1 600 18 is_stmt 0 view .LVU68
 260 002a 224B     		ldr	r3, .L10
 261 002c 0022     		movs	r2, #0
 262 002e 1A80     		strh	r2, [r3]
 601:Core/Src/main.c ****     speedAdjust = 0;
 263              		.loc 1 601 5 is_stmt 1 view .LVU69
 264              	.LVL10:
 602:Core/Src/main.c ****     
 603:Core/Src/main.c ****     osSemaphoreAcquire(workerStatusMutex, osWaitForever);
 265              		.loc 1 603 5 view .LVU70
 266 0030 0121     		movs	r1, #1
 267 0032 244C     		ldr	r4, .L10+16
 268 0034 2068     		ldr	r0, [r4]
 269 0036 4942     		rsbs	r1, r1, #0
 270 0038 FFF7FEFF 		bl	osSemaphoreAcquire
 271              	.LVL11:
 604:Core/Src/main.c ****     motorWorkerBusy = 0;
 272              		.loc 1 604 5 view .LVU71
 273              		.loc 1 604 21 is_stmt 0 view .LVU72
 274 003c 224B     		ldr	r3, .L10+20
 275 003e 0022     		movs	r2, #0
 276 0040 1A70     		strb	r2, [r3]
 605:Core/Src/main.c ****     osSemaphoreRelease(workerStatusMutex);
 277              		.loc 1 605 5 is_stmt 1 view .LVU73
 278 0042 2068     		ldr	r0, [r4]
 279 0044 FFF7FEFF 		bl	osSemaphoreRelease
 280              	.LVL12:
 606:Core/Src/main.c ****     transmitCharArray("Motor worker go to sleep\n");
 281              		.loc 1 606 5 view .LVU74
 282 0048 2048     		ldr	r0, .L10+24
 283 004a FFF7FEFF 		bl	transmitCharArray
 284              	.LVL13:
 285              	.LBE12:
 569:Core/Src/main.c ****   {
 286              		.loc 1 569 3 view .LVU75
 287              	.L8:
 569:Core/Src/main.c ****   {
 288              		.loc 1 569 3 view .LVU76
 289              	.LBB17:
 572:Core/Src/main.c ****     transmitCharArray("Motor worker Got the signal\n");
 290              		.loc 1 572 5 view .LVU77
 291 004e 0125     		movs	r5, #1
 292 0050 6D42     		rsbs	r5, r5, #0
 293 0052 1F4B     		ldr	r3, .L10+28
 294 0054 1868     		ldr	r0, [r3]
 295 0056 2900     		movs	r1, r5
 296 0058 FFF7FEFF 		bl	osSemaphoreAcquire
 297              	.LVL14:
 573:Core/Src/main.c ****     osSemaphoreAcquire(workerStatusMutex, osWaitForever);
 298              		.loc 1 573 5 view .LVU78
 299 005c 1D48     		ldr	r0, .L10+32
 300 005e FFF7FEFF 		bl	transmitCharArray
 301              	.LVL15:
 574:Core/Src/main.c ****     motorWorkerBusy = 1;
 302              		.loc 1 574 5 view .LVU79
 303 0062 184C     		ldr	r4, .L10+16
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 30


 304 0064 2068     		ldr	r0, [r4]
 305 0066 2900     		movs	r1, r5
 306 0068 FFF7FEFF 		bl	osSemaphoreAcquire
 307              	.LVL16:
 575:Core/Src/main.c ****     osSemaphoreRelease(workerStatusMutex);
 308              		.loc 1 575 5 view .LVU80
 575:Core/Src/main.c ****     osSemaphoreRelease(workerStatusMutex);
 309              		.loc 1 575 21 is_stmt 0 view .LVU81
 310 006c 164B     		ldr	r3, .L10+20
 311 006e 0122     		movs	r2, #1
 312 0070 1A70     		strb	r2, [r3]
 576:Core/Src/main.c **** 
 313              		.loc 1 576 5 is_stmt 1 view .LVU82
 314 0072 2068     		ldr	r0, [r4]
 315 0074 FFF7FEFF 		bl	osSemaphoreRelease
 316              	.LVL17:
 578:Core/Src/main.c ****     // 2nd character (turn motor on, off, or adjust speed)
 317              		.loc 1 578 5 view .LVU83
 580:Core/Src/main.c ****       case 0x0100: 
 318              		.loc 1 580 5 view .LVU84
 580:Core/Src/main.c ****       case 0x0100: 
 319              		.loc 1 580 26 is_stmt 0 view .LVU85
 320 0078 0E4B     		ldr	r3, .L10
 321 007a 1B88     		ldrh	r3, [r3]
 322 007c F022     		movs	r2, #240
 323 007e 1201     		lsls	r2, r2, #4
 324 0080 1340     		ands	r3, r2
 580:Core/Src/main.c ****       case 0x0100: 
 325              		.loc 1 580 5 view .LVU86
 326 0082 8022     		movs	r2, #128
 327 0084 9200     		lsls	r2, r2, #2
 328 0086 9342     		cmp	r3, r2
 329 0088 08D0     		beq	.L5
 330 008a 0132     		adds	r2, r2, #1
 331 008c FF32     		adds	r2, r2, #255
 332 008e 9342     		cmp	r3, r2
 333 0090 08D0     		beq	.L6
 334 0092 8022     		movs	r2, #128
 335 0094 5200     		lsls	r2, r2, #1
 336 0096 9342     		cmp	r3, r2
 337 0098 C7D1     		bne	.L7
 338 009a B3E7     		b	.L9
 339              	.L5:
 589:Core/Src/main.c ****         //NVIC_DisableIRQ(TIM7_IRQn);          // Enable interrupt in NVIC
 340              		.loc 1 589 9 is_stmt 1 view .LVU87
 589:Core/Src/main.c ****         //NVIC_DisableIRQ(TIM7_IRQn);          // Enable interrupt in NVIC
 341              		.loc 1 589 20 is_stmt 0 view .LVU88
 342 009c 064B     		ldr	r3, .L10+4
 343 009e 0022     		movs	r2, #0
 344 00a0 1A80     		strh	r2, [r3]
 591:Core/Src/main.c ****       case 0x0300:
 345              		.loc 1 591 9 is_stmt 1 view .LVU89
 346 00a2 C2E7     		b	.L7
 347              	.L6:
 594:Core/Src/main.c ****         break;
 348              		.loc 1 594 9 view .LVU90
 594:Core/Src/main.c ****         break;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 31


 349              		.loc 1 594 36 is_stmt 0 view .LVU91
 350 00a4 034B     		ldr	r3, .L10
 351 00a6 1B88     		ldrh	r3, [r3]
 352 00a8 FF22     		movs	r2, #255
 353 00aa 1340     		ands	r3, r2
 594:Core/Src/main.c ****         break;
 354              		.loc 1 594 20 view .LVU92
 355 00ac 024A     		ldr	r2, .L10+4
 356 00ae 1380     		strh	r3, [r2]
 595:Core/Src/main.c ****       default:
 357              		.loc 1 595 9 is_stmt 1 view .LVU93
 358 00b0 BBE7     		b	.L7
 359              	.L11:
 360 00b2 C046     		.align	2
 361              	.L10:
 362 00b4 00000000 		.word	commandMotor
 363 00b8 00000000 		.word	target_rpm
 364 00bc 00E100E0 		.word	-536813312
 365 00c0 FFFF00FF 		.word	-16711681
 366 00c4 00000000 		.word	workerStatusMutex
 367 00c8 00000000 		.word	motorWorkerBusy
 368 00cc 20000000 		.word	.LC8
 369 00d0 00000000 		.word	motorRouterSem01
 370 00d4 00000000 		.word	.LC2
 371              	.LBE17:
 372              		.cfi_endproc
 373              	.LFE56:
 375              		.section	.rodata.StartRouterTask.str1.4,"aMS",%progbits,1
 376              		.align	2
 377              	.LC11:
 378 0000 526F7574 		.ascii	"Router: Get countSem01\012\000"
 378      65723A20 
 378      47657420 
 378      636F756E 
 378      7453656D 
 379              		.align	2
 380              	.LC17:
 381 0018 57616B65 		.ascii	"Wake up led worker\012\000"
 381      20757020 
 381      6C656420 
 381      776F726B 
 381      65720A00 
 382              		.align	2
 383              	.LC22:
 384 002c 57616B65 		.ascii	"Wake up motor worker\012\000"
 384      20757020 
 384      6D6F746F 
 384      7220776F 
 384      726B6572 
 385              		.section	.text.StartRouterTask,"ax",%progbits
 386              		.align	1
 387              		.global	StartRouterTask
 388              		.syntax unified
 389              		.code	16
 390              		.thumb_func
 392              	StartRouterTask:
 393              	.LFB53:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 32


 291:Core/Src/main.c ****   //Global command queue
 394              		.loc 1 291 1 view -0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              	.LVL18:
 291:Core/Src/main.c ****   //Global command queue
 399              		.loc 1 291 1 is_stmt 0 view .LVU95
 400 0000 10B5     		push	{r4, lr}
 401              	.LCFI3:
 402              		.cfi_def_cfa_offset 8
 403              		.cfi_offset 4, -8
 404              		.cfi_offset 14, -4
 405 0002 22E0     		b	.L14
 406              	.LVL19:
 407              	.L15:
 331:Core/Src/main.c ****       }
 408              		.loc 1 331 9 is_stmt 1 view .LVU96
 409 0004 2B4B     		ldr	r3, .L19
 410 0006 1868     		ldr	r0, [r3]
 411 0008 FFF7FEFF 		bl	osSemaphoreRelease
 412              	.LVL20:
 413              	.L16:
 335:Core/Src/main.c **** 
 414              		.loc 1 335 7 view .LVU97
 415 000c 0121     		movs	r1, #1
 416 000e 294B     		ldr	r3, .L19
 417 0010 1868     		ldr	r0, [r3]
 418 0012 4942     		rsbs	r1, r1, #0
 419 0014 FFF7FEFF 		bl	osSemaphoreAcquire
 420              	.LVL21:
 337:Core/Src/main.c ****         osSemaphoreRelease(workerStatusMutex);
 421              		.loc 1 337 7 view .LVU98
 337:Core/Src/main.c ****         osSemaphoreRelease(workerStatusMutex);
 422              		.loc 1 337 27 is_stmt 0 view .LVU99
 423 0018 274B     		ldr	r3, .L19+4
 424 001a 1B78     		ldrb	r3, [r3]
 337:Core/Src/main.c ****         osSemaphoreRelease(workerStatusMutex);
 425              		.loc 1 337 10 view .LVU100
 426 001c 002B     		cmp	r3, #0
 427 001e 43D1     		bne	.L17
 338:Core/Src/main.c ****         commandIn = queuePopItemByOpcode(cmdQueue, MOTOR_COMMAND_OPCODE);
 428              		.loc 1 338 9 is_stmt 1 view .LVU101
 429 0020 244B     		ldr	r3, .L19
 430 0022 1868     		ldr	r0, [r3]
 431 0024 FFF7FEFF 		bl	osSemaphoreRelease
 432              	.LVL22:
 339:Core/Src/main.c ****         // There is Motor command in the queue
 433              		.loc 1 339 9 view .LVU102
 339:Core/Src/main.c ****         // There is Motor command in the queue
 434              		.loc 1 339 21 is_stmt 0 view .LVU103
 435 0028 244B     		ldr	r3, .L19+8
 436 002a 1868     		ldr	r0, [r3]
 437 002c 0B21     		movs	r1, #11
 438 002e FFF7FEFF 		bl	queuePopItemByOpcode
 439              	.LVL23:
 341:Core/Src/main.c ****           commandMotor = commandIn;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 33


 440              		.loc 1 341 9 is_stmt 1 view .LVU104
 341:Core/Src/main.c ****           commandMotor = commandIn;
 441              		.loc 1 341 12 is_stmt 0 view .LVU105
 442 0032 234B     		ldr	r3, .L19+12
 443 0034 9842     		cmp	r0, r3
 444 0036 08D0     		beq	.L14
 342:Core/Src/main.c ****           transmitCharArray("Wake up motor worker\n");
 445              		.loc 1 342 11 is_stmt 1 view .LVU106
 342:Core/Src/main.c ****           transmitCharArray("Wake up motor worker\n");
 446              		.loc 1 342 24 is_stmt 0 view .LVU107
 447 0038 224B     		ldr	r3, .L19+16
 448 003a 1880     		strh	r0, [r3]
 343:Core/Src/main.c ****           //Wake up motor worker thread
 449              		.loc 1 343 11 is_stmt 1 view .LVU108
 450 003c 2248     		ldr	r0, .L19+20
 451              	.LVL24:
 343:Core/Src/main.c ****           //Wake up motor worker thread
 452              		.loc 1 343 11 is_stmt 0 view .LVU109
 453 003e FFF7FEFF 		bl	transmitCharArray
 454              	.LVL25:
 345:Core/Src/main.c ****         } else {
 455              		.loc 1 345 11 is_stmt 1 view .LVU110
 456 0042 224B     		ldr	r3, .L19+24
 457 0044 1868     		ldr	r0, [r3]
 458 0046 FFF7FEFF 		bl	osSemaphoreRelease
 459              	.LVL26:
 460              	.L14:
 302:Core/Src/main.c ****   {
 461              		.loc 1 302 3 view .LVU111
 305:Core/Src/main.c ****     transmitCharArray("Router: Get countSem01\n");
 462              		.loc 1 305 5 view .LVU112
 463 004a 0121     		movs	r1, #1
 464 004c 204B     		ldr	r3, .L19+28
 465 004e 1868     		ldr	r0, [r3]
 466 0050 4942     		rsbs	r1, r1, #0
 467 0052 FFF7FEFF 		bl	osSemaphoreAcquire
 468              	.LVL27:
 306:Core/Src/main.c **** 
 469              		.loc 1 306 5 view .LVU113
 470 0056 1F48     		ldr	r0, .L19+32
 471 0058 FFF7FEFF 		bl	transmitCharArray
 472              	.LVL28:
 309:Core/Src/main.c ****       //Placeholder for task priorities
 473              		.loc 1 309 5 view .LVU114
 309:Core/Src/main.c ****       //Placeholder for task priorities
 474              		.loc 1 309 10 is_stmt 0 view .LVU115
 475 005c 174B     		ldr	r3, .L19+8
 476 005e 1868     		ldr	r0, [r3]
 477 0060 FFF7FEFF 		bl	isQueueEmpty
 478              	.LVL29:
 309:Core/Src/main.c ****       //Placeholder for task priorities
 479              		.loc 1 309 8 discriminator 1 view .LVU116
 480 0064 0028     		cmp	r0, #0
 481 0066 F0D1     		bne	.L14
 314:Core/Src/main.c **** 
 482              		.loc 1 314 7 is_stmt 1 view .LVU117
 483 0068 0121     		movs	r1, #1
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 34


 484 006a 124B     		ldr	r3, .L19
 485 006c 1868     		ldr	r0, [r3]
 486 006e 4942     		rsbs	r1, r1, #0
 487 0070 FFF7FEFF 		bl	osSemaphoreAcquire
 488              	.LVL30:
 317:Core/Src/main.c ****         osSemaphoreRelease(workerStatusMutex);
 489              		.loc 1 317 7 view .LVU118
 317:Core/Src/main.c ****         osSemaphoreRelease(workerStatusMutex);
 490              		.loc 1 317 25 is_stmt 0 view .LVU119
 491 0074 184B     		ldr	r3, .L19+36
 492 0076 1B78     		ldrb	r3, [r3]
 317:Core/Src/main.c ****         osSemaphoreRelease(workerStatusMutex);
 493              		.loc 1 317 10 view .LVU120
 494 0078 002B     		cmp	r3, #0
 495 007a C3D1     		bne	.L15
 318:Core/Src/main.c **** 
 496              		.loc 1 318 9 is_stmt 1 view .LVU121
 497 007c 0D4B     		ldr	r3, .L19
 498 007e 1868     		ldr	r0, [r3]
 499 0080 FFF7FEFF 		bl	osSemaphoreRelease
 500              	.LVL31:
 320:Core/Src/main.c ****         // There is LED command in the queue
 501              		.loc 1 320 9 view .LVU122
 320:Core/Src/main.c ****         // There is LED command in the queue
 502              		.loc 1 320 21 is_stmt 0 view .LVU123
 503 0084 0D4B     		ldr	r3, .L19+8
 504 0086 1868     		ldr	r0, [r3]
 505 0088 0A21     		movs	r1, #10
 506 008a FFF7FEFF 		bl	queuePopItemByOpcode
 507              	.LVL32:
 322:Core/Src/main.c ****           commandLED = commandIn;
 508              		.loc 1 322 9 is_stmt 1 view .LVU124
 322:Core/Src/main.c ****           commandLED = commandIn;
 509              		.loc 1 322 12 is_stmt 0 view .LVU125
 510 008e 0C4B     		ldr	r3, .L19+12
 511 0090 9842     		cmp	r0, r3
 512 0092 BBD0     		beq	.L16
 323:Core/Src/main.c ****           transmitCharArray("Wake up led worker\n");
 513              		.loc 1 323 11 is_stmt 1 view .LVU126
 323:Core/Src/main.c ****           transmitCharArray("Wake up led worker\n");
 514              		.loc 1 323 22 is_stmt 0 view .LVU127
 515 0094 114B     		ldr	r3, .L19+40
 516 0096 1880     		strh	r0, [r3]
 324:Core/Src/main.c ****           //Wake up led worker thread
 517              		.loc 1 324 11 is_stmt 1 view .LVU128
 518 0098 1148     		ldr	r0, .L19+44
 519              	.LVL33:
 324:Core/Src/main.c ****           //Wake up led worker thread
 520              		.loc 1 324 11 is_stmt 0 view .LVU129
 521 009a FFF7FEFF 		bl	transmitCharArray
 522              	.LVL34:
 326:Core/Src/main.c ****         } else {
 523              		.loc 1 326 11 is_stmt 1 view .LVU130
 524 009e 114B     		ldr	r3, .L19+48
 525 00a0 1868     		ldr	r0, [r3]
 526 00a2 FFF7FEFF 		bl	osSemaphoreRelease
 527              	.LVL35:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 35


 528 00a6 B1E7     		b	.L16
 529              	.LVL36:
 530              	.L17:
 350:Core/Src/main.c ****       }
 531              		.loc 1 350 9 view .LVU131
 532 00a8 024B     		ldr	r3, .L19
 533 00aa 1868     		ldr	r0, [r3]
 534 00ac FFF7FEFF 		bl	osSemaphoreRelease
 535              	.LVL37:
 536 00b0 CBE7     		b	.L14
 537              	.L20:
 538 00b2 C046     		.align	2
 539              	.L19:
 540 00b4 00000000 		.word	workerStatusMutex
 541 00b8 00000000 		.word	motorWorkerBusy
 542 00bc 00000000 		.word	cmdQueue
 543 00c0 FFFF0000 		.word	65535
 544 00c4 00000000 		.word	commandMotor
 545 00c8 2C000000 		.word	.LC22
 546 00cc 00000000 		.word	motorRouterSem01
 547 00d0 00000000 		.word	countSem01
 548 00d4 00000000 		.word	.LC11
 549 00d8 00000000 		.word	ledWorkerBusy
 550 00dc 00000000 		.word	commandLED
 551 00e0 18000000 		.word	.LC17
 552 00e4 00000000 		.word	ledRouterSem01
 553              		.cfi_endproc
 554              	.LFE53:
 556              		.section	.rodata.StartLEDTask.str1.4,"aMS",%progbits,1
 557              		.align	2
 558              	.LC27:
 559 0000 4C454420 		.ascii	"LED worker Got the signal\012\000"
 559      776F726B 
 559      65722047 
 559      6F742074 
 559      68652073 
 560              		.global	__aeabi_idiv
 561 001b 00       		.align	2
 562              	.LC32:
 563 001c 4C454420 		.ascii	"LED worker go to sleep\012\000"
 563      776F726B 
 563      65722067 
 563      6F20746F 
 563      20736C65 
 564              		.section	.text.StartLEDTask,"ax",%progbits
 565              		.align	1
 566              		.global	StartLEDTask
 567              		.syntax unified
 568              		.code	16
 569              		.thumb_func
 571              	StartLEDTask:
 572              	.LVL38:
 573              	.LFB55:
 415:Core/Src/main.c ****   //binarySem03LEDWorkerHandle = osSemaphoreNew(1, 1, NULL);
 574              		.loc 1 415 1 view -0
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 48
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 36


 577              		@ frame_needed = 0, uses_anonymous_args = 0
 415:Core/Src/main.c ****   //binarySem03LEDWorkerHandle = osSemaphoreNew(1, 1, NULL);
 578              		.loc 1 415 1 is_stmt 0 view .LVU133
 579 0000 70B5     		push	{r4, r5, r6, lr}
 580              	.LCFI4:
 581              		.cfi_def_cfa_offset 16
 582              		.cfi_offset 4, -16
 583              		.cfi_offset 5, -12
 584              		.cfi_offset 6, -8
 585              		.cfi_offset 14, -4
 586 0002 8CB0     		sub	sp, sp, #48
 587              	.LCFI5:
 588              		.cfi_def_cfa_offset 64
 418:Core/Src/main.c ****   volatile uint8_t LEDColor = 0, LEDAction = 0, LEDSpeed = 0;
 589              		.loc 1 418 3 is_stmt 1 view .LVU134
 419:Core/Src/main.c ****   volatile uint32_t colorMask[5] = {GPIO_ODR_6, GPIO_ODR_9, GPIO_ODR_7, GPIO_ODR_8, GPIO_ODR_6 | GP
 590              		.loc 1 419 3 view .LVU135
 419:Core/Src/main.c ****   volatile uint32_t colorMask[5] = {GPIO_ODR_6, GPIO_ODR_9, GPIO_ODR_7, GPIO_ODR_8, GPIO_ODR_6 | GP
 591              		.loc 1 419 20 is_stmt 0 view .LVU136
 592 0004 0024     		movs	r4, #0
 593 0006 2F23     		movs	r3, #47
 594 0008 6B44     		add	r3, r3, sp
 595 000a 1C70     		strb	r4, [r3]
 419:Core/Src/main.c ****   volatile uint32_t colorMask[5] = {GPIO_ODR_6, GPIO_ODR_9, GPIO_ODR_7, GPIO_ODR_8, GPIO_ODR_6 | GP
 596              		.loc 1 419 34 view .LVU137
 597 000c 2E23     		movs	r3, #46
 598 000e 6B44     		add	r3, r3, sp
 599 0010 1C70     		strb	r4, [r3]
 419:Core/Src/main.c ****   volatile uint32_t colorMask[5] = {GPIO_ODR_6, GPIO_ODR_9, GPIO_ODR_7, GPIO_ODR_8, GPIO_ODR_6 | GP
 600              		.loc 1 419 49 view .LVU138
 601 0012 2D23     		movs	r3, #45
 602 0014 6B44     		add	r3, r3, sp
 603 0016 1C70     		strb	r4, [r3]
 420:Core/Src/main.c ****   volatile uint8_t blink[4] = {0,0,0,0};
 604              		.loc 1 420 3 is_stmt 1 view .LVU139
 420:Core/Src/main.c ****   volatile uint8_t blink[4] = {0,0,0,0};
 605              		.loc 1 420 21 is_stmt 0 view .LVU140
 606 0018 06A9     		add	r1, sp, #24
 607 001a 594B     		ldr	r3, .L40
 608 001c 0A00     		movs	r2, r1
 609 001e 61CB     		ldmia	r3!, {r0, r5, r6}
 610 0020 61C2     		stmia	r2!, {r0, r5, r6}
 611              	.LVL39:
 420:Core/Src/main.c ****   volatile uint8_t blink[4] = {0,0,0,0};
 612              		.loc 1 420 21 view .LVU141
 613 0022 03CB     		ldmia	r3!, {r0, r1}
 614 0024 03C2     		stmia	r2!, {r0, r1}
 421:Core/Src/main.c ****   // volatile uint8_t blinkTime[4] = {0,0,0,0};
 615              		.loc 1 421 3 is_stmt 1 view .LVU142
 421:Core/Src/main.c ****   // volatile uint8_t blinkTime[4] = {0,0,0,0};
 616              		.loc 1 421 20 is_stmt 0 view .LVU143
 617 0026 0594     		str	r4, [sp, #20]
 423:Core/Src/main.c ****   volatile uint32_t startTime[4] = {0,0,0,0};
 618              		.loc 1 423 3 is_stmt 1 view .LVU144
 619              	.LVL40:
 424:Core/Src/main.c ****   volatile uint32_t currentTime = 0;
 620              		.loc 1 424 3 view .LVU145
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 37


 424:Core/Src/main.c ****   volatile uint32_t currentTime = 0;
 621              		.loc 1 424 21 is_stmt 0 view .LVU146
 622 0028 1022     		movs	r2, #16
 623 002a 0021     		movs	r1, #0
 624 002c 01A8     		add	r0, sp, #4
 625 002e FFF7FEFF 		bl	memset
 626              	.LVL41:
 425:Core/Src/main.c **** 
 627              		.loc 1 425 3 is_stmt 1 view .LVU147
 425:Core/Src/main.c **** 
 628              		.loc 1 425 21 is_stmt 0 view .LVU148
 629 0032 0094     		str	r4, [sp]
 630 0034 54E0     		b	.L36
 631              	.LVL42:
 632              	.L23:
 633              	.LBB18:
 634              	.LBB19:
 447:Core/Src/main.c ****     }
 635              		.loc 1 447 7 is_stmt 1 view .LVU149
 447:Core/Src/main.c ****     }
 636              		.loc 1 447 16 is_stmt 0 view .LVU150
 637 0036 05AA     		add	r2, sp, #20
 638 0038 0021     		movs	r1, #0
 639 003a D154     		strb	r1, [r2, r3]
 446:Core/Src/main.c ****       blink[i] = 0;
 640              		.loc 1 446 29 is_stmt 1 discriminator 3 view .LVU151
 641 003c 0133     		adds	r3, r3, #1
 642              	.LVL43:
 643              	.L22:
 446:Core/Src/main.c ****       blink[i] = 0;
 644              		.loc 1 446 23 discriminator 1 view .LVU152
 645 003e 032B     		cmp	r3, #3
 646 0040 F9DD     		ble	.L23
 647              	.LBE19:
 450:Core/Src/main.c ****       //On
 648              		.loc 1 450 5 view .LVU153
 649 0042 2E23     		movs	r3, #46
 650              	.LVL44:
 450:Core/Src/main.c ****       //On
 651              		.loc 1 450 5 is_stmt 0 view .LVU154
 652 0044 6B44     		add	r3, r3, sp
 653 0046 1B78     		ldrb	r3, [r3]
 654 0048 DAB2     		uxtb	r2, r3
 655 004a 032B     		cmp	r3, #3
 656 004c 6DD0     		beq	.L24
 657 004e 032A     		cmp	r2, #3
 658 0050 0FD8     		bhi	.L25
 659 0052 012A     		cmp	r2, #1
 660 0054 27D0     		beq	.L26
 661 0056 022A     		cmp	r2, #2
 662 0058 30D1     		bne	.L28
 465:Core/Src/main.c ****         // if (LEDColor == 5) {
 663              		.loc 1 465 9 is_stmt 1 view .LVU155
 465:Core/Src/main.c ****         // if (LEDColor == 5) {
 664              		.loc 1 465 42 is_stmt 0 view .LVU156
 665 005a 2F23     		movs	r3, #47
 666 005c 6B44     		add	r3, r3, sp
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 38


 667 005e 1B78     		ldrb	r3, [r3]
 668 0060 013B     		subs	r3, r3, #1
 465:Core/Src/main.c ****         // if (LEDColor == 5) {
 669              		.loc 1 465 33 view .LVU157
 670 0062 9B00     		lsls	r3, r3, #2
 671 0064 06AA     		add	r2, sp, #24
 672 0066 9958     		ldr	r1, [r3, r2]
 465:Core/Src/main.c ****         // if (LEDColor == 5) {
 673              		.loc 1 465 14 view .LVU158
 674 0068 464A     		ldr	r2, .L40+4
 675 006a 5369     		ldr	r3, [r2, #20]
 465:Core/Src/main.c ****         // if (LEDColor == 5) {
 676              		.loc 1 465 20 view .LVU159
 677 006c 8B43     		bics	r3, r1
 678 006e 5361     		str	r3, [r2, #20]
 474:Core/Src/main.c ****       //Toggle
 679              		.loc 1 474 9 is_stmt 1 view .LVU160
 523:Core/Src/main.c ****       // The LED bliks for 10s
 680              		.loc 1 523 5 view .LVU161
 681 0070 24E0     		b	.L28
 682              	.L25:
 450:Core/Src/main.c ****       //On
 683              		.loc 1 450 5 is_stmt 0 view .LVU162
 684 0072 042A     		cmp	r2, #4
 685 0074 22D1     		bne	.L28
 489:Core/Src/main.c ****         if (LEDColor == 5) {
 686              		.loc 1 489 9 is_stmt 1 view .LVU163
 687              	.LVL45:
 490:Core/Src/main.c ****           blink[0] = 1;
 688              		.loc 1 490 9 view .LVU164
 490:Core/Src/main.c ****           blink[0] = 1;
 689              		.loc 1 490 22 is_stmt 0 view .LVU165
 690 0076 2F23     		movs	r3, #47
 691 0078 6B44     		add	r3, r3, sp
 692 007a 1B78     		ldrb	r3, [r3]
 490:Core/Src/main.c ****           blink[0] = 1;
 693              		.loc 1 490 12 view .LVU166
 694 007c 052B     		cmp	r3, #5
 695 007e 60D0     		beq	.L38
 502:Core/Src/main.c ****         }
 696              		.loc 1 502 11 is_stmt 1 view .LVU167
 502:Core/Src/main.c ****         }
 697              		.loc 1 502 25 is_stmt 0 view .LVU168
 698 0080 2F23     		movs	r3, #47
 699 0082 6B44     		add	r3, r3, sp
 700 0084 1B78     		ldrb	r3, [r3]
 701 0086 013B     		subs	r3, r3, #1
 502:Core/Src/main.c ****         }
 702              		.loc 1 502 29 view .LVU169
 703 0088 05AA     		add	r2, sp, #20
 704 008a 0121     		movs	r1, #1
 705 008c D154     		strb	r1, [r2, r3]
 706              	.L31:
 505:Core/Src/main.c ****         break;
 707              		.loc 1 505 9 is_stmt 1 view .LVU170
 505:Core/Src/main.c ****         break;
 708              		.loc 1 505 36 is_stmt 0 view .LVU171
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 39


 709 008e 3E4B     		ldr	r3, .L40+8
 710 0090 1B88     		ldrh	r3, [r3]
 505:Core/Src/main.c ****         break;
 711              		.loc 1 505 23 view .LVU172
 712 0092 0F22     		movs	r2, #15
 713 0094 1340     		ands	r3, r2
 714              	.LVL46:
 506:Core/Src/main.c ****       default:
 715              		.loc 1 506 9 is_stmt 1 view .LVU173
 523:Core/Src/main.c ****       // The LED bliks for 10s
 716              		.loc 1 523 5 view .LVU174
 717              	.LBB20:
 525:Core/Src/main.c ****       while (loopTimes > 0) {
 718              		.loc 1 525 7 view .LVU175
 525:Core/Src/main.c ****       while (loopTimes > 0) {
 719              		.loc 1 525 40 is_stmt 0 view .LVU176
 720 0096 6425     		movs	r5, #100
 721 0098 5D43     		muls	r5, r3
 525:Core/Src/main.c ****       while (loopTimes > 0) {
 722              		.loc 1 525 33 view .LVU177
 723 009a 2900     		movs	r1, r5
 724 009c 3B48     		ldr	r0, .L40+12
 725 009e FFF7FEFF 		bl	__aeabi_idiv
 726              	.LVL47:
 525:Core/Src/main.c ****       while (loopTimes > 0) {
 727              		.loc 1 525 15 view .LVU178
 728 00a2 04B2     		sxth	r4, r0
 729              	.LVL48:
 526:Core/Src/main.c ****         for (int i = 0; i < 4; i++) {
 730              		.loc 1 526 7 is_stmt 1 view .LVU179
 526:Core/Src/main.c ****         for (int i = 0; i < 4; i++) {
 731              		.loc 1 526 13 is_stmt 0 view .LVU180
 732 00a4 68E0     		b	.L32
 733              	.LVL49:
 734              	.L26:
 526:Core/Src/main.c ****         for (int i = 0; i < 4; i++) {
 735              		.loc 1 526 13 view .LVU181
 736              	.LBE20:
 453:Core/Src/main.c ****         // if (LEDColor == 5) {
 737              		.loc 1 453 9 is_stmt 1 view .LVU182
 453:Core/Src/main.c ****         // if (LEDColor == 5) {
 738              		.loc 1 453 41 is_stmt 0 view .LVU183
 739 00a6 2F23     		movs	r3, #47
 740 00a8 6B44     		add	r3, r3, sp
 741 00aa 1B78     		ldrb	r3, [r3]
 742 00ac 013B     		subs	r3, r3, #1
 453:Core/Src/main.c ****         // if (LEDColor == 5) {
 743              		.loc 1 453 32 view .LVU184
 744 00ae 9B00     		lsls	r3, r3, #2
 745 00b0 06AA     		add	r2, sp, #24
 746 00b2 9958     		ldr	r1, [r3, r2]
 453:Core/Src/main.c ****         // if (LEDColor == 5) {
 747              		.loc 1 453 14 view .LVU185
 748 00b4 334A     		ldr	r2, .L40+4
 749 00b6 5369     		ldr	r3, [r2, #20]
 453:Core/Src/main.c ****         // if (LEDColor == 5) {
 750              		.loc 1 453 20 view .LVU186
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 40


 751 00b8 0B43     		orrs	r3, r1
 752 00ba 5361     		str	r3, [r2, #20]
 462:Core/Src/main.c ****       //Off
 753              		.loc 1 462 9 is_stmt 1 view .LVU187
 523:Core/Src/main.c ****       // The LED bliks for 10s
 754              		.loc 1 523 5 view .LVU188
 755              	.LVL50:
 756              	.L28:
 537:Core/Src/main.c **** 
 757              		.loc 1 537 5 view .LVU189
 537:Core/Src/main.c **** 
 758              		.loc 1 537 16 is_stmt 0 view .LVU190
 759 00bc 324B     		ldr	r3, .L40+8
 760 00be 0022     		movs	r2, #0
 761 00c0 1A80     		strh	r2, [r3]
 539:Core/Src/main.c **** 
 762              		.loc 1 539 5 is_stmt 1 view .LVU191
 763 00c2 3348     		ldr	r0, .L40+16
 764 00c4 FFF7FEFF 		bl	transmitCharArray
 765              	.LVL51:
 541:Core/Src/main.c ****     ledWorkerBusy = 0;
 766              		.loc 1 541 5 view .LVU192
 767 00c8 0121     		movs	r1, #1
 768 00ca 324C     		ldr	r4, .L40+20
 769 00cc 2068     		ldr	r0, [r4]
 770 00ce 4942     		rsbs	r1, r1, #0
 771 00d0 FFF7FEFF 		bl	osSemaphoreAcquire
 772              	.LVL52:
 542:Core/Src/main.c ****     osSemaphoreRelease(workerStatusMutex);
 773              		.loc 1 542 5 view .LVU193
 542:Core/Src/main.c ****     osSemaphoreRelease(workerStatusMutex);
 774              		.loc 1 542 19 is_stmt 0 view .LVU194
 775 00d4 304B     		ldr	r3, .L40+24
 776 00d6 0022     		movs	r2, #0
 777 00d8 1A70     		strb	r2, [r3]
 543:Core/Src/main.c **** 
 778              		.loc 1 543 5 is_stmt 1 view .LVU195
 779 00da 2068     		ldr	r0, [r4]
 780 00dc FFF7FEFF 		bl	osSemaphoreRelease
 781              	.LVL53:
 782              	.LBE18:
 428:Core/Src/main.c ****   {
 783              		.loc 1 428 3 view .LVU196
 784              	.L36:
 428:Core/Src/main.c ****   {
 785              		.loc 1 428 3 view .LVU197
 786              	.LBB25:
 433:Core/Src/main.c ****     transmitCharArray("LED worker Got the signal\n");
 787              		.loc 1 433 5 view .LVU198
 788 00e0 0125     		movs	r5, #1
 789 00e2 6D42     		rsbs	r5, r5, #0
 790 00e4 2D4B     		ldr	r3, .L40+28
 791 00e6 1868     		ldr	r0, [r3]
 792 00e8 2900     		movs	r1, r5
 793 00ea FFF7FEFF 		bl	osSemaphoreAcquire
 794              	.LVL54:
 434:Core/Src/main.c **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 41


 795              		.loc 1 434 5 view .LVU199
 796 00ee 2C48     		ldr	r0, .L40+32
 797 00f0 FFF7FEFF 		bl	transmitCharArray
 798              	.LVL55:
 436:Core/Src/main.c ****     ledWorkerBusy = 1;
 799              		.loc 1 436 5 view .LVU200
 800 00f4 274C     		ldr	r4, .L40+20
 801 00f6 2068     		ldr	r0, [r4]
 802 00f8 2900     		movs	r1, r5
 803 00fa FFF7FEFF 		bl	osSemaphoreAcquire
 804              	.LVL56:
 437:Core/Src/main.c ****     osSemaphoreRelease(workerStatusMutex);
 805              		.loc 1 437 5 view .LVU201
 437:Core/Src/main.c ****     osSemaphoreRelease(workerStatusMutex);
 806              		.loc 1 437 19 is_stmt 0 view .LVU202
 807 00fe 264B     		ldr	r3, .L40+24
 808 0100 0122     		movs	r2, #1
 809 0102 1A70     		strb	r2, [r3]
 438:Core/Src/main.c **** 
 810              		.loc 1 438 5 is_stmt 1 view .LVU203
 811 0104 2068     		ldr	r0, [r4]
 812 0106 FFF7FEFF 		bl	osSemaphoreRelease
 813              	.LVL57:
 440:Core/Src/main.c ****     LEDAction = (commandLED & 0x00F0) >> 4;
 814              		.loc 1 440 5 view .LVU204
 440:Core/Src/main.c ****     LEDAction = (commandLED & 0x00F0) >> 4;
 815              		.loc 1 440 38 is_stmt 0 view .LVU205
 816 010a 1F49     		ldr	r1, .L40+8
 817 010c 0B88     		ldrh	r3, [r1]
 818 010e 1B0A     		lsrs	r3, r3, #8
 819 0110 0F22     		movs	r2, #15
 820 0112 1340     		ands	r3, r2
 440:Core/Src/main.c ****     LEDAction = (commandLED & 0x00F0) >> 4;
 821              		.loc 1 440 14 view .LVU206
 822 0114 2F20     		movs	r0, #47
 823 0116 6844     		add	r0, r0, sp
 824 0118 0370     		strb	r3, [r0]
 441:Core/Src/main.c **** 
 825              		.loc 1 441 5 is_stmt 1 view .LVU207
 441:Core/Src/main.c **** 
 826              		.loc 1 441 39 is_stmt 0 view .LVU208
 827 011a 0B88     		ldrh	r3, [r1]
 828 011c 1B09     		lsrs	r3, r3, #4
 829 011e 1A40     		ands	r2, r3
 441:Core/Src/main.c **** 
 830              		.loc 1 441 15 view .LVU209
 831 0120 2E23     		movs	r3, #46
 832 0122 6B44     		add	r3, r3, sp
 833 0124 1A70     		strb	r2, [r3]
 443:Core/Src/main.c **** 
 834              		.loc 1 443 5 is_stmt 1 view .LVU210
 835              	.LVL58:
 446:Core/Src/main.c ****       blink[i] = 0;
 836              		.loc 1 446 5 view .LVU211
 837              	.LBB23:
 446:Core/Src/main.c ****       blink[i] = 0;
 838              		.loc 1 446 10 view .LVU212
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 42


 446:Core/Src/main.c ****       blink[i] = 0;
 839              		.loc 1 446 14 is_stmt 0 view .LVU213
 840 0126 0023     		movs	r3, #0
 446:Core/Src/main.c ****       blink[i] = 0;
 841              		.loc 1 446 5 view .LVU214
 842 0128 89E7     		b	.L22
 843              	.LVL59:
 844              	.L24:
 446:Core/Src/main.c ****       blink[i] = 0;
 845              		.loc 1 446 5 view .LVU215
 846              	.LBE23:
 477:Core/Src/main.c ****         // if (LEDColor == 5) {
 847              		.loc 1 477 9 is_stmt 1 view .LVU216
 477:Core/Src/main.c ****         // if (LEDColor == 5) {
 848              		.loc 1 477 41 is_stmt 0 view .LVU217
 849 012a 2F23     		movs	r3, #47
 850 012c 6B44     		add	r3, r3, sp
 851 012e 1B78     		ldrb	r3, [r3]
 852 0130 013B     		subs	r3, r3, #1
 477:Core/Src/main.c ****         // if (LEDColor == 5) {
 853              		.loc 1 477 32 view .LVU218
 854 0132 9B00     		lsls	r3, r3, #2
 855 0134 06AA     		add	r2, sp, #24
 856 0136 9958     		ldr	r1, [r3, r2]
 477:Core/Src/main.c ****         // if (LEDColor == 5) {
 857              		.loc 1 477 14 view .LVU219
 858 0138 124A     		ldr	r2, .L40+4
 859 013a 5369     		ldr	r3, [r2, #20]
 477:Core/Src/main.c ****         // if (LEDColor == 5) {
 860              		.loc 1 477 20 view .LVU220
 861 013c 4B40     		eors	r3, r1
 862 013e 5361     		str	r3, [r2, #20]
 486:Core/Src/main.c ****       //Blink
 863              		.loc 1 486 9 is_stmt 1 view .LVU221
 523:Core/Src/main.c ****       // The LED bliks for 10s
 864              		.loc 1 523 5 view .LVU222
 865 0140 BCE7     		b	.L28
 866              	.LVL60:
 867              	.L38:
 491:Core/Src/main.c ****           // blinkTime[0] = commandLED & 0xF;
 868              		.loc 1 491 11 view .LVU223
 491:Core/Src/main.c ****           // blinkTime[0] = commandLED & 0xF;
 869              		.loc 1 491 20 is_stmt 0 view .LVU224
 870 0142 05AB     		add	r3, sp, #20
 871 0144 0122     		movs	r2, #1
 872 0146 1A70     		strb	r2, [r3]
 493:Core/Src/main.c ****           // blinkTime[1] = commandLED & 0xF;
 873              		.loc 1 493 11 is_stmt 1 view .LVU225
 493:Core/Src/main.c ****           // blinkTime[1] = commandLED & 0xF;
 874              		.loc 1 493 20 is_stmt 0 view .LVU226
 875 0148 5A70     		strb	r2, [r3, #1]
 495:Core/Src/main.c ****           // blinkTime[2] = commandLED & 0xF;
 876              		.loc 1 495 11 is_stmt 1 view .LVU227
 495:Core/Src/main.c ****           // blinkTime[2] = commandLED & 0xF;
 877              		.loc 1 495 20 is_stmt 0 view .LVU228
 878 014a 9A70     		strb	r2, [r3, #2]
 497:Core/Src/main.c ****           // blinkTime[3] = commandLED & 0xF;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 43


 879              		.loc 1 497 11 is_stmt 1 view .LVU229
 497:Core/Src/main.c ****           // blinkTime[3] = commandLED & 0xF;
 880              		.loc 1 497 20 is_stmt 0 view .LVU230
 881 014c DA70     		strb	r2, [r3, #3]
 882 014e 9EE7     		b	.L31
 883              	.LVL61:
 884              	.L33:
 885              	.LBB24:
 886              	.LBB21:
 527:Core/Src/main.c ****           if (blink[i]) {
 887              		.loc 1 527 33 is_stmt 1 discriminator 2 view .LVU231
 888 0150 0133     		adds	r3, r3, #1
 889              	.LVL62:
 890              	.L35:
 527:Core/Src/main.c ****           if (blink[i]) {
 891              		.loc 1 527 27 discriminator 1 view .LVU232
 892 0152 032B     		cmp	r3, #3
 893 0154 0BDC     		bgt	.L39
 528:Core/Src/main.c ****             GPIOC->ODR ^= colorMask[i];
 894              		.loc 1 528 11 view .LVU233
 528:Core/Src/main.c ****             GPIOC->ODR ^= colorMask[i];
 895              		.loc 1 528 20 is_stmt 0 view .LVU234
 896 0156 05AA     		add	r2, sp, #20
 897 0158 D25C     		ldrb	r2, [r2, r3]
 528:Core/Src/main.c ****             GPIOC->ODR ^= colorMask[i];
 898              		.loc 1 528 14 view .LVU235
 899 015a 002A     		cmp	r2, #0
 900 015c F8D0     		beq	.L33
 529:Core/Src/main.c ****           }
 901              		.loc 1 529 13 is_stmt 1 view .LVU236
 529:Core/Src/main.c ****           }
 902              		.loc 1 529 36 is_stmt 0 view .LVU237
 903 015e 9A00     		lsls	r2, r3, #2
 904 0160 06A9     		add	r1, sp, #24
 905 0162 5058     		ldr	r0, [r2, r1]
 529:Core/Src/main.c ****           }
 906              		.loc 1 529 18 view .LVU238
 907 0164 0749     		ldr	r1, .L40+4
 908 0166 4A69     		ldr	r2, [r1, #20]
 529:Core/Src/main.c ****           }
 909              		.loc 1 529 24 view .LVU239
 910 0168 4240     		eors	r2, r0
 911 016a 4A61     		str	r2, [r1, #20]
 912 016c F0E7     		b	.L33
 913              	.L39:
 914              	.LBE21:
 532:Core/Src/main.c ****         loopTimes--;
 915              		.loc 1 532 9 is_stmt 1 view .LVU240
 916 016e 2800     		movs	r0, r5
 917 0170 FFF7FEFF 		bl	osDelay
 918              	.LVL63:
 533:Core/Src/main.c ****       }
 919              		.loc 1 533 9 view .LVU241
 533:Core/Src/main.c ****       }
 920              		.loc 1 533 18 is_stmt 0 view .LVU242
 921 0174 013C     		subs	r4, r4, #1
 922              	.LVL64:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 44


 533:Core/Src/main.c ****       }
 923              		.loc 1 533 18 view .LVU243
 924 0176 24B2     		sxth	r4, r4
 925              	.LVL65:
 926              	.L32:
 526:Core/Src/main.c ****         for (int i = 0; i < 4; i++) {
 927              		.loc 1 526 24 is_stmt 1 view .LVU244
 928 0178 002C     		cmp	r4, #0
 929 017a 9FDD     		ble	.L28
 930              	.LBB22:
 527:Core/Src/main.c ****           if (blink[i]) {
 931              		.loc 1 527 18 is_stmt 0 view .LVU245
 932 017c 0023     		movs	r3, #0
 933 017e E8E7     		b	.L35
 934              	.L41:
 935              		.align	2
 936              	.L40:
 937 0180 00000000 		.word	.LANCHOR0
 938 0184 00080048 		.word	1207961600
 939 0188 00000000 		.word	commandLED
 940 018c 10270000 		.word	10000
 941 0190 1C000000 		.word	.LC32
 942 0194 00000000 		.word	workerStatusMutex
 943 0198 00000000 		.word	ledWorkerBusy
 944 019c 00000000 		.word	ledRouterSem01
 945 01a0 00000000 		.word	.LC27
 946              	.LBE22:
 947              	.LBE24:
 948              	.LBE25:
 949              		.cfi_endproc
 950              	.LFE55:
 952              		.section	.text.pwm_init,"ax",%progbits
 953              		.align	1
 954              		.global	pwm_init
 955              		.syntax unified
 956              		.code	16
 957              		.thumb_func
 959              	pwm_init:
 960              	.LFB44:
 961              		.file 3 "Core/Src/motor.c"
   1:Core/Src/motor.c **** /* ------------------------------------------------------------------------------------------------
   2:Core/Src/motor.c ****  *  Motor Control and Initialization Functions
   3:Core/Src/motor.c ****  * ------------------------------------------------------------------------------------------------
   4:Core/Src/motor.c ****  */
   5:Core/Src/motor.c **** #include "motor.h"
   6:Core/Src/motor.c **** #include "stm32f0xx.h"
   7:Core/Src/motor.c **** #include "stm32f072xb.h"
   8:Core/Src/motor.c **** 
   9:Core/Src/motor.c **** volatile int16_t error_integral = 0;    // Integrated error signal
  10:Core/Src/motor.c **** volatile uint8_t duty_cycle = 0;    	// Output PWM duty cycle
  11:Core/Src/motor.c **** // volatile int16_t target_rpm = 0;    	// Desired speed target
  12:Core/Src/motor.c **** //Global variables to pass command to worker threads
  13:Core/Src/motor.c **** extern volatile int16_t target_rpm;
  14:Core/Src/motor.c **** volatile int16_t motor_speed = 0;   	// Measured motor speed
  15:Core/Src/motor.c **** volatile int8_t adc_value = 0;      	// ADC measured motor current
  16:Core/Src/motor.c **** volatile int16_t error = 0;         	// Speed error signal
  17:Core/Src/motor.c **** volatile uint8_t Kp = 1;            	// Proportional gain
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 45


  18:Core/Src/motor.c **** volatile uint8_t Ki = 1;            	// Integral gain
  19:Core/Src/motor.c **** //volatile uint16_t speedHistory[HIST_LEN];   //Short history of speed measurements
  20:Core/Src/motor.c **** 
  21:Core/Src/motor.c **** // Sets up the entire motor drive system
  22:Core/Src/motor.c **** void motor_init(void) {
  23:Core/Src/motor.c ****     pwm_init();
  24:Core/Src/motor.c ****     encoder_init();
  25:Core/Src/motor.c ****     ADC_init();
  26:Core/Src/motor.c ****     //for (int i = 0; i < HIST_LEN; i++)
  27:Core/Src/motor.c ****     //    speedHistory[i] = 0;
  28:Core/Src/motor.c **** }
  29:Core/Src/motor.c **** 
  30:Core/Src/motor.c **** // Sets up the PWM and direction signals to drive the H-Bridge
  31:Core/Src/motor.c **** void pwm_init(void) {
 962              		.loc 3 31 21 is_stmt 1 view -0
 963              		.cfi_startproc
 964              		@ args = 0, pretend = 0, frame = 0
 965              		@ frame_needed = 0, uses_anonymous_args = 0
 966              		@ link register save eliminated.
  32:Core/Src/motor.c ****     
  33:Core/Src/motor.c ****     // Set up pin PA4 for H-bridge PWM output (TIMER 14 CH1)
  34:Core/Src/motor.c ****     GPIOA->MODER |= (1 << 9);
 967              		.loc 3 34 5 view .LVU247
 968              		.loc 3 34 10 is_stmt 0 view .LVU248
 969 0000 9023     		movs	r3, #144
 970 0002 DB05     		lsls	r3, r3, #23
 971 0004 1968     		ldr	r1, [r3]
 972              		.loc 3 34 18 view .LVU249
 973 0006 8022     		movs	r2, #128
 974 0008 9200     		lsls	r2, r2, #2
 975 000a 0A43     		orrs	r2, r1
 976 000c 1A60     		str	r2, [r3]
  35:Core/Src/motor.c ****     GPIOA->MODER &= ~(1 << 8);
 977              		.loc 3 35 5 is_stmt 1 view .LVU250
 978              		.loc 3 35 10 is_stmt 0 view .LVU251
 979 000e 1A68     		ldr	r2, [r3]
 980              		.loc 3 35 18 view .LVU252
 981 0010 1C49     		ldr	r1, .L43
 982 0012 0A40     		ands	r2, r1
 983 0014 1A60     		str	r2, [r3]
  36:Core/Src/motor.c **** 
  37:Core/Src/motor.c ****     // Set PA4 to AF4,
  38:Core/Src/motor.c ****     GPIOA->AFR[0] &= 0xFFF0FFFF; // clear PA4 bits,
 984              		.loc 3 38 5 is_stmt 1 view .LVU253
 985              		.loc 3 38 15 is_stmt 0 view .LVU254
 986 0016 1A6A     		ldr	r2, [r3, #32]
 987              		.loc 3 38 19 view .LVU255
 988 0018 1B49     		ldr	r1, .L43+4
 989 001a 0A40     		ands	r2, r1
 990 001c 1A62     		str	r2, [r3, #32]
  39:Core/Src/motor.c ****     GPIOA->AFR[0] |= (1 << 18);
 991              		.loc 3 39 5 is_stmt 1 view .LVU256
 992              		.loc 3 39 15 is_stmt 0 view .LVU257
 993 001e 196A     		ldr	r1, [r3, #32]
 994              		.loc 3 39 19 view .LVU258
 995 0020 8022     		movs	r2, #128
 996 0022 D202     		lsls	r2, r2, #11
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 46


 997 0024 0A43     		orrs	r2, r1
 998 0026 1A62     		str	r2, [r3, #32]
  40:Core/Src/motor.c **** 
  41:Core/Src/motor.c ****     // Set up a PA5, PA6 as GPIO output pins for motor direction control
  42:Core/Src/motor.c ****     GPIOA->MODER &= 0xFFFFC3FF; // clear PA5, PA6 bits,
 999              		.loc 3 42 5 is_stmt 1 view .LVU259
 1000              		.loc 3 42 10 is_stmt 0 view .LVU260
 1001 0028 1A68     		ldr	r2, [r3]
 1002              		.loc 3 42 18 view .LVU261
 1003 002a 1849     		ldr	r1, .L43+8
 1004 002c 0A40     		ands	r2, r1
 1005 002e 1A60     		str	r2, [r3]
  43:Core/Src/motor.c ****     GPIOA->MODER |= (1 << 10) | (1 << 12);
 1006              		.loc 3 43 5 is_stmt 1 view .LVU262
 1007              		.loc 3 43 10 is_stmt 0 view .LVU263
 1008 0030 1968     		ldr	r1, [r3]
 1009              		.loc 3 43 18 view .LVU264
 1010 0032 A022     		movs	r2, #160
 1011 0034 5201     		lsls	r2, r2, #5
 1012 0036 0A43     		orrs	r2, r1
 1013 0038 1A60     		str	r2, [r3]
  44:Core/Src/motor.c ****     
  45:Core/Src/motor.c ****     //Initialize one direction pin to high, the other low
  46:Core/Src/motor.c ****     GPIOA->ODR |= (1 << 5);
 1014              		.loc 3 46 5 is_stmt 1 view .LVU265
 1015              		.loc 3 46 10 is_stmt 0 view .LVU266
 1016 003a 5A69     		ldr	r2, [r3, #20]
 1017              		.loc 3 46 16 view .LVU267
 1018 003c 2021     		movs	r1, #32
 1019 003e 0A43     		orrs	r2, r1
 1020 0040 5A61     		str	r2, [r3, #20]
  47:Core/Src/motor.c ****     GPIOA->ODR &= ~(1 << 6);
 1021              		.loc 3 47 5 is_stmt 1 view .LVU268
 1022              		.loc 3 47 10 is_stmt 0 view .LVU269
 1023 0042 5A69     		ldr	r2, [r3, #20]
 1024              		.loc 3 47 16 view .LVU270
 1025 0044 2031     		adds	r1, r1, #32
 1026 0046 8A43     		bics	r2, r1
 1027 0048 5A61     		str	r2, [r3, #20]
  48:Core/Src/motor.c **** 
  49:Core/Src/motor.c ****     // Set up PWM timer
  50:Core/Src/motor.c ****     RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 1028              		.loc 3 50 5 is_stmt 1 view .LVU271
 1029              		.loc 3 50 8 is_stmt 0 view .LVU272
 1030 004a 114A     		ldr	r2, .L43+12
 1031 004c D169     		ldr	r1, [r2, #28]
 1032              		.loc 3 50 18 view .LVU273
 1033 004e 8023     		movs	r3, #128
 1034 0050 5B00     		lsls	r3, r3, #1
 1035 0052 0B43     		orrs	r3, r1
 1036 0054 D361     		str	r3, [r2, #28]
  51:Core/Src/motor.c ****     TIM14->CR1 = 0;                         // Clear control registers
 1037              		.loc 3 51 5 is_stmt 1 view .LVU274
 1038              		.loc 3 51 16 is_stmt 0 view .LVU275
 1039 0056 0F4B     		ldr	r3, .L43+16
 1040 0058 0022     		movs	r2, #0
 1041 005a 1A60     		str	r2, [r3]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 47


  52:Core/Src/motor.c ****     TIM14->CCMR1 = 0;                       // (prevents having to manually clear bits)
 1042              		.loc 3 52 5 is_stmt 1 view .LVU276
 1043              		.loc 3 52 18 is_stmt 0 view .LVU277
 1044 005c 9A61     		str	r2, [r3, #24]
  53:Core/Src/motor.c ****     TIM14->CCER = 0;
 1045              		.loc 3 53 5 is_stmt 1 view .LVU278
 1046              		.loc 3 53 17 is_stmt 0 view .LVU279
 1047 005e 1A62     		str	r2, [r3, #32]
  54:Core/Src/motor.c **** 
  55:Core/Src/motor.c ****     // Set output-compare CH1 to PWM1 mode and enable CCR1 preload buffer
  56:Core/Src/motor.c ****     TIM14->CCMR1 |= (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE);
 1048              		.loc 3 56 5 is_stmt 1 view .LVU280
 1049              		.loc 3 56 10 is_stmt 0 view .LVU281
 1050 0060 9969     		ldr	r1, [r3, #24]
 1051              		.loc 3 56 18 view .LVU282
 1052 0062 6820     		movs	r0, #104
 1053 0064 0143     		orrs	r1, r0
 1054 0066 9961     		str	r1, [r3, #24]
  57:Core/Src/motor.c ****     TIM14->CCER |= TIM_CCER_CC1E;           // Enable capture-compare channel 1
 1055              		.loc 3 57 5 is_stmt 1 view .LVU283
 1056              		.loc 3 57 10 is_stmt 0 view .LVU284
 1057 0068 186A     		ldr	r0, [r3, #32]
 1058              		.loc 3 57 17 view .LVU285
 1059 006a 0121     		movs	r1, #1
 1060 006c 0843     		orrs	r0, r1
 1061 006e 1862     		str	r0, [r3, #32]
  58:Core/Src/motor.c ****     TIM14->PSC = 1;                         // Run timer on 24Mhz
 1062              		.loc 3 58 5 is_stmt 1 view .LVU286
 1063              		.loc 3 58 16 is_stmt 0 view .LVU287
 1064 0070 9962     		str	r1, [r3, #40]
  59:Core/Src/motor.c ****     TIM14->ARR = 1200;                      // PWM at 20kHz
 1065              		.loc 3 59 5 is_stmt 1 view .LVU288
 1066              		.loc 3 59 16 is_stmt 0 view .LVU289
 1067 0072 9620     		movs	r0, #150
 1068 0074 C000     		lsls	r0, r0, #3
 1069 0076 D862     		str	r0, [r3, #44]
  60:Core/Src/motor.c ****     TIM14->CCR1 = 0;                        // Start PWM at 0% duty cycle
 1070              		.loc 3 60 5 is_stmt 1 view .LVU290
 1071              		.loc 3 60 17 is_stmt 0 view .LVU291
 1072 0078 5A63     		str	r2, [r3, #52]
  61:Core/Src/motor.c ****     
  62:Core/Src/motor.c ****     TIM14->CR1 |= TIM_CR1_CEN;              // Enable timer
 1073              		.loc 3 62 5 is_stmt 1 view .LVU292
 1074              		.loc 3 62 10 is_stmt 0 view .LVU293
 1075 007a 1A68     		ldr	r2, [r3]
 1076              		.loc 3 62 16 view .LVU294
 1077 007c 0A43     		orrs	r2, r1
 1078 007e 1A60     		str	r2, [r3]
  63:Core/Src/motor.c **** }
 1079              		.loc 3 63 1 view .LVU295
 1080              		@ sp needed
 1081 0080 7047     		bx	lr
 1082              	.L44:
 1083 0082 C046     		.align	2
 1084              	.L43:
 1085 0084 FFFEFFFF 		.word	-257
 1086 0088 FFFFF0FF 		.word	-983041
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 48


 1087 008c FFC3FFFF 		.word	-15361
 1088 0090 00100240 		.word	1073876992
 1089 0094 00200040 		.word	1073750016
 1090              		.cfi_endproc
 1091              	.LFE44:
 1093              		.global	__aeabi_uidiv
 1094              		.section	.text.pwm_setDutyCycle,"ax",%progbits
 1095              		.align	1
 1096              		.global	pwm_setDutyCycle
 1097              		.syntax unified
 1098              		.code	16
 1099              		.thumb_func
 1101              	pwm_setDutyCycle:
 1102              	.LVL66:
 1103              	.LFB45:
  64:Core/Src/motor.c **** 
  65:Core/Src/motor.c **** // Set the duty cycle of the PWM, accepts (0-100)
  66:Core/Src/motor.c **** void pwm_setDutyCycle(uint8_t duty) {
 1104              		.loc 3 66 37 is_stmt 1 view -0
 1105              		.cfi_startproc
 1106              		@ args = 0, pretend = 0, frame = 0
 1107              		@ frame_needed = 0, uses_anonymous_args = 0
 1108              		.loc 3 66 37 is_stmt 0 view .LVU297
 1109 0000 10B5     		push	{r4, lr}
 1110              	.LCFI6:
 1111              		.cfi_def_cfa_offset 8
 1112              		.cfi_offset 4, -8
 1113              		.cfi_offset 14, -4
  67:Core/Src/motor.c ****     if(duty <= 100) {
 1114              		.loc 3 67 5 is_stmt 1 view .LVU298
 1115              		.loc 3 67 7 is_stmt 0 view .LVU299
 1116 0002 6428     		cmp	r0, #100
 1117 0004 06D8     		bhi	.L45
  68:Core/Src/motor.c ****         TIM14->CCR1 = ((uint32_t)duty*TIM14->ARR)/100;  // Use linear transform to produce CCR1 val
 1118              		.loc 3 68 9 is_stmt 1 view .LVU300
 1119              		.loc 3 68 44 is_stmt 0 view .LVU301
 1120 0006 044C     		ldr	r4, .L47
 1121 0008 E36A     		ldr	r3, [r4, #44]
 1122              		.loc 3 68 38 view .LVU302
 1123 000a 5843     		muls	r0, r3
 1124              	.LVL67:
 1125              		.loc 3 68 50 view .LVU303
 1126 000c 6421     		movs	r1, #100
 1127 000e FFF7FEFF 		bl	__aeabi_uidiv
 1128              	.LVL68:
 1129              		.loc 3 68 21 view .LVU304
 1130 0012 6063     		str	r0, [r4, #52]
 1131              	.L45:
  69:Core/Src/motor.c ****         // (CCR1 == "pulse" parameter in PWM struct used by peripheral library)
  70:Core/Src/motor.c ****     }
  71:Core/Src/motor.c **** }
 1132              		.loc 3 71 1 view .LVU305
 1133              		@ sp needed
 1134 0014 10BD     		pop	{r4, pc}
 1135              	.L48:
 1136 0016 C046     		.align	2
 1137              	.L47:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 49


 1138 0018 00200040 		.word	1073750016
 1139              		.cfi_endproc
 1140              	.LFE45:
 1142              		.section	.text.encoder_init,"ax",%progbits
 1143              		.align	1
 1144              		.global	encoder_init
 1145              		.syntax unified
 1146              		.code	16
 1147              		.thumb_func
 1149              	encoder_init:
 1150              	.LFB46:
  72:Core/Src/motor.c **** 
  73:Core/Src/motor.c **** // Sets up encoder interface to read motor speed
  74:Core/Src/motor.c **** void encoder_init(void) {
 1151              		.loc 3 74 25 is_stmt 1 view -0
 1152              		.cfi_startproc
 1153              		@ args = 0, pretend = 0, frame = 0
 1154              		@ frame_needed = 0, uses_anonymous_args = 0
 1155              		@ link register save eliminated.
  75:Core/Src/motor.c ****     
  76:Core/Src/motor.c ****     // Set up encoder input pins (TIMER 3 CH1 and CH2)
  77:Core/Src/motor.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 1156              		.loc 3 77 5 view .LVU307
 1157              		.loc 3 77 8 is_stmt 0 view .LVU308
 1158 0000 1F4A     		ldr	r2, .L50
 1159 0002 5169     		ldr	r1, [r2, #20]
 1160              		.loc 3 77 17 view .LVU309
 1161 0004 8023     		movs	r3, #128
 1162 0006 DB02     		lsls	r3, r3, #11
 1163 0008 0B43     		orrs	r3, r1
 1164 000a 5361     		str	r3, [r2, #20]
  78:Core/Src/motor.c **** 
  79:Core/Src/motor.c ****     // PB4(ENCA) and PB5(ENCB) are encoder 
  80:Core/Src/motor.c ****     GPIOB->MODER &= ~(GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0);
 1165              		.loc 3 80 5 is_stmt 1 view .LVU310
 1166              		.loc 3 80 10 is_stmt 0 view .LVU311
 1167 000c 1D4B     		ldr	r3, .L50+4
 1168 000e 1968     		ldr	r1, [r3]
 1169              		.loc 3 80 18 view .LVU312
 1170 0010 1D48     		ldr	r0, .L50+8
 1171 0012 0140     		ands	r1, r0
 1172 0014 1960     		str	r1, [r3]
  81:Core/Src/motor.c ****     GPIOB->MODER |= (GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1);
 1173              		.loc 3 81 5 is_stmt 1 view .LVU313
 1174              		.loc 3 81 10 is_stmt 0 view .LVU314
 1175 0016 1868     		ldr	r0, [r3]
 1176              		.loc 3 81 18 view .LVU315
 1177 0018 A021     		movs	r1, #160
 1178 001a 0901     		lsls	r1, r1, #4
 1179 001c 0143     		orrs	r1, r0
 1180 001e 1960     		str	r1, [r3]
  82:Core/Src/motor.c ****     GPIOB->AFR[0] |= ( (1 << 16) | (1 << 20) );
 1181              		.loc 3 82 5 is_stmt 1 view .LVU316
 1182              		.loc 3 82 15 is_stmt 0 view .LVU317
 1183 0020 186A     		ldr	r0, [r3, #32]
 1184              		.loc 3 82 19 view .LVU318
 1185 0022 8821     		movs	r1, #136
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 50


 1186 0024 4903     		lsls	r1, r1, #13
 1187 0026 0143     		orrs	r1, r0
 1188 0028 1962     		str	r1, [r3, #32]
  83:Core/Src/motor.c **** 
  84:Core/Src/motor.c ****     // Set up encoder interface (TIM3 encoder input mode)
  85:Core/Src/motor.c ****     RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 1189              		.loc 3 85 5 is_stmt 1 view .LVU319
 1190              		.loc 3 85 8 is_stmt 0 view .LVU320
 1191 002a D369     		ldr	r3, [r2, #28]
 1192              		.loc 3 85 18 view .LVU321
 1193 002c 0221     		movs	r1, #2
 1194 002e 0B43     		orrs	r3, r1
 1195 0030 D361     		str	r3, [r2, #28]
  86:Core/Src/motor.c ****     TIM3->CCMR1 = 0;
 1196              		.loc 3 86 5 is_stmt 1 view .LVU322
 1197              		.loc 3 86 17 is_stmt 0 view .LVU323
 1198 0032 164B     		ldr	r3, .L50+12
 1199 0034 0021     		movs	r1, #0
 1200 0036 9961     		str	r1, [r3, #24]
  87:Core/Src/motor.c ****     TIM3->CCER = 0;
 1201              		.loc 3 87 5 is_stmt 1 view .LVU324
 1202              		.loc 3 87 16 is_stmt 0 view .LVU325
 1203 0038 1962     		str	r1, [r3, #32]
  88:Core/Src/motor.c ****     TIM3->SMCR = 0;
 1204              		.loc 3 88 5 is_stmt 1 view .LVU326
 1205              		.loc 3 88 16 is_stmt 0 view .LVU327
 1206 003a 9960     		str	r1, [r3, #8]
  89:Core/Src/motor.c ****     TIM3->CR1 = 0;
 1207              		.loc 3 89 5 is_stmt 1 view .LVU328
 1208              		.loc 3 89 15 is_stmt 0 view .LVU329
 1209 003c 1960     		str	r1, [r3]
  90:Core/Src/motor.c **** 
  91:Core/Src/motor.c ****     TIM3->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);   // TI1FP1 and TI2FP2 signals connected 
 1210              		.loc 3 91 5 is_stmt 1 view .LVU330
 1211              		.loc 3 91 9 is_stmt 0 view .LVU331
 1212 003e 9869     		ldr	r0, [r3, #24]
 1213              		.loc 3 91 17 view .LVU332
 1214 0040 0221     		movs	r1, #2
 1215 0042 FF31     		adds	r1, r1, #255
 1216 0044 0143     		orrs	r1, r0
 1217 0046 9961     		str	r1, [r3, #24]
  92:Core/Src/motor.c ****     TIM3->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0);        // Capture encoder on both rising and f
 1218              		.loc 3 92 5 is_stmt 1 view .LVU333
 1219              		.loc 3 92 9 is_stmt 0 view .LVU334
 1220 0048 9968     		ldr	r1, [r3, #8]
 1221              		.loc 3 92 16 view .LVU335
 1222 004a 0320     		movs	r0, #3
 1223 004c 0143     		orrs	r1, r0
 1224 004e 9960     		str	r1, [r3, #8]
  93:Core/Src/motor.c ****     TIM3->ARR = 0xFFFF;                                     // Set ARR to top of timer (longest pos
 1225              		.loc 3 93 5 is_stmt 1 view .LVU336
 1226              		.loc 3 93 15 is_stmt 0 view .LVU337
 1227 0050 0F49     		ldr	r1, .L50+16
 1228 0052 D962     		str	r1, [r3, #44]
  94:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF;                                     // Bias at midpoint to allow for negati
 1229              		.loc 3 94 5 is_stmt 1 view .LVU338
 1230              		.loc 3 94 15 is_stmt 0 view .LVU339
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 51


 1231 0054 0F49     		ldr	r1, .L50+20
 1232 0056 5962     		str	r1, [r3, #36]
  95:Core/Src/motor.c ****     // (Could also cast unsigned register to signed number to get negative numbers if it rotates ba
  96:Core/Src/motor.c ****     //  just another option, the mid-bias is a bit simpler to understand though.)
  97:Core/Src/motor.c ****     TIM3->CR1 |= TIM_CR1_CEN;                               // Enable timer
 1233              		.loc 3 97 5 is_stmt 1 view .LVU340
 1234              		.loc 3 97 9 is_stmt 0 view .LVU341
 1235 0058 1868     		ldr	r0, [r3]
 1236              		.loc 3 97 15 view .LVU342
 1237 005a 0121     		movs	r1, #1
 1238 005c 0843     		orrs	r0, r1
 1239 005e 1860     		str	r0, [r3]
  98:Core/Src/motor.c **** 
  99:Core/Src/motor.c ****     // Configure a second timer (TIM7) to fire an ISR on update event
 100:Core/Src/motor.c ****     // Used to periodically check and update speed variable
 101:Core/Src/motor.c ****     RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 1240              		.loc 3 101 5 is_stmt 1 view .LVU343
 1241              		.loc 3 101 8 is_stmt 0 view .LVU344
 1242 0060 D369     		ldr	r3, [r2, #28]
 1243              		.loc 3 101 18 view .LVU345
 1244 0062 2020     		movs	r0, #32
 1245 0064 0343     		orrs	r3, r0
 1246 0066 D361     		str	r3, [r2, #28]
 102:Core/Src/motor.c ****     
 103:Core/Src/motor.c ****     // Select PSC and ARR values that give an appropriate interrupt rate
 104:Core/Src/motor.c ****     TIM7->PSC = 88;
 1247              		.loc 3 104 5 is_stmt 1 view .LVU346
 1248              		.loc 3 104 15 is_stmt 0 view .LVU347
 1249 0068 0B4B     		ldr	r3, .L50+24
 1250 006a 5822     		movs	r2, #88
 1251 006c 9A62     		str	r2, [r3, #40]
 105:Core/Src/motor.c ****     TIM7->ARR = 30000;
 1252              		.loc 3 105 5 is_stmt 1 view .LVU348
 1253              		.loc 3 105 15 is_stmt 0 view .LVU349
 1254 006e 0B4A     		ldr	r2, .L50+28
 1255 0070 DA62     		str	r2, [r3, #44]
 106:Core/Src/motor.c ****     
 107:Core/Src/motor.c ****     TIM7->DIER |= TIM_DIER_UIE;             // Enable update event interrupt
 1256              		.loc 3 107 5 is_stmt 1 view .LVU350
 1257              		.loc 3 107 9 is_stmt 0 view .LVU351
 1258 0072 DA68     		ldr	r2, [r3, #12]
 1259              		.loc 3 107 16 view .LVU352
 1260 0074 0A43     		orrs	r2, r1
 1261 0076 DA60     		str	r2, [r3, #12]
 108:Core/Src/motor.c ****     TIM7->CR1 |= TIM_CR1_CEN;               // Enable Timer
 1262              		.loc 3 108 5 is_stmt 1 view .LVU353
 1263              		.loc 3 108 9 is_stmt 0 view .LVU354
 1264 0078 1A68     		ldr	r2, [r3]
 1265              		.loc 3 108 15 view .LVU355
 1266 007a 0A43     		orrs	r2, r1
 1267 007c 1A60     		str	r2, [r3]
 109:Core/Src/motor.c **** }
 1268              		.loc 3 109 1 view .LVU356
 1269              		@ sp needed
 1270 007e 7047     		bx	lr
 1271              	.L51:
 1272              		.align	2
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 52


 1273              	.L50:
 1274 0080 00100240 		.word	1073876992
 1275 0084 00040048 		.word	1207960576
 1276 0088 FFFAFFFF 		.word	-1281
 1277 008c 00040040 		.word	1073742848
 1278 0090 FFFF0000 		.word	65535
 1279 0094 FF7F0000 		.word	32767
 1280 0098 00140040 		.word	1073746944
 1281 009c 30750000 		.word	30000
 1282              		.cfi_endproc
 1283              	.LFE46:
 1285              		.section	.text.ADC_init,"ax",%progbits
 1286              		.align	1
 1287              		.global	ADC_init
 1288              		.syntax unified
 1289              		.code	16
 1290              		.thumb_func
 1292              	ADC_init:
 1293              	.LFB48:
 110:Core/Src/motor.c **** 
 111:Core/Src/motor.c **** // Encoder interrupt to calculate motor speed, also manages PI controller
 112:Core/Src/motor.c **** void TIM7_IRQHandler(void) {
 113:Core/Src/motor.c ****     /* Calculate the motor speed in raw encoder counts
 114:Core/Src/motor.c ****      * Note the motor speed is signed! Motor can be run in reverse.
 115:Core/Src/motor.c ****      * Speed is measured by how far the counter moved from center point
 116:Core/Src/motor.c ****      */
 117:Core/Src/motor.c ****     motor_speed = (TIM3->CNT - 0x7FFF);
 118:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 119:Core/Src/motor.c ****     // Call the PI update function
 120:Core/Src/motor.c ****     PI_update();
 121:Core/Src/motor.c **** 
 122:Core/Src/motor.c ****     //Track history of speed measurements
 123:Core/Src/motor.c ****     /*for (int i = HIST_LEN-1; i > 0; i--) {
 124:Core/Src/motor.c ****         speedHistory[i] = speedHistory[i-1];
 125:Core/Src/motor.c ****     }
 126:Core/Src/motor.c ****     speedHistory[0] = motor_speed;
 127:Core/Src/motor.c **** 
 128:Core/Src/motor.c ****     //If speed is steady, disable interrupt
 129:Core/Src/motor.c ****     for (int i = 1; i < HIST_LEN; i++) {
 130:Core/Src/motor.c ****         if (speedHistory[i-1] != speedHistory[i])
 131:Core/Src/motor.c ****             break;
 132:Core/Src/motor.c ****         else
 133:Core/Src/motor.c ****             if (i == HIST_LEN-1)
 134:Core/Src/motor.c ****                 NVIC_DisableIRQ(TIM7_IRQn);          // Disable interrupt in NVIC
 135:Core/Src/motor.c ****     }
 136:Core/Src/motor.c **** */
 137:Core/Src/motor.c ****     TIM7->SR &= ~TIM_SR_UIF;        // Acknowledge the interrupt
 138:Core/Src/motor.c **** }
 139:Core/Src/motor.c **** 
 140:Core/Src/motor.c **** void ADC_init(void) {
 1294              		.loc 3 140 21 is_stmt 1 view -0
 1295              		.cfi_startproc
 1296              		@ args = 0, pretend = 0, frame = 0
 1297              		@ frame_needed = 0, uses_anonymous_args = 0
 1298              		@ link register save eliminated.
 141:Core/Src/motor.c **** 
 142:Core/Src/motor.c ****     // Configure PA1 for ADC input (used for current monitoring)
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 53


 143:Core/Src/motor.c ****     GPIOA->MODER |= (GPIO_MODER_MODER1_0 | GPIO_MODER_MODER1_1);
 1299              		.loc 3 143 5 view .LVU358
 1300              		.loc 3 143 10 is_stmt 0 view .LVU359
 1301 0000 9022     		movs	r2, #144
 1302 0002 D205     		lsls	r2, r2, #23
 1303 0004 1368     		ldr	r3, [r2]
 1304              		.loc 3 143 18 view .LVU360
 1305 0006 0C21     		movs	r1, #12
 1306 0008 0B43     		orrs	r3, r1
 1307 000a 1360     		str	r3, [r2]
 144:Core/Src/motor.c **** 
 145:Core/Src/motor.c ****     // Configure ADC to 8-bit continuous-run mode, (asynchronous clock mode)
 146:Core/Src/motor.c ****     RCC->APB2ENR |= RCC_APB2ENR_ADCEN;
 1308              		.loc 3 146 5 is_stmt 1 view .LVU361
 1309              		.loc 3 146 8 is_stmt 0 view .LVU362
 1310 000c 154A     		ldr	r2, .L56
 1311 000e 9169     		ldr	r1, [r2, #24]
 1312              		.loc 3 146 18 view .LVU363
 1313 0010 8023     		movs	r3, #128
 1314 0012 9B00     		lsls	r3, r3, #2
 1315 0014 0B43     		orrs	r3, r1
 1316 0016 9361     		str	r3, [r2, #24]
 147:Core/Src/motor.c **** 
 148:Core/Src/motor.c ****     ADC1->CFGR1 = 0;                        // Default resolution is 12-bit (RES[1:0] = 00 --> 12-b
 1317              		.loc 3 148 5 is_stmt 1 view .LVU364
 1318              		.loc 3 148 17 is_stmt 0 view .LVU365
 1319 0018 134B     		ldr	r3, .L56+4
 1320 001a 0021     		movs	r1, #0
 1321 001c D960     		str	r1, [r3, #12]
 149:Core/Src/motor.c ****     ADC1->CFGR1 |= ADC_CFGR1_CONT;          // Set to continuous mode
 1322              		.loc 3 149 5 is_stmt 1 view .LVU366
 1323              		.loc 3 149 9 is_stmt 0 view .LVU367
 1324 001e D868     		ldr	r0, [r3, #12]
 1325              		.loc 3 149 17 view .LVU368
 1326 0020 8022     		movs	r2, #128
 1327 0022 9201     		lsls	r2, r2, #6
 1328 0024 0243     		orrs	r2, r0
 1329 0026 DA60     		str	r2, [r3, #12]
 150:Core/Src/motor.c ****     ADC1->CHSELR |= ADC_CHSELR_CHSEL1;      // Enable channel 1
 1330              		.loc 3 150 5 is_stmt 1 view .LVU369
 1331              		.loc 3 150 9 is_stmt 0 view .LVU370
 1332 0028 9A6A     		ldr	r2, [r3, #40]
 1333              		.loc 3 150 18 view .LVU371
 1334 002a 0220     		movs	r0, #2
 1335 002c 0243     		orrs	r2, r0
 1336 002e 9A62     		str	r2, [r3, #40]
 151:Core/Src/motor.c **** 
 152:Core/Src/motor.c ****     ADC1->CR = 0;
 1337              		.loc 3 152 5 is_stmt 1 view .LVU372
 1338              		.loc 3 152 14 is_stmt 0 view .LVU373
 1339 0030 9960     		str	r1, [r3, #8]
 153:Core/Src/motor.c ****     ADC1->CR |= ADC_CR_ADCAL;               // Perform self calibration
 1340              		.loc 3 153 5 is_stmt 1 view .LVU374
 1341              		.loc 3 153 9 is_stmt 0 view .LVU375
 1342 0032 9968     		ldr	r1, [r3, #8]
 1343              		.loc 3 153 14 view .LVU376
 1344 0034 8022     		movs	r2, #128
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 54


 1345 0036 1206     		lsls	r2, r2, #24
 1346 0038 0A43     		orrs	r2, r1
 1347 003a 9A60     		str	r2, [r3, #8]
 154:Core/Src/motor.c ****     while(ADC1->CR & ADC_CR_ADCAL);         // Delay until calibration is complete
 1348              		.loc 3 154 5 is_stmt 1 view .LVU377
 1349              	.L53:
 1350              		.loc 3 154 11 discriminator 1 view .LVU378
 1351              		.loc 3 154 15 is_stmt 0 discriminator 1 view .LVU379
 1352 003c 0A4B     		ldr	r3, .L56+4
 1353 003e 9B68     		ldr	r3, [r3, #8]
 1354              		.loc 3 154 11 discriminator 1 view .LVU380
 1355 0040 002B     		cmp	r3, #0
 1356 0042 FBDB     		blt	.L53
 155:Core/Src/motor.c **** 
 156:Core/Src/motor.c ****     ADC1->CR |= ADC_CR_ADEN;                // Enable ADC
 1357              		.loc 3 156 5 is_stmt 1 view .LVU381
 1358              		.loc 3 156 9 is_stmt 0 view .LVU382
 1359 0044 084A     		ldr	r2, .L56+4
 1360 0046 9368     		ldr	r3, [r2, #8]
 1361              		.loc 3 156 14 view .LVU383
 1362 0048 0121     		movs	r1, #1
 1363 004a 0B43     		orrs	r3, r1
 1364 004c 9360     		str	r3, [r2, #8]
 157:Core/Src/motor.c ****     while(!(ADC1->ISR & ADC_ISR_ADRDY));    // Wait until ADC ready
 1365              		.loc 3 157 5 is_stmt 1 view .LVU384
 1366              	.L54:
 1367              		.loc 3 157 11 discriminator 1 view .LVU385
 1368              		.loc 3 157 17 is_stmt 0 discriminator 1 view .LVU386
 1369 004e 064B     		ldr	r3, .L56+4
 1370 0050 1B68     		ldr	r3, [r3]
 1371              		.loc 3 157 11 discriminator 1 view .LVU387
 1372 0052 DB07     		lsls	r3, r3, #31
 1373 0054 FBD5     		bpl	.L54
 158:Core/Src/motor.c ****     ADC1->CR |= ADC_CR_ADSTART;             // Signal conversion start
 1374              		.loc 3 158 5 is_stmt 1 view .LVU388
 1375              		.loc 3 158 9 is_stmt 0 view .LVU389
 1376 0056 044A     		ldr	r2, .L56+4
 1377 0058 9368     		ldr	r3, [r2, #8]
 1378              		.loc 3 158 14 view .LVU390
 1379 005a 0421     		movs	r1, #4
 1380 005c 0B43     		orrs	r3, r1
 1381 005e 9360     		str	r3, [r2, #8]
 159:Core/Src/motor.c **** }
 1382              		.loc 3 159 1 view .LVU391
 1383              		@ sp needed
 1384 0060 7047     		bx	lr
 1385              	.L57:
 1386 0062 C046     		.align	2
 1387              	.L56:
 1388 0064 00100240 		.word	1073876992
 1389 0068 00240140 		.word	1073816576
 1390              		.cfi_endproc
 1391              	.LFE48:
 1393              		.section	.text.motor_init,"ax",%progbits
 1394              		.align	1
 1395              		.global	motor_init
 1396              		.syntax unified
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 55


 1397              		.code	16
 1398              		.thumb_func
 1400              	motor_init:
 1401              	.LFB43:
  22:Core/Src/motor.c ****     pwm_init();
 1402              		.loc 3 22 23 is_stmt 1 view -0
 1403              		.cfi_startproc
 1404              		@ args = 0, pretend = 0, frame = 0
 1405              		@ frame_needed = 0, uses_anonymous_args = 0
 1406 0000 10B5     		push	{r4, lr}
 1407              	.LCFI7:
 1408              		.cfi_def_cfa_offset 8
 1409              		.cfi_offset 4, -8
 1410              		.cfi_offset 14, -4
  23:Core/Src/motor.c ****     encoder_init();
 1411              		.loc 3 23 5 view .LVU393
 1412 0002 FFF7FEFF 		bl	pwm_init
 1413              	.LVL69:
  24:Core/Src/motor.c ****     ADC_init();
 1414              		.loc 3 24 5 view .LVU394
 1415 0006 FFF7FEFF 		bl	encoder_init
 1416              	.LVL70:
  25:Core/Src/motor.c ****     //for (int i = 0; i < HIST_LEN; i++)
 1417              		.loc 3 25 5 view .LVU395
 1418 000a FFF7FEFF 		bl	ADC_init
 1419              	.LVL71:
  28:Core/Src/motor.c **** 
 1420              		.loc 3 28 1 is_stmt 0 view .LVU396
 1421              		@ sp needed
 1422 000e 10BD     		pop	{r4, pc}
 1423              		.cfi_endproc
 1424              	.LFE43:
 1426              		.section	.text.PI_update,"ax",%progbits
 1427              		.align	1
 1428              		.global	PI_update
 1429              		.syntax unified
 1430              		.code	16
 1431              		.thumb_func
 1433              	PI_update:
 1434              	.LFB49:
 160:Core/Src/motor.c **** 
 161:Core/Src/motor.c **** void PI_update(void) {
 1435              		.loc 3 161 22 is_stmt 1 view -0
 1436              		.cfi_startproc
 1437              		@ args = 0, pretend = 0, frame = 0
 1438              		@ frame_needed = 0, uses_anonymous_args = 0
 1439 0000 10B5     		push	{r4, lr}
 1440              	.LCFI8:
 1441              		.cfi_def_cfa_offset 8
 1442              		.cfi_offset 4, -8
 1443              		.cfi_offset 14, -4
 162:Core/Src/motor.c ****     // Run PI control loop
 163:Core/Src/motor.c ****     error =  target_rpm - motor_speed/4;
 1444              		.loc 3 163 5 view .LVU398
 1445              		.loc 3 163 25 is_stmt 0 view .LVU399
 1446 0002 2A4B     		ldr	r3, .L68
 1447 0004 1B88     		ldrh	r3, [r3]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 56


 1448 0006 1BB2     		sxth	r3, r3
 1449 0008 294A     		ldr	r2, .L68+4
 1450 000a 1188     		ldrh	r1, [r2]
 1451 000c 09B2     		sxth	r1, r1
 1452 000e C817     		asrs	r0, r1, #31
 1453 0010 0322     		movs	r2, #3
 1454 0012 0240     		ands	r2, r0
 1455 0014 5218     		adds	r2, r2, r1
 1456 0016 9210     		asrs	r2, r2, #2
 1457 0018 9B1A     		subs	r3, r3, r2
 1458 001a 1BB2     		sxth	r3, r3
 1459              		.loc 3 163 11 view .LVU400
 1460 001c 254A     		ldr	r2, .L68+8
 1461 001e 1380     		strh	r3, [r2]
 164:Core/Src/motor.c **** 
 165:Core/Src/motor.c ****     error_integral = error_integral + (Ki * error);
 1462              		.loc 3 165 5 is_stmt 1 view .LVU401
 1463              		.loc 3 165 37 is_stmt 0 view .LVU402
 1464 0020 254B     		ldr	r3, .L68+12
 1465 0022 1B78     		ldrb	r3, [r3]
 1466 0024 1088     		ldrh	r0, [r2]
 1467 0026 00B2     		sxth	r0, r0
 1468 0028 244A     		ldr	r2, .L68+16
 1469 002a 1188     		ldrh	r1, [r2]
 1470 002c 09B2     		sxth	r1, r1
 1471 002e 4343     		muls	r3, r0
 1472 0030 5B18     		adds	r3, r3, r1
 1473 0032 1BB2     		sxth	r3, r3
 1474              		.loc 3 165 20 view .LVU403
 1475 0034 1380     		strh	r3, [r2]
 166:Core/Src/motor.c **** 
 167:Core/Src/motor.c ****     if (error_integral < 0) {
 1476              		.loc 3 167 5 is_stmt 1 view .LVU404
 1477              		.loc 3 167 24 is_stmt 0 view .LVU405
 1478 0036 1388     		ldrh	r3, [r2]
 1479 0038 1BB2     		sxth	r3, r3
 1480              		.loc 3 167 8 view .LVU406
 1481 003a 002B     		cmp	r3, #0
 1482 003c 09DB     		blt	.L67
 168:Core/Src/motor.c ****         error_integral = 0;
 169:Core/Src/motor.c ****     }
 170:Core/Src/motor.c **** 
 171:Core/Src/motor.c ****     else if (error_integral > 3200){
 1483              		.loc 3 171 10 is_stmt 1 view .LVU407
 1484              		.loc 3 171 29 is_stmt 0 view .LVU408
 1485 003e 1F4B     		ldr	r3, .L68+16
 1486 0040 1B88     		ldrh	r3, [r3]
 1487 0042 1BB2     		sxth	r3, r3
 1488              		.loc 3 171 13 view .LVU409
 1489 0044 C822     		movs	r2, #200
 1490 0046 1201     		lsls	r2, r2, #4
 1491 0048 9342     		cmp	r3, r2
 1492 004a 05DD     		ble	.L61
 172:Core/Src/motor.c ****         error_integral = 3200;
 1493              		.loc 3 172 9 is_stmt 1 view .LVU410
 1494              		.loc 3 172 24 is_stmt 0 view .LVU411
 1495 004c 1B4B     		ldr	r3, .L68+16
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 57


 1496 004e 1A80     		strh	r2, [r3]
 1497 0050 02E0     		b	.L61
 1498              	.L67:
 168:Core/Src/motor.c ****         error_integral = 0;
 1499              		.loc 3 168 9 is_stmt 1 view .LVU412
 168:Core/Src/motor.c ****         error_integral = 0;
 1500              		.loc 3 168 24 is_stmt 0 view .LVU413
 1501 0052 1300     		movs	r3, r2
 1502 0054 0022     		movs	r2, #0
 1503 0056 1A80     		strh	r2, [r3]
 1504              	.L61:
 173:Core/Src/motor.c ****     }
 174:Core/Src/motor.c ****     
 175:Core/Src/motor.c ****     int16_t output = (Kp * error) + error_integral;
 1505              		.loc 3 175 5 is_stmt 1 view .LVU414
 1506              		.loc 3 175 35 is_stmt 0 view .LVU415
 1507 0058 194B     		ldr	r3, .L68+20
 1508 005a 1B78     		ldrb	r3, [r3]
 1509 005c 154A     		ldr	r2, .L68+8
 1510 005e 1188     		ldrh	r1, [r2]
 1511 0060 09B2     		sxth	r1, r1
 1512 0062 164A     		ldr	r2, .L68+16
 1513 0064 1288     		ldrh	r2, [r2]
 1514 0066 12B2     		sxth	r2, r2
 1515 0068 4B43     		muls	r3, r1
 1516 006a 9B18     		adds	r3, r3, r2
 1517              		.loc 3 175 13 view .LVU416
 1518 006c 1BB2     		sxth	r3, r3
 1519              	.LVL72:
 176:Core/Src/motor.c ****     
 177:Core/Src/motor.c ****      output = output >> 5;
 1520              		.loc 3 177 6 is_stmt 1 view .LVU417
 1521              		.loc 3 177 13 is_stmt 0 view .LVU418
 1522 006e 5A11     		asrs	r2, r3, #5
 1523              	.LVL73:
 178:Core/Src/motor.c **** 
 179:Core/Src/motor.c ****     if (output < 0 || target_rpm == 0) output = 0;
 1524              		.loc 3 179 5 is_stmt 1 view .LVU419
 1525              		.loc 3 179 8 is_stmt 0 view .LVU420
 1526 0070 002B     		cmp	r3, #0
 1527 0072 08DB     		blt	.L64
 1528              		.loc 3 179 34 discriminator 2 view .LVU421
 1529 0074 0D4B     		ldr	r3, .L68
 1530 0076 1C88     		ldrh	r4, [r3]
 1531 0078 24B2     		sxth	r4, r4
 1532              		.loc 3 179 20 discriminator 2 view .LVU422
 1533 007a 002C     		cmp	r4, #0
 1534 007c 04D0     		beq	.L62
 180:Core/Src/motor.c ****     else if (output > 100) output = 100;
 1535              		.loc 3 180 10 is_stmt 1 view .LVU423
 1536              		.loc 3 180 13 is_stmt 0 view .LVU424
 1537 007e 642A     		cmp	r2, #100
 1538 0080 12DC     		bgt	.L65
 177:Core/Src/motor.c **** 
 1539              		.loc 3 177 13 view .LVU425
 1540 0082 1400     		movs	r4, r2
 1541 0084 00E0     		b	.L62
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 58


 1542              	.L64:
 179:Core/Src/motor.c ****     else if (output > 100) output = 100;
 1543              		.loc 3 179 47 discriminator 3 view .LVU426
 1544 0086 0024     		movs	r4, #0
 1545              	.L62:
 1546              	.LVL74:
 181:Core/Src/motor.c ****     pwm_setDutyCycle(output);
 1547              		.loc 3 181 5 is_stmt 1 view .LVU427
 1548 0088 E4B2     		uxtb	r4, r4
 1549              	.LVL75:
 1550              		.loc 3 181 5 is_stmt 0 view .LVU428
 1551 008a 2000     		movs	r0, r4
 1552 008c FFF7FEFF 		bl	pwm_setDutyCycle
 1553              	.LVL76:
 182:Core/Src/motor.c ****     duty_cycle = output;            // For debug viewing
 1554              		.loc 3 182 5 is_stmt 1 view .LVU429
 1555              		.loc 3 182 16 is_stmt 0 view .LVU430
 1556 0090 0C4B     		ldr	r3, .L68+24
 1557 0092 1C70     		strb	r4, [r3]
 183:Core/Src/motor.c **** 
 184:Core/Src/motor.c ****     // Read the ADC value for current monitoring, actual conversion into meaningful units 
 185:Core/Src/motor.c ****     // will be performed by STMStudio
 186:Core/Src/motor.c ****     if(ADC1->ISR & ADC_ISR_EOC) {   // If the ADC has new data for us
 1558              		.loc 3 186 5 is_stmt 1 view .LVU431
 1559              		.loc 3 186 12 is_stmt 0 view .LVU432
 1560 0094 0C4B     		ldr	r3, .L68+28
 1561 0096 1B68     		ldr	r3, [r3]
 1562              		.loc 3 186 7 view .LVU433
 1563 0098 5B07     		lsls	r3, r3, #29
 1564 009a 04D5     		bpl	.L59
 187:Core/Src/motor.c ****         adc_value = ADC1->DR;       // Read the motor current for debug viewing
 1565              		.loc 3 187 9 is_stmt 1 view .LVU434
 1566              		.loc 3 187 25 is_stmt 0 view .LVU435
 1567 009c 0A4B     		ldr	r3, .L68+28
 1568 009e 1B6C     		ldr	r3, [r3, #64]
 1569              		.loc 3 187 19 view .LVU436
 1570 00a0 5BB2     		sxtb	r3, r3
 1571 00a2 0A4A     		ldr	r2, .L68+32
 1572 00a4 1370     		strb	r3, [r2]
 1573              	.L59:
 188:Core/Src/motor.c ****     }
 189:Core/Src/motor.c **** }
 1574              		.loc 3 189 1 view .LVU437
 1575              		@ sp needed
 1576 00a6 10BD     		pop	{r4, pc}
 1577              	.LVL77:
 1578              	.L65:
 180:Core/Src/motor.c ****     pwm_setDutyCycle(output);
 1579              		.loc 3 180 35 discriminator 1 view .LVU438
 1580 00a8 6424     		movs	r4, #100
 1581 00aa EDE7     		b	.L62
 1582              	.L69:
 1583              		.align	2
 1584              	.L68:
 1585 00ac 00000000 		.word	target_rpm
 1586 00b0 00000000 		.word	motor_speed
 1587 00b4 00000000 		.word	error
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 59


 1588 00b8 00000000 		.word	Ki
 1589 00bc 00000000 		.word	error_integral
 1590 00c0 00000000 		.word	Kp
 1591 00c4 00000000 		.word	duty_cycle
 1592 00c8 00240140 		.word	1073816576
 1593 00cc 00000000 		.word	adc_value
 1594              		.cfi_endproc
 1595              	.LFE49:
 1597              		.section	.text.TIM7_IRQHandler,"ax",%progbits
 1598              		.align	1
 1599              		.global	TIM7_IRQHandler
 1600              		.syntax unified
 1601              		.code	16
 1602              		.thumb_func
 1604              	TIM7_IRQHandler:
 1605              	.LFB47:
 112:Core/Src/motor.c ****     /* Calculate the motor speed in raw encoder counts
 1606              		.loc 3 112 28 is_stmt 1 view -0
 1607              		.cfi_startproc
 1608              		@ args = 0, pretend = 0, frame = 0
 1609              		@ frame_needed = 0, uses_anonymous_args = 0
 1610 0000 10B5     		push	{r4, lr}
 1611              	.LCFI9:
 1612              		.cfi_def_cfa_offset 8
 1613              		.cfi_offset 4, -8
 1614              		.cfi_offset 14, -4
 117:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 1615              		.loc 3 117 5 view .LVU440
 117:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 1616              		.loc 3 117 24 is_stmt 0 view .LVU441
 1617 0002 094A     		ldr	r2, .L71
 1618 0004 536A     		ldr	r3, [r2, #36]
 117:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 1619              		.loc 3 117 30 view .LVU442
 1620 0006 0949     		ldr	r1, .L71+4
 1621 0008 8C46     		mov	ip, r1
 1622 000a 6344     		add	r3, r3, ip
 1623 000c 1BB2     		sxth	r3, r3
 117:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 1624              		.loc 3 117 17 view .LVU443
 1625 000e 0849     		ldr	r1, .L71+8
 1626 0010 0B80     		strh	r3, [r1]
 118:Core/Src/motor.c ****     // Call the PI update function
 1627              		.loc 3 118 5 is_stmt 1 view .LVU444
 118:Core/Src/motor.c ****     // Call the PI update function
 1628              		.loc 3 118 15 is_stmt 0 view .LVU445
 1629 0012 084B     		ldr	r3, .L71+12
 1630 0014 5362     		str	r3, [r2, #36]
 120:Core/Src/motor.c **** 
 1631              		.loc 3 120 5 is_stmt 1 view .LVU446
 1632 0016 FFF7FEFF 		bl	PI_update
 1633              	.LVL78:
 137:Core/Src/motor.c **** }
 1634              		.loc 3 137 5 view .LVU447
 137:Core/Src/motor.c **** }
 1635              		.loc 3 137 9 is_stmt 0 view .LVU448
 1636 001a 074A     		ldr	r2, .L71+16
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 60


 1637 001c 1369     		ldr	r3, [r2, #16]
 137:Core/Src/motor.c **** }
 1638              		.loc 3 137 14 view .LVU449
 1639 001e 0121     		movs	r1, #1
 1640 0020 8B43     		bics	r3, r1
 1641 0022 1361     		str	r3, [r2, #16]
 138:Core/Src/motor.c **** 
 1642              		.loc 3 138 1 view .LVU450
 1643              		@ sp needed
 1644 0024 10BD     		pop	{r4, pc}
 1645              	.L72:
 1646 0026 C046     		.align	2
 1647              	.L71:
 1648 0028 00040040 		.word	1073742848
 1649 002c 0180FFFF 		.word	-32767
 1650 0030 00000000 		.word	motor_speed
 1651 0034 FF7F0000 		.word	32767
 1652 0038 00140040 		.word	1073746944
 1653              		.cfi_endproc
 1654              	.LFE47:
 1656              		.section	.text.initLEDs,"ax",%progbits
 1657              		.align	1
 1658              		.global	initLEDs
 1659              		.syntax unified
 1660              		.code	16
 1661              		.thumb_func
 1663              	initLEDs:
 1664              	.LFB54:
 374:Core/Src/main.c **** 	// red LED PC6, blue LED (PC7), green LED PC9, orange LED PC8
 1665              		.loc 1 374 21 is_stmt 1 view -0
 1666              		.cfi_startproc
 1667              		@ args = 0, pretend = 0, frame = 0
 1668              		@ frame_needed = 0, uses_anonymous_args = 0
 1669              		@ link register save eliminated.
 376:Core/Src/main.c ****   // set the MODER, 01: General purpose output mode
 1670              		.loc 1 376 3 view .LVU452
 376:Core/Src/main.c ****   // set the MODER, 01: General purpose output mode
 1671              		.loc 1 376 6 is_stmt 0 view .LVU453
 1672 0000 294A     		ldr	r2, .L74
 1673 0002 5169     		ldr	r1, [r2, #20]
 376:Core/Src/main.c ****   // set the MODER, 01: General purpose output mode
 1674              		.loc 1 376 15 view .LVU454
 1675 0004 8023     		movs	r3, #128
 1676 0006 1B03     		lsls	r3, r3, #12
 1677 0008 0B43     		orrs	r3, r1
 1678 000a 5361     		str	r3, [r2, #20]
 379:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 13);
 1679              		.loc 1 379 2 is_stmt 1 view .LVU455
 379:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 13);
 1680              		.loc 1 379 7 is_stmt 0 view .LVU456
 1681 000c 274B     		ldr	r3, .L74+4
 1682 000e 1968     		ldr	r1, [r3]
 379:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 13);
 1683              		.loc 1 379 15 view .LVU457
 1684 0010 8022     		movs	r2, #128
 1685 0012 5201     		lsls	r2, r2, #5
 1686 0014 0A43     		orrs	r2, r1
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 61


 1687 0016 1A60     		str	r2, [r3]
 380:Core/Src/main.c ****     // init PC7 MODER
 1688              		.loc 1 380 2 is_stmt 1 view .LVU458
 380:Core/Src/main.c ****     // init PC7 MODER
 1689              		.loc 1 380 7 is_stmt 0 view .LVU459
 1690 0018 1A68     		ldr	r2, [r3]
 380:Core/Src/main.c ****     // init PC7 MODER
 1691              		.loc 1 380 15 view .LVU460
 1692 001a 2549     		ldr	r1, .L74+8
 1693 001c 0A40     		ands	r2, r1
 1694 001e 1A60     		str	r2, [r3]
 382:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 15);
 1695              		.loc 1 382 2 is_stmt 1 view .LVU461
 382:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 15);
 1696              		.loc 1 382 7 is_stmt 0 view .LVU462
 1697 0020 1968     		ldr	r1, [r3]
 382:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 15);
 1698              		.loc 1 382 15 view .LVU463
 1699 0022 8022     		movs	r2, #128
 1700 0024 D201     		lsls	r2, r2, #7
 1701 0026 0A43     		orrs	r2, r1
 1702 0028 1A60     		str	r2, [r3]
 383:Core/Src/main.c **** 	// init PC8 MODER
 1703              		.loc 1 383 2 is_stmt 1 view .LVU464
 383:Core/Src/main.c **** 	// init PC8 MODER
 1704              		.loc 1 383 7 is_stmt 0 view .LVU465
 1705 002a 1A68     		ldr	r2, [r3]
 383:Core/Src/main.c **** 	// init PC8 MODER
 1706              		.loc 1 383 15 view .LVU466
 1707 002c 2149     		ldr	r1, .L74+12
 1708 002e 0A40     		ands	r2, r1
 1709 0030 1A60     		str	r2, [r3]
 385:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 17);
 1710              		.loc 1 385 2 is_stmt 1 view .LVU467
 385:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 17);
 1711              		.loc 1 385 7 is_stmt 0 view .LVU468
 1712 0032 1968     		ldr	r1, [r3]
 385:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 17);
 1713              		.loc 1 385 15 view .LVU469
 1714 0034 8022     		movs	r2, #128
 1715 0036 5202     		lsls	r2, r2, #9
 1716 0038 0A43     		orrs	r2, r1
 1717 003a 1A60     		str	r2, [r3]
 386:Core/Src/main.c **** 	// init PC9 MODER
 1718              		.loc 1 386 2 is_stmt 1 view .LVU470
 386:Core/Src/main.c **** 	// init PC9 MODER
 1719              		.loc 1 386 7 is_stmt 0 view .LVU471
 1720 003c 1A68     		ldr	r2, [r3]
 386:Core/Src/main.c **** 	// init PC9 MODER
 1721              		.loc 1 386 15 view .LVU472
 1722 003e 1E49     		ldr	r1, .L74+16
 1723 0040 0A40     		ands	r2, r1
 1724 0042 1A60     		str	r2, [r3]
 388:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 19);
 1725              		.loc 1 388 2 is_stmt 1 view .LVU473
 388:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 19);
 1726              		.loc 1 388 7 is_stmt 0 view .LVU474
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 62


 1727 0044 1968     		ldr	r1, [r3]
 388:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 19);
 1728              		.loc 1 388 15 view .LVU475
 1729 0046 8022     		movs	r2, #128
 1730 0048 D202     		lsls	r2, r2, #11
 1731 004a 0A43     		orrs	r2, r1
 1732 004c 1A60     		str	r2, [r3]
 389:Core/Src/main.c ****   // Set the pins to low speed in the OSPEEDR register
 1733              		.loc 1 389 2 is_stmt 1 view .LVU476
 389:Core/Src/main.c ****   // Set the pins to low speed in the OSPEEDR register
 1734              		.loc 1 389 7 is_stmt 0 view .LVU477
 1735 004e 1A68     		ldr	r2, [r3]
 389:Core/Src/main.c ****   // Set the pins to low speed in the OSPEEDR register
 1736              		.loc 1 389 15 view .LVU478
 1737 0050 1A49     		ldr	r1, .L74+20
 1738 0052 0A40     		ands	r2, r1
 1739 0054 1A60     		str	r2, [r3]
 391:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 14) | (1 << 15));
 1740              		.loc 1 391 2 is_stmt 1 view .LVU479
 391:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 14) | (1 << 15));
 1741              		.loc 1 391 7 is_stmt 0 view .LVU480
 1742 0056 9A68     		ldr	r2, [r3, #8]
 391:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 14) | (1 << 15));
 1743              		.loc 1 391 17 view .LVU481
 1744 0058 1949     		ldr	r1, .L74+24
 1745 005a 0A40     		ands	r2, r1
 1746 005c 9A60     		str	r2, [r3, #8]
 392:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 16) | (1 << 17));
 1747              		.loc 1 392 2 is_stmt 1 view .LVU482
 392:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 16) | (1 << 17));
 1748              		.loc 1 392 7 is_stmt 0 view .LVU483
 1749 005e 9A68     		ldr	r2, [r3, #8]
 392:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 16) | (1 << 17));
 1750              		.loc 1 392 17 view .LVU484
 1751 0060 1849     		ldr	r1, .L74+28
 1752 0062 0A40     		ands	r2, r1
 1753 0064 9A60     		str	r2, [r3, #8]
 393:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 18) | (1 << 19));
 1754              		.loc 1 393 2 is_stmt 1 view .LVU485
 393:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 18) | (1 << 19));
 1755              		.loc 1 393 7 is_stmt 0 view .LVU486
 1756 0066 9A68     		ldr	r2, [r3, #8]
 393:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 18) | (1 << 19));
 1757              		.loc 1 393 17 view .LVU487
 1758 0068 1749     		ldr	r1, .L74+32
 1759 006a 0A40     		ands	r2, r1
 1760 006c 9A60     		str	r2, [r3, #8]
 394:Core/Src/main.c **** 
 1761              		.loc 1 394 2 is_stmt 1 view .LVU488
 394:Core/Src/main.c **** 
 1762              		.loc 1 394 7 is_stmt 0 view .LVU489
 1763 006e 9A68     		ldr	r2, [r3, #8]
 394:Core/Src/main.c **** 
 1764              		.loc 1 394 17 view .LVU490
 1765 0070 1649     		ldr	r1, .L74+36
 1766 0072 0A40     		ands	r2, r1
 1767 0074 9A60     		str	r2, [r3, #8]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 63


 398:Core/Src/main.c **** 	GPIOC->PUPDR &= ~((1 << 12) | (1 << 13) | (1 << 14) | (1 << 15));
 1768              		.loc 1 398 2 is_stmt 1 view .LVU491
 398:Core/Src/main.c **** 	GPIOC->PUPDR &= ~((1 << 12) | (1 << 13) | (1 << 14) | (1 << 15));
 1769              		.loc 1 398 7 is_stmt 0 view .LVU492
 1770 0076 DA68     		ldr	r2, [r3, #12]
 398:Core/Src/main.c **** 	GPIOC->PUPDR &= ~((1 << 12) | (1 << 13) | (1 << 14) | (1 << 15));
 1771              		.loc 1 398 15 view .LVU493
 1772 0078 1549     		ldr	r1, .L74+40
 1773 007a 0A40     		ands	r2, r1
 1774 007c DA60     		str	r2, [r3, #12]
 399:Core/Src/main.c **** 	// set PC6-9 to 0
 1775              		.loc 1 399 2 is_stmt 1 view .LVU494
 399:Core/Src/main.c **** 	// set PC6-9 to 0
 1776              		.loc 1 399 7 is_stmt 0 view .LVU495
 1777 007e DA68     		ldr	r2, [r3, #12]
 399:Core/Src/main.c **** 	// set PC6-9 to 0
 1778              		.loc 1 399 15 view .LVU496
 1779 0080 1449     		ldr	r1, .L74+44
 1780 0082 0A40     		ands	r2, r1
 1781 0084 DA60     		str	r2, [r3, #12]
 401:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 7);
 1782              		.loc 1 401 2 is_stmt 1 view .LVU497
 401:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 7);
 1783              		.loc 1 401 7 is_stmt 0 view .LVU498
 1784 0086 5A69     		ldr	r2, [r3, #20]
 401:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 7);
 1785              		.loc 1 401 13 view .LVU499
 1786 0088 4021     		movs	r1, #64
 1787 008a 8A43     		bics	r2, r1
 1788 008c 5A61     		str	r2, [r3, #20]
 402:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 8);
 1789              		.loc 1 402 2 is_stmt 1 view .LVU500
 402:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 8);
 1790              		.loc 1 402 7 is_stmt 0 view .LVU501
 1791 008e 5A69     		ldr	r2, [r3, #20]
 402:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 8);
 1792              		.loc 1 402 13 view .LVU502
 1793 0090 4031     		adds	r1, r1, #64
 1794 0092 8A43     		bics	r2, r1
 1795 0094 5A61     		str	r2, [r3, #20]
 403:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 9);
 1796              		.loc 1 403 2 is_stmt 1 view .LVU503
 403:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 9);
 1797              		.loc 1 403 7 is_stmt 0 view .LVU504
 1798 0096 5A69     		ldr	r2, [r3, #20]
 403:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 9);
 1799              		.loc 1 403 13 view .LVU505
 1800 0098 0F49     		ldr	r1, .L74+48
 1801 009a 0A40     		ands	r2, r1
 1802 009c 5A61     		str	r2, [r3, #20]
 404:Core/Src/main.c **** }
 1803              		.loc 1 404 2 is_stmt 1 view .LVU506
 404:Core/Src/main.c **** }
 1804              		.loc 1 404 7 is_stmt 0 view .LVU507
 1805 009e 5A69     		ldr	r2, [r3, #20]
 404:Core/Src/main.c **** }
 1806              		.loc 1 404 13 view .LVU508
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 64


 1807 00a0 0E49     		ldr	r1, .L74+52
 1808 00a2 0A40     		ands	r2, r1
 1809 00a4 5A61     		str	r2, [r3, #20]
 405:Core/Src/main.c **** 
 1810              		.loc 1 405 1 view .LVU509
 1811              		@ sp needed
 1812 00a6 7047     		bx	lr
 1813              	.L75:
 1814              		.align	2
 1815              	.L74:
 1816 00a8 00100240 		.word	1073876992
 1817 00ac 00080048 		.word	1207961600
 1818 00b0 FFDFFFFF 		.word	-8193
 1819 00b4 FF7FFFFF 		.word	-32769
 1820 00b8 FFFFFDFF 		.word	-131073
 1821 00bc FFFFF7FF 		.word	-524289
 1822 00c0 FFCFFFFF 		.word	-12289
 1823 00c4 FF3FFFFF 		.word	-49153
 1824 00c8 FFFFFCFF 		.word	-196609
 1825 00cc FFFFF3FF 		.word	-786433
 1826 00d0 FFFFF0FF 		.word	-983041
 1827 00d4 FF0FFFFF 		.word	-61441
 1828 00d8 FFFEFFFF 		.word	-257
 1829 00dc FFFDFFFF 		.word	-513
 1830              		.cfi_endproc
 1831              	.LFE54:
 1833              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1834              		.align	1
 1835              		.global	HAL_TIM_PeriodElapsedCallback
 1836              		.syntax unified
 1837              		.code	16
 1838              		.thumb_func
 1840              	HAL_TIM_PeriodElapsedCallback:
 1841              	.LVL79:
 1842              	.LFB57:
 607:Core/Src/main.c ****   }
 608:Core/Src/main.c **** }
 609:Core/Src/main.c **** 
 610:Core/Src/main.c **** /**
 611:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 612:Core/Src/main.c ****   * @note   This function is called  when TIM6 interrupt took place, inside
 613:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 614:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 615:Core/Src/main.c ****   * @param  htim : TIM handle
 616:Core/Src/main.c ****   * @retval None
 617:Core/Src/main.c ****   */
 618:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 619:Core/Src/main.c **** {
 1843              		.loc 1 619 1 is_stmt 1 view -0
 1844              		.cfi_startproc
 1845              		@ args = 0, pretend = 0, frame = 0
 1846              		@ frame_needed = 0, uses_anonymous_args = 0
 1847              		.loc 1 619 1 is_stmt 0 view .LVU511
 1848 0000 10B5     		push	{r4, lr}
 1849              	.LCFI10:
 1850              		.cfi_def_cfa_offset 8
 1851              		.cfi_offset 4, -8
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 65


 1852              		.cfi_offset 14, -4
 620:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 621:Core/Src/main.c **** 
 622:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 623:Core/Src/main.c ****   if (htim->Instance == TIM6) {
 1853              		.loc 1 623 3 is_stmt 1 view .LVU512
 1854              		.loc 1 623 11 is_stmt 0 view .LVU513
 1855 0002 0268     		ldr	r2, [r0]
 1856              		.loc 1 623 6 view .LVU514
 1857 0004 034B     		ldr	r3, .L79
 1858 0006 9A42     		cmp	r2, r3
 1859 0008 00D0     		beq	.L78
 1860              	.LVL80:
 1861              	.L76:
 624:Core/Src/main.c ****     HAL_IncTick();
 625:Core/Src/main.c ****   }
 626:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 627:Core/Src/main.c **** 
 628:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 629:Core/Src/main.c **** }
 1862              		.loc 1 629 1 view .LVU515
 1863              		@ sp needed
 1864 000a 10BD     		pop	{r4, pc}
 1865              	.LVL81:
 1866              	.L78:
 624:Core/Src/main.c ****     HAL_IncTick();
 1867              		.loc 1 624 5 is_stmt 1 view .LVU516
 1868 000c FFF7FEFF 		bl	HAL_IncTick
 1869              	.LVL82:
 1870              		.loc 1 629 1 is_stmt 0 view .LVU517
 1871 0010 FBE7     		b	.L76
 1872              	.L80:
 1873 0012 C046     		.align	2
 1874              	.L79:
 1875 0014 00100040 		.word	1073745920
 1876              		.cfi_endproc
 1877              	.LFE57:
 1879              		.section	.text.Error_Handler,"ax",%progbits
 1880              		.align	1
 1881              		.global	Error_Handler
 1882              		.syntax unified
 1883              		.code	16
 1884              		.thumb_func
 1886              	Error_Handler:
 1887              	.LFB58:
 630:Core/Src/main.c **** 
 631:Core/Src/main.c **** /**
 632:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 633:Core/Src/main.c ****   * @retval None
 634:Core/Src/main.c ****   */
 635:Core/Src/main.c **** void Error_Handler(void)
 636:Core/Src/main.c **** {
 1888              		.loc 1 636 1 is_stmt 1 view -0
 1889              		.cfi_startproc
 1890              		@ Volatile: function does not return.
 1891              		@ args = 0, pretend = 0, frame = 0
 1892              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 66


 1893              		@ link register save eliminated.
 637:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 638:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 639:Core/Src/main.c ****   __disable_irq();
 1894              		.loc 1 639 3 view .LVU519
 1895              	.LBB26:
 1896              	.LBI26:
 1897              		.file 4 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 67


  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 68


 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1898              		.loc 4 140 27 view .LVU520
 1899              	.LBB27:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1900              		.loc 4 142 3 view .LVU521
 1901              		.syntax divided
 1902              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1903 0000 72B6     		cpsid i
 1904              	@ 0 "" 2
 1905              		.thumb
 1906              		.syntax unified
 1907              	.L82:
 1908              	.LBE27:
 1909              	.LBE26:
 640:Core/Src/main.c ****   while (1)
 1910              		.loc 1 640 3 view .LVU522
 641:Core/Src/main.c ****   {
 642:Core/Src/main.c ****   }
 1911              		.loc 1 642 3 view .LVU523
 640:Core/Src/main.c ****   while (1)
 1912              		.loc 1 640 9 view .LVU524
 1913 0002 FEE7     		b	.L82
 1914              		.cfi_endproc
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 69


 1915              	.LFE58:
 1917              		.section	.text.SystemClock_Config,"ax",%progbits
 1918              		.align	1
 1919              		.global	SystemClock_Config
 1920              		.syntax unified
 1921              		.code	16
 1922              		.thumb_func
 1924              	SystemClock_Config:
 1925              	.LFB51:
 190:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1926              		.loc 1 190 1 view -0
 1927              		.cfi_startproc
 1928              		@ args = 0, pretend = 0, frame = 96
 1929              		@ frame_needed = 0, uses_anonymous_args = 0
 1930 0000 00B5     		push	{lr}
 1931              	.LCFI11:
 1932              		.cfi_def_cfa_offset 4
 1933              		.cfi_offset 14, -4
 1934 0002 99B0     		sub	sp, sp, #100
 1935              	.LCFI12:
 1936              		.cfi_def_cfa_offset 104
 191:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1937              		.loc 1 191 3 view .LVU526
 191:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1938              		.loc 1 191 22 is_stmt 0 view .LVU527
 1939 0004 3422     		movs	r2, #52
 1940 0006 0021     		movs	r1, #0
 1941 0008 0BA8     		add	r0, sp, #44
 1942 000a FFF7FEFF 		bl	memset
 1943              	.LVL83:
 192:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1944              		.loc 1 192 3 is_stmt 1 view .LVU528
 192:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1945              		.loc 1 192 22 is_stmt 0 view .LVU529
 1946 000e 1022     		movs	r2, #16
 1947 0010 0021     		movs	r1, #0
 1948 0012 07A8     		add	r0, sp, #28
 1949 0014 FFF7FEFF 		bl	memset
 1950              	.LVL84:
 193:Core/Src/main.c **** 
 1951              		.loc 1 193 3 is_stmt 1 view .LVU530
 193:Core/Src/main.c **** 
 1952              		.loc 1 193 28 is_stmt 0 view .LVU531
 1953 0018 1C22     		movs	r2, #28
 1954 001a 0021     		movs	r1, #0
 1955 001c 6846     		mov	r0, sp
 1956 001e FFF7FEFF 		bl	memset
 1957              	.LVL85:
 198:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1958              		.loc 1 198 3 is_stmt 1 view .LVU532
 198:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1959              		.loc 1 198 36 is_stmt 0 view .LVU533
 1960 0022 2223     		movs	r3, #34
 1961 0024 0B93     		str	r3, [sp, #44]
 199:Core/Src/main.c ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 1962              		.loc 1 199 3 is_stmt 1 view .LVU534
 199:Core/Src/main.c ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 70


 1963              		.loc 1 199 30 is_stmt 0 view .LVU535
 1964 0026 213B     		subs	r3, r3, #33
 1965 0028 0E93     		str	r3, [sp, #56]
 200:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1966              		.loc 1 200 3 is_stmt 1 view .LVU536
 200:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1967              		.loc 1 200 32 is_stmt 0 view .LVU537
 1968 002a 1393     		str	r3, [sp, #76]
 201:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1969              		.loc 1 201 3 is_stmt 1 view .LVU538
 201:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1970              		.loc 1 201 41 is_stmt 0 view .LVU539
 1971 002c 0F33     		adds	r3, r3, #15
 1972 002e 0F93     		str	r3, [sp, #60]
 202:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1973              		.loc 1 202 3 is_stmt 1 view .LVU540
 202:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1974              		.loc 1 202 34 is_stmt 0 view .LVU541
 1975 0030 0E3B     		subs	r3, r3, #14
 1976 0032 1493     		str	r3, [sp, #80]
 203:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 1977              		.loc 1 203 3 is_stmt 1 view .LVU542
 203:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 1978              		.loc 1 203 35 is_stmt 0 view .LVU543
 1979 0034 8023     		movs	r3, #128
 1980 0036 1B02     		lsls	r3, r3, #8
 1981 0038 1593     		str	r3, [sp, #84]
 204:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 1982              		.loc 1 204 3 is_stmt 1 view .LVU544
 204:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 1983              		.loc 1 204 32 is_stmt 0 view .LVU545
 1984 003a 8023     		movs	r3, #128
 1985 003c 5B03     		lsls	r3, r3, #13
 1986 003e 1693     		str	r3, [sp, #88]
 205:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1987              		.loc 1 205 3 is_stmt 1 view .LVU546
 206:Core/Src/main.c ****   {
 1988              		.loc 1 206 3 view .LVU547
 206:Core/Src/main.c ****   {
 1989              		.loc 1 206 7 is_stmt 0 view .LVU548
 1990 0040 0BA8     		add	r0, sp, #44
 1991 0042 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1992              	.LVL86:
 206:Core/Src/main.c ****   {
 1993              		.loc 1 206 6 discriminator 1 view .LVU549
 1994 0046 0028     		cmp	r0, #0
 1995 0048 18D1     		bne	.L87
 213:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 1996              		.loc 1 213 3 is_stmt 1 view .LVU550
 213:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 1997              		.loc 1 213 31 is_stmt 0 view .LVU551
 1998 004a 0723     		movs	r3, #7
 1999 004c 0793     		str	r3, [sp, #28]
 215:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2000              		.loc 1 215 3 is_stmt 1 view .LVU552
 215:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2001              		.loc 1 215 34 is_stmt 0 view .LVU553
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 71


 2002 004e 053B     		subs	r3, r3, #5
 2003 0050 0893     		str	r3, [sp, #32]
 216:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 2004              		.loc 1 216 3 is_stmt 1 view .LVU554
 216:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 2005              		.loc 1 216 35 is_stmt 0 view .LVU555
 2006 0052 0023     		movs	r3, #0
 2007 0054 0993     		str	r3, [sp, #36]
 217:Core/Src/main.c **** 
 2008              		.loc 1 217 3 is_stmt 1 view .LVU556
 217:Core/Src/main.c **** 
 2009              		.loc 1 217 36 is_stmt 0 view .LVU557
 2010 0056 0A93     		str	r3, [sp, #40]
 219:Core/Src/main.c ****   {
 2011              		.loc 1 219 3 is_stmt 1 view .LVU558
 219:Core/Src/main.c ****   {
 2012              		.loc 1 219 7 is_stmt 0 view .LVU559
 2013 0058 0121     		movs	r1, #1
 2014 005a 07A8     		add	r0, sp, #28
 2015 005c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2016              	.LVL87:
 219:Core/Src/main.c ****   {
 2017              		.loc 1 219 6 discriminator 1 view .LVU560
 2018 0060 0028     		cmp	r0, #0
 2019 0062 0DD1     		bne	.L88
 223:Core/Src/main.c ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 2020              		.loc 1 223 3 is_stmt 1 view .LVU561
 223:Core/Src/main.c ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 2021              		.loc 1 223 38 is_stmt 0 view .LVU562
 2022 0064 8023     		movs	r3, #128
 2023 0066 9B02     		lsls	r3, r3, #10
 2024 0068 0093     		str	r3, [sp]
 224:Core/Src/main.c **** 
 2025              		.loc 1 224 3 is_stmt 1 view .LVU563
 224:Core/Src/main.c **** 
 2026              		.loc 1 224 35 is_stmt 0 view .LVU564
 2027 006a 0023     		movs	r3, #0
 2028 006c 0693     		str	r3, [sp, #24]
 226:Core/Src/main.c ****   {
 2029              		.loc 1 226 3 is_stmt 1 view .LVU565
 226:Core/Src/main.c ****   {
 2030              		.loc 1 226 7 is_stmt 0 view .LVU566
 2031 006e 6846     		mov	r0, sp
 2032 0070 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 2033              	.LVL88:
 226:Core/Src/main.c ****   {
 2034              		.loc 1 226 6 discriminator 1 view .LVU567
 2035 0074 0028     		cmp	r0, #0
 2036 0076 05D1     		bne	.L89
 230:Core/Src/main.c **** 
 2037              		.loc 1 230 1 view .LVU568
 2038 0078 19B0     		add	sp, sp, #100
 2039              		@ sp needed
 2040 007a 00BD     		pop	{pc}
 2041              	.L87:
 208:Core/Src/main.c ****   }
 2042              		.loc 1 208 5 is_stmt 1 view .LVU569
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 72


 2043 007c FFF7FEFF 		bl	Error_Handler
 2044              	.LVL89:
 2045              	.L88:
 221:Core/Src/main.c ****   }
 2046              		.loc 1 221 5 view .LVU570
 2047 0080 FFF7FEFF 		bl	Error_Handler
 2048              	.LVL90:
 2049              	.L89:
 228:Core/Src/main.c ****   }
 2050              		.loc 1 228 5 view .LVU571
 2051 0084 FFF7FEFF 		bl	Error_Handler
 2052              	.LVL91:
 2053              		.cfi_endproc
 2054              	.LFE51:
 2056              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 2057              		.align	2
 2058              	.LC55:
 2059 0000 4661696C 		.ascii	"Fail to init sync resources!\012\000"
 2059      20746F20 
 2059      696E6974 
 2059      2073796E 
 2059      63207265 
 2060              		.section	.text.main,"ax",%progbits
 2061              		.align	1
 2062              		.global	main
 2063              		.syntax unified
 2064              		.code	16
 2065              		.thumb_func
 2067              	main:
 2068              	.LFB50:
 120:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 2069              		.loc 1 120 1 view -0
 2070              		.cfi_startproc
 2071              		@ args = 0, pretend = 0, frame = 0
 2072              		@ frame_needed = 0, uses_anonymous_args = 0
 2073 0000 10B5     		push	{r4, lr}
 2074              	.LCFI13:
 2075              		.cfi_def_cfa_offset 8
 2076              		.cfi_offset 4, -8
 2077              		.cfi_offset 14, -4
 122:Core/Src/main.c **** 
 2078              		.loc 1 122 3 view .LVU573
 2079 0002 FFF7FEFF 		bl	HAL_Init
 2080              	.LVL92:
 125:Core/Src/main.c **** 
 2081              		.loc 1 125 3 view .LVU574
 2082 0006 FFF7FEFF 		bl	SystemClock_Config
 2083              	.LVL93:
 128:Core/Src/main.c ****   initUsart3();
 2084              		.loc 1 128 3 view .LVU575
 2085 000a FFF7FEFF 		bl	MX_GPIO_Init
 2086              	.LVL94:
 129:Core/Src/main.c ****   initLEDs();
 2087              		.loc 1 129 3 view .LVU576
 2088 000e FFF7FEFF 		bl	initUsart3
 2089              	.LVL95:
 130:Core/Src/main.c ****   motor_init();
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 73


 2090              		.loc 1 130 3 view .LVU577
 2091 0012 FFF7FEFF 		bl	initLEDs
 2092              	.LVL96:
 131:Core/Src/main.c **** 
 2093              		.loc 1 131 3 view .LVU578
 2094 0016 FFF7FEFF 		bl	motor_init
 2095              	.LVL97:
 134:Core/Src/main.c **** 
 2096              		.loc 1 134 3 view .LVU579
 2097 001a FFF7FEFF 		bl	osKernelInitialize
 2098              	.LVL98:
 151:Core/Src/main.c ****   /* creation of LEDTask */
 2099              		.loc 1 151 3 view .LVU580
 151:Core/Src/main.c ****   /* creation of LEDTask */
 2100              		.loc 1 151 22 is_stmt 0 view .LVU581
 2101 001e 134A     		ldr	r2, .L94
 2102 0020 1348     		ldr	r0, .L94+4
 2103 0022 0021     		movs	r1, #0
 2104 0024 FFF7FEFF 		bl	osThreadNew
 2105              	.LVL99:
 151:Core/Src/main.c ****   /* creation of LEDTask */
 2106              		.loc 1 151 20 discriminator 1 view .LVU582
 2107 0028 124B     		ldr	r3, .L94+8
 2108 002a 1860     		str	r0, [r3]
 153:Core/Src/main.c ****   /* creation of motorTask */
 2109              		.loc 1 153 3 is_stmt 1 view .LVU583
 153:Core/Src/main.c ****   /* creation of motorTask */
 2110              		.loc 1 153 19 is_stmt 0 view .LVU584
 2111 002c 124A     		ldr	r2, .L94+12
 2112 002e 1348     		ldr	r0, .L94+16
 2113 0030 0021     		movs	r1, #0
 2114 0032 FFF7FEFF 		bl	osThreadNew
 2115              	.LVL100:
 153:Core/Src/main.c ****   /* creation of motorTask */
 2116              		.loc 1 153 17 discriminator 1 view .LVU585
 2117 0036 124B     		ldr	r3, .L94+20
 2118 0038 1860     		str	r0, [r3]
 155:Core/Src/main.c ****   /* creation of UARTTask */
 2119              		.loc 1 155 3 is_stmt 1 view .LVU586
 155:Core/Src/main.c ****   /* creation of UARTTask */
 2120              		.loc 1 155 21 is_stmt 0 view .LVU587
 2121 003a 124A     		ldr	r2, .L94+24
 2122 003c 1248     		ldr	r0, .L94+28
 2123 003e 0021     		movs	r1, #0
 2124 0040 FFF7FEFF 		bl	osThreadNew
 2125              	.LVL101:
 155:Core/Src/main.c ****   /* creation of UARTTask */
 2126              		.loc 1 155 19 discriminator 1 view .LVU588
 2127 0044 114B     		ldr	r3, .L94+32
 2128 0046 1860     		str	r0, [r3]
 157:Core/Src/main.c **** 
 2129              		.loc 1 157 3 is_stmt 1 view .LVU589
 157:Core/Src/main.c **** 
 2130              		.loc 1 157 20 is_stmt 0 view .LVU590
 2131 0048 114A     		ldr	r2, .L94+36
 2132 004a 1248     		ldr	r0, .L94+40
 2133 004c 0021     		movs	r1, #0
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 74


 2134 004e FFF7FEFF 		bl	osThreadNew
 2135              	.LVL102:
 157:Core/Src/main.c **** 
 2136              		.loc 1 157 18 discriminator 1 view .LVU591
 2137 0052 114B     		ldr	r3, .L94+44
 2138 0054 1860     		str	r0, [r3]
 161:Core/Src/main.c ****   if (status != 0) {
 2139              		.loc 1 161 3 is_stmt 1 view .LVU592
 161:Core/Src/main.c ****   if (status != 0) {
 2140              		.loc 1 161 20 is_stmt 0 view .LVU593
 2141 0056 FFF7FEFF 		bl	syncInit
 2142              	.LVL103:
 162:Core/Src/main.c ****     transmitCharArray("Fail to init sync resources!\n");
 2143              		.loc 1 162 3 is_stmt 1 view .LVU594
 162:Core/Src/main.c ****     transmitCharArray("Fail to init sync resources!\n");
 2144              		.loc 1 162 6 is_stmt 0 view .LVU595
 2145 005a 0028     		cmp	r0, #0
 2146 005c 02D1     		bne	.L93
 2147              	.LVL104:
 2148              	.L91:
 175:Core/Src/main.c **** 
 2149              		.loc 1 175 3 is_stmt 1 view .LVU596
 2150 005e FFF7FEFF 		bl	osKernelStart
 2151              	.LVL105:
 2152              	.L92:
 180:Core/Src/main.c ****   {
 2153              		.loc 1 180 3 view .LVU597
 182:Core/Src/main.c **** }
 2154              		.loc 1 182 3 view .LVU598
 180:Core/Src/main.c ****   {
 2155              		.loc 1 180 9 view .LVU599
 2156 0062 FEE7     		b	.L92
 2157              	.LVL106:
 2158              	.L93:
 163:Core/Src/main.c ****   }
 2159              		.loc 1 163 5 view .LVU600
 2160 0064 0D48     		ldr	r0, .L94+48
 2161              	.LVL107:
 163:Core/Src/main.c ****   }
 2162              		.loc 1 163 5 is_stmt 0 view .LVU601
 2163 0066 FFF7FEFF 		bl	transmitCharArray
 2164              	.LVL108:
 2165 006a F8E7     		b	.L91
 2166              	.L95:
 2167              		.align	2
 2168              	.L94:
 2169 006c 00000000 		.word	routerTask_attributes
 2170 0070 00000000 		.word	StartRouterTask
 2171 0074 00000000 		.word	routerTaskHandle
 2172 0078 00000000 		.word	LEDTask_attributes
 2173 007c 00000000 		.word	StartLEDTask
 2174 0080 00000000 		.word	LEDTaskHandle
 2175 0084 00000000 		.word	motorTask_attributes
 2176 0088 00000000 		.word	StartMotorTask
 2177 008c 00000000 		.word	motorTaskHandle
 2178 0090 00000000 		.word	UARTTask_attributes
 2179 0094 00000000 		.word	StartParseUartTask
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 75


 2180 0098 00000000 		.word	UARTTaskHandle
 2181 009c 00000000 		.word	.LC55
 2182              		.cfi_endproc
 2183              	.LFE50:
 2185              		.global	motorTask_attributes
 2186              		.section	.rodata.str1.4,"aMS",%progbits,1
 2187              		.align	2
 2188              	.LC57:
 2189 0000 6D6F746F 		.ascii	"motorTask\000"
 2189      72546173 
 2189      6B00
 2190              		.section	.rodata.motorTask_attributes,"a"
 2191              		.align	2
 2194              	motorTask_attributes:
 2195 0000 00000000 		.word	.LC57
 2196 0004 00000000 		.space	16
 2196      00000000 
 2196      00000000 
 2196      00000000 
 2197 0014 00020000 		.word	512
 2198 0018 18000000 		.word	24
 2199 001c 00000000 		.space	8
 2199      00000000 
 2200              		.global	motorTaskHandle
 2201              		.section	.bss.motorTaskHandle,"aw",%nobits
 2202              		.align	2
 2205              	motorTaskHandle:
 2206 0000 00000000 		.space	4
 2207              		.global	LEDTask_attributes
 2208              		.section	.rodata.str1.4
 2209 000a 0000     		.align	2
 2210              	.LC58:
 2211 000c 4C454454 		.ascii	"LEDTask\000"
 2211      61736B00 
 2212              		.section	.rodata.LEDTask_attributes,"a"
 2213              		.align	2
 2216              	LEDTask_attributes:
 2217 0000 0C000000 		.word	.LC58
 2218 0004 00000000 		.space	16
 2218      00000000 
 2218      00000000 
 2218      00000000 
 2219 0014 00020000 		.word	512
 2220 0018 18000000 		.word	24
 2221 001c 00000000 		.space	8
 2221      00000000 
 2222              		.global	LEDTaskHandle
 2223              		.section	.bss.LEDTaskHandle,"aw",%nobits
 2224              		.align	2
 2227              	LEDTaskHandle:
 2228 0000 00000000 		.space	4
 2229              		.global	routerTask_attributes
 2230              		.section	.rodata.str1.4
 2231              		.align	2
 2232              	.LC59:
 2233 0014 726F7574 		.ascii	"routerTask\000"
 2233      65725461 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 76


 2233      736B00
 2234              		.section	.rodata.routerTask_attributes,"a"
 2235              		.align	2
 2238              	routerTask_attributes:
 2239 0000 14000000 		.word	.LC59
 2240 0004 00000000 		.space	16
 2240      00000000 
 2240      00000000 
 2240      00000000 
 2241 0014 00020000 		.word	512
 2242 0018 18000000 		.word	24
 2243 001c 00000000 		.space	8
 2243      00000000 
 2244              		.global	routerTaskHandle
 2245              		.section	.bss.routerTaskHandle,"aw",%nobits
 2246              		.align	2
 2249              	routerTaskHandle:
 2250 0000 00000000 		.space	4
 2251              		.global	hpcd_USB_FS
 2252              		.section	.bss.hpcd_USB_FS,"aw",%nobits
 2253              		.align	2
 2256              	hpcd_USB_FS:
 2257 0000 00000000 		.space	756
 2257      00000000 
 2257      00000000 
 2257      00000000 
 2257      00000000 
 2258              		.global	target_rpm
 2259              		.section	.bss.target_rpm,"aw",%nobits
 2260              		.align	1
 2263              	target_rpm:
 2264 0000 0000     		.space	2
 2265              		.global	debouncer
 2266              		.section	.bss.debouncer,"aw",%nobits
 2267              		.align	2
 2270              	debouncer:
 2271 0000 00000000 		.space	4
 2272              		.global	htsc
 2273              		.section	.bss.htsc,"aw",%nobits
 2274              		.align	2
 2277              	htsc:
 2278 0000 00000000 		.space	68
 2278      00000000 
 2278      00000000 
 2278      00000000 
 2278      00000000 
 2279              		.global	hspi2
 2280              		.section	.bss.hspi2,"aw",%nobits
 2281              		.align	2
 2284              	hspi2:
 2285 0000 00000000 		.space	100
 2285      00000000 
 2285      00000000 
 2285      00000000 
 2285      00000000 
 2286              		.global	hi2c2
 2287              		.section	.bss.hi2c2,"aw",%nobits
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 77


 2288              		.align	2
 2291              	hi2c2:
 2292 0000 00000000 		.space	84
 2292      00000000 
 2292      00000000 
 2292      00000000 
 2292      00000000 
 2293              		.global	commandMotor
 2294              		.section	.bss.commandMotor,"aw",%nobits
 2295              		.align	1
 2298              	commandMotor:
 2299 0000 0000     		.space	2
 2300              		.global	commandLED
 2301              		.section	.bss.commandLED,"aw",%nobits
 2302              		.align	1
 2305              	commandLED:
 2306 0000 0000     		.space	2
 2307              		.global	Ki
 2308              		.section	.data.Ki,"aw"
 2311              	Ki:
 2312 0000 01       		.byte	1
 2313              		.global	Kp
 2314              		.section	.data.Kp,"aw"
 2317              	Kp:
 2318 0000 01       		.byte	1
 2319              		.global	error
 2320              		.section	.bss.error,"aw",%nobits
 2321              		.align	1
 2324              	error:
 2325 0000 0000     		.space	2
 2326              		.global	adc_value
 2327              		.section	.bss.adc_value,"aw",%nobits
 2330              	adc_value:
 2331 0000 00       		.space	1
 2332              		.global	motor_speed
 2333              		.section	.bss.motor_speed,"aw",%nobits
 2334              		.align	1
 2337              	motor_speed:
 2338 0000 0000     		.space	2
 2339              		.global	duty_cycle
 2340              		.section	.bss.duty_cycle,"aw",%nobits
 2343              	duty_cycle:
 2344 0000 00       		.space	1
 2345              		.global	error_integral
 2346              		.section	.bss.error_integral,"aw",%nobits
 2347              		.align	1
 2350              	error_integral:
 2351 0000 0000     		.space	2
 2352              		.section	.rodata
 2353              		.align	2
 2354              		.set	.LANCHOR0,. + 0
 2355              	.LC0:
 2356 0000 40000000 		.word	64
 2357 0004 00020000 		.word	512
 2358 0008 80000000 		.word	128
 2359 000c 00010000 		.word	256
 2360 0010 C0030000 		.word	960
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 78


 2361              		.text
 2362              	.Letext0:
 2363              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 2364              		.file 6 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 2365              		.file 7 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 2366              		.file 8 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 2367              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2368              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 2369              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 2370              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 2371              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 2372              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c.h"
 2373              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usb.h"
 2374              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_pcd.h"
 2375              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_spi.h"
 2376              		.file 18 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 2377              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tsc.h"
 2378              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 2379              		.file 21 "Core/Inc/cmdQueue.h"
 2380              		.file 22 "Core/Inc/uartParser.h"
 2381              		.file 23 "Core/Inc/sync.h"
 2382              		.file 24 "Core/Inc/motor.h"
 2383              		.file 25 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 2384              		.file 26 "<built-in>"
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 79


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:19     .text.MX_GPIO_Init:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:166    .text.MX_GPIO_Init:00000090 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:173    .rodata.StartMotorTask.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:180    .text.StartMotorTask:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:186    .text.StartMotorTask:00000000 StartMotorTask
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:362    .text.StartMotorTask:000000b4 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2298   .bss.commandMotor:00000000 commandMotor
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2263   .bss.target_rpm:00000000 target_rpm
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:376    .rodata.StartRouterTask.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:386    .text.StartRouterTask:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:392    .text.StartRouterTask:00000000 StartRouterTask
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:540    .text.StartRouterTask:000000b4 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2305   .bss.commandLED:00000000 commandLED
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:557    .rodata.StartLEDTask.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:565    .text.StartLEDTask:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:571    .text.StartLEDTask:00000000 StartLEDTask
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:937    .text.StartLEDTask:00000180 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:953    .text.pwm_init:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:959    .text.pwm_init:00000000 pwm_init
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1085   .text.pwm_init:00000084 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1095   .text.pwm_setDutyCycle:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1101   .text.pwm_setDutyCycle:00000000 pwm_setDutyCycle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1138   .text.pwm_setDutyCycle:00000018 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1143   .text.encoder_init:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1149   .text.encoder_init:00000000 encoder_init
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1274   .text.encoder_init:00000080 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1286   .text.ADC_init:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1292   .text.ADC_init:00000000 ADC_init
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1388   .text.ADC_init:00000064 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1394   .text.motor_init:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1400   .text.motor_init:00000000 motor_init
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1427   .text.PI_update:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1433   .text.PI_update:00000000 PI_update
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1585   .text.PI_update:000000ac $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2337   .bss.motor_speed:00000000 motor_speed
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2324   .bss.error:00000000 error
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2311   .data.Ki:00000000 Ki
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2350   .bss.error_integral:00000000 error_integral
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2317   .data.Kp:00000000 Kp
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2343   .bss.duty_cycle:00000000 duty_cycle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2330   .bss.adc_value:00000000 adc_value
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1598   .text.TIM7_IRQHandler:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1604   .text.TIM7_IRQHandler:00000000 TIM7_IRQHandler
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1648   .text.TIM7_IRQHandler:00000028 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1657   .text.initLEDs:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1663   .text.initLEDs:00000000 initLEDs
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1816   .text.initLEDs:000000a8 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1834   .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1840   .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1875   .text.HAL_TIM_PeriodElapsedCallback:00000014 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1880   .text.Error_Handler:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1886   .text.Error_Handler:00000000 Error_Handler
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1918   .text.SystemClock_Config:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:1924   .text.SystemClock_Config:00000000 SystemClock_Config
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 80


/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2057   .rodata.main.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2061   .text.main:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2067   .text.main:00000000 main
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2169   .text.main:0000006c $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2238   .rodata.routerTask_attributes:00000000 routerTask_attributes
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2249   .bss.routerTaskHandle:00000000 routerTaskHandle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2216   .rodata.LEDTask_attributes:00000000 LEDTask_attributes
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2227   .bss.LEDTaskHandle:00000000 LEDTaskHandle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2194   .rodata.motorTask_attributes:00000000 motorTask_attributes
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2205   .bss.motorTaskHandle:00000000 motorTaskHandle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2187   .rodata.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2191   .rodata.motorTask_attributes:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2202   .bss.motorTaskHandle:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2213   .rodata.LEDTask_attributes:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2224   .bss.LEDTaskHandle:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2235   .rodata.routerTask_attributes:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2246   .bss.routerTaskHandle:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2256   .bss.hpcd_USB_FS:00000000 hpcd_USB_FS
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2253   .bss.hpcd_USB_FS:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2260   .bss.target_rpm:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2270   .bss.debouncer:00000000 debouncer
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2267   .bss.debouncer:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2277   .bss.htsc:00000000 htsc
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2274   .bss.htsc:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2284   .bss.hspi2:00000000 hspi2
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2281   .bss.hspi2:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2291   .bss.hi2c2:00000000 hi2c2
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2288   .bss.hi2c2:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2295   .bss.commandMotor:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2302   .bss.commandLED:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2321   .bss.error:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2331   .bss.adc_value:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2334   .bss.motor_speed:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2344   .bss.duty_cycle:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2347   .bss.error_integral:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s:2353   .rodata:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
osSemaphoreAcquire
osSemaphoreRelease
transmitCharArray
workerStatusMutex
motorWorkerBusy
motorRouterSem01
queuePopItemByOpcode
isQueueEmpty
cmdQueue
countSem01
ledWorkerBusy
ledRouterSem01
__aeabi_idiv
osDelay
__aeabi_uidiv
HAL_IncTick
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccsCz1WJ.s 			page 81


HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
initUsart3
osKernelInitialize
osThreadNew
syncInit
osKernelStart
UARTTask_attributes
StartParseUartTask
UARTTaskHandle
