ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB52:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "cmsis_os.h"
  22:Core/Src/main.c **** #include "stm32f072xb.h"
  23:Core/Src/main.c **** #include "motor.h"
  24:Core/Src/main.c **** #include "motor.c"
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** //Global variables
  27:Core/Src/main.c **** volatile uint16_t commandLED = 0;
  28:Core/Src/main.c **** volatile uint16_t commandMotor = 0;
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  31:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* USER CODE END Includes */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 2


  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  36:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* USER CODE END PTD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  41:Core/Src/main.c **** /* USER CODE BEGIN PD */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* USER CODE END PD */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  46:Core/Src/main.c **** /* USER CODE BEGIN PM */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE END PM */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  51:Core/Src/main.c **** I2C_HandleTypeDef hi2c2;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** SPI_HandleTypeDef hspi2;
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** TSC_HandleTypeDef htsc;
  56:Core/Src/main.c **** /* For motor */
  57:Core/Src/main.c **** volatile uint32_t debouncer; 
  58:Core/Src/main.c **** // The speed we are setting the motor to (3rd and 4th digits)
  59:Core/Src/main.c **** volatile int16_t target_rpm = 0;
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** PCD_HandleTypeDef hpcd_USB_FS;
  62:Core/Src/main.c **** /* Definitions for task router */
  63:Core/Src/main.c **** osThreadId_t routerTaskHandle;
  64:Core/Src/main.c **** const osThreadAttr_t routerTask_attributes = {
  65:Core/Src/main.c ****   .name = "routerTask",
  66:Core/Src/main.c ****   .stack_size = 128 * 4,
  67:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
  68:Core/Src/main.c **** };
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* Definitions for LED worker task */
  71:Core/Src/main.c **** osThreadId_t LEDTaskHandle;
  72:Core/Src/main.c **** const osThreadAttr_t LEDTask_attributes = {
  73:Core/Src/main.c ****   .name = "LEDTask",
  74:Core/Src/main.c ****   .stack_size = 128 * 4,
  75:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
  76:Core/Src/main.c **** };
  77:Core/Src/main.c **** 
  78:Core/Src/main.c **** /* Definitions for Motor worker task */
  79:Core/Src/main.c **** osThreadId_t motorTaskHandle;
  80:Core/Src/main.c **** const osThreadAttr_t motorTask_attributes = {
  81:Core/Src/main.c ****   .name = "motorTask",
  82:Core/Src/main.c ****   .stack_size = 128 * 4,
  83:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
  84:Core/Src/main.c **** };
  85:Core/Src/main.c **** 
  86:Core/Src/main.c **** 
  87:Core/Src/main.c **** /* USER CODE BEGIN PV */
  88:Core/Src/main.c **** 
  89:Core/Src/main.c **** /* USER CODE END PV */
  90:Core/Src/main.c **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 3


  91:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  92:Core/Src/main.c **** void SystemClock_Config(void);
  93:Core/Src/main.c **** static void MX_GPIO_Init(void);
  94:Core/Src/main.c **** static void MX_I2C2_Init(void);
  95:Core/Src/main.c **** static void MX_SPI2_Init(void);
  96:Core/Src/main.c **** static void MX_TSC_Init(void);
  97:Core/Src/main.c **** static void MX_USB_PCD_Init(void);
  98:Core/Src/main.c **** void StartRouterTask(void *argument);
  99:Core/Src/main.c **** void StartMotorTask(void *argument);
 100:Core/Src/main.c **** void StartLEDTask(void *argument);
 101:Core/Src/main.c **** void initLEDs(void);
 102:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c **** /* USER CODE END PFP */
 105:Core/Src/main.c **** 
 106:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 107:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c **** /* USER CODE END 0 */
 110:Core/Src/main.c **** 
 111:Core/Src/main.c **** /**
 112:Core/Src/main.c ****   * @brief  The application entry point.
 113:Core/Src/main.c ****   * @retval int
 114:Core/Src/main.c ****   */
 115:Core/Src/main.c **** int main(void)
 116:Core/Src/main.c **** {
 117:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 118:Core/Src/main.c ****   HAL_Init();
 119:Core/Src/main.c **** 
 120:Core/Src/main.c ****   /* Configure the system clock */
 121:Core/Src/main.c ****   SystemClock_Config();
 122:Core/Src/main.c **** 
 123:Core/Src/main.c ****   /* Initialize all configured peripherals */
 124:Core/Src/main.c ****   MX_GPIO_Init();
 125:Core/Src/main.c ****   initUsart3();
 126:Core/Src/main.c ****   initLEDs();
 127:Core/Src/main.c ****   motor_init();
 128:Core/Src/main.c **** 
 129:Core/Src/main.c ****   /* Init scheduler */
 130:Core/Src/main.c ****   osKernelInitialize();
 131:Core/Src/main.c **** 
 132:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 133:Core/Src/main.c ****   /* add mutexes, ... */
 134:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 137:Core/Src/main.c ****   /* add semaphores, ... */
 138:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 141:Core/Src/main.c ****   /* add queues, ... */
 142:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 143:Core/Src/main.c **** 
 144:Core/Src/main.c ****   /* Create the thread(s) */
 145:Core/Src/main.c ****   // comment thread temprariely.
 146:Core/Src/main.c ****   /* creation of routerTask */
 147:Core/Src/main.c ****   routerTaskHandle = osThreadNew(StartRouterTask, NULL, &routerTask_attributes);
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 4


 148:Core/Src/main.c ****   /* creation of LEDTask */
 149:Core/Src/main.c ****   LEDTaskHandle = osThreadNew(StartLEDTask, NULL, &LEDTask_attributes);
 150:Core/Src/main.c ****   /* creation of motorTask */
 151:Core/Src/main.c ****   motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 152:Core/Src/main.c ****   /* creation of UARTTask */
 153:Core/Src/main.c ****   UARTTaskHandle = osThreadNew(StartParseUartTask, NULL, &UARTTask_attributes);
 154:Core/Src/main.c **** 
 155:Core/Src/main.c ****   // init the resources for the synchronization of router
 156:Core/Src/main.c ****   // uart parser, led and motor threads
 157:Core/Src/main.c ****   uint8_t status = syncInit();
 158:Core/Src/main.c ****   if (status != 0) {
 159:Core/Src/main.c ****     transmitCharArray("Fail to init sync resources!\n");
 160:Core/Src/main.c ****   }
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 163:Core/Src/main.c ****   /* add threads, ... */
 164:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_EVENTS */
 167:Core/Src/main.c ****   /* add events, ... */
 168:Core/Src/main.c ****   /* USER CODE END RTOS_EVENTS */
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   /* Start scheduler */
 171:Core/Src/main.c ****   osKernelStart();
 172:Core/Src/main.c **** 
 173:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****   /* Infinite loop */
 176:Core/Src/main.c ****   while (1)
 177:Core/Src/main.c ****   {
 178:Core/Src/main.c ****   }
 179:Core/Src/main.c **** }
 180:Core/Src/main.c **** 
 181:Core/Src/main.c **** /**
 182:Core/Src/main.c ****   * @brief System Clock Configuration
 183:Core/Src/main.c ****   * @retval None
 184:Core/Src/main.c ****   */
 185:Core/Src/main.c **** void SystemClock_Config(void)
 186:Core/Src/main.c **** {
 187:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 188:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 189:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 192:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 193:Core/Src/main.c ****   */
 194:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 195:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 196:Core/Src/main.c ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 197:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 198:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 199:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 200:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 201:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 202:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 203:Core/Src/main.c ****   {
 204:Core/Src/main.c ****     Error_Handler();
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 5


 205:Core/Src/main.c ****   }
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 208:Core/Src/main.c ****   */
 209:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 210:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 211:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 212:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 213:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 216:Core/Src/main.c ****   {
 217:Core/Src/main.c ****     Error_Handler();
 218:Core/Src/main.c ****   }
 219:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 220:Core/Src/main.c ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 221:Core/Src/main.c **** 
 222:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 223:Core/Src/main.c ****   {
 224:Core/Src/main.c ****     Error_Handler();
 225:Core/Src/main.c ****   }
 226:Core/Src/main.c **** }
 227:Core/Src/main.c **** 
 228:Core/Src/main.c **** /**
 229:Core/Src/main.c ****   * @brief GPIO Initialization Function
 230:Core/Src/main.c ****   * @param None
 231:Core/Src/main.c ****   * @retval None
 232:Core/Src/main.c ****   */
 233:Core/Src/main.c **** static void MX_GPIO_Init(void)
 234:Core/Src/main.c **** {
  26              		.loc 1 234 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 20
  33              		.cfi_offset 4, -20
  34              		.cfi_offset 5, -16
  35              		.cfi_offset 6, -12
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 89B0     		sub	sp, sp, #36
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 235:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 235 3 view .LVU1
  42              		.loc 1 235 20 is_stmt 0 view .LVU2
  43 0004 1422     		movs	r2, #20
  44 0006 0021     		movs	r1, #0
  45 0008 03A8     		add	r0, sp, #12
  46 000a FFF7FEFF 		bl	memset
  47              	.LVL0:
 236:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 237:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 238:Core/Src/main.c **** 
 239:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 6


 240:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 240 3 is_stmt 1 view .LVU3
  49              	.LBB22:
  50              		.loc 1 240 3 view .LVU4
  51              		.loc 1 240 3 view .LVU5
  52 000e 204B     		ldr	r3, .L2
  53 0010 5A69     		ldr	r2, [r3, #20]
  54 0012 8021     		movs	r1, #128
  55 0014 0903     		lsls	r1, r1, #12
  56 0016 0A43     		orrs	r2, r1
  57 0018 5A61     		str	r2, [r3, #20]
  58              		.loc 1 240 3 view .LVU6
  59 001a 5A69     		ldr	r2, [r3, #20]
  60 001c 0A40     		ands	r2, r1
  61 001e 0092     		str	r2, [sp]
  62              		.loc 1 240 3 view .LVU7
  63 0020 009A     		ldr	r2, [sp]
  64              	.LBE22:
  65              		.loc 1 240 3 view .LVU8
 241:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  66              		.loc 1 241 3 view .LVU9
  67              	.LBB23:
  68              		.loc 1 241 3 view .LVU10
  69              		.loc 1 241 3 view .LVU11
  70 0022 5A69     		ldr	r2, [r3, #20]
  71 0024 8021     		movs	r1, #128
  72 0026 8902     		lsls	r1, r1, #10
  73 0028 0A43     		orrs	r2, r1
  74 002a 5A61     		str	r2, [r3, #20]
  75              		.loc 1 241 3 view .LVU12
  76 002c 5A69     		ldr	r2, [r3, #20]
  77 002e 0A40     		ands	r2, r1
  78 0030 0192     		str	r2, [sp, #4]
  79              		.loc 1 241 3 view .LVU13
  80 0032 019A     		ldr	r2, [sp, #4]
  81              	.LBE23:
  82              		.loc 1 241 3 view .LVU14
 242:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  83              		.loc 1 242 3 view .LVU15
  84              	.LBB24:
  85              		.loc 1 242 3 view .LVU16
  86              		.loc 1 242 3 view .LVU17
  87 0034 5A69     		ldr	r2, [r3, #20]
  88 0036 8021     		movs	r1, #128
  89 0038 C902     		lsls	r1, r1, #11
  90 003a 0A43     		orrs	r2, r1
  91 003c 5A61     		str	r2, [r3, #20]
  92              		.loc 1 242 3 view .LVU18
  93 003e 5B69     		ldr	r3, [r3, #20]
  94 0040 0B40     		ands	r3, r1
  95 0042 0293     		str	r3, [sp, #8]
  96              		.loc 1 242 3 view .LVU19
  97 0044 029B     		ldr	r3, [sp, #8]
  98              	.LBE24:
  99              		.loc 1 242 3 view .LVU20
 243:Core/Src/main.c **** 
 244:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 7


 245:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 100              		.loc 1 245 3 view .LVU21
 101 0046 134C     		ldr	r4, .L2+4
 102 0048 134D     		ldr	r5, .L2+8
 103 004a 0022     		movs	r2, #0
 104 004c 2100     		movs	r1, r4
 105 004e 2800     		movs	r0, r5
 106 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 107              	.LVL1:
 246:Core/Src/main.c ****                           |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
 249:Core/Src/main.c ****                            LD4_Pin LD5_Pin */
 250:Core/Src/main.c ****   GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 108              		.loc 1 250 3 view .LVU22
 109              		.loc 1 250 23 is_stmt 0 view .LVU23
 110 0054 0394     		str	r4, [sp, #12]
 251:Core/Src/main.c ****                           |LD4_Pin|LD5_Pin;
 252:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 111              		.loc 1 252 3 is_stmt 1 view .LVU24
 112              		.loc 1 252 24 is_stmt 0 view .LVU25
 113 0056 0127     		movs	r7, #1
 114 0058 0497     		str	r7, [sp, #16]
 253:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 115              		.loc 1 253 3 is_stmt 1 view .LVU26
 116              		.loc 1 253 24 is_stmt 0 view .LVU27
 117 005a 0024     		movs	r4, #0
 118 005c 0594     		str	r4, [sp, #20]
 254:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 119              		.loc 1 254 3 is_stmt 1 view .LVU28
 120              		.loc 1 254 25 is_stmt 0 view .LVU29
 121 005e 0694     		str	r4, [sp, #24]
 255:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 122              		.loc 1 255 3 is_stmt 1 view .LVU30
 123 0060 03A9     		add	r1, sp, #12
 124 0062 2800     		movs	r0, r5
 125 0064 FFF7FEFF 		bl	HAL_GPIO_Init
 126              	.LVL2:
 256:Core/Src/main.c **** 
 257:Core/Src/main.c ****   /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
 258:Core/Src/main.c ****   GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 127              		.loc 1 258 3 view .LVU31
 128              		.loc 1 258 23 is_stmt 0 view .LVU32
 129 0068 0623     		movs	r3, #6
 130 006a 0393     		str	r3, [sp, #12]
 259:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 131              		.loc 1 259 3 is_stmt 1 view .LVU33
 132              		.loc 1 259 24 is_stmt 0 view .LVU34
 133 006c 9026     		movs	r6, #144
 134 006e 7603     		lsls	r6, r6, #13
 135 0070 0496     		str	r6, [sp, #16]
 260:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 136              		.loc 1 260 3 is_stmt 1 view .LVU35
 137              		.loc 1 260 24 is_stmt 0 view .LVU36
 138 0072 0594     		str	r4, [sp, #20]
 261:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 139              		.loc 1 261 3 is_stmt 1 view .LVU37
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 8


 140 0074 03A9     		add	r1, sp, #12
 141 0076 2800     		movs	r0, r5
 142 0078 FFF7FEFF 		bl	HAL_GPIO_Init
 143              	.LVL3:
 262:Core/Src/main.c **** 
 263:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 264:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 144              		.loc 1 264 3 view .LVU38
 145              		.loc 1 264 23 is_stmt 0 view .LVU39
 146 007c 0397     		str	r7, [sp, #12]
 265:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 147              		.loc 1 265 3 is_stmt 1 view .LVU40
 148              		.loc 1 265 24 is_stmt 0 view .LVU41
 149 007e 0496     		str	r6, [sp, #16]
 266:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 150              		.loc 1 266 3 is_stmt 1 view .LVU42
 151              		.loc 1 266 24 is_stmt 0 view .LVU43
 152 0080 0594     		str	r4, [sp, #20]
 267:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 153              		.loc 1 267 3 is_stmt 1 view .LVU44
 154 0082 9020     		movs	r0, #144
 155 0084 03A9     		add	r1, sp, #12
 156 0086 C005     		lsls	r0, r0, #23
 157 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 158              	.LVL4:
 268:Core/Src/main.c **** 
 269:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 270:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 271:Core/Src/main.c **** }
 159              		.loc 1 271 1 is_stmt 0 view .LVU45
 160 008c 09B0     		add	sp, sp, #36
 161              		@ sp needed
 162 008e F0BD     		pop	{r4, r5, r6, r7, pc}
 163              	.L3:
 164              		.align	2
 165              	.L2:
 166 0090 00100240 		.word	1073876992
 167 0094 E1030000 		.word	993
 168 0098 00080048 		.word	1207961600
 169              		.cfi_endproc
 170              	.LFE52:
 172              		.section	.rodata.StartMotorTask.str1.4,"aMS",%progbits,1
 173              		.align	2
 174              	.LC2:
 175 0000 4D6F746F 		.ascii	"Motor worker Got the signal\012\000"
 175      7220776F 
 175      726B6572 
 175      20476F74 
 175      20746865 
 176 001d 000000   		.align	2
 177              	.LC8:
 178 0020 4D6F746F 		.ascii	"Motor worker go to sleep\012\000"
 178      7220776F 
 178      726B6572 
 178      20676F20 
 178      746F2073 
 179              		.section	.text.StartMotorTask,"ax",%progbits
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 9


 180              		.align	1
 181              		.global	StartMotorTask
 182              		.syntax unified
 183              		.code	16
 184              		.thumb_func
 186              	StartMotorTask:
 187              	.LVL5:
 188              	.LFB56:
 272:Core/Src/main.c **** 
 273:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 274:Core/Src/main.c **** 
 275:Core/Src/main.c **** /* USER CODE END 4 */
 276:Core/Src/main.c **** 
 277:Core/Src/main.c **** //New branch
 278:Core/Src/main.c **** 
 279:Core/Src/main.c **** /* USER CODE BEGIN Header_StartRouterTask */
 280:Core/Src/main.c **** /**
 281:Core/Src/main.c ****   * @brief  Function implementing the routerTask thread.
 282:Core/Src/main.c ****   * @param  argument: Not used
 283:Core/Src/main.c ****   * @retval None
 284:Core/Src/main.c ****   */
 285:Core/Src/main.c **** /* USER CODE END Header_StartRouterTask */
 286:Core/Src/main.c **** void StartRouterTask(void *argument)
 287:Core/Src/main.c **** { 
 288:Core/Src/main.c ****   //Global command queue
 289:Core/Src/main.c ****   extern Cmd_Queue * cmdQueue;
 290:Core/Src/main.c ****   //Global variables to pass command to worker threads
 291:Core/Src/main.c ****   extern volatile uint16_t commandLED;
 292:Core/Src/main.c ****   extern volatile uint16_t commandMotor;
 293:Core/Src/main.c ****   //Command popped from queue
 294:Core/Src/main.c ****   uint16_t commandIn = 0;
 295:Core/Src/main.c **** 
 296:Core/Src/main.c ****   /* Infinite loop */
 297:Core/Src/main.c ****   for(;;)
 298:Core/Src/main.c ****   {
 299:Core/Src/main.c ****     // wait until countSem01 >= 1
 300:Core/Src/main.c ****     osSemaphoreAcquire(countSem01, osWaitForever);
 301:Core/Src/main.c ****     transmitCharArray("Router: Get countSem01\n");
 302:Core/Src/main.c **** 
 303:Core/Src/main.c ****     //If queue is not empty
 304:Core/Src/main.c ****     if (!isQueueEmpty(cmdQueue)) {
 305:Core/Src/main.c ****       // Acquire the mutex for led status
 306:Core/Src/main.c ****       osSemaphoreAcquire(workerStatusMutex, osWaitForever);
 307:Core/Src/main.c **** 
 308:Core/Src/main.c ****       // LED worker is not busy
 309:Core/Src/main.c ****       if (ledWorkerBusy == 0) {
 310:Core/Src/main.c ****         osSemaphoreRelease(workerStatusMutex);
 311:Core/Src/main.c **** 
 312:Core/Src/main.c ****         commandIn = queuePopItemByOpcode(cmdQueue, LED_COMMAND_OPCODE);
 313:Core/Src/main.c ****         // There is LED command in the queue
 314:Core/Src/main.c ****         if (commandIn != 0xFFFF) {
 315:Core/Src/main.c ****           commandLED = commandIn;
 316:Core/Src/main.c ****           transmitCharArray("Wake up led worker\n");
 317:Core/Src/main.c ****           //Wake up led worker thread
 318:Core/Src/main.c ****           osSemaphoreRelease(ledRouterSem01);
 319:Core/Src/main.c ****         } else {
 320:Core/Src/main.c ****           //transmitCharArray("LED thread not busy but no LED command in queue\n");
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 10


 321:Core/Src/main.c ****         }
 322:Core/Src/main.c ****       } else {
 323:Core/Src/main.c ****         osSemaphoreRelease(workerStatusMutex);
 324:Core/Src/main.c ****       }
 325:Core/Src/main.c **** 
 326:Core/Src/main.c ****       // Acquire the mutex for motor status
 327:Core/Src/main.c ****       osSemaphoreAcquire(workerStatusMutex, osWaitForever);
 328:Core/Src/main.c **** 
 329:Core/Src/main.c ****       if (motorWorkerBusy == 0) {
 330:Core/Src/main.c ****         osSemaphoreRelease(workerStatusMutex);
 331:Core/Src/main.c ****         commandIn = queuePopItemByOpcode(cmdQueue, MOTOR_COMMAND_OPCODE);
 332:Core/Src/main.c ****         // There is Motor command in the queue
 333:Core/Src/main.c ****         if (commandIn != 0xFFFF) {
 334:Core/Src/main.c ****           commandMotor = commandIn;
 335:Core/Src/main.c ****           transmitCharArray("Wake up motor worker\n");
 336:Core/Src/main.c ****           //Wake up motor worker thread
 337:Core/Src/main.c ****           osSemaphoreRelease(motorRouterSem01);
 338:Core/Src/main.c ****         }
 339:Core/Src/main.c ****       } else {
 340:Core/Src/main.c ****         osSemaphoreRelease(workerStatusMutex);
 341:Core/Src/main.c ****       }
 342:Core/Src/main.c ****     }
 343:Core/Src/main.c ****   }
 344:Core/Src/main.c **** }
 345:Core/Src/main.c ****   /* USER CODE END 5 */
 346:Core/Src/main.c **** 
 347:Core/Src/main.c **** void initLEDs(void) {
 348:Core/Src/main.c **** 	// red LED PC6, blue LED (PC7), green LED PC9, orange LED PC8
 349:Core/Src/main.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 350:Core/Src/main.c ****   // set the MODER, 01: General purpose output mode
 351:Core/Src/main.c **** 	// init PC6 MODER
 352:Core/Src/main.c **** 	GPIOC->MODER |= (1 << 12);
 353:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 13);
 354:Core/Src/main.c ****     // init PC7 MODER
 355:Core/Src/main.c **** 	GPIOC->MODER |= (1 << 14);
 356:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 15);
 357:Core/Src/main.c **** 	// init PC8 MODER
 358:Core/Src/main.c **** 	GPIOC->MODER |= (1 << 16);
 359:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 17);
 360:Core/Src/main.c **** 	// init PC9 MODER
 361:Core/Src/main.c **** 	GPIOC->MODER |= (1 << 18);
 362:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 19);
 363:Core/Src/main.c ****   // Set the pins to low speed in the OSPEEDR register
 364:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 12) | (1 << 13));
 365:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 14) | (1 << 15));
 366:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 16) | (1 << 17));
 367:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 18) | (1 << 19));
 368:Core/Src/main.c **** 
 369:Core/Src/main.c **** 	// Set LED to no pull-up/down resistors in the PUPDR register
 370:Core/Src/main.c **** 	// 00: No pull-up, pull-down
 371:Core/Src/main.c **** 	GPIOC->PUPDR &= ~((1 << 16) | (1 << 17) | (1 << 18) | (1 << 19));
 372:Core/Src/main.c **** 	GPIOC->PUPDR &= ~((1 << 12) | (1 << 13) | (1 << 14) | (1 << 15));
 373:Core/Src/main.c **** 	// set PC6-9 to 0
 374:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 6);
 375:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 7);
 376:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 8);
 377:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 9);
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 11


 378:Core/Src/main.c **** }
 379:Core/Src/main.c **** 
 380:Core/Src/main.c **** /* USER CODE BEGIN Header_StartLEDTask */
 381:Core/Src/main.c **** /**
 382:Core/Src/main.c ****   * @brief  Function implementing the LEDTask thread.
 383:Core/Src/main.c ****   * @param  argument: Not used
 384:Core/Src/main.c ****   * @retval None
 385:Core/Src/main.c ****   */
 386:Core/Src/main.c **** /* USER CODE END Header_StartLEDTask */
 387:Core/Src/main.c **** void StartLEDTask(void *argument)
 388:Core/Src/main.c **** {
 389:Core/Src/main.c ****   extern volatile uint16_t commandLED;
 390:Core/Src/main.c ****   volatile uint8_t LEDColor = 0, LEDAction = 0, LEDSpeed = 0;
 391:Core/Src/main.c ****   volatile uint32_t colorMask[5] = {GPIO_ODR_6, GPIO_ODR_9, GPIO_ODR_7, GPIO_ODR_8, GPIO_ODR_6 | GP
 392:Core/Src/main.c ****   volatile uint8_t blink[4] = {0,0,0,0};
 393:Core/Src/main.c ****   uint8_t blinkInterval = 0;
 394:Core/Src/main.c ****   volatile uint32_t startTime[4] = {0,0,0,0};
 395:Core/Src/main.c ****   volatile uint32_t currentTime = 0;
 396:Core/Src/main.c **** 
 397:Core/Src/main.c ****   /* Infinite loop */
 398:Core/Src/main.c ****   for(;;)
 399:Core/Src/main.c ****   {
 400:Core/Src/main.c ****     // wait to be woken up by router
 401:Core/Src/main.c ****     osSemaphoreAcquire(ledRouterSem01, osWaitForever);
 402:Core/Src/main.c ****     transmitCharArray("LED worker Got the signal\n");
 403:Core/Src/main.c **** 
 404:Core/Src/main.c ****     osSemaphoreAcquire(workerStatusMutex, osWaitForever);
 405:Core/Src/main.c ****     ledWorkerBusy = 1;
 406:Core/Src/main.c ****     osSemaphoreRelease(workerStatusMutex);
 407:Core/Src/main.c **** 
 408:Core/Src/main.c ****     LEDColor = (commandLED & 0x0F00) >> 8;
 409:Core/Src/main.c ****     LEDAction = (commandLED & 0x00F0) >> 4;
 410:Core/Src/main.c **** 
 411:Core/Src/main.c ****     uint8_t blinkFlag = 0;
 412:Core/Src/main.c **** 
 413:Core/Src/main.c ****     // clear all the blink flags
 414:Core/Src/main.c ****     for (int i = 0; i < 4; i++) {
 415:Core/Src/main.c ****       blink[i] = 0;
 416:Core/Src/main.c ****     }
 417:Core/Src/main.c ****     //LED action
 418:Core/Src/main.c ****     switch (LEDAction) {
 419:Core/Src/main.c ****       //On
 420:Core/Src/main.c ****       case 1:
 421:Core/Src/main.c ****         GPIOC->ODR |= colorMask[LEDColor-1];
 422:Core/Src/main.c ****         break;
 423:Core/Src/main.c ****       //Off
 424:Core/Src/main.c ****       case 2:
 425:Core/Src/main.c ****         GPIOC->ODR &= ~colorMask[LEDColor-1];
 426:Core/Src/main.c ****         break;
 427:Core/Src/main.c ****       //Toggle
 428:Core/Src/main.c ****       case 3:
 429:Core/Src/main.c ****         GPIOC->ODR ^= colorMask[LEDColor-1];
 430:Core/Src/main.c ****         break;
 431:Core/Src/main.c ****       //Blink
 432:Core/Src/main.c ****       case 4:
 433:Core/Src/main.c ****         blinkFlag = 1;
 434:Core/Src/main.c ****         if (LEDColor == 5) {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 12


 435:Core/Src/main.c ****           blink[0] = 1;
 436:Core/Src/main.c ****           blink[1] = 1;
 437:Core/Src/main.c ****           blink[2] = 1;
 438:Core/Src/main.c ****           blink[3] = 1;
 439:Core/Src/main.c ****         }
 440:Core/Src/main.c ****         else {
 441:Core/Src/main.c ****           blink[LEDColor-1] = 1;
 442:Core/Src/main.c ****         }
 443:Core/Src/main.c ****         blinkInterval = commandLED & 0xF;
 444:Core/Src/main.c ****         break;
 445:Core/Src/main.c ****       default:
 446:Core/Src/main.c ****     }
 447:Core/Src/main.c **** 
 448:Core/Src/main.c ****     if (blinkFlag == 1) {
 449:Core/Src/main.c ****       // The LED bliks for 10s
 450:Core/Src/main.c ****       int16_t loopTimes = 10000 / (100 * blinkInterval);
 451:Core/Src/main.c ****       while (loopTimes > 0) {
 452:Core/Src/main.c ****         for (int i = 0; i < 4; i++) {
 453:Core/Src/main.c ****           if (blink[i]) {
 454:Core/Src/main.c ****             GPIOC->ODR ^= colorMask[i];
 455:Core/Src/main.c ****           }
 456:Core/Src/main.c ****         }
 457:Core/Src/main.c ****         osDelay(blinkInterval * 100);
 458:Core/Src/main.c ****         loopTimes--;
 459:Core/Src/main.c ****       }
 460:Core/Src/main.c ****     }
 461:Core/Src/main.c **** 
 462:Core/Src/main.c ****     commandLED = 0;
 463:Core/Src/main.c **** 
 464:Core/Src/main.c ****     transmitCharArray("LED worker go to sleep\n");
 465:Core/Src/main.c **** 
 466:Core/Src/main.c ****     osSemaphoreAcquire(workerStatusMutex, osWaitForever);
 467:Core/Src/main.c ****     ledWorkerBusy = 0;
 468:Core/Src/main.c ****     osSemaphoreRelease(workerStatusMutex);
 469:Core/Src/main.c ****     osSemaphoreRelease(countSem01);
 470:Core/Src/main.c ****   }
 471:Core/Src/main.c **** }
 472:Core/Src/main.c **** 
 473:Core/Src/main.c **** /* USER CODE BEGIN Header_StartLEDTask */
 474:Core/Src/main.c **** /**
 475:Core/Src/main.c ****   * @brief  Function implementing the MotorTask thread.
 476:Core/Src/main.c ****   * @param  argument: Not used
 477:Core/Src/main.c ****   * @retval None
 478:Core/Src/main.c ****   */ 
 479:Core/Src/main.c **** /* USER CODE END Header_StartLEDTask */
 480:Core/Src/main.c **** void StartMotorTask(void *argument)
 481:Core/Src/main.c **** {
 189              		.loc 1 481 1 is_stmt 1 view -0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193              		.loc 1 481 1 is_stmt 0 view .LVU47
 194 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 195              	.LCFI2:
 196              		.cfi_def_cfa_offset 24
 197              		.cfi_offset 3, -24
 198              		.cfi_offset 4, -20
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 13


 199              		.cfi_offset 5, -16
 200              		.cfi_offset 6, -12
 201              		.cfi_offset 7, -8
 202              		.cfi_offset 14, -4
 482:Core/Src/main.c ****   extern volatile uint16_t commandMotor;
 203              		.loc 1 482 3 is_stmt 1 view .LVU48
 483:Core/Src/main.c ****   uint8_t motorOn = 0;
 204              		.loc 1 483 3 view .LVU49
 205              	.LVL6:
 484:Core/Src/main.c ****   uint8_t lastSpeed = 0;
 206              		.loc 1 484 3 view .LVU50
 207              		.loc 1 484 11 is_stmt 0 view .LVU51
 208 0002 0024     		movs	r4, #0
 483:Core/Src/main.c ****   uint8_t motorOn = 0;
 209              		.loc 1 483 11 view .LVU52
 210 0004 0025     		movs	r5, #0
 211 0006 2BE0     		b	.L10
 212              	.LVL7:
 213              	.L8:
 214              	.LBB25:
 485:Core/Src/main.c ****   //command 0xB-[1/2/3/4]
 486:Core/Src/main.c ****   /* 2nd Digit
 487:Core/Src/main.c ****   *   - 1: Turn motor on (enable 3rd and 4th digit)
 488:Core/Src/main.c ****   *   - 2: Turn motor off
 489:Core/Src/main.c ****   *   - 3: Change motor speed (enable 3rd and 4th digit)
 490:Core/Src/main.c ****   * 3rd & 4th Digit: RPM of speed --> Clamped at < 100, done in motor.c 
 491:Core/Src/main.c ****   */
 492:Core/Src/main.c **** 
 493:Core/Src/main.c ****   /* Infinite loop */
 494:Core/Src/main.c ****   for(;;)
 495:Core/Src/main.c ****   {
 496:Core/Src/main.c ****     // wait to be woken up by router
 497:Core/Src/main.c ****     osSemaphoreAcquire(motorRouterSem01, osWaitForever);
 498:Core/Src/main.c ****     transmitCharArray("Motor worker Got the signal\n");
 499:Core/Src/main.c ****     osSemaphoreAcquire(workerStatusMutex, osWaitForever);
 500:Core/Src/main.c ****     motorWorkerBusy = 1;
 501:Core/Src/main.c ****     osSemaphoreRelease(workerStatusMutex);
 502:Core/Src/main.c **** 
 503:Core/Src/main.c ****     extern volatile uint16_t commandMotor;
 504:Core/Src/main.c ****     // 2nd character (turn motor on, off, or adjust speed)
 505:Core/Src/main.c ****     switch (commandMotor & 0x0F00) { 
 506:Core/Src/main.c ****       case 0x0100: 
 507:Core/Src/main.c ****         // turn motor on
 508:Core/Src/main.c ****         motorOn = 1;
 509:Core/Src/main.c ****         if ((commandMotor & 0x00FF) != 0) {
 510:Core/Src/main.c ****           target_rpm = (commandMotor & 0x00FF);
 511:Core/Src/main.c ****           lastSpeed = target_rpm;
 512:Core/Src/main.c ****         }
 513:Core/Src/main.c ****         else {
 514:Core/Src/main.c ****           target_rpm = lastSpeed;
 215              		.loc 1 514 11 is_stmt 1 view .LVU53
 216              		.loc 1 514 22 is_stmt 0 view .LVU54
 217 0008 23B2     		sxth	r3, r4
 218 000a 364A     		ldr	r2, .L11
 219 000c 1380     		strh	r3, [r2]
 508:Core/Src/main.c ****         if ((commandMotor & 0x00FF) != 0) {
 220              		.loc 1 508 17 view .LVU55
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 14


 221 000e 0125     		movs	r5, #1
 222 0010 03E0     		b	.L7
 223              	.LVL8:
 224              	.L5:
 515:Core/Src/main.c ****         }
 516:Core/Src/main.c ****         break;
 517:Core/Src/main.c ****       case 0x0200:
 518:Core/Src/main.c ****         // turn motor off
 519:Core/Src/main.c ****         motorOn = 0;
 225              		.loc 1 519 9 is_stmt 1 view .LVU56
 520:Core/Src/main.c ****         target_rpm = 0;
 226              		.loc 1 520 9 view .LVU57
 227              		.loc 1 520 20 is_stmt 0 view .LVU58
 228 0012 344B     		ldr	r3, .L11
 229 0014 0022     		movs	r2, #0
 230 0016 1A80     		strh	r2, [r3]
 521:Core/Src/main.c ****         break;
 231              		.loc 1 521 9 is_stmt 1 view .LVU59
 519:Core/Src/main.c ****         target_rpm = 0;
 232              		.loc 1 519 17 is_stmt 0 view .LVU60
 233 0018 0025     		movs	r5, #0
 234              	.LVL9:
 235              	.L7:
 522:Core/Src/main.c ****       case 0x0300:
 523:Core/Src/main.c ****         // change motor speed 
 524:Core/Src/main.c ****         if (motorOn) {
 525:Core/Src/main.c ****           target_rpm = (commandMotor & 0x00FF);
 526:Core/Src/main.c ****         }
 527:Core/Src/main.c ****         lastSpeed = commandMotor & 0x00FF;
 528:Core/Src/main.c ****         break;
 529:Core/Src/main.c ****       default:
 530:Core/Src/main.c ****         break;
 531:Core/Src/main.c ****     }
 532:Core/Src/main.c **** 
 533:Core/Src/main.c ****     commandMotor = 0;
 236              		.loc 1 533 5 is_stmt 1 view .LVU61
 237              		.loc 1 533 18 is_stmt 0 view .LVU62
 238 001a 334B     		ldr	r3, .L11+4
 239 001c 0022     		movs	r2, #0
 240 001e 1A80     		strh	r2, [r3]
 534:Core/Src/main.c ****     
 535:Core/Src/main.c ****     NVIC_EnableIRQ(TIM7_IRQn);          // Enable interrupt in NVIC
 241              		.loc 1 535 5 is_stmt 1 view .LVU63
 242              	.LVL10:
 243              	.LBB26:
 244              	.LBI26:
 245              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 15


  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 16


  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 17


 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 18


 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 19


 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 20


 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 21


 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 22


 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 23


 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 24


 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 25


 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 246              		.loc 2 623 22 view .LVU64
 247              	.LBB27:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 248              		.loc 2 625 3 view .LVU65
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 249              		.loc 2 627 5 view .LVU66
 250              		.loc 2 627 20 is_stmt 0 view .LVU67
 251 0020 324B     		ldr	r3, .L11+8
 252 0022 8022     		movs	r2, #128
 253 0024 D202     		lsls	r2, r2, #11
 254 0026 1A60     		str	r2, [r3]
 255              	.LVL11:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 26


 256              		.loc 2 627 20 view .LVU68
 257              	.LBE27:
 258              	.LBE26:
 536:Core/Src/main.c ****     NVIC_SetPriority(TIM7_IRQn,2);
 259              		.loc 1 536 5 is_stmt 1 view .LVU69
 260              	.LBB28:
 261              	.LBI28:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 27


 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 262              		.loc 2 730 22 view .LVU70
 263              	.LBB29:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 28


 264              		.loc 2 732 3 view .LVU71
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 265              		.loc 2 734 5 view .LVU72
 266              		.loc 2 734 52 is_stmt 0 view .LVU73
 267 0028 C420     		movs	r0, #196
 268 002a 8000     		lsls	r0, r0, #2
 269 002c 1958     		ldr	r1, [r3, r0]
 270              		.loc 2 734 33 view .LVU74
 271 002e 304A     		ldr	r2, .L11+12
 272 0030 1140     		ands	r1, r2
 273              		.loc 2 734 102 view .LVU75
 274 0032 8022     		movs	r2, #128
 275 0034 1204     		lsls	r2, r2, #16
 276 0036 0A43     		orrs	r2, r1
 277              		.loc 2 734 30 view .LVU76
 278 0038 1A50     		str	r2, [r3, r0]
 279              	.LVL12:
 280              		.loc 2 734 30 view .LVU77
 281              	.LBE29:
 282              	.LBE28:
 537:Core/Src/main.c **** 
 538:Core/Src/main.c ****     osSemaphoreAcquire(workerStatusMutex, osWaitForever);
 283              		.loc 1 538 5 is_stmt 1 view .LVU78
 284 003a 0121     		movs	r1, #1
 285 003c 2D4E     		ldr	r6, .L11+16
 286 003e 3068     		ldr	r0, [r6]
 287 0040 4942     		rsbs	r1, r1, #0
 288 0042 FFF7FEFF 		bl	osSemaphoreAcquire
 289              	.LVL13:
 539:Core/Src/main.c ****     motorWorkerBusy = 0;
 290              		.loc 1 539 5 view .LVU79
 291              		.loc 1 539 21 is_stmt 0 view .LVU80
 292 0046 2C4B     		ldr	r3, .L11+20
 293 0048 0022     		movs	r2, #0
 294 004a 1A70     		strb	r2, [r3]
 540:Core/Src/main.c ****     osSemaphoreRelease(workerStatusMutex);
 295              		.loc 1 540 5 is_stmt 1 view .LVU81
 296 004c 3068     		ldr	r0, [r6]
 297 004e FFF7FEFF 		bl	osSemaphoreRelease
 298              	.LVL14:
 541:Core/Src/main.c ****     transmitCharArray("Motor worker go to sleep\n");
 299              		.loc 1 541 5 view .LVU82
 300 0052 2A48     		ldr	r0, .L11+24
 301 0054 FFF7FEFF 		bl	transmitCharArray
 302              	.LVL15:
 542:Core/Src/main.c **** 
 543:Core/Src/main.c ****     osSemaphoreRelease(countSem01);
 303              		.loc 1 543 5 view .LVU83
 304 0058 294B     		ldr	r3, .L11+28
 305 005a 1868     		ldr	r0, [r3]
 306 005c FFF7FEFF 		bl	osSemaphoreRelease
 307              	.LVL16:
 308              	.LBE25:
 494:Core/Src/main.c ****   {
 309              		.loc 1 494 3 view .LVU84
 310              	.L10:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 29


 494:Core/Src/main.c ****   {
 311              		.loc 1 494 3 view .LVU85
 312              	.LBB30:
 497:Core/Src/main.c ****     transmitCharArray("Motor worker Got the signal\n");
 313              		.loc 1 497 5 view .LVU86
 314 0060 0127     		movs	r7, #1
 315 0062 7F42     		rsbs	r7, r7, #0
 316 0064 274B     		ldr	r3, .L11+32
 317 0066 1868     		ldr	r0, [r3]
 318 0068 3900     		movs	r1, r7
 319 006a FFF7FEFF 		bl	osSemaphoreAcquire
 320              	.LVL17:
 498:Core/Src/main.c ****     osSemaphoreAcquire(workerStatusMutex, osWaitForever);
 321              		.loc 1 498 5 view .LVU87
 322 006e 2648     		ldr	r0, .L11+36
 323 0070 FFF7FEFF 		bl	transmitCharArray
 324              	.LVL18:
 499:Core/Src/main.c ****     motorWorkerBusy = 1;
 325              		.loc 1 499 5 view .LVU88
 326 0074 1F4E     		ldr	r6, .L11+16
 327 0076 3068     		ldr	r0, [r6]
 328 0078 3900     		movs	r1, r7
 329 007a FFF7FEFF 		bl	osSemaphoreAcquire
 330              	.LVL19:
 500:Core/Src/main.c ****     osSemaphoreRelease(workerStatusMutex);
 331              		.loc 1 500 5 view .LVU89
 500:Core/Src/main.c ****     osSemaphoreRelease(workerStatusMutex);
 332              		.loc 1 500 21 is_stmt 0 view .LVU90
 333 007e 1E4B     		ldr	r3, .L11+20
 334 0080 0122     		movs	r2, #1
 335 0082 1A70     		strb	r2, [r3]
 501:Core/Src/main.c **** 
 336              		.loc 1 501 5 is_stmt 1 view .LVU91
 337 0084 3068     		ldr	r0, [r6]
 338 0086 FFF7FEFF 		bl	osSemaphoreRelease
 339              	.LVL20:
 503:Core/Src/main.c ****     // 2nd character (turn motor on, off, or adjust speed)
 340              		.loc 1 503 5 view .LVU92
 505:Core/Src/main.c ****       case 0x0100: 
 341              		.loc 1 505 5 view .LVU93
 505:Core/Src/main.c ****       case 0x0100: 
 342              		.loc 1 505 26 is_stmt 0 view .LVU94
 343 008a 174B     		ldr	r3, .L11+4
 344 008c 1B88     		ldrh	r3, [r3]
 345 008e F022     		movs	r2, #240
 346 0090 1201     		lsls	r2, r2, #4
 347 0092 1340     		ands	r3, r2
 505:Core/Src/main.c ****       case 0x0100: 
 348              		.loc 1 505 5 view .LVU95
 349 0094 8022     		movs	r2, #128
 350 0096 9200     		lsls	r2, r2, #2
 351 0098 9342     		cmp	r3, r2
 352 009a BAD0     		beq	.L5
 353 009c 0132     		adds	r2, r2, #1
 354 009e FF32     		adds	r2, r2, #255
 355 00a0 9342     		cmp	r3, r2
 356 00a2 12D0     		beq	.L6
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 30


 357 00a4 8022     		movs	r2, #128
 358 00a6 5200     		lsls	r2, r2, #1
 359 00a8 9342     		cmp	r3, r2
 360 00aa B6D1     		bne	.L7
 508:Core/Src/main.c ****         if ((commandMotor & 0x00FF) != 0) {
 361              		.loc 1 508 9 is_stmt 1 view .LVU96
 362              	.LVL21:
 509:Core/Src/main.c ****           target_rpm = (commandMotor & 0x00FF);
 363              		.loc 1 509 9 view .LVU97
 509:Core/Src/main.c ****           target_rpm = (commandMotor & 0x00FF);
 364              		.loc 1 509 27 is_stmt 0 view .LVU98
 365 00ac 0E4B     		ldr	r3, .L11+4
 366 00ae 1A88     		ldrh	r2, [r3]
 509:Core/Src/main.c ****           target_rpm = (commandMotor & 0x00FF);
 367              		.loc 1 509 12 view .LVU99
 368 00b0 FF23     		movs	r3, #255
 369 00b2 1A42     		tst	r2, r3
 370 00b4 A8D0     		beq	.L8
 510:Core/Src/main.c ****           lastSpeed = target_rpm;
 371              		.loc 1 510 11 is_stmt 1 view .LVU100
 510:Core/Src/main.c ****           lastSpeed = target_rpm;
 372              		.loc 1 510 38 is_stmt 0 view .LVU101
 373 00b6 0C4B     		ldr	r3, .L11+4
 374 00b8 1B88     		ldrh	r3, [r3]
 375 00ba FF22     		movs	r2, #255
 376 00bc 1340     		ands	r3, r2
 510:Core/Src/main.c ****           lastSpeed = target_rpm;
 377              		.loc 1 510 22 view .LVU102
 378 00be 094A     		ldr	r2, .L11
 379 00c0 1380     		strh	r3, [r2]
 511:Core/Src/main.c ****         }
 380              		.loc 1 511 11 is_stmt 1 view .LVU103
 511:Core/Src/main.c ****         }
 381              		.loc 1 511 21 is_stmt 0 view .LVU104
 382 00c2 1488     		ldrh	r4, [r2]
 383              	.LVL22:
 511:Core/Src/main.c ****         }
 384              		.loc 1 511 21 view .LVU105
 385 00c4 E4B2     		uxtb	r4, r4
 386              	.LVL23:
 508:Core/Src/main.c ****         if ((commandMotor & 0x00FF) != 0) {
 387              		.loc 1 508 17 view .LVU106
 388 00c6 0125     		movs	r5, #1
 389 00c8 A7E7     		b	.L7
 390              	.LVL24:
 391              	.L6:
 524:Core/Src/main.c ****           target_rpm = (commandMotor & 0x00FF);
 392              		.loc 1 524 9 is_stmt 1 view .LVU107
 524:Core/Src/main.c ****           target_rpm = (commandMotor & 0x00FF);
 393              		.loc 1 524 12 is_stmt 0 view .LVU108
 394 00ca 002D     		cmp	r5, #0
 395 00cc 05D0     		beq	.L9
 525:Core/Src/main.c ****         }
 396              		.loc 1 525 11 is_stmt 1 view .LVU109
 525:Core/Src/main.c ****         }
 397              		.loc 1 525 38 is_stmt 0 view .LVU110
 398 00ce 064B     		ldr	r3, .L11+4
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 31


 399 00d0 1B88     		ldrh	r3, [r3]
 400 00d2 FF22     		movs	r2, #255
 401 00d4 1340     		ands	r3, r2
 525:Core/Src/main.c ****         }
 402              		.loc 1 525 22 view .LVU111
 403 00d6 034A     		ldr	r2, .L11
 404 00d8 1380     		strh	r3, [r2]
 405              	.L9:
 527:Core/Src/main.c ****         break;
 406              		.loc 1 527 9 is_stmt 1 view .LVU112
 527:Core/Src/main.c ****         break;
 407              		.loc 1 527 19 is_stmt 0 view .LVU113
 408 00da 034B     		ldr	r3, .L11+4
 409 00dc 1C88     		ldrh	r4, [r3]
 410              	.LVL25:
 527:Core/Src/main.c ****         break;
 411              		.loc 1 527 19 view .LVU114
 412 00de E4B2     		uxtb	r4, r4
 413              	.LVL26:
 528:Core/Src/main.c ****       default:
 414              		.loc 1 528 9 is_stmt 1 view .LVU115
 415 00e0 9BE7     		b	.L7
 416              	.L12:
 417 00e2 C046     		.align	2
 418              	.L11:
 419 00e4 00000000 		.word	target_rpm
 420 00e8 00000000 		.word	commandMotor
 421 00ec 00E100E0 		.word	-536813312
 422 00f0 FFFF00FF 		.word	-16711681
 423 00f4 00000000 		.word	workerStatusMutex
 424 00f8 00000000 		.word	motorWorkerBusy
 425 00fc 20000000 		.word	.LC8
 426 0100 00000000 		.word	countSem01
 427 0104 00000000 		.word	motorRouterSem01
 428 0108 00000000 		.word	.LC2
 429              	.LBE30:
 430              		.cfi_endproc
 431              	.LFE56:
 433              		.section	.rodata.StartRouterTask.str1.4,"aMS",%progbits,1
 434              		.align	2
 435              	.LC12:
 436 0000 526F7574 		.ascii	"Router: Get countSem01\012\000"
 436      65723A20 
 436      47657420 
 436      636F756E 
 436      7453656D 
 437              		.align	2
 438              	.LC18:
 439 0018 57616B65 		.ascii	"Wake up led worker\012\000"
 439      20757020 
 439      6C656420 
 439      776F726B 
 439      65720A00 
 440              		.align	2
 441              	.LC23:
 442 002c 57616B65 		.ascii	"Wake up motor worker\012\000"
 442      20757020 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 32


 442      6D6F746F 
 442      7220776F 
 442      726B6572 
 443              		.section	.text.StartRouterTask,"ax",%progbits
 444              		.align	1
 445              		.global	StartRouterTask
 446              		.syntax unified
 447              		.code	16
 448              		.thumb_func
 450              	StartRouterTask:
 451              	.LFB53:
 287:Core/Src/main.c ****   //Global command queue
 452              		.loc 1 287 1 view -0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 0
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456              	.LVL27:
 287:Core/Src/main.c ****   //Global command queue
 457              		.loc 1 287 1 is_stmt 0 view .LVU117
 458 0000 10B5     		push	{r4, lr}
 459              	.LCFI3:
 460              		.cfi_def_cfa_offset 8
 461              		.cfi_offset 4, -8
 462              		.cfi_offset 14, -4
 463 0002 22E0     		b	.L15
 464              	.LVL28:
 465              	.L16:
 323:Core/Src/main.c ****       }
 466              		.loc 1 323 9 is_stmt 1 view .LVU118
 467 0004 2B4B     		ldr	r3, .L20
 468 0006 1868     		ldr	r0, [r3]
 469 0008 FFF7FEFF 		bl	osSemaphoreRelease
 470              	.LVL29:
 471              	.L17:
 327:Core/Src/main.c **** 
 472              		.loc 1 327 7 view .LVU119
 473 000c 0121     		movs	r1, #1
 474 000e 294B     		ldr	r3, .L20
 475 0010 1868     		ldr	r0, [r3]
 476 0012 4942     		rsbs	r1, r1, #0
 477 0014 FFF7FEFF 		bl	osSemaphoreAcquire
 478              	.LVL30:
 329:Core/Src/main.c ****         osSemaphoreRelease(workerStatusMutex);
 479              		.loc 1 329 7 view .LVU120
 329:Core/Src/main.c ****         osSemaphoreRelease(workerStatusMutex);
 480              		.loc 1 329 27 is_stmt 0 view .LVU121
 481 0018 274B     		ldr	r3, .L20+4
 482 001a 1B78     		ldrb	r3, [r3]
 329:Core/Src/main.c ****         osSemaphoreRelease(workerStatusMutex);
 483              		.loc 1 329 10 view .LVU122
 484 001c 002B     		cmp	r3, #0
 485 001e 43D1     		bne	.L18
 330:Core/Src/main.c ****         commandIn = queuePopItemByOpcode(cmdQueue, MOTOR_COMMAND_OPCODE);
 486              		.loc 1 330 9 is_stmt 1 view .LVU123
 487 0020 244B     		ldr	r3, .L20
 488 0022 1868     		ldr	r0, [r3]
 489 0024 FFF7FEFF 		bl	osSemaphoreRelease
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 33


 490              	.LVL31:
 331:Core/Src/main.c ****         // There is Motor command in the queue
 491              		.loc 1 331 9 view .LVU124
 331:Core/Src/main.c ****         // There is Motor command in the queue
 492              		.loc 1 331 21 is_stmt 0 view .LVU125
 493 0028 244B     		ldr	r3, .L20+8
 494 002a 1868     		ldr	r0, [r3]
 495 002c 0B21     		movs	r1, #11
 496 002e FFF7FEFF 		bl	queuePopItemByOpcode
 497              	.LVL32:
 333:Core/Src/main.c ****           commandMotor = commandIn;
 498              		.loc 1 333 9 is_stmt 1 view .LVU126
 333:Core/Src/main.c ****           commandMotor = commandIn;
 499              		.loc 1 333 12 is_stmt 0 view .LVU127
 500 0032 234B     		ldr	r3, .L20+12
 501 0034 9842     		cmp	r0, r3
 502 0036 08D0     		beq	.L15
 334:Core/Src/main.c ****           transmitCharArray("Wake up motor worker\n");
 503              		.loc 1 334 11 is_stmt 1 view .LVU128
 334:Core/Src/main.c ****           transmitCharArray("Wake up motor worker\n");
 504              		.loc 1 334 24 is_stmt 0 view .LVU129
 505 0038 224B     		ldr	r3, .L20+16
 506 003a 1880     		strh	r0, [r3]
 335:Core/Src/main.c ****           //Wake up motor worker thread
 507              		.loc 1 335 11 is_stmt 1 view .LVU130
 508 003c 2248     		ldr	r0, .L20+20
 509              	.LVL33:
 335:Core/Src/main.c ****           //Wake up motor worker thread
 510              		.loc 1 335 11 is_stmt 0 view .LVU131
 511 003e FFF7FEFF 		bl	transmitCharArray
 512              	.LVL34:
 337:Core/Src/main.c ****         }
 513              		.loc 1 337 11 is_stmt 1 view .LVU132
 514 0042 224B     		ldr	r3, .L20+24
 515 0044 1868     		ldr	r0, [r3]
 516 0046 FFF7FEFF 		bl	osSemaphoreRelease
 517              	.LVL35:
 518              	.L15:
 297:Core/Src/main.c ****   {
 519              		.loc 1 297 3 view .LVU133
 300:Core/Src/main.c ****     transmitCharArray("Router: Get countSem01\n");
 520              		.loc 1 300 5 view .LVU134
 521 004a 0121     		movs	r1, #1
 522 004c 204B     		ldr	r3, .L20+28
 523 004e 1868     		ldr	r0, [r3]
 524 0050 4942     		rsbs	r1, r1, #0
 525 0052 FFF7FEFF 		bl	osSemaphoreAcquire
 526              	.LVL36:
 301:Core/Src/main.c **** 
 527              		.loc 1 301 5 view .LVU135
 528 0056 1F48     		ldr	r0, .L20+32
 529 0058 FFF7FEFF 		bl	transmitCharArray
 530              	.LVL37:
 304:Core/Src/main.c ****       // Acquire the mutex for led status
 531              		.loc 1 304 5 view .LVU136
 304:Core/Src/main.c ****       // Acquire the mutex for led status
 532              		.loc 1 304 10 is_stmt 0 view .LVU137
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 34


 533 005c 174B     		ldr	r3, .L20+8
 534 005e 1868     		ldr	r0, [r3]
 535 0060 FFF7FEFF 		bl	isQueueEmpty
 536              	.LVL38:
 304:Core/Src/main.c ****       // Acquire the mutex for led status
 537              		.loc 1 304 8 discriminator 1 view .LVU138
 538 0064 0028     		cmp	r0, #0
 539 0066 F0D1     		bne	.L15
 306:Core/Src/main.c **** 
 540              		.loc 1 306 7 is_stmt 1 view .LVU139
 541 0068 0121     		movs	r1, #1
 542 006a 124B     		ldr	r3, .L20
 543 006c 1868     		ldr	r0, [r3]
 544 006e 4942     		rsbs	r1, r1, #0
 545 0070 FFF7FEFF 		bl	osSemaphoreAcquire
 546              	.LVL39:
 309:Core/Src/main.c ****         osSemaphoreRelease(workerStatusMutex);
 547              		.loc 1 309 7 view .LVU140
 309:Core/Src/main.c ****         osSemaphoreRelease(workerStatusMutex);
 548              		.loc 1 309 25 is_stmt 0 view .LVU141
 549 0074 184B     		ldr	r3, .L20+36
 550 0076 1B78     		ldrb	r3, [r3]
 309:Core/Src/main.c ****         osSemaphoreRelease(workerStatusMutex);
 551              		.loc 1 309 10 view .LVU142
 552 0078 002B     		cmp	r3, #0
 553 007a C3D1     		bne	.L16
 310:Core/Src/main.c **** 
 554              		.loc 1 310 9 is_stmt 1 view .LVU143
 555 007c 0D4B     		ldr	r3, .L20
 556 007e 1868     		ldr	r0, [r3]
 557 0080 FFF7FEFF 		bl	osSemaphoreRelease
 558              	.LVL40:
 312:Core/Src/main.c ****         // There is LED command in the queue
 559              		.loc 1 312 9 view .LVU144
 312:Core/Src/main.c ****         // There is LED command in the queue
 560              		.loc 1 312 21 is_stmt 0 view .LVU145
 561 0084 0D4B     		ldr	r3, .L20+8
 562 0086 1868     		ldr	r0, [r3]
 563 0088 0A21     		movs	r1, #10
 564 008a FFF7FEFF 		bl	queuePopItemByOpcode
 565              	.LVL41:
 314:Core/Src/main.c ****           commandLED = commandIn;
 566              		.loc 1 314 9 is_stmt 1 view .LVU146
 314:Core/Src/main.c ****           commandLED = commandIn;
 567              		.loc 1 314 12 is_stmt 0 view .LVU147
 568 008e 0C4B     		ldr	r3, .L20+12
 569 0090 9842     		cmp	r0, r3
 570 0092 BBD0     		beq	.L17
 315:Core/Src/main.c ****           transmitCharArray("Wake up led worker\n");
 571              		.loc 1 315 11 is_stmt 1 view .LVU148
 315:Core/Src/main.c ****           transmitCharArray("Wake up led worker\n");
 572              		.loc 1 315 22 is_stmt 0 view .LVU149
 573 0094 114B     		ldr	r3, .L20+40
 574 0096 1880     		strh	r0, [r3]
 316:Core/Src/main.c ****           //Wake up led worker thread
 575              		.loc 1 316 11 is_stmt 1 view .LVU150
 576 0098 1148     		ldr	r0, .L20+44
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 35


 577              	.LVL42:
 316:Core/Src/main.c ****           //Wake up led worker thread
 578              		.loc 1 316 11 is_stmt 0 view .LVU151
 579 009a FFF7FEFF 		bl	transmitCharArray
 580              	.LVL43:
 318:Core/Src/main.c ****         } else {
 581              		.loc 1 318 11 is_stmt 1 view .LVU152
 582 009e 114B     		ldr	r3, .L20+48
 583 00a0 1868     		ldr	r0, [r3]
 584 00a2 FFF7FEFF 		bl	osSemaphoreRelease
 585              	.LVL44:
 586 00a6 B1E7     		b	.L17
 587              	.LVL45:
 588              	.L18:
 340:Core/Src/main.c ****       }
 589              		.loc 1 340 9 view .LVU153
 590 00a8 024B     		ldr	r3, .L20
 591 00aa 1868     		ldr	r0, [r3]
 592 00ac FFF7FEFF 		bl	osSemaphoreRelease
 593              	.LVL46:
 594 00b0 CBE7     		b	.L15
 595              	.L21:
 596 00b2 C046     		.align	2
 597              	.L20:
 598 00b4 00000000 		.word	workerStatusMutex
 599 00b8 00000000 		.word	motorWorkerBusy
 600 00bc 00000000 		.word	cmdQueue
 601 00c0 FFFF0000 		.word	65535
 602 00c4 00000000 		.word	commandMotor
 603 00c8 2C000000 		.word	.LC23
 604 00cc 00000000 		.word	motorRouterSem01
 605 00d0 00000000 		.word	countSem01
 606 00d4 00000000 		.word	.LC12
 607 00d8 00000000 		.word	ledWorkerBusy
 608 00dc 00000000 		.word	commandLED
 609 00e0 18000000 		.word	.LC18
 610 00e4 00000000 		.word	ledRouterSem01
 611              		.cfi_endproc
 612              	.LFE53:
 614              		.section	.rodata.StartLEDTask.str1.4,"aMS",%progbits,1
 615              		.align	2
 616              	.LC28:
 617 0000 4C454420 		.ascii	"LED worker Got the signal\012\000"
 617      776F726B 
 617      65722047 
 617      6F742074 
 617      68652073 
 618              		.global	__aeabi_idiv
 619 001b 00       		.align	2
 620              	.LC33:
 621 001c 4C454420 		.ascii	"LED worker go to sleep\012\000"
 621      776F726B 
 621      65722067 
 621      6F20746F 
 621      20736C65 
 622              		.section	.text.StartLEDTask,"ax",%progbits
 623              		.align	1
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 36


 624              		.global	StartLEDTask
 625              		.syntax unified
 626              		.code	16
 627              		.thumb_func
 629              	StartLEDTask:
 630              	.LVL47:
 631              	.LFB55:
 388:Core/Src/main.c ****   extern volatile uint16_t commandLED;
 632              		.loc 1 388 1 view -0
 633              		.cfi_startproc
 634              		@ args = 0, pretend = 0, frame = 48
 635              		@ frame_needed = 0, uses_anonymous_args = 0
 388:Core/Src/main.c ****   extern volatile uint16_t commandLED;
 636              		.loc 1 388 1 is_stmt 0 view .LVU155
 637 0000 70B5     		push	{r4, r5, r6, lr}
 638              	.LCFI4:
 639              		.cfi_def_cfa_offset 16
 640              		.cfi_offset 4, -16
 641              		.cfi_offset 5, -12
 642              		.cfi_offset 6, -8
 643              		.cfi_offset 14, -4
 644 0002 8CB0     		sub	sp, sp, #48
 645              	.LCFI5:
 646              		.cfi_def_cfa_offset 64
 389:Core/Src/main.c ****   volatile uint8_t LEDColor = 0, LEDAction = 0, LEDSpeed = 0;
 647              		.loc 1 389 3 is_stmt 1 view .LVU156
 390:Core/Src/main.c ****   volatile uint32_t colorMask[5] = {GPIO_ODR_6, GPIO_ODR_9, GPIO_ODR_7, GPIO_ODR_8, GPIO_ODR_6 | GP
 648              		.loc 1 390 3 view .LVU157
 390:Core/Src/main.c ****   volatile uint32_t colorMask[5] = {GPIO_ODR_6, GPIO_ODR_9, GPIO_ODR_7, GPIO_ODR_8, GPIO_ODR_6 | GP
 649              		.loc 1 390 20 is_stmt 0 view .LVU158
 650 0004 0024     		movs	r4, #0
 651 0006 2F23     		movs	r3, #47
 652 0008 6B44     		add	r3, r3, sp
 653 000a 1C70     		strb	r4, [r3]
 390:Core/Src/main.c ****   volatile uint32_t colorMask[5] = {GPIO_ODR_6, GPIO_ODR_9, GPIO_ODR_7, GPIO_ODR_8, GPIO_ODR_6 | GP
 654              		.loc 1 390 34 view .LVU159
 655 000c 2E23     		movs	r3, #46
 656 000e 6B44     		add	r3, r3, sp
 657 0010 1C70     		strb	r4, [r3]
 390:Core/Src/main.c ****   volatile uint32_t colorMask[5] = {GPIO_ODR_6, GPIO_ODR_9, GPIO_ODR_7, GPIO_ODR_8, GPIO_ODR_6 | GP
 658              		.loc 1 390 49 view .LVU160
 659 0012 2D23     		movs	r3, #45
 660 0014 6B44     		add	r3, r3, sp
 661 0016 1C70     		strb	r4, [r3]
 391:Core/Src/main.c ****   volatile uint8_t blink[4] = {0,0,0,0};
 662              		.loc 1 391 3 is_stmt 1 view .LVU161
 391:Core/Src/main.c ****   volatile uint8_t blink[4] = {0,0,0,0};
 663              		.loc 1 391 21 is_stmt 0 view .LVU162
 664 0018 06A9     		add	r1, sp, #24
 665 001a 5B4B     		ldr	r3, .L41
 666 001c 0A00     		movs	r2, r1
 667 001e 61CB     		ldmia	r3!, {r0, r5, r6}
 668 0020 61C2     		stmia	r2!, {r0, r5, r6}
 669              	.LVL48:
 391:Core/Src/main.c ****   volatile uint8_t blink[4] = {0,0,0,0};
 670              		.loc 1 391 21 view .LVU163
 671 0022 03CB     		ldmia	r3!, {r0, r1}
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 37


 672 0024 03C2     		stmia	r2!, {r0, r1}
 392:Core/Src/main.c ****   uint8_t blinkInterval = 0;
 673              		.loc 1 392 3 is_stmt 1 view .LVU164
 392:Core/Src/main.c ****   uint8_t blinkInterval = 0;
 674              		.loc 1 392 20 is_stmt 0 view .LVU165
 675 0026 0594     		str	r4, [sp, #20]
 393:Core/Src/main.c ****   volatile uint32_t startTime[4] = {0,0,0,0};
 676              		.loc 1 393 3 is_stmt 1 view .LVU166
 677              	.LVL49:
 394:Core/Src/main.c ****   volatile uint32_t currentTime = 0;
 678              		.loc 1 394 3 view .LVU167
 394:Core/Src/main.c ****   volatile uint32_t currentTime = 0;
 679              		.loc 1 394 21 is_stmt 0 view .LVU168
 680 0028 1022     		movs	r2, #16
 681 002a 0021     		movs	r1, #0
 682 002c 01A8     		add	r0, sp, #4
 683 002e FFF7FEFF 		bl	memset
 684              	.LVL50:
 395:Core/Src/main.c **** 
 685              		.loc 1 395 3 is_stmt 1 view .LVU169
 395:Core/Src/main.c **** 
 686              		.loc 1 395 21 is_stmt 0 view .LVU170
 687 0032 0094     		str	r4, [sp]
 688 0034 58E0     		b	.L37
 689              	.LVL51:
 690              	.L24:
 691              	.LBB31:
 692              	.LBB32:
 415:Core/Src/main.c ****     }
 693              		.loc 1 415 7 is_stmt 1 view .LVU171
 415:Core/Src/main.c ****     }
 694              		.loc 1 415 16 is_stmt 0 view .LVU172
 695 0036 05AA     		add	r2, sp, #20
 696 0038 0021     		movs	r1, #0
 697 003a D154     		strb	r1, [r2, r3]
 414:Core/Src/main.c ****       blink[i] = 0;
 698              		.loc 1 414 29 is_stmt 1 discriminator 3 view .LVU173
 699 003c 0133     		adds	r3, r3, #1
 700              	.LVL52:
 701              	.L23:
 414:Core/Src/main.c ****       blink[i] = 0;
 702              		.loc 1 414 23 discriminator 1 view .LVU174
 703 003e 032B     		cmp	r3, #3
 704 0040 F9DD     		ble	.L24
 705              	.LBE32:
 418:Core/Src/main.c ****       //On
 706              		.loc 1 418 5 view .LVU175
 707 0042 2E23     		movs	r3, #46
 708              	.LVL53:
 418:Core/Src/main.c ****       //On
 709              		.loc 1 418 5 is_stmt 0 view .LVU176
 710 0044 6B44     		add	r3, r3, sp
 711 0046 1B78     		ldrb	r3, [r3]
 712 0048 DAB2     		uxtb	r2, r3
 713 004a 032B     		cmp	r3, #3
 714 004c 71D0     		beq	.L25
 715 004e 032A     		cmp	r2, #3
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 38


 716 0050 0FD8     		bhi	.L26
 717 0052 012A     		cmp	r2, #1
 718 0054 27D0     		beq	.L27
 719 0056 022A     		cmp	r2, #2
 720 0058 30D1     		bne	.L29
 425:Core/Src/main.c ****         break;
 721              		.loc 1 425 9 is_stmt 1 view .LVU177
 425:Core/Src/main.c ****         break;
 722              		.loc 1 425 42 is_stmt 0 view .LVU178
 723 005a 2F23     		movs	r3, #47
 724 005c 6B44     		add	r3, r3, sp
 725 005e 1B78     		ldrb	r3, [r3]
 726 0060 013B     		subs	r3, r3, #1
 425:Core/Src/main.c ****         break;
 727              		.loc 1 425 33 view .LVU179
 728 0062 9B00     		lsls	r3, r3, #2
 729 0064 06AA     		add	r2, sp, #24
 730 0066 9958     		ldr	r1, [r3, r2]
 425:Core/Src/main.c ****         break;
 731              		.loc 1 425 14 view .LVU180
 732 0068 484A     		ldr	r2, .L41+4
 733 006a 5369     		ldr	r3, [r2, #20]
 425:Core/Src/main.c ****         break;
 734              		.loc 1 425 20 view .LVU181
 735 006c 8B43     		bics	r3, r1
 736 006e 5361     		str	r3, [r2, #20]
 426:Core/Src/main.c ****       //Toggle
 737              		.loc 1 426 9 is_stmt 1 view .LVU182
 448:Core/Src/main.c ****       // The LED bliks for 10s
 738              		.loc 1 448 5 view .LVU183
 739 0070 24E0     		b	.L29
 740              	.L26:
 418:Core/Src/main.c ****       //On
 741              		.loc 1 418 5 is_stmt 0 view .LVU184
 742 0072 042A     		cmp	r2, #4
 743 0074 22D1     		bne	.L29
 433:Core/Src/main.c ****         if (LEDColor == 5) {
 744              		.loc 1 433 9 is_stmt 1 view .LVU185
 745              	.LVL54:
 434:Core/Src/main.c ****           blink[0] = 1;
 746              		.loc 1 434 9 view .LVU186
 434:Core/Src/main.c ****           blink[0] = 1;
 747              		.loc 1 434 22 is_stmt 0 view .LVU187
 748 0076 2F23     		movs	r3, #47
 749 0078 6B44     		add	r3, r3, sp
 750 007a 1B78     		ldrb	r3, [r3]
 434:Core/Src/main.c ****           blink[0] = 1;
 751              		.loc 1 434 12 view .LVU188
 752 007c 052B     		cmp	r3, #5
 753 007e 64D0     		beq	.L39
 441:Core/Src/main.c ****         }
 754              		.loc 1 441 11 is_stmt 1 view .LVU189
 441:Core/Src/main.c ****         }
 755              		.loc 1 441 25 is_stmt 0 view .LVU190
 756 0080 2F23     		movs	r3, #47
 757 0082 6B44     		add	r3, r3, sp
 758 0084 1B78     		ldrb	r3, [r3]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 39


 759 0086 013B     		subs	r3, r3, #1
 441:Core/Src/main.c ****         }
 760              		.loc 1 441 29 view .LVU191
 761 0088 05AA     		add	r2, sp, #20
 762 008a 0121     		movs	r1, #1
 763 008c D154     		strb	r1, [r2, r3]
 764              	.L32:
 443:Core/Src/main.c ****         break;
 765              		.loc 1 443 9 is_stmt 1 view .LVU192
 443:Core/Src/main.c ****         break;
 766              		.loc 1 443 36 is_stmt 0 view .LVU193
 767 008e 404B     		ldr	r3, .L41+8
 768 0090 1B88     		ldrh	r3, [r3]
 443:Core/Src/main.c ****         break;
 769              		.loc 1 443 23 view .LVU194
 770 0092 0F22     		movs	r2, #15
 771 0094 1340     		ands	r3, r2
 772              	.LVL55:
 444:Core/Src/main.c ****       default:
 773              		.loc 1 444 9 is_stmt 1 view .LVU195
 448:Core/Src/main.c ****       // The LED bliks for 10s
 774              		.loc 1 448 5 view .LVU196
 775              	.LBB33:
 450:Core/Src/main.c ****       while (loopTimes > 0) {
 776              		.loc 1 450 7 view .LVU197
 450:Core/Src/main.c ****       while (loopTimes > 0) {
 777              		.loc 1 450 40 is_stmt 0 view .LVU198
 778 0096 6425     		movs	r5, #100
 779 0098 5D43     		muls	r5, r3
 450:Core/Src/main.c ****       while (loopTimes > 0) {
 780              		.loc 1 450 33 view .LVU199
 781 009a 2900     		movs	r1, r5
 782 009c 3D48     		ldr	r0, .L41+12
 783 009e FFF7FEFF 		bl	__aeabi_idiv
 784              	.LVL56:
 450:Core/Src/main.c ****       while (loopTimes > 0) {
 785              		.loc 1 450 15 view .LVU200
 786 00a2 04B2     		sxth	r4, r0
 787              	.LVL57:
 451:Core/Src/main.c ****         for (int i = 0; i < 4; i++) {
 788              		.loc 1 451 7 is_stmt 1 view .LVU201
 451:Core/Src/main.c ****         for (int i = 0; i < 4; i++) {
 789              		.loc 1 451 13 is_stmt 0 view .LVU202
 790 00a4 6CE0     		b	.L33
 791              	.LVL58:
 792              	.L27:
 451:Core/Src/main.c ****         for (int i = 0; i < 4; i++) {
 793              		.loc 1 451 13 view .LVU203
 794              	.LBE33:
 421:Core/Src/main.c ****         break;
 795              		.loc 1 421 9 is_stmt 1 view .LVU204
 421:Core/Src/main.c ****         break;
 796              		.loc 1 421 41 is_stmt 0 view .LVU205
 797 00a6 2F23     		movs	r3, #47
 798 00a8 6B44     		add	r3, r3, sp
 799 00aa 1B78     		ldrb	r3, [r3]
 800 00ac 013B     		subs	r3, r3, #1
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 40


 421:Core/Src/main.c ****         break;
 801              		.loc 1 421 32 view .LVU206
 802 00ae 9B00     		lsls	r3, r3, #2
 803 00b0 06AA     		add	r2, sp, #24
 804 00b2 9958     		ldr	r1, [r3, r2]
 421:Core/Src/main.c ****         break;
 805              		.loc 1 421 14 view .LVU207
 806 00b4 354A     		ldr	r2, .L41+4
 807 00b6 5369     		ldr	r3, [r2, #20]
 421:Core/Src/main.c ****         break;
 808              		.loc 1 421 20 view .LVU208
 809 00b8 0B43     		orrs	r3, r1
 810 00ba 5361     		str	r3, [r2, #20]
 422:Core/Src/main.c ****       //Off
 811              		.loc 1 422 9 is_stmt 1 view .LVU209
 448:Core/Src/main.c ****       // The LED bliks for 10s
 812              		.loc 1 448 5 view .LVU210
 813              	.LVL59:
 814              	.L29:
 462:Core/Src/main.c **** 
 815              		.loc 1 462 5 view .LVU211
 462:Core/Src/main.c **** 
 816              		.loc 1 462 16 is_stmt 0 view .LVU212
 817 00bc 344B     		ldr	r3, .L41+8
 818 00be 0022     		movs	r2, #0
 819 00c0 1A80     		strh	r2, [r3]
 464:Core/Src/main.c **** 
 820              		.loc 1 464 5 is_stmt 1 view .LVU213
 821 00c2 3548     		ldr	r0, .L41+16
 822 00c4 FFF7FEFF 		bl	transmitCharArray
 823              	.LVL60:
 466:Core/Src/main.c ****     ledWorkerBusy = 0;
 824              		.loc 1 466 5 view .LVU214
 825 00c8 0121     		movs	r1, #1
 826 00ca 344C     		ldr	r4, .L41+20
 827 00cc 2068     		ldr	r0, [r4]
 828 00ce 4942     		rsbs	r1, r1, #0
 829 00d0 FFF7FEFF 		bl	osSemaphoreAcquire
 830              	.LVL61:
 467:Core/Src/main.c ****     osSemaphoreRelease(workerStatusMutex);
 831              		.loc 1 467 5 view .LVU215
 467:Core/Src/main.c ****     osSemaphoreRelease(workerStatusMutex);
 832              		.loc 1 467 19 is_stmt 0 view .LVU216
 833 00d4 324B     		ldr	r3, .L41+24
 834 00d6 0022     		movs	r2, #0
 835 00d8 1A70     		strb	r2, [r3]
 468:Core/Src/main.c ****     osSemaphoreRelease(countSem01);
 836              		.loc 1 468 5 is_stmt 1 view .LVU217
 837 00da 2068     		ldr	r0, [r4]
 838 00dc FFF7FEFF 		bl	osSemaphoreRelease
 839              	.LVL62:
 469:Core/Src/main.c ****   }
 840              		.loc 1 469 5 view .LVU218
 841 00e0 304B     		ldr	r3, .L41+28
 842 00e2 1868     		ldr	r0, [r3]
 843 00e4 FFF7FEFF 		bl	osSemaphoreRelease
 844              	.LVL63:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 41


 845              	.LBE31:
 398:Core/Src/main.c ****   {
 846              		.loc 1 398 3 view .LVU219
 847              	.L37:
 398:Core/Src/main.c ****   {
 848              		.loc 1 398 3 view .LVU220
 849              	.LBB38:
 401:Core/Src/main.c ****     transmitCharArray("LED worker Got the signal\n");
 850              		.loc 1 401 5 view .LVU221
 851 00e8 0125     		movs	r5, #1
 852 00ea 6D42     		rsbs	r5, r5, #0
 853 00ec 2E4B     		ldr	r3, .L41+32
 854 00ee 1868     		ldr	r0, [r3]
 855 00f0 2900     		movs	r1, r5
 856 00f2 FFF7FEFF 		bl	osSemaphoreAcquire
 857              	.LVL64:
 402:Core/Src/main.c **** 
 858              		.loc 1 402 5 view .LVU222
 859 00f6 2D48     		ldr	r0, .L41+36
 860 00f8 FFF7FEFF 		bl	transmitCharArray
 861              	.LVL65:
 404:Core/Src/main.c ****     ledWorkerBusy = 1;
 862              		.loc 1 404 5 view .LVU223
 863 00fc 274C     		ldr	r4, .L41+20
 864 00fe 2068     		ldr	r0, [r4]
 865 0100 2900     		movs	r1, r5
 866 0102 FFF7FEFF 		bl	osSemaphoreAcquire
 867              	.LVL66:
 405:Core/Src/main.c ****     osSemaphoreRelease(workerStatusMutex);
 868              		.loc 1 405 5 view .LVU224
 405:Core/Src/main.c ****     osSemaphoreRelease(workerStatusMutex);
 869              		.loc 1 405 19 is_stmt 0 view .LVU225
 870 0106 264B     		ldr	r3, .L41+24
 871 0108 0122     		movs	r2, #1
 872 010a 1A70     		strb	r2, [r3]
 406:Core/Src/main.c **** 
 873              		.loc 1 406 5 is_stmt 1 view .LVU226
 874 010c 2068     		ldr	r0, [r4]
 875 010e FFF7FEFF 		bl	osSemaphoreRelease
 876              	.LVL67:
 408:Core/Src/main.c ****     LEDAction = (commandLED & 0x00F0) >> 4;
 877              		.loc 1 408 5 view .LVU227
 408:Core/Src/main.c ****     LEDAction = (commandLED & 0x00F0) >> 4;
 878              		.loc 1 408 38 is_stmt 0 view .LVU228
 879 0112 1F49     		ldr	r1, .L41+8
 880 0114 0B88     		ldrh	r3, [r1]
 881 0116 1B0A     		lsrs	r3, r3, #8
 882 0118 0F22     		movs	r2, #15
 883 011a 1340     		ands	r3, r2
 408:Core/Src/main.c ****     LEDAction = (commandLED & 0x00F0) >> 4;
 884              		.loc 1 408 14 view .LVU229
 885 011c 2F20     		movs	r0, #47
 886 011e 6844     		add	r0, r0, sp
 887 0120 0370     		strb	r3, [r0]
 409:Core/Src/main.c **** 
 888              		.loc 1 409 5 is_stmt 1 view .LVU230
 409:Core/Src/main.c **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 42


 889              		.loc 1 409 39 is_stmt 0 view .LVU231
 890 0122 0B88     		ldrh	r3, [r1]
 891 0124 1B09     		lsrs	r3, r3, #4
 892 0126 1A40     		ands	r2, r3
 409:Core/Src/main.c **** 
 893              		.loc 1 409 15 view .LVU232
 894 0128 2E23     		movs	r3, #46
 895 012a 6B44     		add	r3, r3, sp
 896 012c 1A70     		strb	r2, [r3]
 411:Core/Src/main.c **** 
 897              		.loc 1 411 5 is_stmt 1 view .LVU233
 898              	.LVL68:
 414:Core/Src/main.c ****       blink[i] = 0;
 899              		.loc 1 414 5 view .LVU234
 900              	.LBB36:
 414:Core/Src/main.c ****       blink[i] = 0;
 901              		.loc 1 414 10 view .LVU235
 414:Core/Src/main.c ****       blink[i] = 0;
 902              		.loc 1 414 14 is_stmt 0 view .LVU236
 903 012e 0023     		movs	r3, #0
 414:Core/Src/main.c ****       blink[i] = 0;
 904              		.loc 1 414 5 view .LVU237
 905 0130 85E7     		b	.L23
 906              	.LVL69:
 907              	.L25:
 414:Core/Src/main.c ****       blink[i] = 0;
 908              		.loc 1 414 5 view .LVU238
 909              	.LBE36:
 429:Core/Src/main.c ****         break;
 910              		.loc 1 429 9 is_stmt 1 view .LVU239
 429:Core/Src/main.c ****         break;
 911              		.loc 1 429 41 is_stmt 0 view .LVU240
 912 0132 2F23     		movs	r3, #47
 913 0134 6B44     		add	r3, r3, sp
 914 0136 1B78     		ldrb	r3, [r3]
 915 0138 013B     		subs	r3, r3, #1
 429:Core/Src/main.c ****         break;
 916              		.loc 1 429 32 view .LVU241
 917 013a 9B00     		lsls	r3, r3, #2
 918 013c 06AA     		add	r2, sp, #24
 919 013e 9958     		ldr	r1, [r3, r2]
 429:Core/Src/main.c ****         break;
 920              		.loc 1 429 14 view .LVU242
 921 0140 124A     		ldr	r2, .L41+4
 922 0142 5369     		ldr	r3, [r2, #20]
 429:Core/Src/main.c ****         break;
 923              		.loc 1 429 20 view .LVU243
 924 0144 4B40     		eors	r3, r1
 925 0146 5361     		str	r3, [r2, #20]
 430:Core/Src/main.c ****       //Blink
 926              		.loc 1 430 9 is_stmt 1 view .LVU244
 448:Core/Src/main.c ****       // The LED bliks for 10s
 927              		.loc 1 448 5 view .LVU245
 928 0148 B8E7     		b	.L29
 929              	.LVL70:
 930              	.L39:
 435:Core/Src/main.c ****           blink[1] = 1;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 43


 931              		.loc 1 435 11 view .LVU246
 435:Core/Src/main.c ****           blink[1] = 1;
 932              		.loc 1 435 20 is_stmt 0 view .LVU247
 933 014a 05AB     		add	r3, sp, #20
 934 014c 0122     		movs	r2, #1
 935 014e 1A70     		strb	r2, [r3]
 436:Core/Src/main.c ****           blink[2] = 1;
 936              		.loc 1 436 11 is_stmt 1 view .LVU248
 436:Core/Src/main.c ****           blink[2] = 1;
 937              		.loc 1 436 20 is_stmt 0 view .LVU249
 938 0150 5A70     		strb	r2, [r3, #1]
 437:Core/Src/main.c ****           blink[3] = 1;
 939              		.loc 1 437 11 is_stmt 1 view .LVU250
 437:Core/Src/main.c ****           blink[3] = 1;
 940              		.loc 1 437 20 is_stmt 0 view .LVU251
 941 0152 9A70     		strb	r2, [r3, #2]
 438:Core/Src/main.c ****         }
 942              		.loc 1 438 11 is_stmt 1 view .LVU252
 438:Core/Src/main.c ****         }
 943              		.loc 1 438 20 is_stmt 0 view .LVU253
 944 0154 DA70     		strb	r2, [r3, #3]
 945 0156 9AE7     		b	.L32
 946              	.LVL71:
 947              	.L34:
 948              	.LBB37:
 949              	.LBB34:
 452:Core/Src/main.c ****           if (blink[i]) {
 950              		.loc 1 452 33 is_stmt 1 discriminator 2 view .LVU254
 951 0158 0133     		adds	r3, r3, #1
 952              	.LVL72:
 953              	.L36:
 452:Core/Src/main.c ****           if (blink[i]) {
 954              		.loc 1 452 27 discriminator 1 view .LVU255
 955 015a 032B     		cmp	r3, #3
 956 015c 0BDC     		bgt	.L40
 453:Core/Src/main.c ****             GPIOC->ODR ^= colorMask[i];
 957              		.loc 1 453 11 view .LVU256
 453:Core/Src/main.c ****             GPIOC->ODR ^= colorMask[i];
 958              		.loc 1 453 20 is_stmt 0 view .LVU257
 959 015e 05AA     		add	r2, sp, #20
 960 0160 D25C     		ldrb	r2, [r2, r3]
 453:Core/Src/main.c ****             GPIOC->ODR ^= colorMask[i];
 961              		.loc 1 453 14 view .LVU258
 962 0162 002A     		cmp	r2, #0
 963 0164 F8D0     		beq	.L34
 454:Core/Src/main.c ****           }
 964              		.loc 1 454 13 is_stmt 1 view .LVU259
 454:Core/Src/main.c ****           }
 965              		.loc 1 454 36 is_stmt 0 view .LVU260
 966 0166 9A00     		lsls	r2, r3, #2
 967 0168 06A9     		add	r1, sp, #24
 968 016a 5058     		ldr	r0, [r2, r1]
 454:Core/Src/main.c ****           }
 969              		.loc 1 454 18 view .LVU261
 970 016c 0749     		ldr	r1, .L41+4
 971 016e 4A69     		ldr	r2, [r1, #20]
 454:Core/Src/main.c ****           }
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 44


 972              		.loc 1 454 24 view .LVU262
 973 0170 4240     		eors	r2, r0
 974 0172 4A61     		str	r2, [r1, #20]
 975 0174 F0E7     		b	.L34
 976              	.L40:
 977              	.LBE34:
 457:Core/Src/main.c ****         loopTimes--;
 978              		.loc 1 457 9 is_stmt 1 view .LVU263
 979 0176 2800     		movs	r0, r5
 980 0178 FFF7FEFF 		bl	osDelay
 981              	.LVL73:
 458:Core/Src/main.c ****       }
 982              		.loc 1 458 9 view .LVU264
 458:Core/Src/main.c ****       }
 983              		.loc 1 458 18 is_stmt 0 view .LVU265
 984 017c 013C     		subs	r4, r4, #1
 985              	.LVL74:
 458:Core/Src/main.c ****       }
 986              		.loc 1 458 18 view .LVU266
 987 017e 24B2     		sxth	r4, r4
 988              	.LVL75:
 989              	.L33:
 451:Core/Src/main.c ****         for (int i = 0; i < 4; i++) {
 990              		.loc 1 451 24 is_stmt 1 view .LVU267
 991 0180 002C     		cmp	r4, #0
 992 0182 9BDD     		ble	.L29
 993              	.LBB35:
 452:Core/Src/main.c ****           if (blink[i]) {
 994              		.loc 1 452 18 is_stmt 0 view .LVU268
 995 0184 0023     		movs	r3, #0
 996 0186 E8E7     		b	.L36
 997              	.L42:
 998              		.align	2
 999              	.L41:
 1000 0188 00000000 		.word	.LANCHOR0
 1001 018c 00080048 		.word	1207961600
 1002 0190 00000000 		.word	commandLED
 1003 0194 10270000 		.word	10000
 1004 0198 1C000000 		.word	.LC33
 1005 019c 00000000 		.word	workerStatusMutex
 1006 01a0 00000000 		.word	ledWorkerBusy
 1007 01a4 00000000 		.word	countSem01
 1008 01a8 00000000 		.word	ledRouterSem01
 1009 01ac 00000000 		.word	.LC28
 1010              	.LBE35:
 1011              	.LBE37:
 1012              	.LBE38:
 1013              		.cfi_endproc
 1014              	.LFE55:
 1016              		.section	.text.pwm_init,"ax",%progbits
 1017              		.align	1
 1018              		.global	pwm_init
 1019              		.syntax unified
 1020              		.code	16
 1021              		.thumb_func
 1023              	pwm_init:
 1024              	.LFB44:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 45


 1025              		.file 3 "Core/Src/motor.c"
   1:Core/Src/motor.c **** /* ------------------------------------------------------------------------------------------------
   2:Core/Src/motor.c ****  *  Motor Control and Initialization Functions
   3:Core/Src/motor.c ****  * ------------------------------------------------------------------------------------------------
   4:Core/Src/motor.c ****  */
   5:Core/Src/motor.c **** #include "motor.h"
   6:Core/Src/motor.c **** #include "stm32f0xx.h"
   7:Core/Src/motor.c **** #include "stm32f072xb.h"
   8:Core/Src/motor.c **** 
   9:Core/Src/motor.c **** volatile int16_t error_integral = 0;    // Integrated error signal
  10:Core/Src/motor.c **** volatile uint8_t duty_cycle = 0;    	// Output PWM duty cycle
  11:Core/Src/motor.c **** // volatile int16_t target_rpm = 0;    	// Desired speed target
  12:Core/Src/motor.c **** //Global variables to pass command to worker threads
  13:Core/Src/motor.c **** extern volatile int16_t target_rpm;
  14:Core/Src/motor.c **** volatile int16_t motor_speed = 0;   	// Measured motor speed
  15:Core/Src/motor.c **** volatile int8_t adc_value = 0;      	// ADC measured motor current
  16:Core/Src/motor.c **** volatile int16_t error = 0;         	// Speed error signal
  17:Core/Src/motor.c **** volatile uint8_t Kp = 5;            	// Proportional gain
  18:Core/Src/motor.c **** volatile uint8_t Ki = 5;            	// Integral gain
  19:Core/Src/motor.c **** volatile uint16_t speedHistory[HIST_LEN];   //Short history of speed measurements
  20:Core/Src/motor.c **** 
  21:Core/Src/motor.c **** // Sets up the entire motor drive system
  22:Core/Src/motor.c **** void motor_init(void) {
  23:Core/Src/motor.c ****     pwm_init();
  24:Core/Src/motor.c ****     encoder_init();
  25:Core/Src/motor.c ****     ADC_init();
  26:Core/Src/motor.c ****     for (int i = 0; i < HIST_LEN; i++)
  27:Core/Src/motor.c ****         speedHistory[i] = i;
  28:Core/Src/motor.c **** }
  29:Core/Src/motor.c **** 
  30:Core/Src/motor.c **** // Sets up the PWM and direction signals to drive the H-Bridge
  31:Core/Src/motor.c **** void pwm_init(void) {
 1026              		.loc 3 31 21 is_stmt 1 view -0
 1027              		.cfi_startproc
 1028              		@ args = 0, pretend = 0, frame = 0
 1029              		@ frame_needed = 0, uses_anonymous_args = 0
 1030              		@ link register save eliminated.
  32:Core/Src/motor.c ****     
  33:Core/Src/motor.c ****     // Set up pin PA4 for H-bridge PWM output (TIMER 14 CH1)
  34:Core/Src/motor.c ****     GPIOA->MODER |= (1 << 9);
 1031              		.loc 3 34 5 view .LVU270
 1032              		.loc 3 34 10 is_stmt 0 view .LVU271
 1033 0000 9023     		movs	r3, #144
 1034 0002 DB05     		lsls	r3, r3, #23
 1035 0004 1968     		ldr	r1, [r3]
 1036              		.loc 3 34 18 view .LVU272
 1037 0006 8022     		movs	r2, #128
 1038 0008 9200     		lsls	r2, r2, #2
 1039 000a 0A43     		orrs	r2, r1
 1040 000c 1A60     		str	r2, [r3]
  35:Core/Src/motor.c ****     GPIOA->MODER &= ~(1 << 8);
 1041              		.loc 3 35 5 is_stmt 1 view .LVU273
 1042              		.loc 3 35 10 is_stmt 0 view .LVU274
 1043 000e 1A68     		ldr	r2, [r3]
 1044              		.loc 3 35 18 view .LVU275
 1045 0010 1C49     		ldr	r1, .L44
 1046 0012 0A40     		ands	r2, r1
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 46


 1047 0014 1A60     		str	r2, [r3]
  36:Core/Src/motor.c **** 
  37:Core/Src/motor.c ****     // Set PA4 to AF4,
  38:Core/Src/motor.c ****     GPIOA->AFR[0] &= 0xFFF0FFFF; // clear PA4 bits,
 1048              		.loc 3 38 5 is_stmt 1 view .LVU276
 1049              		.loc 3 38 15 is_stmt 0 view .LVU277
 1050 0016 1A6A     		ldr	r2, [r3, #32]
 1051              		.loc 3 38 19 view .LVU278
 1052 0018 1B49     		ldr	r1, .L44+4
 1053 001a 0A40     		ands	r2, r1
 1054 001c 1A62     		str	r2, [r3, #32]
  39:Core/Src/motor.c ****     GPIOA->AFR[0] |= (1 << 18);
 1055              		.loc 3 39 5 is_stmt 1 view .LVU279
 1056              		.loc 3 39 15 is_stmt 0 view .LVU280
 1057 001e 196A     		ldr	r1, [r3, #32]
 1058              		.loc 3 39 19 view .LVU281
 1059 0020 8022     		movs	r2, #128
 1060 0022 D202     		lsls	r2, r2, #11
 1061 0024 0A43     		orrs	r2, r1
 1062 0026 1A62     		str	r2, [r3, #32]
  40:Core/Src/motor.c **** 
  41:Core/Src/motor.c ****     // Set up a PA5, PA6 as GPIO output pins for motor direction control
  42:Core/Src/motor.c ****     GPIOA->MODER &= 0xFFFFC3FF; // clear PA5, PA6 bits,
 1063              		.loc 3 42 5 is_stmt 1 view .LVU282
 1064              		.loc 3 42 10 is_stmt 0 view .LVU283
 1065 0028 1A68     		ldr	r2, [r3]
 1066              		.loc 3 42 18 view .LVU284
 1067 002a 1849     		ldr	r1, .L44+8
 1068 002c 0A40     		ands	r2, r1
 1069 002e 1A60     		str	r2, [r3]
  43:Core/Src/motor.c ****     GPIOA->MODER |= (1 << 10) | (1 << 12);
 1070              		.loc 3 43 5 is_stmt 1 view .LVU285
 1071              		.loc 3 43 10 is_stmt 0 view .LVU286
 1072 0030 1968     		ldr	r1, [r3]
 1073              		.loc 3 43 18 view .LVU287
 1074 0032 A022     		movs	r2, #160
 1075 0034 5201     		lsls	r2, r2, #5
 1076 0036 0A43     		orrs	r2, r1
 1077 0038 1A60     		str	r2, [r3]
  44:Core/Src/motor.c ****     
  45:Core/Src/motor.c ****     //Initialize one direction pin to high, the other low
  46:Core/Src/motor.c ****     GPIOA->ODR |= (1 << 5);
 1078              		.loc 3 46 5 is_stmt 1 view .LVU288
 1079              		.loc 3 46 10 is_stmt 0 view .LVU289
 1080 003a 5A69     		ldr	r2, [r3, #20]
 1081              		.loc 3 46 16 view .LVU290
 1082 003c 2021     		movs	r1, #32
 1083 003e 0A43     		orrs	r2, r1
 1084 0040 5A61     		str	r2, [r3, #20]
  47:Core/Src/motor.c ****     GPIOA->ODR &= ~(1 << 6);
 1085              		.loc 3 47 5 is_stmt 1 view .LVU291
 1086              		.loc 3 47 10 is_stmt 0 view .LVU292
 1087 0042 5A69     		ldr	r2, [r3, #20]
 1088              		.loc 3 47 16 view .LVU293
 1089 0044 2031     		adds	r1, r1, #32
 1090 0046 8A43     		bics	r2, r1
 1091 0048 5A61     		str	r2, [r3, #20]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 47


  48:Core/Src/motor.c **** 
  49:Core/Src/motor.c ****     // Set up PWM timer
  50:Core/Src/motor.c ****     RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 1092              		.loc 3 50 5 is_stmt 1 view .LVU294
 1093              		.loc 3 50 8 is_stmt 0 view .LVU295
 1094 004a 114A     		ldr	r2, .L44+12
 1095 004c D169     		ldr	r1, [r2, #28]
 1096              		.loc 3 50 18 view .LVU296
 1097 004e 8023     		movs	r3, #128
 1098 0050 5B00     		lsls	r3, r3, #1
 1099 0052 0B43     		orrs	r3, r1
 1100 0054 D361     		str	r3, [r2, #28]
  51:Core/Src/motor.c ****     TIM14->CR1 = 0;                         // Clear control registers
 1101              		.loc 3 51 5 is_stmt 1 view .LVU297
 1102              		.loc 3 51 16 is_stmt 0 view .LVU298
 1103 0056 0F4B     		ldr	r3, .L44+16
 1104 0058 0022     		movs	r2, #0
 1105 005a 1A60     		str	r2, [r3]
  52:Core/Src/motor.c ****     TIM14->CCMR1 = 0;                       // (prevents having to manually clear bits)
 1106              		.loc 3 52 5 is_stmt 1 view .LVU299
 1107              		.loc 3 52 18 is_stmt 0 view .LVU300
 1108 005c 9A61     		str	r2, [r3, #24]
  53:Core/Src/motor.c ****     TIM14->CCER = 0;
 1109              		.loc 3 53 5 is_stmt 1 view .LVU301
 1110              		.loc 3 53 17 is_stmt 0 view .LVU302
 1111 005e 1A62     		str	r2, [r3, #32]
  54:Core/Src/motor.c **** 
  55:Core/Src/motor.c ****     // Set output-compare CH1 to PWM1 mode and enable CCR1 preload buffer
  56:Core/Src/motor.c ****     TIM14->CCMR1 |= (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE);
 1112              		.loc 3 56 5 is_stmt 1 view .LVU303
 1113              		.loc 3 56 10 is_stmt 0 view .LVU304
 1114 0060 9969     		ldr	r1, [r3, #24]
 1115              		.loc 3 56 18 view .LVU305
 1116 0062 6820     		movs	r0, #104
 1117 0064 0143     		orrs	r1, r0
 1118 0066 9961     		str	r1, [r3, #24]
  57:Core/Src/motor.c ****     TIM14->CCER |= TIM_CCER_CC1E;           // Enable capture-compare channel 1
 1119              		.loc 3 57 5 is_stmt 1 view .LVU306
 1120              		.loc 3 57 10 is_stmt 0 view .LVU307
 1121 0068 186A     		ldr	r0, [r3, #32]
 1122              		.loc 3 57 17 view .LVU308
 1123 006a 0121     		movs	r1, #1
 1124 006c 0843     		orrs	r0, r1
 1125 006e 1862     		str	r0, [r3, #32]
  58:Core/Src/motor.c ****     TIM14->PSC = 1;                         // Run timer on 24Mhz
 1126              		.loc 3 58 5 is_stmt 1 view .LVU309
 1127              		.loc 3 58 16 is_stmt 0 view .LVU310
 1128 0070 9962     		str	r1, [r3, #40]
  59:Core/Src/motor.c ****     TIM14->ARR = 1200;                      // PWM at 20kHz
 1129              		.loc 3 59 5 is_stmt 1 view .LVU311
 1130              		.loc 3 59 16 is_stmt 0 view .LVU312
 1131 0072 9620     		movs	r0, #150
 1132 0074 C000     		lsls	r0, r0, #3
 1133 0076 D862     		str	r0, [r3, #44]
  60:Core/Src/motor.c ****     TIM14->CCR1 = 0;                        // Start PWM at 0% duty cycle
 1134              		.loc 3 60 5 is_stmt 1 view .LVU313
 1135              		.loc 3 60 17 is_stmt 0 view .LVU314
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 48


 1136 0078 5A63     		str	r2, [r3, #52]
  61:Core/Src/motor.c ****     
  62:Core/Src/motor.c ****     TIM14->CR1 |= TIM_CR1_CEN;              // Enable timer
 1137              		.loc 3 62 5 is_stmt 1 view .LVU315
 1138              		.loc 3 62 10 is_stmt 0 view .LVU316
 1139 007a 1A68     		ldr	r2, [r3]
 1140              		.loc 3 62 16 view .LVU317
 1141 007c 0A43     		orrs	r2, r1
 1142 007e 1A60     		str	r2, [r3]
  63:Core/Src/motor.c **** }
 1143              		.loc 3 63 1 view .LVU318
 1144              		@ sp needed
 1145 0080 7047     		bx	lr
 1146              	.L45:
 1147 0082 C046     		.align	2
 1148              	.L44:
 1149 0084 FFFEFFFF 		.word	-257
 1150 0088 FFFFF0FF 		.word	-983041
 1151 008c FFC3FFFF 		.word	-15361
 1152 0090 00100240 		.word	1073876992
 1153 0094 00200040 		.word	1073750016
 1154              		.cfi_endproc
 1155              	.LFE44:
 1157              		.global	__aeabi_uidiv
 1158              		.section	.text.pwm_setDutyCycle,"ax",%progbits
 1159              		.align	1
 1160              		.global	pwm_setDutyCycle
 1161              		.syntax unified
 1162              		.code	16
 1163              		.thumb_func
 1165              	pwm_setDutyCycle:
 1166              	.LVL76:
 1167              	.LFB45:
  64:Core/Src/motor.c **** 
  65:Core/Src/motor.c **** // Set the duty cycle of the PWM, accepts (0-100)
  66:Core/Src/motor.c **** void pwm_setDutyCycle(uint8_t duty) {
 1168              		.loc 3 66 37 is_stmt 1 view -0
 1169              		.cfi_startproc
 1170              		@ args = 0, pretend = 0, frame = 0
 1171              		@ frame_needed = 0, uses_anonymous_args = 0
 1172              		.loc 3 66 37 is_stmt 0 view .LVU320
 1173 0000 10B5     		push	{r4, lr}
 1174              	.LCFI6:
 1175              		.cfi_def_cfa_offset 8
 1176              		.cfi_offset 4, -8
 1177              		.cfi_offset 14, -4
  67:Core/Src/motor.c ****     if(duty <= 100) {
 1178              		.loc 3 67 5 is_stmt 1 view .LVU321
 1179              		.loc 3 67 7 is_stmt 0 view .LVU322
 1180 0002 6428     		cmp	r0, #100
 1181 0004 06D8     		bhi	.L46
  68:Core/Src/motor.c ****         TIM14->CCR1 = ((uint32_t)duty*TIM14->ARR)/100;  // Use linear transform to produce CCR1 val
 1182              		.loc 3 68 9 is_stmt 1 view .LVU323
 1183              		.loc 3 68 44 is_stmt 0 view .LVU324
 1184 0006 044C     		ldr	r4, .L48
 1185 0008 E36A     		ldr	r3, [r4, #44]
 1186              		.loc 3 68 38 view .LVU325
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 49


 1187 000a 5843     		muls	r0, r3
 1188              	.LVL77:
 1189              		.loc 3 68 50 view .LVU326
 1190 000c 6421     		movs	r1, #100
 1191 000e FFF7FEFF 		bl	__aeabi_uidiv
 1192              	.LVL78:
 1193              		.loc 3 68 21 view .LVU327
 1194 0012 6063     		str	r0, [r4, #52]
 1195              	.L46:
  69:Core/Src/motor.c ****         // (CCR1 == "pulse" parameter in PWM struct used by peripheral library)
  70:Core/Src/motor.c ****     }
  71:Core/Src/motor.c **** }
 1196              		.loc 3 71 1 view .LVU328
 1197              		@ sp needed
 1198 0014 10BD     		pop	{r4, pc}
 1199              	.L49:
 1200 0016 C046     		.align	2
 1201              	.L48:
 1202 0018 00200040 		.word	1073750016
 1203              		.cfi_endproc
 1204              	.LFE45:
 1206              		.section	.text.encoder_init,"ax",%progbits
 1207              		.align	1
 1208              		.global	encoder_init
 1209              		.syntax unified
 1210              		.code	16
 1211              		.thumb_func
 1213              	encoder_init:
 1214              	.LFB46:
  72:Core/Src/motor.c **** 
  73:Core/Src/motor.c **** // Sets up encoder interface to read motor speed
  74:Core/Src/motor.c **** void encoder_init(void) {
 1215              		.loc 3 74 25 is_stmt 1 view -0
 1216              		.cfi_startproc
 1217              		@ args = 0, pretend = 0, frame = 0
 1218              		@ frame_needed = 0, uses_anonymous_args = 0
 1219              		@ link register save eliminated.
  75:Core/Src/motor.c ****     
  76:Core/Src/motor.c ****     // Set up encoder input pins (TIMER 3 CH1 and CH2)
  77:Core/Src/motor.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 1220              		.loc 3 77 5 view .LVU330
 1221              		.loc 3 77 8 is_stmt 0 view .LVU331
 1222 0000 1F4A     		ldr	r2, .L51
 1223 0002 5169     		ldr	r1, [r2, #20]
 1224              		.loc 3 77 17 view .LVU332
 1225 0004 8023     		movs	r3, #128
 1226 0006 DB02     		lsls	r3, r3, #11
 1227 0008 0B43     		orrs	r3, r1
 1228 000a 5361     		str	r3, [r2, #20]
  78:Core/Src/motor.c **** 
  79:Core/Src/motor.c ****     // PB4(ENCA) and PB5(ENCB) are encoder 
  80:Core/Src/motor.c ****     GPIOB->MODER &= ~(GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0);
 1229              		.loc 3 80 5 is_stmt 1 view .LVU333
 1230              		.loc 3 80 10 is_stmt 0 view .LVU334
 1231 000c 1D4B     		ldr	r3, .L51+4
 1232 000e 1968     		ldr	r1, [r3]
 1233              		.loc 3 80 18 view .LVU335
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 50


 1234 0010 1D48     		ldr	r0, .L51+8
 1235 0012 0140     		ands	r1, r0
 1236 0014 1960     		str	r1, [r3]
  81:Core/Src/motor.c ****     GPIOB->MODER |= (GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1);
 1237              		.loc 3 81 5 is_stmt 1 view .LVU336
 1238              		.loc 3 81 10 is_stmt 0 view .LVU337
 1239 0016 1868     		ldr	r0, [r3]
 1240              		.loc 3 81 18 view .LVU338
 1241 0018 A021     		movs	r1, #160
 1242 001a 0901     		lsls	r1, r1, #4
 1243 001c 0143     		orrs	r1, r0
 1244 001e 1960     		str	r1, [r3]
  82:Core/Src/motor.c ****     GPIOB->AFR[0] |= ( (1 << 16) | (1 << 20) );
 1245              		.loc 3 82 5 is_stmt 1 view .LVU339
 1246              		.loc 3 82 15 is_stmt 0 view .LVU340
 1247 0020 186A     		ldr	r0, [r3, #32]
 1248              		.loc 3 82 19 view .LVU341
 1249 0022 8821     		movs	r1, #136
 1250 0024 4903     		lsls	r1, r1, #13
 1251 0026 0143     		orrs	r1, r0
 1252 0028 1962     		str	r1, [r3, #32]
  83:Core/Src/motor.c **** 
  84:Core/Src/motor.c ****     // Set up encoder interface (TIM3 encoder input mode)
  85:Core/Src/motor.c ****     RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 1253              		.loc 3 85 5 is_stmt 1 view .LVU342
 1254              		.loc 3 85 8 is_stmt 0 view .LVU343
 1255 002a D369     		ldr	r3, [r2, #28]
 1256              		.loc 3 85 18 view .LVU344
 1257 002c 0221     		movs	r1, #2
 1258 002e 0B43     		orrs	r3, r1
 1259 0030 D361     		str	r3, [r2, #28]
  86:Core/Src/motor.c ****     TIM3->CCMR1 = 0;
 1260              		.loc 3 86 5 is_stmt 1 view .LVU345
 1261              		.loc 3 86 17 is_stmt 0 view .LVU346
 1262 0032 164B     		ldr	r3, .L51+12
 1263 0034 0021     		movs	r1, #0
 1264 0036 9961     		str	r1, [r3, #24]
  87:Core/Src/motor.c ****     TIM3->CCER = 0;
 1265              		.loc 3 87 5 is_stmt 1 view .LVU347
 1266              		.loc 3 87 16 is_stmt 0 view .LVU348
 1267 0038 1962     		str	r1, [r3, #32]
  88:Core/Src/motor.c ****     TIM3->SMCR = 0;
 1268              		.loc 3 88 5 is_stmt 1 view .LVU349
 1269              		.loc 3 88 16 is_stmt 0 view .LVU350
 1270 003a 9960     		str	r1, [r3, #8]
  89:Core/Src/motor.c ****     TIM3->CR1 = 0;
 1271              		.loc 3 89 5 is_stmt 1 view .LVU351
 1272              		.loc 3 89 15 is_stmt 0 view .LVU352
 1273 003c 1960     		str	r1, [r3]
  90:Core/Src/motor.c **** 
  91:Core/Src/motor.c ****     TIM3->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);   // TI1FP1 and TI2FP2 signals connected 
 1274              		.loc 3 91 5 is_stmt 1 view .LVU353
 1275              		.loc 3 91 9 is_stmt 0 view .LVU354
 1276 003e 9869     		ldr	r0, [r3, #24]
 1277              		.loc 3 91 17 view .LVU355
 1278 0040 0221     		movs	r1, #2
 1279 0042 FF31     		adds	r1, r1, #255
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 51


 1280 0044 0143     		orrs	r1, r0
 1281 0046 9961     		str	r1, [r3, #24]
  92:Core/Src/motor.c ****     TIM3->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0);        // Capture encoder on both rising and f
 1282              		.loc 3 92 5 is_stmt 1 view .LVU356
 1283              		.loc 3 92 9 is_stmt 0 view .LVU357
 1284 0048 9968     		ldr	r1, [r3, #8]
 1285              		.loc 3 92 16 view .LVU358
 1286 004a 0320     		movs	r0, #3
 1287 004c 0143     		orrs	r1, r0
 1288 004e 9960     		str	r1, [r3, #8]
  93:Core/Src/motor.c ****     TIM3->ARR = 0xFFFF;                                     // Set ARR to top of timer (longest pos
 1289              		.loc 3 93 5 is_stmt 1 view .LVU359
 1290              		.loc 3 93 15 is_stmt 0 view .LVU360
 1291 0050 0F49     		ldr	r1, .L51+16
 1292 0052 D962     		str	r1, [r3, #44]
  94:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF;                                     // Bias at midpoint to allow for negati
 1293              		.loc 3 94 5 is_stmt 1 view .LVU361
 1294              		.loc 3 94 15 is_stmt 0 view .LVU362
 1295 0054 0F49     		ldr	r1, .L51+20
 1296 0056 5962     		str	r1, [r3, #36]
  95:Core/Src/motor.c ****     // (Could also cast unsigned register to signed number to get negative numbers if it rotates ba
  96:Core/Src/motor.c ****     //  just another option, the mid-bias is a bit simpler to understand though.)
  97:Core/Src/motor.c ****     TIM3->CR1 |= TIM_CR1_CEN;                               // Enable timer
 1297              		.loc 3 97 5 is_stmt 1 view .LVU363
 1298              		.loc 3 97 9 is_stmt 0 view .LVU364
 1299 0058 1868     		ldr	r0, [r3]
 1300              		.loc 3 97 15 view .LVU365
 1301 005a 0121     		movs	r1, #1
 1302 005c 0843     		orrs	r0, r1
 1303 005e 1860     		str	r0, [r3]
  98:Core/Src/motor.c **** 
  99:Core/Src/motor.c ****     // Configure a second timer (TIM7) to fire an ISR on update event
 100:Core/Src/motor.c ****     // Used to periodically check and update speed variable
 101:Core/Src/motor.c ****     RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 1304              		.loc 3 101 5 is_stmt 1 view .LVU366
 1305              		.loc 3 101 8 is_stmt 0 view .LVU367
 1306 0060 D369     		ldr	r3, [r2, #28]
 1307              		.loc 3 101 18 view .LVU368
 1308 0062 2020     		movs	r0, #32
 1309 0064 0343     		orrs	r3, r0
 1310 0066 D361     		str	r3, [r2, #28]
 102:Core/Src/motor.c ****     
 103:Core/Src/motor.c ****     // Select PSC and ARR values that give an appropriate interrupt rate
 104:Core/Src/motor.c ****     TIM7->PSC = 23999;
 1311              		.loc 3 104 5 is_stmt 1 view .LVU369
 1312              		.loc 3 104 15 is_stmt 0 view .LVU370
 1313 0068 0B4B     		ldr	r3, .L51+24
 1314 006a 0C4A     		ldr	r2, .L51+28
 1315 006c 9A62     		str	r2, [r3, #40]
 105:Core/Src/motor.c ****     TIM7->ARR = 75;
 1316              		.loc 3 105 5 is_stmt 1 view .LVU371
 1317              		.loc 3 105 15 is_stmt 0 view .LVU372
 1318 006e 4B22     		movs	r2, #75
 1319 0070 DA62     		str	r2, [r3, #44]
 106:Core/Src/motor.c ****     
 107:Core/Src/motor.c ****     TIM7->DIER |= TIM_DIER_UIE;             // Enable update event interrupt
 1320              		.loc 3 107 5 is_stmt 1 view .LVU373
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 52


 1321              		.loc 3 107 9 is_stmt 0 view .LVU374
 1322 0072 DA68     		ldr	r2, [r3, #12]
 1323              		.loc 3 107 16 view .LVU375
 1324 0074 0A43     		orrs	r2, r1
 1325 0076 DA60     		str	r2, [r3, #12]
 108:Core/Src/motor.c ****     TIM7->CR1 |= TIM_CR1_CEN;               // Enable Timer
 1326              		.loc 3 108 5 is_stmt 1 view .LVU376
 1327              		.loc 3 108 9 is_stmt 0 view .LVU377
 1328 0078 1A68     		ldr	r2, [r3]
 1329              		.loc 3 108 15 view .LVU378
 1330 007a 0A43     		orrs	r2, r1
 1331 007c 1A60     		str	r2, [r3]
 109:Core/Src/motor.c **** }
 1332              		.loc 3 109 1 view .LVU379
 1333              		@ sp needed
 1334 007e 7047     		bx	lr
 1335              	.L52:
 1336              		.align	2
 1337              	.L51:
 1338 0080 00100240 		.word	1073876992
 1339 0084 00040048 		.word	1207960576
 1340 0088 FFFAFFFF 		.word	-1281
 1341 008c 00040040 		.word	1073742848
 1342 0090 FFFF0000 		.word	65535
 1343 0094 FF7F0000 		.word	32767
 1344 0098 00140040 		.word	1073746944
 1345 009c BF5D0000 		.word	23999
 1346              		.cfi_endproc
 1347              	.LFE46:
 1349              		.section	.text.ADC_init,"ax",%progbits
 1350              		.align	1
 1351              		.global	ADC_init
 1352              		.syntax unified
 1353              		.code	16
 1354              		.thumb_func
 1356              	ADC_init:
 1357              	.LFB48:
 110:Core/Src/motor.c **** 
 111:Core/Src/motor.c **** // Encoder interrupt to calculate motor speed, also manages PI controller
 112:Core/Src/motor.c **** void TIM7_IRQHandler(void) {
 113:Core/Src/motor.c ****     /* Calculate the motor speed in raw encoder counts
 114:Core/Src/motor.c ****      * Note the motor speed is signed! Motor can be run in reverse.
 115:Core/Src/motor.c ****      * Speed is measured by how far the counter moved from center point
 116:Core/Src/motor.c ****      */
 117:Core/Src/motor.c ****     motor_speed = (TIM3->CNT - 0x7FFF);
 118:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 119:Core/Src/motor.c ****     // Call the PI update function
 120:Core/Src/motor.c ****     PI_update();
 121:Core/Src/motor.c **** 
 122:Core/Src/motor.c ****     //Track history of speed measurements
 123:Core/Src/motor.c ****     for (int i = HIST_LEN-1; i > 0; i--) {
 124:Core/Src/motor.c ****         speedHistory[i] = speedHistory[i-1];
 125:Core/Src/motor.c ****     }
 126:Core/Src/motor.c ****     speedHistory[0] = motor_speed;
 127:Core/Src/motor.c **** 
 128:Core/Src/motor.c ****     //If speed is steady, disable interrupt
 129:Core/Src/motor.c ****     for (int i = 1; i < HIST_LEN; i++) {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 53


 130:Core/Src/motor.c ****         if (speedHistory[i-1] != speedHistory[i] || speedHistory[i]/2 < target_rpm - 2 || speedHist
 131:Core/Src/motor.c ****             break;
 132:Core/Src/motor.c ****         else
 133:Core/Src/motor.c ****             if (i == HIST_LEN-1) {
 134:Core/Src/motor.c ****                 NVIC_DisableIRQ(TIM7_IRQn);          // Disable interrupt in NVIC
 135:Core/Src/motor.c ****                 //transmitCharArray("Motor interrupt disabled\n");
 136:Core/Src/motor.c ****                 for (int i = 0; i < HIST_LEN; i++)
 137:Core/Src/motor.c ****                     speedHistory[i] = i;
 138:Core/Src/motor.c ****             }
 139:Core/Src/motor.c ****     }
 140:Core/Src/motor.c **** 
 141:Core/Src/motor.c ****     TIM7->SR &= ~TIM_SR_UIF;        // Acknowledge the interrupt
 142:Core/Src/motor.c **** }
 143:Core/Src/motor.c **** 
 144:Core/Src/motor.c **** void ADC_init(void) {
 1358              		.loc 3 144 21 is_stmt 1 view -0
 1359              		.cfi_startproc
 1360              		@ args = 0, pretend = 0, frame = 0
 1361              		@ frame_needed = 0, uses_anonymous_args = 0
 1362              		@ link register save eliminated.
 145:Core/Src/motor.c **** 
 146:Core/Src/motor.c ****     // Configure PA1 for ADC input (used for current monitoring)
 147:Core/Src/motor.c ****     GPIOA->MODER |= (GPIO_MODER_MODER1_0 | GPIO_MODER_MODER1_1);
 1363              		.loc 3 147 5 view .LVU381
 1364              		.loc 3 147 10 is_stmt 0 view .LVU382
 1365 0000 9022     		movs	r2, #144
 1366 0002 D205     		lsls	r2, r2, #23
 1367 0004 1368     		ldr	r3, [r2]
 1368              		.loc 3 147 18 view .LVU383
 1369 0006 0C21     		movs	r1, #12
 1370 0008 0B43     		orrs	r3, r1
 1371 000a 1360     		str	r3, [r2]
 148:Core/Src/motor.c **** 
 149:Core/Src/motor.c ****     // Configure ADC to 8-bit continuous-run mode, (asynchronous clock mode)
 150:Core/Src/motor.c ****     RCC->APB2ENR |= RCC_APB2ENR_ADCEN;
 1372              		.loc 3 150 5 is_stmt 1 view .LVU384
 1373              		.loc 3 150 8 is_stmt 0 view .LVU385
 1374 000c 154A     		ldr	r2, .L57
 1375 000e 9169     		ldr	r1, [r2, #24]
 1376              		.loc 3 150 18 view .LVU386
 1377 0010 8023     		movs	r3, #128
 1378 0012 9B00     		lsls	r3, r3, #2
 1379 0014 0B43     		orrs	r3, r1
 1380 0016 9361     		str	r3, [r2, #24]
 151:Core/Src/motor.c **** 
 152:Core/Src/motor.c ****     ADC1->CFGR1 = 0;                        // Default resolution is 12-bit (RES[1:0] = 00 --> 12-b
 1381              		.loc 3 152 5 is_stmt 1 view .LVU387
 1382              		.loc 3 152 17 is_stmt 0 view .LVU388
 1383 0018 134B     		ldr	r3, .L57+4
 1384 001a 0021     		movs	r1, #0
 1385 001c D960     		str	r1, [r3, #12]
 153:Core/Src/motor.c ****     ADC1->CFGR1 |= ADC_CFGR1_CONT;          // Set to continuous mode
 1386              		.loc 3 153 5 is_stmt 1 view .LVU389
 1387              		.loc 3 153 9 is_stmt 0 view .LVU390
 1388 001e D868     		ldr	r0, [r3, #12]
 1389              		.loc 3 153 17 view .LVU391
 1390 0020 8022     		movs	r2, #128
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 54


 1391 0022 9201     		lsls	r2, r2, #6
 1392 0024 0243     		orrs	r2, r0
 1393 0026 DA60     		str	r2, [r3, #12]
 154:Core/Src/motor.c ****     ADC1->CHSELR |= ADC_CHSELR_CHSEL1;      // Enable channel 1
 1394              		.loc 3 154 5 is_stmt 1 view .LVU392
 1395              		.loc 3 154 9 is_stmt 0 view .LVU393
 1396 0028 9A6A     		ldr	r2, [r3, #40]
 1397              		.loc 3 154 18 view .LVU394
 1398 002a 0220     		movs	r0, #2
 1399 002c 0243     		orrs	r2, r0
 1400 002e 9A62     		str	r2, [r3, #40]
 155:Core/Src/motor.c **** 
 156:Core/Src/motor.c ****     ADC1->CR = 0;
 1401              		.loc 3 156 5 is_stmt 1 view .LVU395
 1402              		.loc 3 156 14 is_stmt 0 view .LVU396
 1403 0030 9960     		str	r1, [r3, #8]
 157:Core/Src/motor.c ****     ADC1->CR |= ADC_CR_ADCAL;               // Perform self calibration
 1404              		.loc 3 157 5 is_stmt 1 view .LVU397
 1405              		.loc 3 157 9 is_stmt 0 view .LVU398
 1406 0032 9968     		ldr	r1, [r3, #8]
 1407              		.loc 3 157 14 view .LVU399
 1408 0034 8022     		movs	r2, #128
 1409 0036 1206     		lsls	r2, r2, #24
 1410 0038 0A43     		orrs	r2, r1
 1411 003a 9A60     		str	r2, [r3, #8]
 158:Core/Src/motor.c ****     while(ADC1->CR & ADC_CR_ADCAL);         // Delay until calibration is complete
 1412              		.loc 3 158 5 is_stmt 1 view .LVU400
 1413              	.L54:
 1414              		.loc 3 158 11 discriminator 1 view .LVU401
 1415              		.loc 3 158 15 is_stmt 0 discriminator 1 view .LVU402
 1416 003c 0A4B     		ldr	r3, .L57+4
 1417 003e 9B68     		ldr	r3, [r3, #8]
 1418              		.loc 3 158 11 discriminator 1 view .LVU403
 1419 0040 002B     		cmp	r3, #0
 1420 0042 FBDB     		blt	.L54
 159:Core/Src/motor.c **** 
 160:Core/Src/motor.c ****     ADC1->CR |= ADC_CR_ADEN;                // Enable ADC
 1421              		.loc 3 160 5 is_stmt 1 view .LVU404
 1422              		.loc 3 160 9 is_stmt 0 view .LVU405
 1423 0044 084A     		ldr	r2, .L57+4
 1424 0046 9368     		ldr	r3, [r2, #8]
 1425              		.loc 3 160 14 view .LVU406
 1426 0048 0121     		movs	r1, #1
 1427 004a 0B43     		orrs	r3, r1
 1428 004c 9360     		str	r3, [r2, #8]
 161:Core/Src/motor.c ****     while(!(ADC1->ISR & ADC_ISR_ADRDY));    // Wait until ADC ready
 1429              		.loc 3 161 5 is_stmt 1 view .LVU407
 1430              	.L55:
 1431              		.loc 3 161 11 discriminator 1 view .LVU408
 1432              		.loc 3 161 17 is_stmt 0 discriminator 1 view .LVU409
 1433 004e 064B     		ldr	r3, .L57+4
 1434 0050 1B68     		ldr	r3, [r3]
 1435              		.loc 3 161 11 discriminator 1 view .LVU410
 1436 0052 DB07     		lsls	r3, r3, #31
 1437 0054 FBD5     		bpl	.L55
 162:Core/Src/motor.c ****     ADC1->CR |= ADC_CR_ADSTART;             // Signal conversion start
 1438              		.loc 3 162 5 is_stmt 1 view .LVU411
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 55


 1439              		.loc 3 162 9 is_stmt 0 view .LVU412
 1440 0056 044A     		ldr	r2, .L57+4
 1441 0058 9368     		ldr	r3, [r2, #8]
 1442              		.loc 3 162 14 view .LVU413
 1443 005a 0421     		movs	r1, #4
 1444 005c 0B43     		orrs	r3, r1
 1445 005e 9360     		str	r3, [r2, #8]
 163:Core/Src/motor.c **** }
 1446              		.loc 3 163 1 view .LVU414
 1447              		@ sp needed
 1448 0060 7047     		bx	lr
 1449              	.L58:
 1450 0062 C046     		.align	2
 1451              	.L57:
 1452 0064 00100240 		.word	1073876992
 1453 0068 00240140 		.word	1073816576
 1454              		.cfi_endproc
 1455              	.LFE48:
 1457              		.section	.text.motor_init,"ax",%progbits
 1458              		.align	1
 1459              		.global	motor_init
 1460              		.syntax unified
 1461              		.code	16
 1462              		.thumb_func
 1464              	motor_init:
 1465              	.LFB43:
  22:Core/Src/motor.c ****     pwm_init();
 1466              		.loc 3 22 23 is_stmt 1 view -0
 1467              		.cfi_startproc
 1468              		@ args = 0, pretend = 0, frame = 0
 1469              		@ frame_needed = 0, uses_anonymous_args = 0
 1470 0000 10B5     		push	{r4, lr}
 1471              	.LCFI7:
 1472              		.cfi_def_cfa_offset 8
 1473              		.cfi_offset 4, -8
 1474              		.cfi_offset 14, -4
  23:Core/Src/motor.c ****     encoder_init();
 1475              		.loc 3 23 5 view .LVU416
 1476 0002 FFF7FEFF 		bl	pwm_init
 1477              	.LVL79:
  24:Core/Src/motor.c ****     ADC_init();
 1478              		.loc 3 24 5 view .LVU417
 1479 0006 FFF7FEFF 		bl	encoder_init
 1480              	.LVL80:
  25:Core/Src/motor.c ****     for (int i = 0; i < HIST_LEN; i++)
 1481              		.loc 3 25 5 view .LVU418
 1482 000a FFF7FEFF 		bl	ADC_init
 1483              	.LVL81:
  26:Core/Src/motor.c ****         speedHistory[i] = i;
 1484              		.loc 3 26 5 view .LVU419
 1485              	.LBB39:
  26:Core/Src/motor.c ****         speedHistory[i] = i;
 1486              		.loc 3 26 10 view .LVU420
  26:Core/Src/motor.c ****         speedHistory[i] = i;
 1487              		.loc 3 26 14 is_stmt 0 view .LVU421
 1488 000e 0023     		movs	r3, #0
  26:Core/Src/motor.c ****         speedHistory[i] = i;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 56


 1489              		.loc 3 26 5 view .LVU422
 1490 0010 04E0     		b	.L60
 1491              	.LVL82:
 1492              	.L61:
  27:Core/Src/motor.c **** }
 1493              		.loc 3 27 9 is_stmt 1 view .LVU423
  27:Core/Src/motor.c **** }
 1494              		.loc 3 27 25 is_stmt 0 view .LVU424
 1495 0012 98B2     		uxth	r0, r3
 1496 0014 034A     		ldr	r2, .L62
 1497 0016 5900     		lsls	r1, r3, #1
 1498 0018 8852     		strh	r0, [r1, r2]
  26:Core/Src/motor.c ****         speedHistory[i] = i;
 1499              		.loc 3 26 36 is_stmt 1 discriminator 3 view .LVU425
 1500 001a 0133     		adds	r3, r3, #1
 1501              	.LVL83:
 1502              	.L60:
  26:Core/Src/motor.c ****         speedHistory[i] = i;
 1503              		.loc 3 26 23 discriminator 1 view .LVU426
 1504 001c 092B     		cmp	r3, #9
 1505 001e F8DD     		ble	.L61
 1506              	.LBE39:
  28:Core/Src/motor.c **** 
 1507              		.loc 3 28 1 is_stmt 0 view .LVU427
 1508              		@ sp needed
 1509 0020 10BD     		pop	{r4, pc}
 1510              	.L63:
 1511 0022 C046     		.align	2
 1512              	.L62:
 1513 0024 00000000 		.word	speedHistory
 1514              		.cfi_endproc
 1515              	.LFE43:
 1517              		.section	.text.PI_update,"ax",%progbits
 1518              		.align	1
 1519              		.global	PI_update
 1520              		.syntax unified
 1521              		.code	16
 1522              		.thumb_func
 1524              	PI_update:
 1525              	.LFB49:
 164:Core/Src/motor.c **** 
 165:Core/Src/motor.c **** void PI_update(void) {
 1526              		.loc 3 165 22 is_stmt 1 view -0
 1527              		.cfi_startproc
 1528              		@ args = 0, pretend = 0, frame = 0
 1529              		@ frame_needed = 0, uses_anonymous_args = 0
 1530 0000 10B5     		push	{r4, lr}
 1531              	.LCFI8:
 1532              		.cfi_def_cfa_offset 8
 1533              		.cfi_offset 4, -8
 1534              		.cfi_offset 14, -4
 166:Core/Src/motor.c ****     // Run PI control loop
 167:Core/Src/motor.c ****     error =  target_rpm - motor_speed/2;
 1535              		.loc 3 167 5 view .LVU429
 1536              		.loc 3 167 25 is_stmt 0 view .LVU430
 1537 0002 294B     		ldr	r3, .L73
 1538 0004 1A88     		ldrh	r2, [r3]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 57


 1539 0006 12B2     		sxth	r2, r2
 1540 0008 284B     		ldr	r3, .L73+4
 1541 000a 1B88     		ldrh	r3, [r3]
 1542 000c 19B2     		sxth	r1, r3
 1543 000e DB0B     		lsrs	r3, r3, #15
 1544 0010 5B18     		adds	r3, r3, r1
 1545 0012 5B10     		asrs	r3, r3, #1
 1546 0014 D31A     		subs	r3, r2, r3
 1547 0016 1BB2     		sxth	r3, r3
 1548              		.loc 3 167 11 view .LVU431
 1549 0018 254A     		ldr	r2, .L73+8
 1550 001a 1380     		strh	r3, [r2]
 168:Core/Src/motor.c **** 
 169:Core/Src/motor.c ****     error_integral = error_integral + (Ki * error);
 1551              		.loc 3 169 5 is_stmt 1 view .LVU432
 1552              		.loc 3 169 37 is_stmt 0 view .LVU433
 1553 001c 254B     		ldr	r3, .L73+12
 1554 001e 1B78     		ldrb	r3, [r3]
 1555 0020 1088     		ldrh	r0, [r2]
 1556 0022 00B2     		sxth	r0, r0
 1557 0024 244A     		ldr	r2, .L73+16
 1558 0026 1188     		ldrh	r1, [r2]
 1559 0028 09B2     		sxth	r1, r1
 1560 002a 4343     		muls	r3, r0
 1561 002c 5B18     		adds	r3, r3, r1
 1562 002e 1BB2     		sxth	r3, r3
 1563              		.loc 3 169 20 view .LVU434
 1564 0030 1380     		strh	r3, [r2]
 170:Core/Src/motor.c **** 
 171:Core/Src/motor.c ****     if (error_integral < 0) {
 1565              		.loc 3 171 5 is_stmt 1 view .LVU435
 1566              		.loc 3 171 24 is_stmt 0 view .LVU436
 1567 0032 1388     		ldrh	r3, [r2]
 1568 0034 1BB2     		sxth	r3, r3
 1569              		.loc 3 171 8 view .LVU437
 1570 0036 002B     		cmp	r3, #0
 1571 0038 09DB     		blt	.L72
 172:Core/Src/motor.c ****         error_integral = 0;
 173:Core/Src/motor.c ****     }
 174:Core/Src/motor.c **** 
 175:Core/Src/motor.c ****     else if (error_integral > 3200){
 1572              		.loc 3 175 10 is_stmt 1 view .LVU438
 1573              		.loc 3 175 29 is_stmt 0 view .LVU439
 1574 003a 1F4B     		ldr	r3, .L73+16
 1575 003c 1B88     		ldrh	r3, [r3]
 1576 003e 1BB2     		sxth	r3, r3
 1577              		.loc 3 175 13 view .LVU440
 1578 0040 C822     		movs	r2, #200
 1579 0042 1201     		lsls	r2, r2, #4
 1580 0044 9342     		cmp	r3, r2
 1581 0046 05DD     		ble	.L66
 176:Core/Src/motor.c ****         error_integral = 3200;
 1582              		.loc 3 176 9 is_stmt 1 view .LVU441
 1583              		.loc 3 176 24 is_stmt 0 view .LVU442
 1584 0048 1B4B     		ldr	r3, .L73+16
 1585 004a 1A80     		strh	r2, [r3]
 1586 004c 02E0     		b	.L66
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 58


 1587              	.L72:
 172:Core/Src/motor.c ****         error_integral = 0;
 1588              		.loc 3 172 9 is_stmt 1 view .LVU443
 172:Core/Src/motor.c ****         error_integral = 0;
 1589              		.loc 3 172 24 is_stmt 0 view .LVU444
 1590 004e 1300     		movs	r3, r2
 1591 0050 0022     		movs	r2, #0
 1592 0052 1A80     		strh	r2, [r3]
 1593              	.L66:
 177:Core/Src/motor.c ****     }
 178:Core/Src/motor.c ****     
 179:Core/Src/motor.c ****     int16_t output = (Kp * error) + error_integral;
 1594              		.loc 3 179 5 is_stmt 1 view .LVU445
 1595              		.loc 3 179 35 is_stmt 0 view .LVU446
 1596 0054 194B     		ldr	r3, .L73+20
 1597 0056 1B78     		ldrb	r3, [r3]
 1598 0058 154A     		ldr	r2, .L73+8
 1599 005a 1188     		ldrh	r1, [r2]
 1600 005c 09B2     		sxth	r1, r1
 1601 005e 164A     		ldr	r2, .L73+16
 1602 0060 1288     		ldrh	r2, [r2]
 1603 0062 12B2     		sxth	r2, r2
 1604 0064 4B43     		muls	r3, r1
 1605 0066 9B18     		adds	r3, r3, r2
 1606              		.loc 3 179 13 view .LVU447
 1607 0068 1BB2     		sxth	r3, r3
 1608              	.LVL84:
 180:Core/Src/motor.c ****     
 181:Core/Src/motor.c ****      output = output >> 5;
 1609              		.loc 3 181 6 is_stmt 1 view .LVU448
 1610              		.loc 3 181 13 is_stmt 0 view .LVU449
 1611 006a 5A11     		asrs	r2, r3, #5
 1612              	.LVL85:
 182:Core/Src/motor.c **** 
 183:Core/Src/motor.c ****     if (output < 0 || target_rpm == 0) output = 0;
 1613              		.loc 3 183 5 is_stmt 1 view .LVU450
 1614              		.loc 3 183 8 is_stmt 0 view .LVU451
 1615 006c 002B     		cmp	r3, #0
 1616 006e 08DB     		blt	.L69
 1617              		.loc 3 183 34 discriminator 2 view .LVU452
 1618 0070 0D4B     		ldr	r3, .L73
 1619 0072 1C88     		ldrh	r4, [r3]
 1620 0074 24B2     		sxth	r4, r4
 1621              		.loc 3 183 20 discriminator 2 view .LVU453
 1622 0076 002C     		cmp	r4, #0
 1623 0078 04D0     		beq	.L67
 184:Core/Src/motor.c ****     else if (output > 100) output = 100;
 1624              		.loc 3 184 10 is_stmt 1 view .LVU454
 1625              		.loc 3 184 13 is_stmt 0 view .LVU455
 1626 007a 642A     		cmp	r2, #100
 1627 007c 12DC     		bgt	.L70
 181:Core/Src/motor.c **** 
 1628              		.loc 3 181 13 view .LVU456
 1629 007e 1400     		movs	r4, r2
 1630 0080 00E0     		b	.L67
 1631              	.L69:
 183:Core/Src/motor.c ****     else if (output > 100) output = 100;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 59


 1632              		.loc 3 183 47 discriminator 3 view .LVU457
 1633 0082 0024     		movs	r4, #0
 1634              	.L67:
 1635              	.LVL86:
 185:Core/Src/motor.c ****     pwm_setDutyCycle(output);
 1636              		.loc 3 185 5 is_stmt 1 view .LVU458
 1637 0084 E4B2     		uxtb	r4, r4
 1638              	.LVL87:
 1639              		.loc 3 185 5 is_stmt 0 view .LVU459
 1640 0086 2000     		movs	r0, r4
 1641 0088 FFF7FEFF 		bl	pwm_setDutyCycle
 1642              	.LVL88:
 186:Core/Src/motor.c ****     duty_cycle = output;            // For debug viewing
 1643              		.loc 3 186 5 is_stmt 1 view .LVU460
 1644              		.loc 3 186 16 is_stmt 0 view .LVU461
 1645 008c 0C4B     		ldr	r3, .L73+24
 1646 008e 1C70     		strb	r4, [r3]
 187:Core/Src/motor.c **** 
 188:Core/Src/motor.c ****     // Read the ADC value for current monitoring, actual conversion into meaningful units 
 189:Core/Src/motor.c ****     // will be performed by STMStudio
 190:Core/Src/motor.c ****     if(ADC1->ISR & ADC_ISR_EOC) {   // If the ADC has new data for us
 1647              		.loc 3 190 5 is_stmt 1 view .LVU462
 1648              		.loc 3 190 12 is_stmt 0 view .LVU463
 1649 0090 0C4B     		ldr	r3, .L73+28
 1650 0092 1B68     		ldr	r3, [r3]
 1651              		.loc 3 190 7 view .LVU464
 1652 0094 5B07     		lsls	r3, r3, #29
 1653 0096 04D5     		bpl	.L64
 191:Core/Src/motor.c ****         adc_value = ADC1->DR;       // Read the motor current for debug viewing
 1654              		.loc 3 191 9 is_stmt 1 view .LVU465
 1655              		.loc 3 191 25 is_stmt 0 view .LVU466
 1656 0098 0A4B     		ldr	r3, .L73+28
 1657 009a 1B6C     		ldr	r3, [r3, #64]
 1658              		.loc 3 191 19 view .LVU467
 1659 009c 5BB2     		sxtb	r3, r3
 1660 009e 0A4A     		ldr	r2, .L73+32
 1661 00a0 1370     		strb	r3, [r2]
 1662              	.L64:
 192:Core/Src/motor.c ****     }
 193:Core/Src/motor.c **** }
 1663              		.loc 3 193 1 view .LVU468
 1664              		@ sp needed
 1665 00a2 10BD     		pop	{r4, pc}
 1666              	.LVL89:
 1667              	.L70:
 184:Core/Src/motor.c ****     pwm_setDutyCycle(output);
 1668              		.loc 3 184 35 discriminator 1 view .LVU469
 1669 00a4 6424     		movs	r4, #100
 1670 00a6 EDE7     		b	.L67
 1671              	.L74:
 1672              		.align	2
 1673              	.L73:
 1674 00a8 00000000 		.word	target_rpm
 1675 00ac 00000000 		.word	motor_speed
 1676 00b0 00000000 		.word	error
 1677 00b4 00000000 		.word	Ki
 1678 00b8 00000000 		.word	error_integral
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 60


 1679 00bc 00000000 		.word	Kp
 1680 00c0 00000000 		.word	duty_cycle
 1681 00c4 00240140 		.word	1073816576
 1682 00c8 00000000 		.word	adc_value
 1683              		.cfi_endproc
 1684              	.LFE49:
 1686              		.section	.text.TIM7_IRQHandler,"ax",%progbits
 1687              		.align	1
 1688              		.global	TIM7_IRQHandler
 1689              		.syntax unified
 1690              		.code	16
 1691              		.thumb_func
 1693              	TIM7_IRQHandler:
 1694              	.LFB47:
 112:Core/Src/motor.c ****     /* Calculate the motor speed in raw encoder counts
 1695              		.loc 3 112 28 is_stmt 1 view -0
 1696              		.cfi_startproc
 1697              		@ args = 0, pretend = 0, frame = 0
 1698              		@ frame_needed = 0, uses_anonymous_args = 0
 1699 0000 10B5     		push	{r4, lr}
 1700              	.LCFI9:
 1701              		.cfi_def_cfa_offset 8
 1702              		.cfi_offset 4, -8
 1703              		.cfi_offset 14, -4
 117:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 1704              		.loc 3 117 5 view .LVU471
 117:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 1705              		.loc 3 117 24 is_stmt 0 view .LVU472
 1706 0002 2C4A     		ldr	r2, .L84
 1707 0004 536A     		ldr	r3, [r2, #36]
 117:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 1708              		.loc 3 117 30 view .LVU473
 1709 0006 2C49     		ldr	r1, .L84+4
 1710 0008 8C46     		mov	ip, r1
 1711 000a 6344     		add	r3, r3, ip
 1712 000c 1BB2     		sxth	r3, r3
 117:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 1713              		.loc 3 117 17 view .LVU474
 1714 000e 2B49     		ldr	r1, .L84+8
 1715 0010 0B80     		strh	r3, [r1]
 118:Core/Src/motor.c ****     // Call the PI update function
 1716              		.loc 3 118 5 is_stmt 1 view .LVU475
 118:Core/Src/motor.c ****     // Call the PI update function
 1717              		.loc 3 118 15 is_stmt 0 view .LVU476
 1718 0012 2B4B     		ldr	r3, .L84+12
 1719 0014 5362     		str	r3, [r2, #36]
 120:Core/Src/motor.c **** 
 1720              		.loc 3 120 5 is_stmt 1 view .LVU477
 1721 0016 FFF7FEFF 		bl	PI_update
 1722              	.LVL90:
 123:Core/Src/motor.c ****         speedHistory[i] = speedHistory[i-1];
 1723              		.loc 3 123 5 view .LVU478
 1724              	.LBB40:
 123:Core/Src/motor.c ****         speedHistory[i] = speedHistory[i-1];
 1725              		.loc 3 123 10 view .LVU479
 123:Core/Src/motor.c ****         speedHistory[i] = speedHistory[i-1];
 1726              		.loc 3 123 14 is_stmt 0 view .LVU480
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 61


 1727 001a 0923     		movs	r3, #9
 123:Core/Src/motor.c ****         speedHistory[i] = speedHistory[i-1];
 1728              		.loc 3 123 5 view .LVU481
 1729 001c 07E0     		b	.L76
 1730              	.LVL91:
 1731              	.L77:
 124:Core/Src/motor.c ****     }
 1732              		.loc 3 124 9 is_stmt 1 view .LVU482
 124:Core/Src/motor.c ****     }
 1733              		.loc 3 124 41 is_stmt 0 view .LVU483
 1734 001e 581E     		subs	r0, r3, #1
 124:Core/Src/motor.c ****     }
 1735              		.loc 3 124 39 view .LVU484
 1736 0020 284A     		ldr	r2, .L84+16
 1737 0022 4100     		lsls	r1, r0, #1
 1738 0024 895A     		ldrh	r1, [r1, r2]
 1739 0026 89B2     		uxth	r1, r1
 124:Core/Src/motor.c ****     }
 1740              		.loc 3 124 25 view .LVU485
 1741 0028 5B00     		lsls	r3, r3, #1
 1742              	.LVL92:
 124:Core/Src/motor.c ****     }
 1743              		.loc 3 124 25 view .LVU486
 1744 002a 9952     		strh	r1, [r3, r2]
 123:Core/Src/motor.c ****         speedHistory[i] = speedHistory[i-1];
 1745              		.loc 3 123 38 is_stmt 1 discriminator 3 view .LVU487
 1746              	.LVL93:
 123:Core/Src/motor.c ****         speedHistory[i] = speedHistory[i-1];
 1747              		.loc 3 123 38 is_stmt 0 discriminator 3 view .LVU488
 1748 002c 0300     		movs	r3, r0
 1749              	.LVL94:
 1750              	.L76:
 123:Core/Src/motor.c ****         speedHistory[i] = speedHistory[i-1];
 1751              		.loc 3 123 32 is_stmt 1 discriminator 1 view .LVU489
 1752 002e 002B     		cmp	r3, #0
 1753 0030 F5DC     		bgt	.L77
 1754              	.LBE40:
 126:Core/Src/motor.c **** 
 1755              		.loc 3 126 5 view .LVU490
 126:Core/Src/motor.c **** 
 1756              		.loc 3 126 21 is_stmt 0 view .LVU491
 1757 0032 224B     		ldr	r3, .L84+8
 1758              	.LVL95:
 126:Core/Src/motor.c **** 
 1759              		.loc 3 126 21 view .LVU492
 1760 0034 1B88     		ldrh	r3, [r3]
 1761 0036 234A     		ldr	r2, .L84+16
 1762 0038 1380     		strh	r3, [r2]
 129:Core/Src/motor.c ****         if (speedHistory[i-1] != speedHistory[i] || speedHistory[i]/2 < target_rpm - 2 || speedHist
 1763              		.loc 3 129 5 is_stmt 1 view .LVU493
 1764              	.LBB41:
 129:Core/Src/motor.c ****         if (speedHistory[i-1] != speedHistory[i] || speedHistory[i]/2 < target_rpm - 2 || speedHist
 1765              		.loc 3 129 10 view .LVU494
 1766              	.LVL96:
 129:Core/Src/motor.c ****         if (speedHistory[i-1] != speedHistory[i] || speedHistory[i]/2 < target_rpm - 2 || speedHist
 1767              		.loc 3 129 14 is_stmt 0 view .LVU495
 1768 003a 0123     		movs	r3, #1
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 62


 129:Core/Src/motor.c ****         if (speedHistory[i-1] != speedHistory[i] || speedHistory[i]/2 < target_rpm - 2 || speedHist
 1769              		.loc 3 129 5 view .LVU496
 1770 003c 00E0     		b	.L78
 1771              	.LVL97:
 1772              	.L80:
 129:Core/Src/motor.c ****         if (speedHistory[i-1] != speedHistory[i] || speedHistory[i]/2 < target_rpm - 2 || speedHist
 1773              		.loc 3 129 36 is_stmt 1 discriminator 2 view .LVU497
 1774 003e 0133     		adds	r3, r3, #1
 1775              	.LVL98:
 1776              	.L78:
 129:Core/Src/motor.c ****         if (speedHistory[i-1] != speedHistory[i] || speedHistory[i]/2 < target_rpm - 2 || speedHist
 1777              		.loc 3 129 23 discriminator 1 view .LVU498
 1778 0040 092B     		cmp	r3, #9
 1779 0042 31DC     		bgt	.L79
 130:Core/Src/motor.c ****             break;
 1780              		.loc 3 130 9 view .LVU499
 130:Core/Src/motor.c ****             break;
 1781              		.loc 3 130 27 is_stmt 0 view .LVU500
 1782 0044 5A1E     		subs	r2, r3, #1
 130:Core/Src/motor.c ****             break;
 1783              		.loc 3 130 25 view .LVU501
 1784 0046 1F49     		ldr	r1, .L84+16
 1785 0048 5200     		lsls	r2, r2, #1
 1786 004a 505A     		ldrh	r0, [r2, r1]
 1787 004c 80B2     		uxth	r0, r0
 130:Core/Src/motor.c ****             break;
 1788              		.loc 3 130 46 view .LVU502
 1789 004e 5A00     		lsls	r2, r3, #1
 1790 0050 525A     		ldrh	r2, [r2, r1]
 1791 0052 92B2     		uxth	r2, r2
 130:Core/Src/motor.c ****             break;
 1792              		.loc 3 130 12 view .LVU503
 1793 0054 9042     		cmp	r0, r2
 1794 0056 27D1     		bne	.L79
 130:Core/Src/motor.c ****             break;
 1795              		.loc 3 130 65 discriminator 1 view .LVU504
 1796 0058 0A00     		movs	r2, r1
 1797 005a 5900     		lsls	r1, r3, #1
 1798 005c 895A     		ldrh	r1, [r1, r2]
 130:Core/Src/motor.c ****             break;
 1799              		.loc 3 130 68 discriminator 1 view .LVU505
 1800 005e 4908     		lsrs	r1, r1, #1
 130:Core/Src/motor.c ****             break;
 1801              		.loc 3 130 84 discriminator 1 view .LVU506
 1802 0060 194A     		ldr	r2, .L84+20
 1803 0062 1288     		ldrh	r2, [r2]
 1804 0064 12B2     		sxth	r2, r2
 1805 0066 023A     		subs	r2, r2, #2
 130:Core/Src/motor.c ****             break;
 1806              		.loc 3 130 50 discriminator 1 view .LVU507
 1807 0068 9142     		cmp	r1, r2
 1808 006a 1DDB     		blt	.L79
 130:Core/Src/motor.c ****             break;
 1809              		.loc 3 130 103 discriminator 2 view .LVU508
 1810 006c 154A     		ldr	r2, .L84+16
 1811 006e 5900     		lsls	r1, r3, #1
 1812 0070 895A     		ldrh	r1, [r1, r2]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 63


 130:Core/Src/motor.c ****             break;
 1813              		.loc 3 130 106 discriminator 2 view .LVU509
 1814 0072 4908     		lsrs	r1, r1, #1
 130:Core/Src/motor.c ****             break;
 1815              		.loc 3 130 122 discriminator 2 view .LVU510
 1816 0074 144A     		ldr	r2, .L84+20
 1817 0076 1288     		ldrh	r2, [r2]
 1818 0078 12B2     		sxth	r2, r2
 1819 007a 0232     		adds	r2, r2, #2
 130:Core/Src/motor.c ****             break;
 1820              		.loc 3 130 88 discriminator 2 view .LVU511
 1821 007c 9142     		cmp	r1, r2
 1822 007e 13DC     		bgt	.L79
 133:Core/Src/motor.c ****                 NVIC_DisableIRQ(TIM7_IRQn);          // Disable interrupt in NVIC
 1823              		.loc 3 133 13 is_stmt 1 view .LVU512
 133:Core/Src/motor.c ****                 NVIC_DisableIRQ(TIM7_IRQn);          // Disable interrupt in NVIC
 1824              		.loc 3 133 16 is_stmt 0 view .LVU513
 1825 0080 092B     		cmp	r3, #9
 1826 0082 DCD1     		bne	.L80
 134:Core/Src/motor.c ****                 //transmitCharArray("Motor interrupt disabled\n");
 1827              		.loc 3 134 17 is_stmt 1 view .LVU514
 1828              	.LVL99:
 1829              	.LBB42:
 1830              	.LBI42:
 659:Drivers/CMSIS/Include/core_cm0.h **** {
 1831              		.loc 2 659 22 view .LVU515
 1832              	.LBB43:
 661:Drivers/CMSIS/Include/core_cm0.h ****   {
 1833              		.loc 2 661 3 view .LVU516
 663:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 1834              		.loc 2 663 5 view .LVU517
 663:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 1835              		.loc 2 663 20 is_stmt 0 view .LVU518
 1836 0084 1149     		ldr	r1, .L84+24
 1837 0086 8022     		movs	r2, #128
 1838 0088 8020     		movs	r0, #128
 1839 008a C002     		lsls	r0, r0, #11
 1840 008c 8850     		str	r0, [r1, r2]
 664:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 1841              		.loc 2 664 5 is_stmt 1 view .LVU519
 1842              	.LBB44:
 1843              	.LBI44:
 1844              		.file 4 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 64


  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 65


  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 66


 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 67


 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 68


 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 69


 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 70


 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 71


 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 72


 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 73


 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 74


 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 75


 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 76


 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 77


 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 78


 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 79


 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 1845              		.loc 4 877 27 view .LVU520
 1846              	.LBB45:
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 1847              		.loc 4 879 3 view .LVU521
 1848              		.syntax divided
 1849              	@ 879 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1850 008e BFF34F8F 		dsb 0xF
 1851              	@ 0 "" 2
 1852              		.thumb
 1853              		.syntax unified
 1854              	.LBE45:
 1855              	.LBE44:
 665:Drivers/CMSIS/Include/core_cm0.h ****   }
 1856              		.loc 2 665 5 view .LVU522
 1857              	.LBB46:
 1858              	.LBI46:
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1859              		.loc 4 866 27 view .LVU523
 1860              	.LBB47:
 868:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1861              		.loc 4 868 3 view .LVU524
 1862              		.syntax divided
 1863              	@ 868 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1864 0092 BFF36F8F 		isb 0xF
 1865              	@ 0 "" 2
 1866              	.LVL100:
 868:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1867              		.loc 4 868 3 is_stmt 0 view .LVU525
 1868              		.thumb
 1869              		.syntax unified
 1870              	.LBE47:
 1871              	.LBE46:
 1872              	.LBE43:
 1873              	.LBE42:
 136:Core/Src/motor.c ****                     speedHistory[i] = i;
 1874              		.loc 3 136 17 is_stmt 1 view .LVU526
 1875              	.LBB48:
 136:Core/Src/motor.c ****                     speedHistory[i] = i;
 1876              		.loc 3 136 22 view .LVU527
 136:Core/Src/motor.c ****                     speedHistory[i] = i;
 1877              		.loc 3 136 26 is_stmt 0 view .LVU528
 1878 0096 0022     		movs	r2, #0
 1879              	.LVL101:
 1880              	.L81:
 136:Core/Src/motor.c ****                     speedHistory[i] = i;
 1881              		.loc 3 136 35 is_stmt 1 discriminator 1 view .LVU529
 1882 0098 092A     		cmp	r2, #9
 1883 009a D0DC     		bgt	.L80
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 80


 137:Core/Src/motor.c ****             }
 1884              		.loc 3 137 21 view .LVU530
 137:Core/Src/motor.c ****             }
 1885              		.loc 3 137 37 is_stmt 0 view .LVU531
 1886 009c 94B2     		uxth	r4, r2
 1887 009e 0949     		ldr	r1, .L84+16
 1888 00a0 5000     		lsls	r0, r2, #1
 1889 00a2 4452     		strh	r4, [r0, r1]
 136:Core/Src/motor.c ****                     speedHistory[i] = i;
 1890              		.loc 3 136 48 is_stmt 1 discriminator 3 view .LVU532
 1891 00a4 0132     		adds	r2, r2, #1
 1892              	.LVL102:
 136:Core/Src/motor.c ****                     speedHistory[i] = i;
 1893              		.loc 3 136 48 is_stmt 0 discriminator 3 view .LVU533
 1894 00a6 F7E7     		b	.L81
 1895              	.LVL103:
 1896              	.L79:
 136:Core/Src/motor.c ****                     speedHistory[i] = i;
 1897              		.loc 3 136 48 discriminator 3 view .LVU534
 1898              	.LBE48:
 1899              	.LBE41:
 141:Core/Src/motor.c **** }
 1900              		.loc 3 141 5 is_stmt 1 view .LVU535
 141:Core/Src/motor.c **** }
 1901              		.loc 3 141 9 is_stmt 0 view .LVU536
 1902 00a8 094A     		ldr	r2, .L84+28
 1903 00aa 1369     		ldr	r3, [r2, #16]
 1904              	.LVL104:
 141:Core/Src/motor.c **** }
 1905              		.loc 3 141 14 view .LVU537
 1906 00ac 0121     		movs	r1, #1
 1907 00ae 8B43     		bics	r3, r1
 1908 00b0 1361     		str	r3, [r2, #16]
 142:Core/Src/motor.c **** 
 1909              		.loc 3 142 1 view .LVU538
 1910              		@ sp needed
 1911 00b2 10BD     		pop	{r4, pc}
 1912              	.L85:
 1913              		.align	2
 1914              	.L84:
 1915 00b4 00040040 		.word	1073742848
 1916 00b8 0180FFFF 		.word	-32767
 1917 00bc 00000000 		.word	motor_speed
 1918 00c0 FF7F0000 		.word	32767
 1919 00c4 00000000 		.word	speedHistory
 1920 00c8 00000000 		.word	target_rpm
 1921 00cc 00E100E0 		.word	-536813312
 1922 00d0 00140040 		.word	1073746944
 1923              		.cfi_endproc
 1924              	.LFE47:
 1926              		.section	.text.initLEDs,"ax",%progbits
 1927              		.align	1
 1928              		.global	initLEDs
 1929              		.syntax unified
 1930              		.code	16
 1931              		.thumb_func
 1933              	initLEDs:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 81


 1934              	.LFB54:
 347:Core/Src/main.c **** 	// red LED PC6, blue LED (PC7), green LED PC9, orange LED PC8
 1935              		.loc 1 347 21 is_stmt 1 view -0
 1936              		.cfi_startproc
 1937              		@ args = 0, pretend = 0, frame = 0
 1938              		@ frame_needed = 0, uses_anonymous_args = 0
 1939              		@ link register save eliminated.
 349:Core/Src/main.c ****   // set the MODER, 01: General purpose output mode
 1940              		.loc 1 349 3 view .LVU540
 349:Core/Src/main.c ****   // set the MODER, 01: General purpose output mode
 1941              		.loc 1 349 6 is_stmt 0 view .LVU541
 1942 0000 294A     		ldr	r2, .L87
 1943 0002 5169     		ldr	r1, [r2, #20]
 349:Core/Src/main.c ****   // set the MODER, 01: General purpose output mode
 1944              		.loc 1 349 15 view .LVU542
 1945 0004 8023     		movs	r3, #128
 1946 0006 1B03     		lsls	r3, r3, #12
 1947 0008 0B43     		orrs	r3, r1
 1948 000a 5361     		str	r3, [r2, #20]
 352:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 13);
 1949              		.loc 1 352 2 is_stmt 1 view .LVU543
 352:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 13);
 1950              		.loc 1 352 7 is_stmt 0 view .LVU544
 1951 000c 274B     		ldr	r3, .L87+4
 1952 000e 1968     		ldr	r1, [r3]
 352:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 13);
 1953              		.loc 1 352 15 view .LVU545
 1954 0010 8022     		movs	r2, #128
 1955 0012 5201     		lsls	r2, r2, #5
 1956 0014 0A43     		orrs	r2, r1
 1957 0016 1A60     		str	r2, [r3]
 353:Core/Src/main.c ****     // init PC7 MODER
 1958              		.loc 1 353 2 is_stmt 1 view .LVU546
 353:Core/Src/main.c ****     // init PC7 MODER
 1959              		.loc 1 353 7 is_stmt 0 view .LVU547
 1960 0018 1A68     		ldr	r2, [r3]
 353:Core/Src/main.c ****     // init PC7 MODER
 1961              		.loc 1 353 15 view .LVU548
 1962 001a 2549     		ldr	r1, .L87+8
 1963 001c 0A40     		ands	r2, r1
 1964 001e 1A60     		str	r2, [r3]
 355:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 15);
 1965              		.loc 1 355 2 is_stmt 1 view .LVU549
 355:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 15);
 1966              		.loc 1 355 7 is_stmt 0 view .LVU550
 1967 0020 1968     		ldr	r1, [r3]
 355:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 15);
 1968              		.loc 1 355 15 view .LVU551
 1969 0022 8022     		movs	r2, #128
 1970 0024 D201     		lsls	r2, r2, #7
 1971 0026 0A43     		orrs	r2, r1
 1972 0028 1A60     		str	r2, [r3]
 356:Core/Src/main.c **** 	// init PC8 MODER
 1973              		.loc 1 356 2 is_stmt 1 view .LVU552
 356:Core/Src/main.c **** 	// init PC8 MODER
 1974              		.loc 1 356 7 is_stmt 0 view .LVU553
 1975 002a 1A68     		ldr	r2, [r3]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 82


 356:Core/Src/main.c **** 	// init PC8 MODER
 1976              		.loc 1 356 15 view .LVU554
 1977 002c 2149     		ldr	r1, .L87+12
 1978 002e 0A40     		ands	r2, r1
 1979 0030 1A60     		str	r2, [r3]
 358:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 17);
 1980              		.loc 1 358 2 is_stmt 1 view .LVU555
 358:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 17);
 1981              		.loc 1 358 7 is_stmt 0 view .LVU556
 1982 0032 1968     		ldr	r1, [r3]
 358:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 17);
 1983              		.loc 1 358 15 view .LVU557
 1984 0034 8022     		movs	r2, #128
 1985 0036 5202     		lsls	r2, r2, #9
 1986 0038 0A43     		orrs	r2, r1
 1987 003a 1A60     		str	r2, [r3]
 359:Core/Src/main.c **** 	// init PC9 MODER
 1988              		.loc 1 359 2 is_stmt 1 view .LVU558
 359:Core/Src/main.c **** 	// init PC9 MODER
 1989              		.loc 1 359 7 is_stmt 0 view .LVU559
 1990 003c 1A68     		ldr	r2, [r3]
 359:Core/Src/main.c **** 	// init PC9 MODER
 1991              		.loc 1 359 15 view .LVU560
 1992 003e 1E49     		ldr	r1, .L87+16
 1993 0040 0A40     		ands	r2, r1
 1994 0042 1A60     		str	r2, [r3]
 361:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 19);
 1995              		.loc 1 361 2 is_stmt 1 view .LVU561
 361:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 19);
 1996              		.loc 1 361 7 is_stmt 0 view .LVU562
 1997 0044 1968     		ldr	r1, [r3]
 361:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 19);
 1998              		.loc 1 361 15 view .LVU563
 1999 0046 8022     		movs	r2, #128
 2000 0048 D202     		lsls	r2, r2, #11
 2001 004a 0A43     		orrs	r2, r1
 2002 004c 1A60     		str	r2, [r3]
 362:Core/Src/main.c ****   // Set the pins to low speed in the OSPEEDR register
 2003              		.loc 1 362 2 is_stmt 1 view .LVU564
 362:Core/Src/main.c ****   // Set the pins to low speed in the OSPEEDR register
 2004              		.loc 1 362 7 is_stmt 0 view .LVU565
 2005 004e 1A68     		ldr	r2, [r3]
 362:Core/Src/main.c ****   // Set the pins to low speed in the OSPEEDR register
 2006              		.loc 1 362 15 view .LVU566
 2007 0050 1A49     		ldr	r1, .L87+20
 2008 0052 0A40     		ands	r2, r1
 2009 0054 1A60     		str	r2, [r3]
 364:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 14) | (1 << 15));
 2010              		.loc 1 364 2 is_stmt 1 view .LVU567
 364:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 14) | (1 << 15));
 2011              		.loc 1 364 7 is_stmt 0 view .LVU568
 2012 0056 9A68     		ldr	r2, [r3, #8]
 364:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 14) | (1 << 15));
 2013              		.loc 1 364 17 view .LVU569
 2014 0058 1949     		ldr	r1, .L87+24
 2015 005a 0A40     		ands	r2, r1
 2016 005c 9A60     		str	r2, [r3, #8]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 83


 365:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 16) | (1 << 17));
 2017              		.loc 1 365 2 is_stmt 1 view .LVU570
 365:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 16) | (1 << 17));
 2018              		.loc 1 365 7 is_stmt 0 view .LVU571
 2019 005e 9A68     		ldr	r2, [r3, #8]
 365:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 16) | (1 << 17));
 2020              		.loc 1 365 17 view .LVU572
 2021 0060 1849     		ldr	r1, .L87+28
 2022 0062 0A40     		ands	r2, r1
 2023 0064 9A60     		str	r2, [r3, #8]
 366:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 18) | (1 << 19));
 2024              		.loc 1 366 2 is_stmt 1 view .LVU573
 366:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 18) | (1 << 19));
 2025              		.loc 1 366 7 is_stmt 0 view .LVU574
 2026 0066 9A68     		ldr	r2, [r3, #8]
 366:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 18) | (1 << 19));
 2027              		.loc 1 366 17 view .LVU575
 2028 0068 1749     		ldr	r1, .L87+32
 2029 006a 0A40     		ands	r2, r1
 2030 006c 9A60     		str	r2, [r3, #8]
 367:Core/Src/main.c **** 
 2031              		.loc 1 367 2 is_stmt 1 view .LVU576
 367:Core/Src/main.c **** 
 2032              		.loc 1 367 7 is_stmt 0 view .LVU577
 2033 006e 9A68     		ldr	r2, [r3, #8]
 367:Core/Src/main.c **** 
 2034              		.loc 1 367 17 view .LVU578
 2035 0070 1649     		ldr	r1, .L87+36
 2036 0072 0A40     		ands	r2, r1
 2037 0074 9A60     		str	r2, [r3, #8]
 371:Core/Src/main.c **** 	GPIOC->PUPDR &= ~((1 << 12) | (1 << 13) | (1 << 14) | (1 << 15));
 2038              		.loc 1 371 2 is_stmt 1 view .LVU579
 371:Core/Src/main.c **** 	GPIOC->PUPDR &= ~((1 << 12) | (1 << 13) | (1 << 14) | (1 << 15));
 2039              		.loc 1 371 7 is_stmt 0 view .LVU580
 2040 0076 DA68     		ldr	r2, [r3, #12]
 371:Core/Src/main.c **** 	GPIOC->PUPDR &= ~((1 << 12) | (1 << 13) | (1 << 14) | (1 << 15));
 2041              		.loc 1 371 15 view .LVU581
 2042 0078 1549     		ldr	r1, .L87+40
 2043 007a 0A40     		ands	r2, r1
 2044 007c DA60     		str	r2, [r3, #12]
 372:Core/Src/main.c **** 	// set PC6-9 to 0
 2045              		.loc 1 372 2 is_stmt 1 view .LVU582
 372:Core/Src/main.c **** 	// set PC6-9 to 0
 2046              		.loc 1 372 7 is_stmt 0 view .LVU583
 2047 007e DA68     		ldr	r2, [r3, #12]
 372:Core/Src/main.c **** 	// set PC6-9 to 0
 2048              		.loc 1 372 15 view .LVU584
 2049 0080 1449     		ldr	r1, .L87+44
 2050 0082 0A40     		ands	r2, r1
 2051 0084 DA60     		str	r2, [r3, #12]
 374:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 7);
 2052              		.loc 1 374 2 is_stmt 1 view .LVU585
 374:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 7);
 2053              		.loc 1 374 7 is_stmt 0 view .LVU586
 2054 0086 5A69     		ldr	r2, [r3, #20]
 374:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 7);
 2055              		.loc 1 374 13 view .LVU587
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 84


 2056 0088 4021     		movs	r1, #64
 2057 008a 8A43     		bics	r2, r1
 2058 008c 5A61     		str	r2, [r3, #20]
 375:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 8);
 2059              		.loc 1 375 2 is_stmt 1 view .LVU588
 375:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 8);
 2060              		.loc 1 375 7 is_stmt 0 view .LVU589
 2061 008e 5A69     		ldr	r2, [r3, #20]
 375:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 8);
 2062              		.loc 1 375 13 view .LVU590
 2063 0090 4031     		adds	r1, r1, #64
 2064 0092 8A43     		bics	r2, r1
 2065 0094 5A61     		str	r2, [r3, #20]
 376:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 9);
 2066              		.loc 1 376 2 is_stmt 1 view .LVU591
 376:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 9);
 2067              		.loc 1 376 7 is_stmt 0 view .LVU592
 2068 0096 5A69     		ldr	r2, [r3, #20]
 376:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 9);
 2069              		.loc 1 376 13 view .LVU593
 2070 0098 0F49     		ldr	r1, .L87+48
 2071 009a 0A40     		ands	r2, r1
 2072 009c 5A61     		str	r2, [r3, #20]
 377:Core/Src/main.c **** }
 2073              		.loc 1 377 2 is_stmt 1 view .LVU594
 377:Core/Src/main.c **** }
 2074              		.loc 1 377 7 is_stmt 0 view .LVU595
 2075 009e 5A69     		ldr	r2, [r3, #20]
 377:Core/Src/main.c **** }
 2076              		.loc 1 377 13 view .LVU596
 2077 00a0 0E49     		ldr	r1, .L87+52
 2078 00a2 0A40     		ands	r2, r1
 2079 00a4 5A61     		str	r2, [r3, #20]
 378:Core/Src/main.c **** 
 2080              		.loc 1 378 1 view .LVU597
 2081              		@ sp needed
 2082 00a6 7047     		bx	lr
 2083              	.L88:
 2084              		.align	2
 2085              	.L87:
 2086 00a8 00100240 		.word	1073876992
 2087 00ac 00080048 		.word	1207961600
 2088 00b0 FFDFFFFF 		.word	-8193
 2089 00b4 FF7FFFFF 		.word	-32769
 2090 00b8 FFFFFDFF 		.word	-131073
 2091 00bc FFFFF7FF 		.word	-524289
 2092 00c0 FFCFFFFF 		.word	-12289
 2093 00c4 FF3FFFFF 		.word	-49153
 2094 00c8 FFFFFCFF 		.word	-196609
 2095 00cc FFFFF3FF 		.word	-786433
 2096 00d0 FFFFF0FF 		.word	-983041
 2097 00d4 FF0FFFFF 		.word	-61441
 2098 00d8 FFFEFFFF 		.word	-257
 2099 00dc FFFDFFFF 		.word	-513
 2100              		.cfi_endproc
 2101              	.LFE54:
 2103              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 85


 2104              		.align	1
 2105              		.global	HAL_TIM_PeriodElapsedCallback
 2106              		.syntax unified
 2107              		.code	16
 2108              		.thumb_func
 2110              	HAL_TIM_PeriodElapsedCallback:
 2111              	.LVL105:
 2112              	.LFB57:
 544:Core/Src/main.c ****   }
 545:Core/Src/main.c **** }
 546:Core/Src/main.c **** 
 547:Core/Src/main.c **** /**
 548:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 549:Core/Src/main.c ****   * @note   This function is called  when TIM6 interrupt took place, inside
 550:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 551:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 552:Core/Src/main.c ****   * @param  htim : TIM handle
 553:Core/Src/main.c ****   * @retval None
 554:Core/Src/main.c ****   */
 555:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 556:Core/Src/main.c **** {
 2113              		.loc 1 556 1 is_stmt 1 view -0
 2114              		.cfi_startproc
 2115              		@ args = 0, pretend = 0, frame = 0
 2116              		@ frame_needed = 0, uses_anonymous_args = 0
 2117              		.loc 1 556 1 is_stmt 0 view .LVU599
 2118 0000 10B5     		push	{r4, lr}
 2119              	.LCFI10:
 2120              		.cfi_def_cfa_offset 8
 2121              		.cfi_offset 4, -8
 2122              		.cfi_offset 14, -4
 557:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 558:Core/Src/main.c **** 
 559:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 560:Core/Src/main.c ****   if (htim->Instance == TIM6) {
 2123              		.loc 1 560 3 is_stmt 1 view .LVU600
 2124              		.loc 1 560 11 is_stmt 0 view .LVU601
 2125 0002 0268     		ldr	r2, [r0]
 2126              		.loc 1 560 6 view .LVU602
 2127 0004 034B     		ldr	r3, .L92
 2128 0006 9A42     		cmp	r2, r3
 2129 0008 00D0     		beq	.L91
 2130              	.LVL106:
 2131              	.L89:
 561:Core/Src/main.c ****     HAL_IncTick();
 562:Core/Src/main.c ****   }
 563:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 564:Core/Src/main.c **** 
 565:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 566:Core/Src/main.c **** }
 2132              		.loc 1 566 1 view .LVU603
 2133              		@ sp needed
 2134 000a 10BD     		pop	{r4, pc}
 2135              	.LVL107:
 2136              	.L91:
 561:Core/Src/main.c ****     HAL_IncTick();
 2137              		.loc 1 561 5 is_stmt 1 view .LVU604
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 86


 2138 000c FFF7FEFF 		bl	HAL_IncTick
 2139              	.LVL108:
 2140              		.loc 1 566 1 is_stmt 0 view .LVU605
 2141 0010 FBE7     		b	.L89
 2142              	.L93:
 2143 0012 C046     		.align	2
 2144              	.L92:
 2145 0014 00100040 		.word	1073745920
 2146              		.cfi_endproc
 2147              	.LFE57:
 2149              		.section	.text.Error_Handler,"ax",%progbits
 2150              		.align	1
 2151              		.global	Error_Handler
 2152              		.syntax unified
 2153              		.code	16
 2154              		.thumb_func
 2156              	Error_Handler:
 2157              	.LFB58:
 567:Core/Src/main.c **** 
 568:Core/Src/main.c **** /**
 569:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 570:Core/Src/main.c ****   * @retval None
 571:Core/Src/main.c ****   */
 572:Core/Src/main.c **** void Error_Handler(void)
 573:Core/Src/main.c **** {
 2158              		.loc 1 573 1 is_stmt 1 view -0
 2159              		.cfi_startproc
 2160              		@ Volatile: function does not return.
 2161              		@ args = 0, pretend = 0, frame = 0
 2162              		@ frame_needed = 0, uses_anonymous_args = 0
 2163              		@ link register save eliminated.
 574:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 575:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 576:Core/Src/main.c ****   __disable_irq();
 2164              		.loc 1 576 3 view .LVU607
 2165              	.LBB49:
 2166              	.LBI49:
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 2167              		.loc 4 140 27 view .LVU608
 2168              	.LBB50:
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2169              		.loc 4 142 3 view .LVU609
 2170              		.syntax divided
 2171              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2172 0000 72B6     		cpsid i
 2173              	@ 0 "" 2
 2174              		.thumb
 2175              		.syntax unified
 2176              	.L95:
 2177              	.LBE50:
 2178              	.LBE49:
 577:Core/Src/main.c ****   while (1)
 2179              		.loc 1 577 3 view .LVU610
 578:Core/Src/main.c ****   {
 579:Core/Src/main.c ****   }
 2180              		.loc 1 579 3 view .LVU611
 577:Core/Src/main.c ****   while (1)
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 87


 2181              		.loc 1 577 9 view .LVU612
 2182 0002 FEE7     		b	.L95
 2183              		.cfi_endproc
 2184              	.LFE58:
 2186              		.section	.text.SystemClock_Config,"ax",%progbits
 2187              		.align	1
 2188              		.global	SystemClock_Config
 2189              		.syntax unified
 2190              		.code	16
 2191              		.thumb_func
 2193              	SystemClock_Config:
 2194              	.LFB51:
 186:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 2195              		.loc 1 186 1 view -0
 2196              		.cfi_startproc
 2197              		@ args = 0, pretend = 0, frame = 96
 2198              		@ frame_needed = 0, uses_anonymous_args = 0
 2199 0000 00B5     		push	{lr}
 2200              	.LCFI11:
 2201              		.cfi_def_cfa_offset 4
 2202              		.cfi_offset 14, -4
 2203 0002 99B0     		sub	sp, sp, #100
 2204              	.LCFI12:
 2205              		.cfi_def_cfa_offset 104
 187:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2206              		.loc 1 187 3 view .LVU614
 187:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2207              		.loc 1 187 22 is_stmt 0 view .LVU615
 2208 0004 3422     		movs	r2, #52
 2209 0006 0021     		movs	r1, #0
 2210 0008 0BA8     		add	r0, sp, #44
 2211 000a FFF7FEFF 		bl	memset
 2212              	.LVL109:
 188:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 2213              		.loc 1 188 3 is_stmt 1 view .LVU616
 188:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 2214              		.loc 1 188 22 is_stmt 0 view .LVU617
 2215 000e 1022     		movs	r2, #16
 2216 0010 0021     		movs	r1, #0
 2217 0012 07A8     		add	r0, sp, #28
 2218 0014 FFF7FEFF 		bl	memset
 2219              	.LVL110:
 189:Core/Src/main.c **** 
 2220              		.loc 1 189 3 is_stmt 1 view .LVU618
 189:Core/Src/main.c **** 
 2221              		.loc 1 189 28 is_stmt 0 view .LVU619
 2222 0018 1C22     		movs	r2, #28
 2223 001a 0021     		movs	r1, #0
 2224 001c 6846     		mov	r0, sp
 2225 001e FFF7FEFF 		bl	memset
 2226              	.LVL111:
 194:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2227              		.loc 1 194 3 is_stmt 1 view .LVU620
 194:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2228              		.loc 1 194 36 is_stmt 0 view .LVU621
 2229 0022 2223     		movs	r3, #34
 2230 0024 0B93     		str	r3, [sp, #44]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 88


 195:Core/Src/main.c ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 2231              		.loc 1 195 3 is_stmt 1 view .LVU622
 195:Core/Src/main.c ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 2232              		.loc 1 195 30 is_stmt 0 view .LVU623
 2233 0026 213B     		subs	r3, r3, #33
 2234 0028 0E93     		str	r3, [sp, #56]
 196:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 2235              		.loc 1 196 3 is_stmt 1 view .LVU624
 196:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 2236              		.loc 1 196 32 is_stmt 0 view .LVU625
 2237 002a 1393     		str	r3, [sp, #76]
 197:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2238              		.loc 1 197 3 is_stmt 1 view .LVU626
 197:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2239              		.loc 1 197 41 is_stmt 0 view .LVU627
 2240 002c 0F33     		adds	r3, r3, #15
 2241 002e 0F93     		str	r3, [sp, #60]
 198:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 2242              		.loc 1 198 3 is_stmt 1 view .LVU628
 198:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 2243              		.loc 1 198 34 is_stmt 0 view .LVU629
 2244 0030 0E3B     		subs	r3, r3, #14
 2245 0032 1493     		str	r3, [sp, #80]
 199:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 2246              		.loc 1 199 3 is_stmt 1 view .LVU630
 199:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 2247              		.loc 1 199 35 is_stmt 0 view .LVU631
 2248 0034 8023     		movs	r3, #128
 2249 0036 1B02     		lsls	r3, r3, #8
 2250 0038 1593     		str	r3, [sp, #84]
 200:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 2251              		.loc 1 200 3 is_stmt 1 view .LVU632
 200:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 2252              		.loc 1 200 32 is_stmt 0 view .LVU633
 2253 003a 8023     		movs	r3, #128
 2254 003c 5B03     		lsls	r3, r3, #13
 2255 003e 1693     		str	r3, [sp, #88]
 201:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2256              		.loc 1 201 3 is_stmt 1 view .LVU634
 202:Core/Src/main.c ****   {
 2257              		.loc 1 202 3 view .LVU635
 202:Core/Src/main.c ****   {
 2258              		.loc 1 202 7 is_stmt 0 view .LVU636
 2259 0040 0BA8     		add	r0, sp, #44
 2260 0042 FFF7FEFF 		bl	HAL_RCC_OscConfig
 2261              	.LVL112:
 202:Core/Src/main.c ****   {
 2262              		.loc 1 202 6 discriminator 1 view .LVU637
 2263 0046 0028     		cmp	r0, #0
 2264 0048 18D1     		bne	.L100
 209:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 2265              		.loc 1 209 3 is_stmt 1 view .LVU638
 209:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 2266              		.loc 1 209 31 is_stmt 0 view .LVU639
 2267 004a 0723     		movs	r3, #7
 2268 004c 0793     		str	r3, [sp, #28]
 211:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 89


 2269              		.loc 1 211 3 is_stmt 1 view .LVU640
 211:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2270              		.loc 1 211 34 is_stmt 0 view .LVU641
 2271 004e 053B     		subs	r3, r3, #5
 2272 0050 0893     		str	r3, [sp, #32]
 212:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 2273              		.loc 1 212 3 is_stmt 1 view .LVU642
 212:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 2274              		.loc 1 212 35 is_stmt 0 view .LVU643
 2275 0052 0023     		movs	r3, #0
 2276 0054 0993     		str	r3, [sp, #36]
 213:Core/Src/main.c **** 
 2277              		.loc 1 213 3 is_stmt 1 view .LVU644
 213:Core/Src/main.c **** 
 2278              		.loc 1 213 36 is_stmt 0 view .LVU645
 2279 0056 0A93     		str	r3, [sp, #40]
 215:Core/Src/main.c ****   {
 2280              		.loc 1 215 3 is_stmt 1 view .LVU646
 215:Core/Src/main.c ****   {
 2281              		.loc 1 215 7 is_stmt 0 view .LVU647
 2282 0058 0121     		movs	r1, #1
 2283 005a 07A8     		add	r0, sp, #28
 2284 005c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2285              	.LVL113:
 215:Core/Src/main.c ****   {
 2286              		.loc 1 215 6 discriminator 1 view .LVU648
 2287 0060 0028     		cmp	r0, #0
 2288 0062 0DD1     		bne	.L101
 219:Core/Src/main.c ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 2289              		.loc 1 219 3 is_stmt 1 view .LVU649
 219:Core/Src/main.c ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 2290              		.loc 1 219 38 is_stmt 0 view .LVU650
 2291 0064 8023     		movs	r3, #128
 2292 0066 9B02     		lsls	r3, r3, #10
 2293 0068 0093     		str	r3, [sp]
 220:Core/Src/main.c **** 
 2294              		.loc 1 220 3 is_stmt 1 view .LVU651
 220:Core/Src/main.c **** 
 2295              		.loc 1 220 35 is_stmt 0 view .LVU652
 2296 006a 0023     		movs	r3, #0
 2297 006c 0693     		str	r3, [sp, #24]
 222:Core/Src/main.c ****   {
 2298              		.loc 1 222 3 is_stmt 1 view .LVU653
 222:Core/Src/main.c ****   {
 2299              		.loc 1 222 7 is_stmt 0 view .LVU654
 2300 006e 6846     		mov	r0, sp
 2301 0070 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 2302              	.LVL114:
 222:Core/Src/main.c ****   {
 2303              		.loc 1 222 6 discriminator 1 view .LVU655
 2304 0074 0028     		cmp	r0, #0
 2305 0076 05D1     		bne	.L102
 226:Core/Src/main.c **** 
 2306              		.loc 1 226 1 view .LVU656
 2307 0078 19B0     		add	sp, sp, #100
 2308              		@ sp needed
 2309 007a 00BD     		pop	{pc}
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 90


 2310              	.L100:
 204:Core/Src/main.c ****   }
 2311              		.loc 1 204 5 is_stmt 1 view .LVU657
 2312 007c FFF7FEFF 		bl	Error_Handler
 2313              	.LVL115:
 2314              	.L101:
 217:Core/Src/main.c ****   }
 2315              		.loc 1 217 5 view .LVU658
 2316 0080 FFF7FEFF 		bl	Error_Handler
 2317              	.LVL116:
 2318              	.L102:
 224:Core/Src/main.c ****   }
 2319              		.loc 1 224 5 view .LVU659
 2320 0084 FFF7FEFF 		bl	Error_Handler
 2321              	.LVL117:
 2322              		.cfi_endproc
 2323              	.LFE51:
 2325              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 2326              		.align	2
 2327              	.LC60:
 2328 0000 4661696C 		.ascii	"Fail to init sync resources!\012\000"
 2328      20746F20 
 2328      696E6974 
 2328      2073796E 
 2328      63207265 
 2329              		.section	.text.main,"ax",%progbits
 2330              		.align	1
 2331              		.global	main
 2332              		.syntax unified
 2333              		.code	16
 2334              		.thumb_func
 2336              	main:
 2337              	.LFB50:
 116:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 2338              		.loc 1 116 1 view -0
 2339              		.cfi_startproc
 2340              		@ args = 0, pretend = 0, frame = 0
 2341              		@ frame_needed = 0, uses_anonymous_args = 0
 2342 0000 10B5     		push	{r4, lr}
 2343              	.LCFI13:
 2344              		.cfi_def_cfa_offset 8
 2345              		.cfi_offset 4, -8
 2346              		.cfi_offset 14, -4
 118:Core/Src/main.c **** 
 2347              		.loc 1 118 3 view .LVU661
 2348 0002 FFF7FEFF 		bl	HAL_Init
 2349              	.LVL118:
 121:Core/Src/main.c **** 
 2350              		.loc 1 121 3 view .LVU662
 2351 0006 FFF7FEFF 		bl	SystemClock_Config
 2352              	.LVL119:
 124:Core/Src/main.c ****   initUsart3();
 2353              		.loc 1 124 3 view .LVU663
 2354 000a FFF7FEFF 		bl	MX_GPIO_Init
 2355              	.LVL120:
 125:Core/Src/main.c ****   initLEDs();
 2356              		.loc 1 125 3 view .LVU664
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 91


 2357 000e FFF7FEFF 		bl	initUsart3
 2358              	.LVL121:
 126:Core/Src/main.c ****   motor_init();
 2359              		.loc 1 126 3 view .LVU665
 2360 0012 FFF7FEFF 		bl	initLEDs
 2361              	.LVL122:
 127:Core/Src/main.c **** 
 2362              		.loc 1 127 3 view .LVU666
 2363 0016 FFF7FEFF 		bl	motor_init
 2364              	.LVL123:
 130:Core/Src/main.c **** 
 2365              		.loc 1 130 3 view .LVU667
 2366 001a FFF7FEFF 		bl	osKernelInitialize
 2367              	.LVL124:
 147:Core/Src/main.c ****   /* creation of LEDTask */
 2368              		.loc 1 147 3 view .LVU668
 147:Core/Src/main.c ****   /* creation of LEDTask */
 2369              		.loc 1 147 22 is_stmt 0 view .LVU669
 2370 001e 134A     		ldr	r2, .L107
 2371 0020 1348     		ldr	r0, .L107+4
 2372 0022 0021     		movs	r1, #0
 2373 0024 FFF7FEFF 		bl	osThreadNew
 2374              	.LVL125:
 147:Core/Src/main.c ****   /* creation of LEDTask */
 2375              		.loc 1 147 20 discriminator 1 view .LVU670
 2376 0028 124B     		ldr	r3, .L107+8
 2377 002a 1860     		str	r0, [r3]
 149:Core/Src/main.c ****   /* creation of motorTask */
 2378              		.loc 1 149 3 is_stmt 1 view .LVU671
 149:Core/Src/main.c ****   /* creation of motorTask */
 2379              		.loc 1 149 19 is_stmt 0 view .LVU672
 2380 002c 124A     		ldr	r2, .L107+12
 2381 002e 1348     		ldr	r0, .L107+16
 2382 0030 0021     		movs	r1, #0
 2383 0032 FFF7FEFF 		bl	osThreadNew
 2384              	.LVL126:
 149:Core/Src/main.c ****   /* creation of motorTask */
 2385              		.loc 1 149 17 discriminator 1 view .LVU673
 2386 0036 124B     		ldr	r3, .L107+20
 2387 0038 1860     		str	r0, [r3]
 151:Core/Src/main.c ****   /* creation of UARTTask */
 2388              		.loc 1 151 3 is_stmt 1 view .LVU674
 151:Core/Src/main.c ****   /* creation of UARTTask */
 2389              		.loc 1 151 21 is_stmt 0 view .LVU675
 2390 003a 124A     		ldr	r2, .L107+24
 2391 003c 1248     		ldr	r0, .L107+28
 2392 003e 0021     		movs	r1, #0
 2393 0040 FFF7FEFF 		bl	osThreadNew
 2394              	.LVL127:
 151:Core/Src/main.c ****   /* creation of UARTTask */
 2395              		.loc 1 151 19 discriminator 1 view .LVU676
 2396 0044 114B     		ldr	r3, .L107+32
 2397 0046 1860     		str	r0, [r3]
 153:Core/Src/main.c **** 
 2398              		.loc 1 153 3 is_stmt 1 view .LVU677
 153:Core/Src/main.c **** 
 2399              		.loc 1 153 20 is_stmt 0 view .LVU678
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 92


 2400 0048 114A     		ldr	r2, .L107+36
 2401 004a 1248     		ldr	r0, .L107+40
 2402 004c 0021     		movs	r1, #0
 2403 004e FFF7FEFF 		bl	osThreadNew
 2404              	.LVL128:
 153:Core/Src/main.c **** 
 2405              		.loc 1 153 18 discriminator 1 view .LVU679
 2406 0052 114B     		ldr	r3, .L107+44
 2407 0054 1860     		str	r0, [r3]
 157:Core/Src/main.c ****   if (status != 0) {
 2408              		.loc 1 157 3 is_stmt 1 view .LVU680
 157:Core/Src/main.c ****   if (status != 0) {
 2409              		.loc 1 157 20 is_stmt 0 view .LVU681
 2410 0056 FFF7FEFF 		bl	syncInit
 2411              	.LVL129:
 158:Core/Src/main.c ****     transmitCharArray("Fail to init sync resources!\n");
 2412              		.loc 1 158 3 is_stmt 1 view .LVU682
 158:Core/Src/main.c ****     transmitCharArray("Fail to init sync resources!\n");
 2413              		.loc 1 158 6 is_stmt 0 view .LVU683
 2414 005a 0028     		cmp	r0, #0
 2415 005c 02D1     		bne	.L106
 2416              	.LVL130:
 2417              	.L104:
 171:Core/Src/main.c **** 
 2418              		.loc 1 171 3 is_stmt 1 view .LVU684
 2419 005e FFF7FEFF 		bl	osKernelStart
 2420              	.LVL131:
 2421              	.L105:
 176:Core/Src/main.c ****   {
 2422              		.loc 1 176 3 view .LVU685
 178:Core/Src/main.c **** }
 2423              		.loc 1 178 3 view .LVU686
 176:Core/Src/main.c ****   {
 2424              		.loc 1 176 9 view .LVU687
 2425 0062 FEE7     		b	.L105
 2426              	.LVL132:
 2427              	.L106:
 159:Core/Src/main.c ****   }
 2428              		.loc 1 159 5 view .LVU688
 2429 0064 0D48     		ldr	r0, .L107+48
 2430              	.LVL133:
 159:Core/Src/main.c ****   }
 2431              		.loc 1 159 5 is_stmt 0 view .LVU689
 2432 0066 FFF7FEFF 		bl	transmitCharArray
 2433              	.LVL134:
 2434 006a F8E7     		b	.L104
 2435              	.L108:
 2436              		.align	2
 2437              	.L107:
 2438 006c 00000000 		.word	routerTask_attributes
 2439 0070 00000000 		.word	StartRouterTask
 2440 0074 00000000 		.word	routerTaskHandle
 2441 0078 00000000 		.word	LEDTask_attributes
 2442 007c 00000000 		.word	StartLEDTask
 2443 0080 00000000 		.word	LEDTaskHandle
 2444 0084 00000000 		.word	motorTask_attributes
 2445 0088 00000000 		.word	StartMotorTask
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 93


 2446 008c 00000000 		.word	motorTaskHandle
 2447 0090 00000000 		.word	UARTTask_attributes
 2448 0094 00000000 		.word	StartParseUartTask
 2449 0098 00000000 		.word	UARTTaskHandle
 2450 009c 00000000 		.word	.LC60
 2451              		.cfi_endproc
 2452              	.LFE50:
 2454              		.global	motorTask_attributes
 2455              		.section	.rodata.str1.4,"aMS",%progbits,1
 2456              		.align	2
 2457              	.LC62:
 2458 0000 6D6F746F 		.ascii	"motorTask\000"
 2458      72546173 
 2458      6B00
 2459              		.section	.rodata.motorTask_attributes,"a"
 2460              		.align	2
 2463              	motorTask_attributes:
 2464 0000 00000000 		.word	.LC62
 2465 0004 00000000 		.space	16
 2465      00000000 
 2465      00000000 
 2465      00000000 
 2466 0014 00020000 		.word	512
 2467 0018 18000000 		.word	24
 2468 001c 00000000 		.space	8
 2468      00000000 
 2469              		.global	motorTaskHandle
 2470              		.section	.bss.motorTaskHandle,"aw",%nobits
 2471              		.align	2
 2474              	motorTaskHandle:
 2475 0000 00000000 		.space	4
 2476              		.global	LEDTask_attributes
 2477              		.section	.rodata.str1.4
 2478 000a 0000     		.align	2
 2479              	.LC63:
 2480 000c 4C454454 		.ascii	"LEDTask\000"
 2480      61736B00 
 2481              		.section	.rodata.LEDTask_attributes,"a"
 2482              		.align	2
 2485              	LEDTask_attributes:
 2486 0000 0C000000 		.word	.LC63
 2487 0004 00000000 		.space	16
 2487      00000000 
 2487      00000000 
 2487      00000000 
 2488 0014 00020000 		.word	512
 2489 0018 18000000 		.word	24
 2490 001c 00000000 		.space	8
 2490      00000000 
 2491              		.global	LEDTaskHandle
 2492              		.section	.bss.LEDTaskHandle,"aw",%nobits
 2493              		.align	2
 2496              	LEDTaskHandle:
 2497 0000 00000000 		.space	4
 2498              		.global	routerTask_attributes
 2499              		.section	.rodata.str1.4
 2500              		.align	2
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 94


 2501              	.LC64:
 2502 0014 726F7574 		.ascii	"routerTask\000"
 2502      65725461 
 2502      736B00
 2503              		.section	.rodata.routerTask_attributes,"a"
 2504              		.align	2
 2507              	routerTask_attributes:
 2508 0000 14000000 		.word	.LC64
 2509 0004 00000000 		.space	16
 2509      00000000 
 2509      00000000 
 2509      00000000 
 2510 0014 00020000 		.word	512
 2511 0018 18000000 		.word	24
 2512 001c 00000000 		.space	8
 2512      00000000 
 2513              		.global	routerTaskHandle
 2514              		.section	.bss.routerTaskHandle,"aw",%nobits
 2515              		.align	2
 2518              	routerTaskHandle:
 2519 0000 00000000 		.space	4
 2520              		.global	hpcd_USB_FS
 2521              		.section	.bss.hpcd_USB_FS,"aw",%nobits
 2522              		.align	2
 2525              	hpcd_USB_FS:
 2526 0000 00000000 		.space	756
 2526      00000000 
 2526      00000000 
 2526      00000000 
 2526      00000000 
 2527              		.global	target_rpm
 2528              		.section	.bss.target_rpm,"aw",%nobits
 2529              		.align	1
 2532              	target_rpm:
 2533 0000 0000     		.space	2
 2534              		.global	debouncer
 2535              		.section	.bss.debouncer,"aw",%nobits
 2536              		.align	2
 2539              	debouncer:
 2540 0000 00000000 		.space	4
 2541              		.global	htsc
 2542              		.section	.bss.htsc,"aw",%nobits
 2543              		.align	2
 2546              	htsc:
 2547 0000 00000000 		.space	68
 2547      00000000 
 2547      00000000 
 2547      00000000 
 2547      00000000 
 2548              		.global	hspi2
 2549              		.section	.bss.hspi2,"aw",%nobits
 2550              		.align	2
 2553              	hspi2:
 2554 0000 00000000 		.space	100
 2554      00000000 
 2554      00000000 
 2554      00000000 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 95


 2554      00000000 
 2555              		.global	hi2c2
 2556              		.section	.bss.hi2c2,"aw",%nobits
 2557              		.align	2
 2560              	hi2c2:
 2561 0000 00000000 		.space	84
 2561      00000000 
 2561      00000000 
 2561      00000000 
 2561      00000000 
 2562              		.global	commandMotor
 2563              		.section	.bss.commandMotor,"aw",%nobits
 2564              		.align	1
 2567              	commandMotor:
 2568 0000 0000     		.space	2
 2569              		.global	commandLED
 2570              		.section	.bss.commandLED,"aw",%nobits
 2571              		.align	1
 2574              	commandLED:
 2575 0000 0000     		.space	2
 2576              		.global	speedHistory
 2577              		.section	.bss.speedHistory,"aw",%nobits
 2578              		.align	2
 2581              	speedHistory:
 2582 0000 00000000 		.space	20
 2582      00000000 
 2582      00000000 
 2582      00000000 
 2582      00000000 
 2583              		.global	Ki
 2584              		.section	.data.Ki,"aw"
 2587              	Ki:
 2588 0000 05       		.byte	5
 2589              		.global	Kp
 2590              		.section	.data.Kp,"aw"
 2593              	Kp:
 2594 0000 05       		.byte	5
 2595              		.global	error
 2596              		.section	.bss.error,"aw",%nobits
 2597              		.align	1
 2600              	error:
 2601 0000 0000     		.space	2
 2602              		.global	adc_value
 2603              		.section	.bss.adc_value,"aw",%nobits
 2606              	adc_value:
 2607 0000 00       		.space	1
 2608              		.global	motor_speed
 2609              		.section	.bss.motor_speed,"aw",%nobits
 2610              		.align	1
 2613              	motor_speed:
 2614 0000 0000     		.space	2
 2615              		.global	duty_cycle
 2616              		.section	.bss.duty_cycle,"aw",%nobits
 2619              	duty_cycle:
 2620 0000 00       		.space	1
 2621              		.global	error_integral
 2622              		.section	.bss.error_integral,"aw",%nobits
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 96


 2623              		.align	1
 2626              	error_integral:
 2627 0000 0000     		.space	2
 2628              		.section	.rodata
 2629              		.align	2
 2630              		.set	.LANCHOR0,. + 0
 2631              	.LC0:
 2632 0000 40000000 		.word	64
 2633 0004 00020000 		.word	512
 2634 0008 80000000 		.word	128
 2635 000c 00010000 		.word	256
 2636 0010 C0030000 		.word	960
 2637              		.text
 2638              	.Letext0:
 2639              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 2640              		.file 6 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 2641              		.file 7 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 2642              		.file 8 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 2643              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2644              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 2645              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 2646              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 2647              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 2648              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c.h"
 2649              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usb.h"
 2650              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_pcd.h"
 2651              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_spi.h"
 2652              		.file 18 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 2653              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tsc.h"
 2654              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 2655              		.file 21 "Core/Inc/cmdQueue.h"
 2656              		.file 22 "Core/Inc/uartParser.h"
 2657              		.file 23 "Core/Inc/sync.h"
 2658              		.file 24 "Core/Inc/motor.h"
 2659              		.file 25 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 2660              		.file 26 "<built-in>"
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 97


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:19     .text.MX_GPIO_Init:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:166    .text.MX_GPIO_Init:00000090 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:173    .rodata.StartMotorTask.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:180    .text.StartMotorTask:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:186    .text.StartMotorTask:00000000 StartMotorTask
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:419    .text.StartMotorTask:000000e4 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2532   .bss.target_rpm:00000000 target_rpm
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2567   .bss.commandMotor:00000000 commandMotor
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:434    .rodata.StartRouterTask.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:444    .text.StartRouterTask:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:450    .text.StartRouterTask:00000000 StartRouterTask
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:598    .text.StartRouterTask:000000b4 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2574   .bss.commandLED:00000000 commandLED
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:615    .rodata.StartLEDTask.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:623    .text.StartLEDTask:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:629    .text.StartLEDTask:00000000 StartLEDTask
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1000   .text.StartLEDTask:00000188 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1017   .text.pwm_init:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1023   .text.pwm_init:00000000 pwm_init
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1149   .text.pwm_init:00000084 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1159   .text.pwm_setDutyCycle:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1165   .text.pwm_setDutyCycle:00000000 pwm_setDutyCycle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1202   .text.pwm_setDutyCycle:00000018 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1207   .text.encoder_init:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1213   .text.encoder_init:00000000 encoder_init
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1338   .text.encoder_init:00000080 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1350   .text.ADC_init:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1356   .text.ADC_init:00000000 ADC_init
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1452   .text.ADC_init:00000064 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1458   .text.motor_init:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1464   .text.motor_init:00000000 motor_init
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1513   .text.motor_init:00000024 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2581   .bss.speedHistory:00000000 speedHistory
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1518   .text.PI_update:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1524   .text.PI_update:00000000 PI_update
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1674   .text.PI_update:000000a8 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2613   .bss.motor_speed:00000000 motor_speed
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2600   .bss.error:00000000 error
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2587   .data.Ki:00000000 Ki
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2626   .bss.error_integral:00000000 error_integral
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2593   .data.Kp:00000000 Kp
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2619   .bss.duty_cycle:00000000 duty_cycle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2606   .bss.adc_value:00000000 adc_value
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1687   .text.TIM7_IRQHandler:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1693   .text.TIM7_IRQHandler:00000000 TIM7_IRQHandler
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1915   .text.TIM7_IRQHandler:000000b4 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1927   .text.initLEDs:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:1933   .text.initLEDs:00000000 initLEDs
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2086   .text.initLEDs:000000a8 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2104   .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2110   .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2145   .text.HAL_TIM_PeriodElapsedCallback:00000014 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2150   .text.Error_Handler:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2156   .text.Error_Handler:00000000 Error_Handler
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 98


/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2187   .text.SystemClock_Config:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2193   .text.SystemClock_Config:00000000 SystemClock_Config
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2326   .rodata.main.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2330   .text.main:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2336   .text.main:00000000 main
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2438   .text.main:0000006c $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2507   .rodata.routerTask_attributes:00000000 routerTask_attributes
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2518   .bss.routerTaskHandle:00000000 routerTaskHandle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2485   .rodata.LEDTask_attributes:00000000 LEDTask_attributes
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2496   .bss.LEDTaskHandle:00000000 LEDTaskHandle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2463   .rodata.motorTask_attributes:00000000 motorTask_attributes
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2474   .bss.motorTaskHandle:00000000 motorTaskHandle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2456   .rodata.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2460   .rodata.motorTask_attributes:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2471   .bss.motorTaskHandle:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2482   .rodata.LEDTask_attributes:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2493   .bss.LEDTaskHandle:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2504   .rodata.routerTask_attributes:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2515   .bss.routerTaskHandle:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2525   .bss.hpcd_USB_FS:00000000 hpcd_USB_FS
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2522   .bss.hpcd_USB_FS:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2529   .bss.target_rpm:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2539   .bss.debouncer:00000000 debouncer
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2536   .bss.debouncer:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2546   .bss.htsc:00000000 htsc
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2543   .bss.htsc:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2553   .bss.hspi2:00000000 hspi2
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2550   .bss.hspi2:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2560   .bss.hi2c2:00000000 hi2c2
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2557   .bss.hi2c2:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2564   .bss.commandMotor:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2571   .bss.commandLED:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2578   .bss.speedHistory:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2597   .bss.error:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2607   .bss.adc_value:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2610   .bss.motor_speed:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2620   .bss.duty_cycle:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2623   .bss.error_integral:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s:2629   .rodata:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
osSemaphoreAcquire
osSemaphoreRelease
transmitCharArray
workerStatusMutex
motorWorkerBusy
countSem01
motorRouterSem01
queuePopItemByOpcode
isQueueEmpty
cmdQueue
ledWorkerBusy
ledRouterSem01
__aeabi_idiv
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccq9TVda.s 			page 99


osDelay
__aeabi_uidiv
HAL_IncTick
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
initUsart3
osKernelInitialize
osThreadNew
syncInit
osKernelStart
UARTTask_attributes
StartParseUartTask
UARTTaskHandle
