ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB58:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "cmsis_os.h"
  22:Core/Src/main.c **** #include "stm32f072xb.h"
  23:Core/Src/main.c **** #include "motor.h"
  24:Core/Src/main.c **** #include "motor.c"
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** //Global variables
  27:Core/Src/main.c **** volatile uint16_t commandLED = 0;
  28:Core/Src/main.c **** volatile uint16_t commandMotor = 0;
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** //Semaphores
  31:Core/Src/main.c **** osSemaphoreId_t binarySem03LEDWorkerHandle;
  32:Core/Src/main.c **** osSemaphoreId_t binarySem04MotorWorkerHandle;
  33:Core/Src/main.c **** 
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 2


  34:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* USER CODE END Includes */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* USER CODE END PTD */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  45:Core/Src/main.c **** /* USER CODE BEGIN PD */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* USER CODE END PD */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  50:Core/Src/main.c **** /* USER CODE BEGIN PM */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE END PM */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  55:Core/Src/main.c **** I2C_HandleTypeDef hi2c2;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** SPI_HandleTypeDef hspi2;
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** TSC_HandleTypeDef htsc;
  60:Core/Src/main.c **** /* For motor */
  61:Core/Src/main.c **** volatile uint32_t debouncer; 
  62:Core/Src/main.c **** // The speed we are setting the motor to (3rd and 4th digits)
  63:Core/Src/main.c **** volatile int16_t target_rpm = 0;
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** PCD_HandleTypeDef hpcd_USB_FS;
  66:Core/Src/main.c **** /* Definitions for task router */
  67:Core/Src/main.c **** osThreadId_t routerTaskHandle;
  68:Core/Src/main.c **** const osThreadAttr_t routerTask_attributes = {
  69:Core/Src/main.c ****   .name = "routerTask",
  70:Core/Src/main.c ****   .stack_size = 128 * 4,
  71:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
  72:Core/Src/main.c **** };
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /* Definitions for LED worker task */
  75:Core/Src/main.c **** osThreadId_t LEDTaskHandle;
  76:Core/Src/main.c **** const osThreadAttr_t LEDTask_attributes = {
  77:Core/Src/main.c ****   .name = "LEDTask",
  78:Core/Src/main.c ****   .stack_size = 128 * 4,
  79:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
  80:Core/Src/main.c **** };
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** 
  83:Core/Src/main.c **** /* USER CODE BEGIN PV */
  84:Core/Src/main.c **** 
  85:Core/Src/main.c **** /* USER CODE END PV */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  88:Core/Src/main.c **** void SystemClock_Config(void);
  89:Core/Src/main.c **** static void MX_GPIO_Init(void);
  90:Core/Src/main.c **** static void MX_I2C2_Init(void);
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 3


  91:Core/Src/main.c **** static void MX_SPI2_Init(void);
  92:Core/Src/main.c **** static void MX_TSC_Init(void);
  93:Core/Src/main.c **** static void MX_USB_PCD_Init(void);
  94:Core/Src/main.c **** void StartRouterTask(void *argument);
  95:Core/Src/main.c **** void StartMotorTask(void *argument);
  96:Core/Src/main.c **** void StartLEDTask(void *argument);
  97:Core/Src/main.c **** void initLEDs(void);
  98:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c **** /* USER CODE END PFP */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 103:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 104:Core/Src/main.c **** 
 105:Core/Src/main.c **** /* USER CODE END 0 */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c **** /**
 108:Core/Src/main.c ****   * @brief  The application entry point.
 109:Core/Src/main.c ****   * @retval int
 110:Core/Src/main.c ****   */
 111:Core/Src/main.c **** int main(void)
 112:Core/Src/main.c **** {
 113:Core/Src/main.c ****   debouncer = 0;
 114:Core/Src/main.c ****   volatile uint32_t encoder_count = 0;
 115:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   /* USER CODE END 1 */
 118:Core/Src/main.c ****   // Initialize button --> Will need to re-configure for milestone #4, this is here for testing pur
 119:Core/Src/main.c ****   button_init(); 
 120:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 123:Core/Src/main.c ****   HAL_Init();
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****   /* USER CODE END Init */
 128:Core/Src/main.c **** 
 129:Core/Src/main.c ****   /* Configure the system clock */
 130:Core/Src/main.c ****   SystemClock_Config();
 131:Core/Src/main.c **** 
 132:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 133:Core/Src/main.c **** 
 134:Core/Src/main.c ****   /* USER CODE END SysInit */
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   /* Initialize all configured peripherals */
 137:Core/Src/main.c ****   MX_GPIO_Init();
 138:Core/Src/main.c ****   MX_I2C2_Init();
 139:Core/Src/main.c ****   MX_SPI2_Init();
 140:Core/Src/main.c ****   MX_TSC_Init();
 141:Core/Src/main.c ****   MX_USB_PCD_Init();
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****   initUsart3();
 144:Core/Src/main.c ****   initLEDs();
 145:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 146:Core/Src/main.c **** 
 147:Core/Src/main.c ****   /* USER CODE END 2 */
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 4


 148:Core/Src/main.c **** 
 149:Core/Src/main.c ****   /* Init scheduler */
 150:Core/Src/main.c ****   osKernelInitialize();
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 153:Core/Src/main.c ****   /* add mutexes, ... */
 154:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 155:Core/Src/main.c **** 
 156:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 157:Core/Src/main.c ****   /* add semaphores, ... */
 158:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 159:Core/Src/main.c **** 
 160:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 161:Core/Src/main.c ****   /* start timers, add new ones, ... */
 162:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 165:Core/Src/main.c ****   /* add queues, ... */
 166:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****   /* Create the thread(s) */
 169:Core/Src/main.c ****   // comment thread temprariely.
 170:Core/Src/main.c ****   /* creation of routerTask */
 171:Core/Src/main.c ****   routerTaskHandle = osThreadNew(StartRouterTask, NULL, &routerTask_attributes);
 172:Core/Src/main.c ****   /* creation of LEDTask */
 173:Core/Src/main.c ****   LEDTaskHandle = osThreadNew(StartLEDTask, NULL, &LEDTask_attributes);
 174:Core/Src/main.c ****   /* creation of UARTTask */
 175:Core/Src/main.c ****   UARTTaskHandle = osThreadNew(StartParseUartTask, NULL, &UARTTask_attributes);
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 178:Core/Src/main.c ****   /* add threads, ... */
 179:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 180:Core/Src/main.c **** 
 181:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_EVENTS */
 182:Core/Src/main.c ****   /* add events, ... */
 183:Core/Src/main.c ****   /* USER CODE END RTOS_EVENTS */
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****   /* Start scheduler */
 186:Core/Src/main.c ****   osKernelStart();
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 189:Core/Src/main.c **** 
 190:Core/Src/main.c ****   /* Infinite loop */
 191:Core/Src/main.c ****   while (1)
 192:Core/Src/main.c ****   {
 193:Core/Src/main.c ****     /* For turning on the motor */
 194:Core/Src/main.c ****     encoder_count = TIM2->CNT;
 195:Core/Src/main.c ****     HAL_Delay(128);                      // Delay 1/8 second
 196:Core/Src/main.c ****   }
 197:Core/Src/main.c **** }
 198:Core/Src/main.c **** 
 199:Core/Src/main.c **** void  button_init(void) {
 200:Core/Src/main.c ****     // Initialize PA0 for button input
 201:Core/Src/main.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOAEN;                                          // Enable periphera
 202:Core/Src/main.c ****     GPIOA->MODER &= ~(GPIO_MODER_MODER0_0 | GPIO_MODER_MODER0_1);               // Set PA0 to input
 203:Core/Src/main.c ****     GPIOC->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEEDR0_0 | GPIO_OSPEEDR_OSPEEDR0_1);     // Set to low speed
 204:Core/Src/main.c ****     GPIOC->PUPDR |= GPIO_PUPDR_PUPDR0_1;                                        // Set to pull-down
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 5


 205:Core/Src/main.c **** }
 206:Core/Src/main.c **** 
 207:Core/Src/main.c **** /* Called by SysTick Interrupt
 208:Core/Src/main.c ****  * Performs button debouncing, changes wave type on button rising edge
 209:Core/Src/main.c ****  * Updates frequency output from ADC value
 210:Core/Src/main.c ****  */
 211:Core/Src/main.c **** void HAL_SYSTICK_Callback(void) {
 212:Core/Src/main.c ****     // Remember that this function is called by the SysTick interrupt
 213:Core/Src/main.c ****     // You can't call any functions in here that use delay
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****     debouncer = (debouncer << 1);
 216:Core/Src/main.c ****     if(GPIOA->IDR & (1 << 0)) {
 217:Core/Src/main.c ****         debouncer |= 0x1;
 218:Core/Src/main.c ****     }
 219:Core/Src/main.c **** 
 220:Core/Src/main.c ****     if(debouncer == 0x7FFFFFFF) {
 221:Core/Src/main.c ****     switch(target_rpm) {
 222:Core/Src/main.c ****         case 80:
 223:Core/Src/main.c ****             target_rpm = 50;
 224:Core/Src/main.c ****             break;
 225:Core/Src/main.c ****         case 50:
 226:Core/Src/main.c ****             target_rpm = 81;
 227:Core/Src/main.c ****             break;
 228:Core/Src/main.c ****         case 0:
 229:Core/Src/main.c ****             target_rpm = 80;
 230:Core/Src/main.c ****             break;
 231:Core/Src/main.c ****         default:
 232:Core/Src/main.c ****             target_rpm = 0;
 233:Core/Src/main.c ****             break;
 234:Core/Src/main.c ****         }
 235:Core/Src/main.c ****     }
 236:Core/Src/main.c **** }
 237:Core/Src/main.c **** 
 238:Core/Src/main.c **** /**
 239:Core/Src/main.c ****   * @brief System Clock Configuration
 240:Core/Src/main.c ****   * @retval None
 241:Core/Src/main.c ****   */
 242:Core/Src/main.c **** void SystemClock_Config(void)
 243:Core/Src/main.c **** {
 244:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 245:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 246:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 249:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 250:Core/Src/main.c ****   */
 251:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 252:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 253:Core/Src/main.c ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 254:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 255:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 256:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 257:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 258:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 259:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 260:Core/Src/main.c ****   {
 261:Core/Src/main.c ****     Error_Handler();
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 6


 262:Core/Src/main.c ****   }
 263:Core/Src/main.c **** 
 264:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 265:Core/Src/main.c ****   */
 266:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 267:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 268:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 269:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 270:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 271:Core/Src/main.c **** 
 272:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 273:Core/Src/main.c ****   {
 274:Core/Src/main.c ****     Error_Handler();
 275:Core/Src/main.c ****   }
 276:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 277:Core/Src/main.c ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 278:Core/Src/main.c **** 
 279:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 280:Core/Src/main.c ****   {
 281:Core/Src/main.c ****     Error_Handler();
 282:Core/Src/main.c ****   }
 283:Core/Src/main.c **** }
 284:Core/Src/main.c **** 
 285:Core/Src/main.c **** /**
 286:Core/Src/main.c ****   * @brief I2C2 Initialization Function
 287:Core/Src/main.c ****   * @param None
 288:Core/Src/main.c ****   * @retval None
 289:Core/Src/main.c ****   */
 290:Core/Src/main.c **** static void MX_I2C2_Init(void)
 291:Core/Src/main.c **** {
 292:Core/Src/main.c **** 
 293:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 0 */
 294:Core/Src/main.c **** 
 295:Core/Src/main.c ****   /* USER CODE END I2C2_Init 0 */
 296:Core/Src/main.c **** 
 297:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 1 */
 298:Core/Src/main.c **** 
 299:Core/Src/main.c ****   /* USER CODE END I2C2_Init 1 */
 300:Core/Src/main.c ****   hi2c2.Instance = I2C2;
 301:Core/Src/main.c ****   hi2c2.Init.Timing = 0x20303E5D;
 302:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 303:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 304:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 305:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 306:Core/Src/main.c ****   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 307:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 308:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 309:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 310:Core/Src/main.c ****   {
 311:Core/Src/main.c ****     Error_Handler();
 312:Core/Src/main.c ****   }
 313:Core/Src/main.c **** 
 314:Core/Src/main.c ****   /** Configure Analogue filter
 315:Core/Src/main.c ****   */
 316:Core/Src/main.c ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 317:Core/Src/main.c ****   {
 318:Core/Src/main.c ****     Error_Handler();
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 7


 319:Core/Src/main.c ****   }
 320:Core/Src/main.c **** 
 321:Core/Src/main.c ****   /** Configure Digital filter
 322:Core/Src/main.c ****   */
 323:Core/Src/main.c ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 324:Core/Src/main.c ****   {
 325:Core/Src/main.c ****     Error_Handler();
 326:Core/Src/main.c ****   }
 327:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 2 */
 328:Core/Src/main.c **** 
 329:Core/Src/main.c ****   /* USER CODE END I2C2_Init 2 */
 330:Core/Src/main.c **** 
 331:Core/Src/main.c **** }
 332:Core/Src/main.c **** 
 333:Core/Src/main.c **** /**
 334:Core/Src/main.c ****   * @brief SPI2 Initialization Function
 335:Core/Src/main.c ****   * @param None
 336:Core/Src/main.c ****   * @retval None
 337:Core/Src/main.c ****   */
 338:Core/Src/main.c **** static void MX_SPI2_Init(void)
 339:Core/Src/main.c **** {
 340:Core/Src/main.c **** 
 341:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 0 */
 342:Core/Src/main.c **** 
 343:Core/Src/main.c ****   /* USER CODE END SPI2_Init 0 */
 344:Core/Src/main.c **** 
 345:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 1 */
 346:Core/Src/main.c **** 
 347:Core/Src/main.c ****   /* USER CODE END SPI2_Init 1 */
 348:Core/Src/main.c ****   /* SPI2 parameter configuration*/
 349:Core/Src/main.c ****   hspi2.Instance = SPI2;
 350:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 351:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 352:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 353:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 354:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 355:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 356:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 357:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 358:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 359:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 360:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 7;
 361:Core/Src/main.c ****   hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 362:Core/Src/main.c ****   hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 363:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 364:Core/Src/main.c ****   {
 365:Core/Src/main.c ****     Error_Handler();
 366:Core/Src/main.c ****   }
 367:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 2 */
 368:Core/Src/main.c **** 
 369:Core/Src/main.c ****   /* USER CODE END SPI2_Init 2 */
 370:Core/Src/main.c **** 
 371:Core/Src/main.c **** }
 372:Core/Src/main.c **** 
 373:Core/Src/main.c **** /**
 374:Core/Src/main.c ****   * @brief TSC Initialization Function
 375:Core/Src/main.c ****   * @param None
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 8


 376:Core/Src/main.c ****   * @retval None
 377:Core/Src/main.c ****   */
 378:Core/Src/main.c **** static void MX_TSC_Init(void)
 379:Core/Src/main.c **** {
 380:Core/Src/main.c **** 
 381:Core/Src/main.c ****   /* USER CODE BEGIN TSC_Init 0 */
 382:Core/Src/main.c **** 
 383:Core/Src/main.c ****   /* USER CODE END TSC_Init 0 */
 384:Core/Src/main.c **** 
 385:Core/Src/main.c ****   /* USER CODE BEGIN TSC_Init 1 */
 386:Core/Src/main.c **** 
 387:Core/Src/main.c ****   /* USER CODE END TSC_Init 1 */
 388:Core/Src/main.c **** 
 389:Core/Src/main.c ****   /** Configure the TSC peripheral
 390:Core/Src/main.c ****   */
 391:Core/Src/main.c ****   htsc.Instance = TSC;
 392:Core/Src/main.c ****   htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 393:Core/Src/main.c ****   htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 394:Core/Src/main.c ****   htsc.Init.SpreadSpectrum = DISABLE;
 395:Core/Src/main.c ****   htsc.Init.SpreadSpectrumDeviation = 1;
 396:Core/Src/main.c ****   htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 397:Core/Src/main.c ****   htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 398:Core/Src/main.c ****   htsc.Init.MaxCountValue = TSC_MCV_8191;
 399:Core/Src/main.c ****   htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 400:Core/Src/main.c ****   htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 401:Core/Src/main.c ****   htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 402:Core/Src/main.c ****   htsc.Init.MaxCountInterrupt = DISABLE;
 403:Core/Src/main.c ****   htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 404:Core/Src/main.c ****   htsc.Init.ShieldIOs = 0;
 405:Core/Src/main.c ****   htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 406:Core/Src/main.c ****   if (HAL_TSC_Init(&htsc) != HAL_OK)
 407:Core/Src/main.c ****   {
 408:Core/Src/main.c ****     Error_Handler();
 409:Core/Src/main.c ****   }
 410:Core/Src/main.c ****   /* USER CODE BEGIN TSC_Init 2 */
 411:Core/Src/main.c **** 
 412:Core/Src/main.c ****   /* USER CODE END TSC_Init 2 */
 413:Core/Src/main.c **** 
 414:Core/Src/main.c **** }
 415:Core/Src/main.c **** 
 416:Core/Src/main.c **** /**
 417:Core/Src/main.c ****   * @brief USB Initialization Function
 418:Core/Src/main.c ****   * @param None
 419:Core/Src/main.c ****   * @retval None
 420:Core/Src/main.c ****   */
 421:Core/Src/main.c **** static void MX_USB_PCD_Init(void)
 422:Core/Src/main.c **** {
 423:Core/Src/main.c **** 
 424:Core/Src/main.c ****   /* USER CODE BEGIN USB_Init 0 */
 425:Core/Src/main.c **** 
 426:Core/Src/main.c ****   /* USER CODE END USB_Init 0 */
 427:Core/Src/main.c **** 
 428:Core/Src/main.c ****   /* USER CODE BEGIN USB_Init 1 */
 429:Core/Src/main.c **** 
 430:Core/Src/main.c ****   /* USER CODE END USB_Init 1 */
 431:Core/Src/main.c ****   hpcd_USB_FS.Instance = USB;
 432:Core/Src/main.c ****   hpcd_USB_FS.Init.dev_endpoints = 8;
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 9


 433:Core/Src/main.c ****   hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 434:Core/Src/main.c ****   hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 435:Core/Src/main.c ****   hpcd_USB_FS.Init.low_power_enable = DISABLE;
 436:Core/Src/main.c ****   hpcd_USB_FS.Init.lpm_enable = DISABLE;
 437:Core/Src/main.c ****   hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 438:Core/Src/main.c ****   if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 439:Core/Src/main.c ****   {
 440:Core/Src/main.c ****     Error_Handler();
 441:Core/Src/main.c ****   }
 442:Core/Src/main.c ****   /* USER CODE BEGIN USB_Init 2 */
 443:Core/Src/main.c **** 
 444:Core/Src/main.c ****   /* USER CODE END USB_Init 2 */
 445:Core/Src/main.c **** 
 446:Core/Src/main.c **** }
 447:Core/Src/main.c **** 
 448:Core/Src/main.c **** /**
 449:Core/Src/main.c ****   * @brief GPIO Initialization Function
 450:Core/Src/main.c ****   * @param None
 451:Core/Src/main.c ****   * @retval None
 452:Core/Src/main.c ****   */
 453:Core/Src/main.c **** static void MX_GPIO_Init(void)
 454:Core/Src/main.c **** {
  26              		.loc 1 454 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 20
  33              		.cfi_offset 4, -20
  34              		.cfi_offset 5, -16
  35              		.cfi_offset 6, -12
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 89B0     		sub	sp, sp, #36
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 455:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 455 3 view .LVU1
  42              		.loc 1 455 20 is_stmt 0 view .LVU2
  43 0004 1422     		movs	r2, #20
  44 0006 0021     		movs	r1, #0
  45 0008 03A8     		add	r0, sp, #12
  46 000a FFF7FEFF 		bl	memset
  47              	.LVL0:
 456:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 457:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 458:Core/Src/main.c **** 
 459:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 460:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 460 3 is_stmt 1 view .LVU3
  49              	.LBB8:
  50              		.loc 1 460 3 view .LVU4
  51              		.loc 1 460 3 view .LVU5
  52 000e 204B     		ldr	r3, .L2
  53 0010 5A69     		ldr	r2, [r3, #20]
  54 0012 8021     		movs	r1, #128
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 10


  55 0014 0903     		lsls	r1, r1, #12
  56 0016 0A43     		orrs	r2, r1
  57 0018 5A61     		str	r2, [r3, #20]
  58              		.loc 1 460 3 view .LVU6
  59 001a 5A69     		ldr	r2, [r3, #20]
  60 001c 0A40     		ands	r2, r1
  61 001e 0092     		str	r2, [sp]
  62              		.loc 1 460 3 view .LVU7
  63 0020 009A     		ldr	r2, [sp]
  64              	.LBE8:
  65              		.loc 1 460 3 view .LVU8
 461:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  66              		.loc 1 461 3 view .LVU9
  67              	.LBB9:
  68              		.loc 1 461 3 view .LVU10
  69              		.loc 1 461 3 view .LVU11
  70 0022 5A69     		ldr	r2, [r3, #20]
  71 0024 8021     		movs	r1, #128
  72 0026 8902     		lsls	r1, r1, #10
  73 0028 0A43     		orrs	r2, r1
  74 002a 5A61     		str	r2, [r3, #20]
  75              		.loc 1 461 3 view .LVU12
  76 002c 5A69     		ldr	r2, [r3, #20]
  77 002e 0A40     		ands	r2, r1
  78 0030 0192     		str	r2, [sp, #4]
  79              		.loc 1 461 3 view .LVU13
  80 0032 019A     		ldr	r2, [sp, #4]
  81              	.LBE9:
  82              		.loc 1 461 3 view .LVU14
 462:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  83              		.loc 1 462 3 view .LVU15
  84              	.LBB10:
  85              		.loc 1 462 3 view .LVU16
  86              		.loc 1 462 3 view .LVU17
  87 0034 5A69     		ldr	r2, [r3, #20]
  88 0036 8021     		movs	r1, #128
  89 0038 C902     		lsls	r1, r1, #11
  90 003a 0A43     		orrs	r2, r1
  91 003c 5A61     		str	r2, [r3, #20]
  92              		.loc 1 462 3 view .LVU18
  93 003e 5B69     		ldr	r3, [r3, #20]
  94 0040 0B40     		ands	r3, r1
  95 0042 0293     		str	r3, [sp, #8]
  96              		.loc 1 462 3 view .LVU19
  97 0044 029B     		ldr	r3, [sp, #8]
  98              	.LBE10:
  99              		.loc 1 462 3 view .LVU20
 463:Core/Src/main.c **** 
 464:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 465:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 100              		.loc 1 465 3 view .LVU21
 101 0046 134C     		ldr	r4, .L2+4
 102 0048 134D     		ldr	r5, .L2+8
 103 004a 0022     		movs	r2, #0
 104 004c 2100     		movs	r1, r4
 105 004e 2800     		movs	r0, r5
 106 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 11


 107              	.LVL1:
 466:Core/Src/main.c ****                           |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 467:Core/Src/main.c **** 
 468:Core/Src/main.c ****   /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
 469:Core/Src/main.c ****                            LD4_Pin LD5_Pin */
 470:Core/Src/main.c ****   GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 108              		.loc 1 470 3 view .LVU22
 109              		.loc 1 470 23 is_stmt 0 view .LVU23
 110 0054 0394     		str	r4, [sp, #12]
 471:Core/Src/main.c ****                           |LD4_Pin|LD5_Pin;
 472:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 111              		.loc 1 472 3 is_stmt 1 view .LVU24
 112              		.loc 1 472 24 is_stmt 0 view .LVU25
 113 0056 0127     		movs	r7, #1
 114 0058 0497     		str	r7, [sp, #16]
 473:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 115              		.loc 1 473 3 is_stmt 1 view .LVU26
 116              		.loc 1 473 24 is_stmt 0 view .LVU27
 117 005a 0024     		movs	r4, #0
 118 005c 0594     		str	r4, [sp, #20]
 474:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 119              		.loc 1 474 3 is_stmt 1 view .LVU28
 120              		.loc 1 474 25 is_stmt 0 view .LVU29
 121 005e 0694     		str	r4, [sp, #24]
 475:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 122              		.loc 1 475 3 is_stmt 1 view .LVU30
 123 0060 03A9     		add	r1, sp, #12
 124 0062 2800     		movs	r0, r5
 125 0064 FFF7FEFF 		bl	HAL_GPIO_Init
 126              	.LVL2:
 476:Core/Src/main.c **** 
 477:Core/Src/main.c ****   /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
 478:Core/Src/main.c ****   GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 127              		.loc 1 478 3 view .LVU31
 128              		.loc 1 478 23 is_stmt 0 view .LVU32
 129 0068 0623     		movs	r3, #6
 130 006a 0393     		str	r3, [sp, #12]
 479:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 131              		.loc 1 479 3 is_stmt 1 view .LVU33
 132              		.loc 1 479 24 is_stmt 0 view .LVU34
 133 006c 9026     		movs	r6, #144
 134 006e 7603     		lsls	r6, r6, #13
 135 0070 0496     		str	r6, [sp, #16]
 480:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 136              		.loc 1 480 3 is_stmt 1 view .LVU35
 137              		.loc 1 480 24 is_stmt 0 view .LVU36
 138 0072 0594     		str	r4, [sp, #20]
 481:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 139              		.loc 1 481 3 is_stmt 1 view .LVU37
 140 0074 03A9     		add	r1, sp, #12
 141 0076 2800     		movs	r0, r5
 142 0078 FFF7FEFF 		bl	HAL_GPIO_Init
 143              	.LVL3:
 482:Core/Src/main.c **** 
 483:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 484:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 144              		.loc 1 484 3 view .LVU38
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 12


 145              		.loc 1 484 23 is_stmt 0 view .LVU39
 146 007c 0397     		str	r7, [sp, #12]
 485:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 147              		.loc 1 485 3 is_stmt 1 view .LVU40
 148              		.loc 1 485 24 is_stmt 0 view .LVU41
 149 007e 0496     		str	r6, [sp, #16]
 486:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 150              		.loc 1 486 3 is_stmt 1 view .LVU42
 151              		.loc 1 486 24 is_stmt 0 view .LVU43
 152 0080 0594     		str	r4, [sp, #20]
 487:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 153              		.loc 1 487 3 is_stmt 1 view .LVU44
 154 0082 9020     		movs	r0, #144
 155 0084 03A9     		add	r1, sp, #12
 156 0086 C005     		lsls	r0, r0, #23
 157 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 158              	.LVL4:
 488:Core/Src/main.c **** 
 489:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 490:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 491:Core/Src/main.c **** }
 159              		.loc 1 491 1 is_stmt 0 view .LVU45
 160 008c 09B0     		add	sp, sp, #36
 161              		@ sp needed
 162 008e F0BD     		pop	{r4, r5, r6, r7, pc}
 163              	.L3:
 164              		.align	2
 165              	.L2:
 166 0090 00100240 		.word	1073876992
 167 0094 E1030000 		.word	993
 168 0098 00080048 		.word	1207961600
 169              		.cfi_endproc
 170              	.LFE58:
 172              		.section	.text.StartRouterTask,"ax",%progbits
 173              		.align	1
 174              		.global	StartRouterTask
 175              		.syntax unified
 176              		.code	16
 177              		.thumb_func
 179              	StartRouterTask:
 180              	.LFB59:
 492:Core/Src/main.c **** 
 493:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 494:Core/Src/main.c **** 
 495:Core/Src/main.c **** /* USER CODE END 4 */
 496:Core/Src/main.c **** 
 497:Core/Src/main.c **** //New branch
 498:Core/Src/main.c **** 
 499:Core/Src/main.c **** /* USER CODE BEGIN Header_StartRouterTask */
 500:Core/Src/main.c **** /**
 501:Core/Src/main.c ****   * @brief  Function implementing the routerTask thread.
 502:Core/Src/main.c ****   * @param  argument: Not used
 503:Core/Src/main.c ****   * @retval None
 504:Core/Src/main.c ****   */
 505:Core/Src/main.c **** /* USER CODE END Header_StartRouterTask */
 506:Core/Src/main.c **** void StartRouterTask(void *argument)
 507:Core/Src/main.c **** { 
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 13


 181              		.loc 1 507 1 is_stmt 1 view -0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185              	.LVL5:
 186              		.loc 1 507 1 is_stmt 0 view .LVU47
 187 0000 10B5     		push	{r4, lr}
 188              	.LCFI2:
 189              		.cfi_def_cfa_offset 8
 190              		.cfi_offset 4, -8
 191              		.cfi_offset 14, -4
 192 0002 01E0     		b	.L6
 193              	.LVL6:
 194              	.L7:
 508:Core/Src/main.c ****   //Global command queue
 509:Core/Src/main.c ****   extern Cmd_Queue * cmdQueue;
 510:Core/Src/main.c ****   //Global variables to pass command to worker threads
 511:Core/Src/main.c ****   extern volatile uint16_t commandLED;
 512:Core/Src/main.c ****   extern volatile uint16_t commandMotor;
 513:Core/Src/main.c ****   //Command popped from queue
 514:Core/Src/main.c ****   uint16_t commandIn = 0;
 515:Core/Src/main.c ****   /* Infinite loop */
 516:Core/Src/main.c ****   //uint16_t item = queuePop(cmdQueue);
 517:Core/Src/main.c ****   
 518:Core/Src/main.c ****   for(;;)
 519:Core/Src/main.c ****   {
 520:Core/Src/main.c ****     //If queue is not empty
 521:Core/Src/main.c ****     if (!isQueueEmpty(cmdQueue)) {
 522:Core/Src/main.c ****       //Placeholder for task priorities
 523:Core/Src/main.c ****       osDelay(1);
 524:Core/Src/main.c ****       //Retrieve command from queue
 525:Core/Src/main.c ****       commandIn = queuePop(cmdQueue);
 526:Core/Src/main.c ****       //Determine which worker task corresponds to command
 527:Core/Src/main.c ****         switch (commandIn & 0xF000) {
 528:Core/Src/main.c ****         //LED command
 529:Core/Src/main.c ****         case 0xA000:
 530:Core/Src/main.c ****           commandLED = commandIn;
 195              		.loc 1 530 11 is_stmt 1 view .LVU48
 196              		.loc 1 530 22 is_stmt 0 view .LVU49
 197 0004 0E4B     		ldr	r3, .L11
 198 0006 1880     		strh	r0, [r3]
 531:Core/Src/main.c ****           break;
 199              		.loc 1 531 11 is_stmt 1 view .LVU50
 200              	.LVL7:
 201              	.L6:
 518:Core/Src/main.c ****   {
 202              		.loc 1 518 3 view .LVU51
 521:Core/Src/main.c ****       //Placeholder for task priorities
 203              		.loc 1 521 5 view .LVU52
 521:Core/Src/main.c ****       //Placeholder for task priorities
 204              		.loc 1 521 10 is_stmt 0 view .LVU53
 205 0008 0E4B     		ldr	r3, .L11+4
 206 000a 1868     		ldr	r0, [r3]
 207 000c FFF7FEFF 		bl	isQueueEmpty
 208              	.LVL8:
 521:Core/Src/main.c ****       //Placeholder for task priorities
 209              		.loc 1 521 8 discriminator 1 view .LVU54
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 14


 210 0010 0028     		cmp	r0, #0
 211 0012 F9D1     		bne	.L6
 523:Core/Src/main.c ****       //Retrieve command from queue
 212              		.loc 1 523 7 is_stmt 1 view .LVU55
 213 0014 0130     		adds	r0, r0, #1
 214 0016 FFF7FEFF 		bl	osDelay
 215              	.LVL9:
 525:Core/Src/main.c ****       //Determine which worker task corresponds to command
 216              		.loc 1 525 7 view .LVU56
 525:Core/Src/main.c ****       //Determine which worker task corresponds to command
 217              		.loc 1 525 19 is_stmt 0 view .LVU57
 218 001a 0A4B     		ldr	r3, .L11+4
 219 001c 1868     		ldr	r0, [r3]
 220 001e FFF7FEFF 		bl	queuePop
 221              	.LVL10:
 527:Core/Src/main.c ****         //LED command
 222              		.loc 1 527 9 is_stmt 1 view .LVU58
 223 0022 030B     		lsrs	r3, r0, #12
 224 0024 1B03     		lsls	r3, r3, #12
 225 0026 9BB2     		uxth	r3, r3
 226 0028 A022     		movs	r2, #160
 227 002a 1202     		lsls	r2, r2, #8
 228 002c 9342     		cmp	r3, r2
 229 002e E9D0     		beq	.L7
 230 0030 B022     		movs	r2, #176
 231 0032 1202     		lsls	r2, r2, #8
 232 0034 9342     		cmp	r3, r2
 233 0036 E7D1     		bne	.L6
 532:Core/Src/main.c ****         //Motor command
 533:Core/Src/main.c ****         case 0xB000:
 534:Core/Src/main.c ****           commandMotor = commandIn;
 234              		.loc 1 534 11 view .LVU59
 235              		.loc 1 534 24 is_stmt 0 view .LVU60
 236 0038 034B     		ldr	r3, .L11+8
 237 003a 1880     		strh	r0, [r3]
 535:Core/Src/main.c ****           break;
 238              		.loc 1 535 11 is_stmt 1 view .LVU61
 239 003c E4E7     		b	.L6
 240              	.L12:
 241 003e C046     		.align	2
 242              	.L11:
 243 0040 00000000 		.word	commandLED
 244 0044 00000000 		.word	cmdQueue
 245 0048 00000000 		.word	commandMotor
 246              		.cfi_endproc
 247              	.LFE59:
 249              		.section	.text.StartLEDTask,"ax",%progbits
 250              		.align	1
 251              		.global	StartLEDTask
 252              		.syntax unified
 253              		.code	16
 254              		.thumb_func
 256              	StartLEDTask:
 257              	.LVL11:
 258              	.LFB61:
 536:Core/Src/main.c ****         default:
 537:Core/Src/main.c ****         break;
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 15


 538:Core/Src/main.c ****       }
 539:Core/Src/main.c ****     }
 540:Core/Src/main.c ****   }
 541:Core/Src/main.c **** }
 542:Core/Src/main.c ****   /* USER CODE END 5 */
 543:Core/Src/main.c **** 
 544:Core/Src/main.c **** void initLEDs(void) {
 545:Core/Src/main.c **** 	// red LED PC6, blue LED (PC7), green LED PC9, orange LED PC8
 546:Core/Src/main.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 547:Core/Src/main.c ****   // set the MODER, 01: General purpose output mode
 548:Core/Src/main.c **** 	// init PC6 MODER
 549:Core/Src/main.c **** 	GPIOC->MODER |= (1 << 12);
 550:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 13);
 551:Core/Src/main.c ****     // init PC7 MODER
 552:Core/Src/main.c **** 	GPIOC->MODER |= (1 << 14);
 553:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 15);
 554:Core/Src/main.c **** 	// init PC8 MODER
 555:Core/Src/main.c **** 	GPIOC->MODER |= (1 << 16);
 556:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 17);
 557:Core/Src/main.c **** 	// init PC9 MODER
 558:Core/Src/main.c **** 	GPIOC->MODER |= (1 << 18);
 559:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 19);
 560:Core/Src/main.c ****   // Set the pins to low speed in the OSPEEDR register
 561:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 12) | (1 << 13));
 562:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 14) | (1 << 15));
 563:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 16) | (1 << 17));
 564:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 18) | (1 << 19));
 565:Core/Src/main.c **** 
 566:Core/Src/main.c **** 	// Set LED to no pull-up/down resistors in the PUPDR register
 567:Core/Src/main.c **** 	// 00: No pull-up, pull-down
 568:Core/Src/main.c **** 	GPIOC->PUPDR &= ~((1 << 16) | (1 << 17) | (1 << 18) | (1 << 19));
 569:Core/Src/main.c **** 	GPIOC->PUPDR &= ~((1 << 12) | (1 << 13) | (1 << 14) | (1 << 15));
 570:Core/Src/main.c **** 	// set PC6-9 to 0
 571:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 6);
 572:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 7);
 573:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 8);
 574:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 9);
 575:Core/Src/main.c **** }
 576:Core/Src/main.c **** 
 577:Core/Src/main.c **** /* USER CODE BEGIN Header_StartLEDTask */
 578:Core/Src/main.c **** /**
 579:Core/Src/main.c ****   * @brief  Function implementing the LEDTask thread.
 580:Core/Src/main.c ****   * @param  argument: Not used
 581:Core/Src/main.c ****   * @retval None
 582:Core/Src/main.c ****   */
 583:Core/Src/main.c **** /* USER CODE END Header_StartLEDTask */
 584:Core/Src/main.c **** void StartLEDTask(void *argument)
 585:Core/Src/main.c **** {
 259              		.loc 1 585 1 view -0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 56
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              		.loc 1 585 1 is_stmt 0 view .LVU63
 264 0000 70B5     		push	{r4, r5, r6, lr}
 265              	.LCFI3:
 266              		.cfi_def_cfa_offset 16
 267              		.cfi_offset 4, -16
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 16


 268              		.cfi_offset 5, -12
 269              		.cfi_offset 6, -8
 270              		.cfi_offset 14, -4
 271 0002 8EB0     		sub	sp, sp, #56
 272              	.LCFI4:
 273              		.cfi_def_cfa_offset 72
 586:Core/Src/main.c ****   binarySem03LEDWorkerHandle = osSemaphoreNew(1, 1, NULL);
 274              		.loc 1 586 3 is_stmt 1 view .LVU64
 275              		.loc 1 586 32 is_stmt 0 view .LVU65
 276 0004 0022     		movs	r2, #0
 277 0006 0121     		movs	r1, #1
 278 0008 0120     		movs	r0, #1
 279              	.LVL12:
 280              		.loc 1 586 32 view .LVU66
 281 000a FFF7FEFF 		bl	osSemaphoreNew
 282              	.LVL13:
 283              		.loc 1 586 30 discriminator 1 view .LVU67
 284 000e 784B     		ldr	r3, .L35
 285 0010 1860     		str	r0, [r3]
 587:Core/Src/main.c **** 
 588:Core/Src/main.c ****   extern volatile uint16_t commandLED;
 286              		.loc 1 588 3 is_stmt 1 view .LVU68
 589:Core/Src/main.c ****   volatile uint8_t LEDColor = 0, LEDAction = 0, LEDSpeed = 0;
 287              		.loc 1 589 3 view .LVU69
 288              		.loc 1 589 20 is_stmt 0 view .LVU70
 289 0012 0024     		movs	r4, #0
 290 0014 3723     		movs	r3, #55
 291 0016 6B44     		add	r3, r3, sp
 292 0018 1C70     		strb	r4, [r3]
 293              		.loc 1 589 34 view .LVU71
 294 001a 3623     		movs	r3, #54
 295 001c 6B44     		add	r3, r3, sp
 296 001e 1C70     		strb	r4, [r3]
 297              		.loc 1 589 49 view .LVU72
 298 0020 3523     		movs	r3, #53
 299 0022 6B44     		add	r3, r3, sp
 300 0024 1C70     		strb	r4, [r3]
 590:Core/Src/main.c ****   volatile uint32_t colorMask[5] = {GPIO_ODR_6, GPIO_ODR_9, GPIO_ODR_7, GPIO_ODR_8, GPIO_ODR_6 | GP
 301              		.loc 1 590 3 is_stmt 1 view .LVU73
 302              		.loc 1 590 21 is_stmt 0 view .LVU74
 303 0026 08A9     		add	r1, sp, #32
 304 0028 724B     		ldr	r3, .L35+4
 305 002a 0A00     		movs	r2, r1
 306 002c 61CB     		ldmia	r3!, {r0, r5, r6}
 307 002e 61C2     		stmia	r2!, {r0, r5, r6}
 308 0030 03CB     		ldmia	r3!, {r0, r1}
 309 0032 03C2     		stmia	r2!, {r0, r1}
 591:Core/Src/main.c ****   volatile uint8_t blink[4] = {0,0,0,0};
 310              		.loc 1 591 3 is_stmt 1 view .LVU75
 311              		.loc 1 591 20 is_stmt 0 view .LVU76
 312 0034 0794     		str	r4, [sp, #28]
 592:Core/Src/main.c ****   volatile uint8_t blinkTime[4] = {0,0,0,0};
 313              		.loc 1 592 3 is_stmt 1 view .LVU77
 314              		.loc 1 592 20 is_stmt 0 view .LVU78
 315 0036 0694     		str	r4, [sp, #24]
 593:Core/Src/main.c ****   volatile uint32_t startTime[4] = {0,0,0,0};
 316              		.loc 1 593 3 is_stmt 1 view .LVU79
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 17


 317              		.loc 1 593 21 is_stmt 0 view .LVU80
 318 0038 1022     		movs	r2, #16
 319 003a 0021     		movs	r1, #0
 320 003c 02A8     		add	r0, sp, #8
 321 003e FFF7FEFF 		bl	memset
 322              	.LVL14:
 594:Core/Src/main.c ****   volatile uint32_t currentTime = 0;
 323              		.loc 1 594 3 is_stmt 1 view .LVU81
 324              		.loc 1 594 21 is_stmt 0 view .LVU82
 325 0042 0194     		str	r4, [sp, #4]
 326 0044 9BE0     		b	.L29
 327              	.L15:
 328              	.LBB11:
 595:Core/Src/main.c **** 
 596:Core/Src/main.c ****   /* Infinite loop */
 597:Core/Src/main.c ****   for(;;)
 598:Core/Src/main.c ****   {
 599:Core/Src/main.c ****     osSemaphoreAcquire(binarySem03LEDWorkerHandle, osWaitForever);
 600:Core/Src/main.c **** 
 601:Core/Src/main.c ****     LEDColor = (commandLED & 0x0F00) >> 8;
 602:Core/Src/main.c ****     LEDAction = (commandLED & 0x00F0) >> 4;
 603:Core/Src/main.c **** 
 604:Core/Src/main.c ****     //LED action
 605:Core/Src/main.c ****     switch (LEDAction) {
 329              		.loc 1 605 5 view .LVU83
 330 0046 042A     		cmp	r2, #4
 331 0048 15D1     		bne	.L18
 606:Core/Src/main.c ****       //On
 607:Core/Src/main.c ****       case 1:
 608:Core/Src/main.c ****         GPIOC->ODR |= colorMask[LEDColor-1];
 609:Core/Src/main.c ****         if (LEDColor == 5) {
 610:Core/Src/main.c ****           blink[0] = 0;
 611:Core/Src/main.c ****           blink[1] = 0;
 612:Core/Src/main.c ****           blink[2] = 0;
 613:Core/Src/main.c ****           blink[3] = 0;
 614:Core/Src/main.c ****         }
 615:Core/Src/main.c ****         else
 616:Core/Src/main.c ****           blink[LEDColor-1] = 0;
 617:Core/Src/main.c ****         break;
 618:Core/Src/main.c ****       //Off
 619:Core/Src/main.c ****       case 2:
 620:Core/Src/main.c ****         GPIOC->ODR &= ~colorMask[LEDColor-1];
 621:Core/Src/main.c ****         if (LEDColor == 5) {
 622:Core/Src/main.c ****           blink[0] = 0;
 623:Core/Src/main.c ****           blink[1] = 0;
 624:Core/Src/main.c ****           blink[2] = 0;
 625:Core/Src/main.c ****           blink[3] = 0;
 626:Core/Src/main.c ****         }
 627:Core/Src/main.c ****         else
 628:Core/Src/main.c ****           blink[LEDColor-1] = 0;
 629:Core/Src/main.c ****         break;
 630:Core/Src/main.c ****       //Toggle
 631:Core/Src/main.c ****       case 3:
 632:Core/Src/main.c ****         GPIOC->ODR ^= colorMask[LEDColor-1];
 633:Core/Src/main.c ****         if (LEDColor == 5) {
 634:Core/Src/main.c ****           blink[0] = 0;
 635:Core/Src/main.c ****           blink[1] = 0;
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 18


 636:Core/Src/main.c ****           blink[2] = 0;
 637:Core/Src/main.c ****           blink[3] = 0;
 638:Core/Src/main.c ****         }
 639:Core/Src/main.c ****         else
 640:Core/Src/main.c ****           blink[LEDColor-1] = 0;
 641:Core/Src/main.c ****         break;
 642:Core/Src/main.c ****       //Blink
 643:Core/Src/main.c ****       case 4:
 644:Core/Src/main.c ****         if (LEDColor == 5) {
 332              		.loc 1 644 9 is_stmt 1 view .LVU84
 333              		.loc 1 644 22 is_stmt 0 view .LVU85
 334 004a 3723     		movs	r3, #55
 335 004c 6B44     		add	r3, r3, sp
 336 004e 1B78     		ldrb	r3, [r3]
 337              		.loc 1 644 12 view .LVU86
 338 0050 052B     		cmp	r3, #5
 339 0052 56D0     		beq	.L30
 645:Core/Src/main.c ****           blink[0] = 1;
 646:Core/Src/main.c ****           blinkTime[0] = commandLED & 0xF;
 647:Core/Src/main.c ****           blink[1] = 1;
 648:Core/Src/main.c ****           blinkTime[1] = commandLED & 0xF;
 649:Core/Src/main.c ****           blink[2] = 1;
 650:Core/Src/main.c ****           blinkTime[2] = commandLED & 0xF;
 651:Core/Src/main.c ****           blink[3] = 1;
 652:Core/Src/main.c ****           blinkTime[3] = commandLED & 0xF;
 653:Core/Src/main.c ****         }
 654:Core/Src/main.c ****         else
 655:Core/Src/main.c ****           blink[LEDColor-1] = 1;
 340              		.loc 1 655 11 is_stmt 1 view .LVU87
 341              		.loc 1 655 25 is_stmt 0 view .LVU88
 342 0054 3723     		movs	r3, #55
 343 0056 6B44     		add	r3, r3, sp
 344 0058 1B78     		ldrb	r3, [r3]
 345 005a 013B     		subs	r3, r3, #1
 346              		.loc 1 655 29 view .LVU89
 347 005c 07AA     		add	r2, sp, #28
 348 005e 0121     		movs	r1, #1
 349 0060 D154     		strb	r1, [r2, r3]
 350              	.L24:
 656:Core/Src/main.c ****           blinkTime[LEDColor-1] = commandLED & 0xF;
 351              		.loc 1 656 11 is_stmt 1 view .LVU90
 352              		.loc 1 656 46 is_stmt 0 view .LVU91
 353 0062 654B     		ldr	r3, .L35+8
 354 0064 1A88     		ldrh	r2, [r3]
 355              		.loc 1 656 29 view .LVU92
 356 0066 3723     		movs	r3, #55
 357 0068 6B44     		add	r3, r3, sp
 358 006a 1B78     		ldrb	r3, [r3]
 359 006c 013B     		subs	r3, r3, #1
 360              		.loc 1 656 46 view .LVU93
 361 006e 0F21     		movs	r1, #15
 362 0070 0A40     		ands	r2, r1
 363              		.loc 1 656 33 view .LVU94
 364 0072 06A9     		add	r1, sp, #24
 365 0074 CA54     		strb	r2, [r1, r3]
 657:Core/Src/main.c ****         break;
 366              		.loc 1 657 9 is_stmt 1 view .LVU95
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 19


 367              	.L18:
 658:Core/Src/main.c ****       default:
 659:Core/Src/main.c ****     }
 660:Core/Src/main.c **** 
 661:Core/Src/main.c ****     //Blinking
 662:Core/Src/main.c ****     currentTime = xTaskGetTickCount();
 368              		.loc 1 662 5 view .LVU96
 369              		.loc 1 662 19 is_stmt 0 view .LVU97
 370 0076 FFF7FEFF 		bl	xTaskGetTickCount
 371              	.LVL15:
 372              		.loc 1 662 17 discriminator 1 view .LVU98
 373 007a 0190     		str	r0, [sp, #4]
 663:Core/Src/main.c ****     for (int i = 0; i < 4; i++) {
 374              		.loc 1 663 5 is_stmt 1 view .LVU99
 375              	.LBB12:
 376              		.loc 1 663 10 view .LVU100
 377              	.LVL16:
 378              		.loc 1 663 14 is_stmt 0 view .LVU101
 379 007c 0023     		movs	r3, #0
 380              		.loc 1 663 5 view .LVU102
 381 007e 5BE0     		b	.L25
 382              	.LVL17:
 383              	.L16:
 384              		.loc 1 663 5 view .LVU103
 385              	.LBE12:
 608:Core/Src/main.c ****         if (LEDColor == 5) {
 386              		.loc 1 608 9 is_stmt 1 view .LVU104
 608:Core/Src/main.c ****         if (LEDColor == 5) {
 387              		.loc 1 608 41 is_stmt 0 view .LVU105
 388 0080 3722     		movs	r2, #55
 389 0082 6A44     		add	r2, r2, sp
 390 0084 1378     		ldrb	r3, [r2]
 391 0086 013B     		subs	r3, r3, #1
 608:Core/Src/main.c ****         if (LEDColor == 5) {
 392              		.loc 1 608 32 view .LVU106
 393 0088 9B00     		lsls	r3, r3, #2
 394 008a 08A9     		add	r1, sp, #32
 395 008c 5858     		ldr	r0, [r3, r1]
 608:Core/Src/main.c ****         if (LEDColor == 5) {
 396              		.loc 1 608 14 view .LVU107
 397 008e 5B49     		ldr	r1, .L35+12
 398 0090 4B69     		ldr	r3, [r1, #20]
 608:Core/Src/main.c ****         if (LEDColor == 5) {
 399              		.loc 1 608 20 view .LVU108
 400 0092 0343     		orrs	r3, r0
 401 0094 4B61     		str	r3, [r1, #20]
 609:Core/Src/main.c ****           blink[0] = 0;
 402              		.loc 1 609 9 is_stmt 1 view .LVU109
 609:Core/Src/main.c ****           blink[0] = 0;
 403              		.loc 1 609 22 is_stmt 0 view .LVU110
 404 0096 1378     		ldrb	r3, [r2]
 609:Core/Src/main.c ****           blink[0] = 0;
 405              		.loc 1 609 12 view .LVU111
 406 0098 052B     		cmp	r3, #5
 407 009a 07D0     		beq	.L31
 616:Core/Src/main.c ****         break;
 408              		.loc 1 616 11 is_stmt 1 view .LVU112
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 20


 616:Core/Src/main.c ****         break;
 409              		.loc 1 616 25 is_stmt 0 view .LVU113
 410 009c 3723     		movs	r3, #55
 411 009e 6B44     		add	r3, r3, sp
 412 00a0 1B78     		ldrb	r3, [r3]
 413 00a2 013B     		subs	r3, r3, #1
 616:Core/Src/main.c ****         break;
 414              		.loc 1 616 29 view .LVU114
 415 00a4 07AA     		add	r2, sp, #28
 416 00a6 0021     		movs	r1, #0
 417 00a8 D154     		strb	r1, [r2, r3]
 418 00aa E4E7     		b	.L18
 419              	.L31:
 610:Core/Src/main.c ****           blink[1] = 0;
 420              		.loc 1 610 11 is_stmt 1 view .LVU115
 610:Core/Src/main.c ****           blink[1] = 0;
 421              		.loc 1 610 20 is_stmt 0 view .LVU116
 422 00ac 07AB     		add	r3, sp, #28
 423 00ae 0022     		movs	r2, #0
 424 00b0 1A70     		strb	r2, [r3]
 611:Core/Src/main.c ****           blink[2] = 0;
 425              		.loc 1 611 11 is_stmt 1 view .LVU117
 611:Core/Src/main.c ****           blink[2] = 0;
 426              		.loc 1 611 20 is_stmt 0 view .LVU118
 427 00b2 5A70     		strb	r2, [r3, #1]
 612:Core/Src/main.c ****           blink[3] = 0;
 428              		.loc 1 612 11 is_stmt 1 view .LVU119
 612:Core/Src/main.c ****           blink[3] = 0;
 429              		.loc 1 612 20 is_stmt 0 view .LVU120
 430 00b4 9A70     		strb	r2, [r3, #2]
 613:Core/Src/main.c ****         }
 431              		.loc 1 613 11 is_stmt 1 view .LVU121
 613:Core/Src/main.c ****         }
 432              		.loc 1 613 20 is_stmt 0 view .LVU122
 433 00b6 DA70     		strb	r2, [r3, #3]
 434 00b8 DDE7     		b	.L18
 435              	.L34:
 622:Core/Src/main.c ****           blink[1] = 0;
 436              		.loc 1 622 11 is_stmt 1 view .LVU123
 622:Core/Src/main.c ****           blink[1] = 0;
 437              		.loc 1 622 20 is_stmt 0 view .LVU124
 438 00ba 07AB     		add	r3, sp, #28
 439 00bc 0022     		movs	r2, #0
 440 00be 1A70     		strb	r2, [r3]
 623:Core/Src/main.c ****           blink[2] = 0;
 441              		.loc 1 623 11 is_stmt 1 view .LVU125
 623:Core/Src/main.c ****           blink[2] = 0;
 442              		.loc 1 623 20 is_stmt 0 view .LVU126
 443 00c0 5A70     		strb	r2, [r3, #1]
 624:Core/Src/main.c ****           blink[3] = 0;
 444              		.loc 1 624 11 is_stmt 1 view .LVU127
 624:Core/Src/main.c ****           blink[3] = 0;
 445              		.loc 1 624 20 is_stmt 0 view .LVU128
 446 00c2 9A70     		strb	r2, [r3, #2]
 625:Core/Src/main.c ****         }
 447              		.loc 1 625 11 is_stmt 1 view .LVU129
 625:Core/Src/main.c ****         }
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 21


 448              		.loc 1 625 20 is_stmt 0 view .LVU130
 449 00c4 DA70     		strb	r2, [r3, #3]
 450 00c6 D6E7     		b	.L18
 451              	.L14:
 632:Core/Src/main.c ****         if (LEDColor == 5) {
 452              		.loc 1 632 9 is_stmt 1 view .LVU131
 632:Core/Src/main.c ****         if (LEDColor == 5) {
 453              		.loc 1 632 41 is_stmt 0 view .LVU132
 454 00c8 3722     		movs	r2, #55
 455 00ca 6A44     		add	r2, r2, sp
 456 00cc 1378     		ldrb	r3, [r2]
 457 00ce 013B     		subs	r3, r3, #1
 632:Core/Src/main.c ****         if (LEDColor == 5) {
 458              		.loc 1 632 32 view .LVU133
 459 00d0 9B00     		lsls	r3, r3, #2
 460 00d2 08A9     		add	r1, sp, #32
 461 00d4 5858     		ldr	r0, [r3, r1]
 632:Core/Src/main.c ****         if (LEDColor == 5) {
 462              		.loc 1 632 14 view .LVU134
 463 00d6 4949     		ldr	r1, .L35+12
 464 00d8 4B69     		ldr	r3, [r1, #20]
 632:Core/Src/main.c ****         if (LEDColor == 5) {
 465              		.loc 1 632 20 view .LVU135
 466 00da 4340     		eors	r3, r0
 467 00dc 4B61     		str	r3, [r1, #20]
 633:Core/Src/main.c ****           blink[0] = 0;
 468              		.loc 1 633 9 is_stmt 1 view .LVU136
 633:Core/Src/main.c ****           blink[0] = 0;
 469              		.loc 1 633 22 is_stmt 0 view .LVU137
 470 00de 1378     		ldrb	r3, [r2]
 633:Core/Src/main.c ****           blink[0] = 0;
 471              		.loc 1 633 12 view .LVU138
 472 00e0 052B     		cmp	r3, #5
 473 00e2 07D0     		beq	.L32
 640:Core/Src/main.c ****         break;
 474              		.loc 1 640 11 is_stmt 1 view .LVU139
 640:Core/Src/main.c ****         break;
 475              		.loc 1 640 25 is_stmt 0 view .LVU140
 476 00e4 3723     		movs	r3, #55
 477 00e6 6B44     		add	r3, r3, sp
 478 00e8 1B78     		ldrb	r3, [r3]
 479 00ea 013B     		subs	r3, r3, #1
 640:Core/Src/main.c ****         break;
 480              		.loc 1 640 29 view .LVU141
 481 00ec 07AA     		add	r2, sp, #28
 482 00ee 0021     		movs	r1, #0
 483 00f0 D154     		strb	r1, [r2, r3]
 484 00f2 C0E7     		b	.L18
 485              	.L32:
 634:Core/Src/main.c ****           blink[1] = 0;
 486              		.loc 1 634 11 is_stmt 1 view .LVU142
 634:Core/Src/main.c ****           blink[1] = 0;
 487              		.loc 1 634 20 is_stmt 0 view .LVU143
 488 00f4 07AB     		add	r3, sp, #28
 489 00f6 0022     		movs	r2, #0
 490 00f8 1A70     		strb	r2, [r3]
 635:Core/Src/main.c ****           blink[2] = 0;
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 22


 491              		.loc 1 635 11 is_stmt 1 view .LVU144
 635:Core/Src/main.c ****           blink[2] = 0;
 492              		.loc 1 635 20 is_stmt 0 view .LVU145
 493 00fa 5A70     		strb	r2, [r3, #1]
 636:Core/Src/main.c ****           blink[3] = 0;
 494              		.loc 1 636 11 is_stmt 1 view .LVU146
 636:Core/Src/main.c ****           blink[3] = 0;
 495              		.loc 1 636 20 is_stmt 0 view .LVU147
 496 00fc 9A70     		strb	r2, [r3, #2]
 637:Core/Src/main.c ****         }
 497              		.loc 1 637 11 is_stmt 1 view .LVU148
 637:Core/Src/main.c ****         }
 498              		.loc 1 637 20 is_stmt 0 view .LVU149
 499 00fe DA70     		strb	r2, [r3, #3]
 500 0100 B9E7     		b	.L18
 501              	.L30:
 645:Core/Src/main.c ****           blinkTime[0] = commandLED & 0xF;
 502              		.loc 1 645 11 is_stmt 1 view .LVU150
 645:Core/Src/main.c ****           blinkTime[0] = commandLED & 0xF;
 503              		.loc 1 645 20 is_stmt 0 view .LVU151
 504 0102 07A8     		add	r0, sp, #28
 505 0104 0124     		movs	r4, #1
 506 0106 0470     		strb	r4, [r0]
 646:Core/Src/main.c ****           blink[1] = 1;
 507              		.loc 1 646 11 is_stmt 1 view .LVU152
 646:Core/Src/main.c ****           blink[1] = 1;
 508              		.loc 1 646 37 is_stmt 0 view .LVU153
 509 0108 3B49     		ldr	r1, .L35+8
 510 010a 0D88     		ldrh	r5, [r1]
 511 010c 0F22     		movs	r2, #15
 512 010e 1540     		ands	r5, r2
 646:Core/Src/main.c ****           blink[1] = 1;
 513              		.loc 1 646 24 view .LVU154
 514 0110 06AB     		add	r3, sp, #24
 515 0112 1D70     		strb	r5, [r3]
 647:Core/Src/main.c ****           blinkTime[1] = commandLED & 0xF;
 516              		.loc 1 647 11 is_stmt 1 view .LVU155
 647:Core/Src/main.c ****           blinkTime[1] = commandLED & 0xF;
 517              		.loc 1 647 20 is_stmt 0 view .LVU156
 518 0114 4470     		strb	r4, [r0, #1]
 648:Core/Src/main.c ****           blink[2] = 1;
 519              		.loc 1 648 11 is_stmt 1 view .LVU157
 648:Core/Src/main.c ****           blink[2] = 1;
 520              		.loc 1 648 37 is_stmt 0 view .LVU158
 521 0116 0D88     		ldrh	r5, [r1]
 522 0118 1540     		ands	r5, r2
 648:Core/Src/main.c ****           blink[2] = 1;
 523              		.loc 1 648 24 view .LVU159
 524 011a 5D70     		strb	r5, [r3, #1]
 649:Core/Src/main.c ****           blinkTime[2] = commandLED & 0xF;
 525              		.loc 1 649 11 is_stmt 1 view .LVU160
 649:Core/Src/main.c ****           blinkTime[2] = commandLED & 0xF;
 526              		.loc 1 649 20 is_stmt 0 view .LVU161
 527 011c 8470     		strb	r4, [r0, #2]
 650:Core/Src/main.c ****           blink[3] = 1;
 528              		.loc 1 650 11 is_stmt 1 view .LVU162
 650:Core/Src/main.c ****           blink[3] = 1;
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 23


 529              		.loc 1 650 37 is_stmt 0 view .LVU163
 530 011e 0D88     		ldrh	r5, [r1]
 531 0120 1540     		ands	r5, r2
 650:Core/Src/main.c ****           blink[3] = 1;
 532              		.loc 1 650 24 view .LVU164
 533 0122 9D70     		strb	r5, [r3, #2]
 651:Core/Src/main.c ****           blinkTime[3] = commandLED & 0xF;
 534              		.loc 1 651 11 is_stmt 1 view .LVU165
 651:Core/Src/main.c ****           blinkTime[3] = commandLED & 0xF;
 535              		.loc 1 651 20 is_stmt 0 view .LVU166
 536 0124 C470     		strb	r4, [r0, #3]
 652:Core/Src/main.c ****         }
 537              		.loc 1 652 11 is_stmt 1 view .LVU167
 652:Core/Src/main.c ****         }
 538              		.loc 1 652 37 is_stmt 0 view .LVU168
 539 0126 0988     		ldrh	r1, [r1]
 540 0128 0A40     		ands	r2, r1
 652:Core/Src/main.c ****         }
 541              		.loc 1 652 24 view .LVU169
 542 012a DA70     		strb	r2, [r3, #3]
 543 012c 99E7     		b	.L24
 544              	.LVL18:
 545              	.L26:
 546              	.LBB13:
 664:Core/Src/main.c ****       if (blink[i]) {
 665:Core/Src/main.c ****         if (currentTime - startTime[i] > blinkTime[i]*100) {
 666:Core/Src/main.c ****           GPIOC->ODR ^= colorMask[i];
 667:Core/Src/main.c ****           startTime[i] = currentTime;
 668:Core/Src/main.c ****         }
 669:Core/Src/main.c ****       }
 670:Core/Src/main.c ****       else
 671:Core/Src/main.c ****         startTime[i] = currentTime;
 547              		.loc 1 671 9 is_stmt 1 view .LVU170
 548              		.loc 1 671 22 is_stmt 0 view .LVU171
 549 012e 0198     		ldr	r0, [sp, #4]
 550 0130 9A00     		lsls	r2, r3, #2
 551 0132 02A9     		add	r1, sp, #8
 552 0134 5050     		str	r0, [r2, r1]
 553              	.L27:
 663:Core/Src/main.c ****       if (blink[i]) {
 554              		.loc 1 663 29 is_stmt 1 discriminator 2 view .LVU172
 555 0136 0133     		adds	r3, r3, #1
 556              	.LVL19:
 557              	.L25:
 663:Core/Src/main.c ****       if (blink[i]) {
 558              		.loc 1 663 23 discriminator 1 view .LVU173
 559 0138 032B     		cmp	r3, #3
 560 013a 19DC     		bgt	.L33
 664:Core/Src/main.c ****       if (blink[i]) {
 561              		.loc 1 664 7 view .LVU174
 664:Core/Src/main.c ****       if (blink[i]) {
 562              		.loc 1 664 16 is_stmt 0 view .LVU175
 563 013c 07AA     		add	r2, sp, #28
 564 013e D25C     		ldrb	r2, [r2, r3]
 664:Core/Src/main.c ****       if (blink[i]) {
 565              		.loc 1 664 10 view .LVU176
 566 0140 002A     		cmp	r2, #0
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 24


 567 0142 F4D0     		beq	.L26
 665:Core/Src/main.c ****           GPIOC->ODR ^= colorMask[i];
 568              		.loc 1 665 9 is_stmt 1 view .LVU177
 665:Core/Src/main.c ****           GPIOC->ODR ^= colorMask[i];
 569              		.loc 1 665 25 is_stmt 0 view .LVU178
 570 0144 0199     		ldr	r1, [sp, #4]
 665:Core/Src/main.c ****           GPIOC->ODR ^= colorMask[i];
 571              		.loc 1 665 36 view .LVU179
 572 0146 9A00     		lsls	r2, r3, #2
 573 0148 02A8     		add	r0, sp, #8
 574 014a 1258     		ldr	r2, [r2, r0]
 665:Core/Src/main.c ****           GPIOC->ODR ^= colorMask[i];
 575              		.loc 1 665 25 view .LVU180
 576 014c 891A     		subs	r1, r1, r2
 665:Core/Src/main.c ****           GPIOC->ODR ^= colorMask[i];
 577              		.loc 1 665 51 view .LVU181
 578 014e 06AA     		add	r2, sp, #24
 579 0150 D25C     		ldrb	r2, [r2, r3]
 665:Core/Src/main.c ****           GPIOC->ODR ^= colorMask[i];
 580              		.loc 1 665 54 view .LVU182
 581 0152 6420     		movs	r0, #100
 582 0154 4243     		muls	r2, r0
 665:Core/Src/main.c ****           GPIOC->ODR ^= colorMask[i];
 583              		.loc 1 665 12 view .LVU183
 584 0156 9142     		cmp	r1, r2
 585 0158 EDD9     		bls	.L27
 666:Core/Src/main.c ****           startTime[i] = currentTime;
 586              		.loc 1 666 11 is_stmt 1 view .LVU184
 666:Core/Src/main.c ****           startTime[i] = currentTime;
 587              		.loc 1 666 34 is_stmt 0 view .LVU185
 588 015a 9A00     		lsls	r2, r3, #2
 589 015c 08A9     		add	r1, sp, #32
 590 015e 5458     		ldr	r4, [r2, r1]
 666:Core/Src/main.c ****           startTime[i] = currentTime;
 591              		.loc 1 666 16 view .LVU186
 592 0160 2648     		ldr	r0, .L35+12
 593 0162 4169     		ldr	r1, [r0, #20]
 666:Core/Src/main.c ****           startTime[i] = currentTime;
 594              		.loc 1 666 22 view .LVU187
 595 0164 6140     		eors	r1, r4
 596 0166 4161     		str	r1, [r0, #20]
 667:Core/Src/main.c ****         }
 597              		.loc 1 667 11 is_stmt 1 view .LVU188
 667:Core/Src/main.c ****         }
 598              		.loc 1 667 24 is_stmt 0 view .LVU189
 599 0168 0198     		ldr	r0, [sp, #4]
 600 016a 02A9     		add	r1, sp, #8
 601 016c 5050     		str	r0, [r2, r1]
 602 016e E2E7     		b	.L27
 603              	.L33:
 604              	.LBE13:
 672:Core/Src/main.c ****     }
 673:Core/Src/main.c **** 
 674:Core/Src/main.c ****     commandLED = 0;
 605              		.loc 1 674 5 is_stmt 1 view .LVU190
 606              		.loc 1 674 16 is_stmt 0 view .LVU191
 607 0170 214B     		ldr	r3, .L35+8
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 25


 608              	.LVL20:
 609              		.loc 1 674 16 view .LVU192
 610 0172 0022     		movs	r2, #0
 611 0174 1A80     		strh	r2, [r3]
 675:Core/Src/main.c **** 
 676:Core/Src/main.c ****     osSemaphoreRelease(binarySem03LEDWorkerHandle);
 612              		.loc 1 676 5 is_stmt 1 view .LVU193
 613 0176 1E4B     		ldr	r3, .L35
 614 0178 1868     		ldr	r0, [r3]
 615 017a FFF7FEFF 		bl	osSemaphoreRelease
 616              	.LVL21:
 617              	.LBE11:
 597:Core/Src/main.c ****   {
 618              		.loc 1 597 3 view .LVU194
 619              	.L29:
 597:Core/Src/main.c ****   {
 620              		.loc 1 597 3 view .LVU195
 621              	.LBB14:
 599:Core/Src/main.c **** 
 622              		.loc 1 599 5 view .LVU196
 623 017e 0121     		movs	r1, #1
 624 0180 1B4B     		ldr	r3, .L35
 625 0182 1868     		ldr	r0, [r3]
 626 0184 4942     		rsbs	r1, r1, #0
 627 0186 FFF7FEFF 		bl	osSemaphoreAcquire
 628              	.LVL22:
 601:Core/Src/main.c ****     LEDAction = (commandLED & 0x00F0) >> 4;
 629              		.loc 1 601 5 view .LVU197
 601:Core/Src/main.c ****     LEDAction = (commandLED & 0x00F0) >> 4;
 630              		.loc 1 601 38 is_stmt 0 view .LVU198
 631 018a 1B49     		ldr	r1, .L35+8
 632 018c 0B88     		ldrh	r3, [r1]
 633 018e 1B0A     		lsrs	r3, r3, #8
 634 0190 0F22     		movs	r2, #15
 635 0192 1340     		ands	r3, r2
 601:Core/Src/main.c ****     LEDAction = (commandLED & 0x00F0) >> 4;
 636              		.loc 1 601 14 view .LVU199
 637 0194 3720     		movs	r0, #55
 638 0196 6844     		add	r0, r0, sp
 639 0198 0370     		strb	r3, [r0]
 602:Core/Src/main.c **** 
 640              		.loc 1 602 5 is_stmt 1 view .LVU200
 602:Core/Src/main.c **** 
 641              		.loc 1 602 39 is_stmt 0 view .LVU201
 642 019a 0B88     		ldrh	r3, [r1]
 643 019c 1B09     		lsrs	r3, r3, #4
 644 019e 1A40     		ands	r2, r3
 602:Core/Src/main.c **** 
 645              		.loc 1 602 15 view .LVU202
 646 01a0 3623     		movs	r3, #54
 647 01a2 6B44     		add	r3, r3, sp
 648 01a4 1A70     		strb	r2, [r3]
 605:Core/Src/main.c ****       //On
 649              		.loc 1 605 5 is_stmt 1 view .LVU203
 650 01a6 1B78     		ldrb	r3, [r3]
 651 01a8 DAB2     		uxtb	r2, r3
 652 01aa 032B     		cmp	r3, #3
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 26


 653 01ac 8CD0     		beq	.L14
 654 01ae 032A     		cmp	r2, #3
 655 01b0 00D9     		bls	.LCB562
 656 01b2 48E7     		b	.L15	@long jump
 657              	.LCB562:
 658 01b4 012A     		cmp	r2, #1
 659 01b6 00D1     		bne	.LCB564
 660 01b8 62E7     		b	.L16	@long jump
 661              	.LCB564:
 662 01ba 022A     		cmp	r2, #2
 663 01bc 00D0     		beq	.LCB566
 664 01be 5AE7     		b	.L18	@long jump
 665              	.LCB566:
 620:Core/Src/main.c ****         if (LEDColor == 5) {
 666              		.loc 1 620 9 view .LVU204
 620:Core/Src/main.c ****         if (LEDColor == 5) {
 667              		.loc 1 620 42 is_stmt 0 view .LVU205
 668 01c0 3722     		movs	r2, #55
 669 01c2 6A44     		add	r2, r2, sp
 670 01c4 1378     		ldrb	r3, [r2]
 671 01c6 013B     		subs	r3, r3, #1
 620:Core/Src/main.c ****         if (LEDColor == 5) {
 672              		.loc 1 620 33 view .LVU206
 673 01c8 9B00     		lsls	r3, r3, #2
 674 01ca 08A9     		add	r1, sp, #32
 675 01cc 5858     		ldr	r0, [r3, r1]
 620:Core/Src/main.c ****         if (LEDColor == 5) {
 676              		.loc 1 620 14 view .LVU207
 677 01ce 0B49     		ldr	r1, .L35+12
 678 01d0 4B69     		ldr	r3, [r1, #20]
 620:Core/Src/main.c ****         if (LEDColor == 5) {
 679              		.loc 1 620 20 view .LVU208
 680 01d2 8343     		bics	r3, r0
 681 01d4 4B61     		str	r3, [r1, #20]
 621:Core/Src/main.c ****           blink[0] = 0;
 682              		.loc 1 621 9 is_stmt 1 view .LVU209
 621:Core/Src/main.c ****           blink[0] = 0;
 683              		.loc 1 621 22 is_stmt 0 view .LVU210
 684 01d6 1378     		ldrb	r3, [r2]
 621:Core/Src/main.c ****           blink[0] = 0;
 685              		.loc 1 621 12 view .LVU211
 686 01d8 052B     		cmp	r3, #5
 687 01da 00D1     		bne	.LCB585
 688 01dc 6DE7     		b	.L34	@long jump
 689              	.LCB585:
 628:Core/Src/main.c ****         break;
 690              		.loc 1 628 11 is_stmt 1 view .LVU212
 628:Core/Src/main.c ****         break;
 691              		.loc 1 628 25 is_stmt 0 view .LVU213
 692 01de 3723     		movs	r3, #55
 693 01e0 6B44     		add	r3, r3, sp
 694 01e2 1B78     		ldrb	r3, [r3]
 695 01e4 013B     		subs	r3, r3, #1
 628:Core/Src/main.c ****         break;
 696              		.loc 1 628 29 view .LVU214
 697 01e6 07AA     		add	r2, sp, #28
 698 01e8 0021     		movs	r1, #0
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 27


 699 01ea D154     		strb	r1, [r2, r3]
 700 01ec 43E7     		b	.L18
 701              	.L36:
 702 01ee C046     		.align	2
 703              	.L35:
 704 01f0 00000000 		.word	binarySem03LEDWorkerHandle
 705 01f4 00000000 		.word	.LANCHOR0
 706 01f8 00000000 		.word	commandLED
 707 01fc 00080048 		.word	1207961600
 708              	.LBE14:
 709              		.cfi_endproc
 710              	.LFE61:
 712              		.section	.text.pwm_init,"ax",%progbits
 713              		.align	1
 714              		.global	pwm_init
 715              		.syntax unified
 716              		.code	16
 717              		.thumb_func
 719              	pwm_init:
 720              	.LFB44:
 721              		.file 2 "Core/Src/motor.c"
   1:Core/Src/motor.c **** /* ------------------------------------------------------------------------------------------------
   2:Core/Src/motor.c ****  *  Motor Control and Initialization Functions
   3:Core/Src/motor.c ****  * ------------------------------------------------------------------------------------------------
   4:Core/Src/motor.c ****  */
   5:Core/Src/motor.c **** #include "motor.h"
   6:Core/Src/motor.c **** #include "stm32f0xx.h"
   7:Core/Src/motor.c **** #include "stm32f072xb.h"
   8:Core/Src/motor.c **** 
   9:Core/Src/motor.c **** volatile int16_t error_integral = 0;    // Integrated error signal
  10:Core/Src/motor.c **** volatile uint8_t duty_cycle = 0;    	// Output PWM duty cycle
  11:Core/Src/motor.c **** // volatile int16_t target_rpm = 0;    	// Desired speed target
  12:Core/Src/motor.c **** //Global variables to pass command to worker threads
  13:Core/Src/motor.c **** extern volatile int16_t target_rpm;
  14:Core/Src/motor.c **** volatile int16_t motor_speed = 0;   	// Measured motor speed
  15:Core/Src/motor.c **** volatile int8_t adc_value = 0;      	// ADC measured motor current
  16:Core/Src/motor.c **** volatile int16_t error = 0;         	// Speed error signal
  17:Core/Src/motor.c **** volatile uint8_t Kp = 1;            	// Proportional gain
  18:Core/Src/motor.c **** volatile uint8_t Ki = 1;            	// Integral gain
  19:Core/Src/motor.c **** 
  20:Core/Src/motor.c **** // Sets up the entire motor drive system
  21:Core/Src/motor.c **** void motor_init(void) {
  22:Core/Src/motor.c ****     pwm_init();
  23:Core/Src/motor.c ****     encoder_init();
  24:Core/Src/motor.c ****     ADC_init();
  25:Core/Src/motor.c **** }
  26:Core/Src/motor.c **** 
  27:Core/Src/motor.c **** // Sets up the PWM and direction signals to drive the H-Bridge
  28:Core/Src/motor.c **** void pwm_init(void) {
 722              		.loc 2 28 21 is_stmt 1 view -0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 0
 725              		@ frame_needed = 0, uses_anonymous_args = 0
 726              		@ link register save eliminated.
  29:Core/Src/motor.c ****     
  30:Core/Src/motor.c ****     // Set up pin PA4 for H-bridge PWM output (TIMER 14 CH1)
  31:Core/Src/motor.c ****     GPIOA->MODER |= (1 << 9);
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 28


 727              		.loc 2 31 5 view .LVU216
 728              		.loc 2 31 10 is_stmt 0 view .LVU217
 729 0000 9023     		movs	r3, #144
 730 0002 DB05     		lsls	r3, r3, #23
 731 0004 1968     		ldr	r1, [r3]
 732              		.loc 2 31 18 view .LVU218
 733 0006 8022     		movs	r2, #128
 734 0008 9200     		lsls	r2, r2, #2
 735 000a 0A43     		orrs	r2, r1
 736 000c 1A60     		str	r2, [r3]
  32:Core/Src/motor.c ****     GPIOA->MODER &= ~(1 << 8);
 737              		.loc 2 32 5 is_stmt 1 view .LVU219
 738              		.loc 2 32 10 is_stmt 0 view .LVU220
 739 000e 1A68     		ldr	r2, [r3]
 740              		.loc 2 32 18 view .LVU221
 741 0010 1C49     		ldr	r1, .L38
 742 0012 0A40     		ands	r2, r1
 743 0014 1A60     		str	r2, [r3]
  33:Core/Src/motor.c **** 
  34:Core/Src/motor.c ****     // Set PA4 to AF4,
  35:Core/Src/motor.c ****     GPIOA->AFR[0] &= 0xFFF0FFFF; // clear PA4 bits,
 744              		.loc 2 35 5 is_stmt 1 view .LVU222
 745              		.loc 2 35 15 is_stmt 0 view .LVU223
 746 0016 1A6A     		ldr	r2, [r3, #32]
 747              		.loc 2 35 19 view .LVU224
 748 0018 1B49     		ldr	r1, .L38+4
 749 001a 0A40     		ands	r2, r1
 750 001c 1A62     		str	r2, [r3, #32]
  36:Core/Src/motor.c ****     GPIOA->AFR[0] |= (1 << 18);
 751              		.loc 2 36 5 is_stmt 1 view .LVU225
 752              		.loc 2 36 15 is_stmt 0 view .LVU226
 753 001e 196A     		ldr	r1, [r3, #32]
 754              		.loc 2 36 19 view .LVU227
 755 0020 8022     		movs	r2, #128
 756 0022 D202     		lsls	r2, r2, #11
 757 0024 0A43     		orrs	r2, r1
 758 0026 1A62     		str	r2, [r3, #32]
  37:Core/Src/motor.c **** 
  38:Core/Src/motor.c ****     // Set up a PA5, PA6 as GPIO output pins for motor direction control
  39:Core/Src/motor.c ****     GPIOA->MODER &= 0xFFFFC3FF; // clear PA5, PA6 bits,
 759              		.loc 2 39 5 is_stmt 1 view .LVU228
 760              		.loc 2 39 10 is_stmt 0 view .LVU229
 761 0028 1A68     		ldr	r2, [r3]
 762              		.loc 2 39 18 view .LVU230
 763 002a 1849     		ldr	r1, .L38+8
 764 002c 0A40     		ands	r2, r1
 765 002e 1A60     		str	r2, [r3]
  40:Core/Src/motor.c ****     GPIOA->MODER |= (1 << 10) | (1 << 12);
 766              		.loc 2 40 5 is_stmt 1 view .LVU231
 767              		.loc 2 40 10 is_stmt 0 view .LVU232
 768 0030 1968     		ldr	r1, [r3]
 769              		.loc 2 40 18 view .LVU233
 770 0032 A022     		movs	r2, #160
 771 0034 5201     		lsls	r2, r2, #5
 772 0036 0A43     		orrs	r2, r1
 773 0038 1A60     		str	r2, [r3]
  41:Core/Src/motor.c ****     
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 29


  42:Core/Src/motor.c ****     //Initialize one direction pin to high, the other low
  43:Core/Src/motor.c ****     GPIOA->ODR |= (1 << 5);
 774              		.loc 2 43 5 is_stmt 1 view .LVU234
 775              		.loc 2 43 10 is_stmt 0 view .LVU235
 776 003a 5A69     		ldr	r2, [r3, #20]
 777              		.loc 2 43 16 view .LVU236
 778 003c 2021     		movs	r1, #32
 779 003e 0A43     		orrs	r2, r1
 780 0040 5A61     		str	r2, [r3, #20]
  44:Core/Src/motor.c ****     GPIOA->ODR &= ~(1 << 6);
 781              		.loc 2 44 5 is_stmt 1 view .LVU237
 782              		.loc 2 44 10 is_stmt 0 view .LVU238
 783 0042 5A69     		ldr	r2, [r3, #20]
 784              		.loc 2 44 16 view .LVU239
 785 0044 2031     		adds	r1, r1, #32
 786 0046 8A43     		bics	r2, r1
 787 0048 5A61     		str	r2, [r3, #20]
  45:Core/Src/motor.c **** 
  46:Core/Src/motor.c ****     // Set up PWM timer
  47:Core/Src/motor.c ****     RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 788              		.loc 2 47 5 is_stmt 1 view .LVU240
 789              		.loc 2 47 8 is_stmt 0 view .LVU241
 790 004a 114A     		ldr	r2, .L38+12
 791 004c D169     		ldr	r1, [r2, #28]
 792              		.loc 2 47 18 view .LVU242
 793 004e 8023     		movs	r3, #128
 794 0050 5B00     		lsls	r3, r3, #1
 795 0052 0B43     		orrs	r3, r1
 796 0054 D361     		str	r3, [r2, #28]
  48:Core/Src/motor.c ****     TIM14->CR1 = 0;                         // Clear control registers
 797              		.loc 2 48 5 is_stmt 1 view .LVU243
 798              		.loc 2 48 16 is_stmt 0 view .LVU244
 799 0056 0F4B     		ldr	r3, .L38+16
 800 0058 0022     		movs	r2, #0
 801 005a 1A60     		str	r2, [r3]
  49:Core/Src/motor.c ****     TIM14->CCMR1 = 0;                       // (prevents having to manually clear bits)
 802              		.loc 2 49 5 is_stmt 1 view .LVU245
 803              		.loc 2 49 18 is_stmt 0 view .LVU246
 804 005c 9A61     		str	r2, [r3, #24]
  50:Core/Src/motor.c ****     TIM14->CCER = 0;
 805              		.loc 2 50 5 is_stmt 1 view .LVU247
 806              		.loc 2 50 17 is_stmt 0 view .LVU248
 807 005e 1A62     		str	r2, [r3, #32]
  51:Core/Src/motor.c **** 
  52:Core/Src/motor.c ****     // Set output-compare CH1 to PWM1 mode and enable CCR1 preload buffer
  53:Core/Src/motor.c ****     TIM14->CCMR1 |= (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE);
 808              		.loc 2 53 5 is_stmt 1 view .LVU249
 809              		.loc 2 53 10 is_stmt 0 view .LVU250
 810 0060 9969     		ldr	r1, [r3, #24]
 811              		.loc 2 53 18 view .LVU251
 812 0062 6820     		movs	r0, #104
 813 0064 0143     		orrs	r1, r0
 814 0066 9961     		str	r1, [r3, #24]
  54:Core/Src/motor.c ****     TIM14->CCER |= TIM_CCER_CC1E;           // Enable capture-compare channel 1
 815              		.loc 2 54 5 is_stmt 1 view .LVU252
 816              		.loc 2 54 10 is_stmt 0 view .LVU253
 817 0068 186A     		ldr	r0, [r3, #32]
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 30


 818              		.loc 2 54 17 view .LVU254
 819 006a 0121     		movs	r1, #1
 820 006c 0843     		orrs	r0, r1
 821 006e 1862     		str	r0, [r3, #32]
  55:Core/Src/motor.c ****     TIM14->PSC = 1;                         // Run timer on 24Mhz
 822              		.loc 2 55 5 is_stmt 1 view .LVU255
 823              		.loc 2 55 16 is_stmt 0 view .LVU256
 824 0070 9962     		str	r1, [r3, #40]
  56:Core/Src/motor.c ****     TIM14->ARR = 1200;                      // PWM at 20kHz
 825              		.loc 2 56 5 is_stmt 1 view .LVU257
 826              		.loc 2 56 16 is_stmt 0 view .LVU258
 827 0072 9620     		movs	r0, #150
 828 0074 C000     		lsls	r0, r0, #3
 829 0076 D862     		str	r0, [r3, #44]
  57:Core/Src/motor.c ****     TIM14->CCR1 = 0;                        // Start PWM at 0% duty cycle
 830              		.loc 2 57 5 is_stmt 1 view .LVU259
 831              		.loc 2 57 17 is_stmt 0 view .LVU260
 832 0078 5A63     		str	r2, [r3, #52]
  58:Core/Src/motor.c ****     
  59:Core/Src/motor.c ****     TIM14->CR1 |= TIM_CR1_CEN;              // Enable timer
 833              		.loc 2 59 5 is_stmt 1 view .LVU261
 834              		.loc 2 59 10 is_stmt 0 view .LVU262
 835 007a 1A68     		ldr	r2, [r3]
 836              		.loc 2 59 16 view .LVU263
 837 007c 0A43     		orrs	r2, r1
 838 007e 1A60     		str	r2, [r3]
  60:Core/Src/motor.c **** }
 839              		.loc 2 60 1 view .LVU264
 840              		@ sp needed
 841 0080 7047     		bx	lr
 842              	.L39:
 843 0082 C046     		.align	2
 844              	.L38:
 845 0084 FFFEFFFF 		.word	-257
 846 0088 FFFFF0FF 		.word	-983041
 847 008c FFC3FFFF 		.word	-15361
 848 0090 00100240 		.word	1073876992
 849 0094 00200040 		.word	1073750016
 850              		.cfi_endproc
 851              	.LFE44:
 853              		.global	__aeabi_uidiv
 854              		.section	.text.pwm_setDutyCycle,"ax",%progbits
 855              		.align	1
 856              		.global	pwm_setDutyCycle
 857              		.syntax unified
 858              		.code	16
 859              		.thumb_func
 861              	pwm_setDutyCycle:
 862              	.LVL23:
 863              	.LFB45:
  61:Core/Src/motor.c **** 
  62:Core/Src/motor.c **** // Set the duty cycle of the PWM, accepts (0-100)
  63:Core/Src/motor.c **** void pwm_setDutyCycle(uint8_t duty) {
 864              		.loc 2 63 37 is_stmt 1 view -0
 865              		.cfi_startproc
 866              		@ args = 0, pretend = 0, frame = 0
 867              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 31


 868              		.loc 2 63 37 is_stmt 0 view .LVU266
 869 0000 10B5     		push	{r4, lr}
 870              	.LCFI5:
 871              		.cfi_def_cfa_offset 8
 872              		.cfi_offset 4, -8
 873              		.cfi_offset 14, -4
  64:Core/Src/motor.c ****     if(duty <= 100) {
 874              		.loc 2 64 5 is_stmt 1 view .LVU267
 875              		.loc 2 64 7 is_stmt 0 view .LVU268
 876 0002 6428     		cmp	r0, #100
 877 0004 06D8     		bhi	.L40
  65:Core/Src/motor.c ****         TIM14->CCR1 = ((uint32_t)duty*TIM14->ARR)/100;  // Use linear transform to produce CCR1 val
 878              		.loc 2 65 9 is_stmt 1 view .LVU269
 879              		.loc 2 65 44 is_stmt 0 view .LVU270
 880 0006 044C     		ldr	r4, .L42
 881 0008 E36A     		ldr	r3, [r4, #44]
 882              		.loc 2 65 38 view .LVU271
 883 000a 5843     		muls	r0, r3
 884              	.LVL24:
 885              		.loc 2 65 50 view .LVU272
 886 000c 6421     		movs	r1, #100
 887 000e FFF7FEFF 		bl	__aeabi_uidiv
 888              	.LVL25:
 889              		.loc 2 65 21 view .LVU273
 890 0012 6063     		str	r0, [r4, #52]
 891              	.L40:
  66:Core/Src/motor.c ****         // (CCR1 == "pulse" parameter in PWM struct used by peripheral library)
  67:Core/Src/motor.c ****     }
  68:Core/Src/motor.c **** }
 892              		.loc 2 68 1 view .LVU274
 893              		@ sp needed
 894 0014 10BD     		pop	{r4, pc}
 895              	.L43:
 896 0016 C046     		.align	2
 897              	.L42:
 898 0018 00200040 		.word	1073750016
 899              		.cfi_endproc
 900              	.LFE45:
 902              		.section	.text.encoder_init,"ax",%progbits
 903              		.align	1
 904              		.global	encoder_init
 905              		.syntax unified
 906              		.code	16
 907              		.thumb_func
 909              	encoder_init:
 910              	.LFB46:
  69:Core/Src/motor.c **** 
  70:Core/Src/motor.c **** // Sets up encoder interface to read motor speed
  71:Core/Src/motor.c **** void encoder_init(void) {
 911              		.loc 2 71 25 is_stmt 1 view -0
 912              		.cfi_startproc
 913              		@ args = 0, pretend = 0, frame = 0
 914              		@ frame_needed = 0, uses_anonymous_args = 0
 915 0000 10B5     		push	{r4, lr}
 916              	.LCFI6:
 917              		.cfi_def_cfa_offset 8
 918              		.cfi_offset 4, -8
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 32


 919              		.cfi_offset 14, -4
  72:Core/Src/motor.c ****     
  73:Core/Src/motor.c ****     // Set up encoder input pins (TIMER 3 CH1 and CH2)
  74:Core/Src/motor.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 920              		.loc 2 74 5 view .LVU276
 921              		.loc 2 74 8 is_stmt 0 view .LVU277
 922 0002 254A     		ldr	r2, .L45
 923 0004 5369     		ldr	r3, [r2, #20]
 924              		.loc 2 74 17 view .LVU278
 925 0006 8020     		movs	r0, #128
 926 0008 C002     		lsls	r0, r0, #11
 927 000a 0343     		orrs	r3, r0
 928 000c 5361     		str	r3, [r2, #20]
  75:Core/Src/motor.c **** 
  76:Core/Src/motor.c ****     // PB4(ENCA) and PB5(ENCB) are encoder 
  77:Core/Src/motor.c ****     GPIOB->MODER &= ~(GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0);
 929              		.loc 2 77 5 is_stmt 1 view .LVU279
 930              		.loc 2 77 10 is_stmt 0 view .LVU280
 931 000e 234B     		ldr	r3, .L45+4
 932 0010 1968     		ldr	r1, [r3]
 933              		.loc 2 77 18 view .LVU281
 934 0012 234C     		ldr	r4, .L45+8
 935 0014 2140     		ands	r1, r4
 936 0016 1960     		str	r1, [r3]
  78:Core/Src/motor.c ****     GPIOB->MODER |= (GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1);
 937              		.loc 2 78 5 is_stmt 1 view .LVU282
 938              		.loc 2 78 10 is_stmt 0 view .LVU283
 939 0018 1C68     		ldr	r4, [r3]
 940              		.loc 2 78 18 view .LVU284
 941 001a A021     		movs	r1, #160
 942 001c 0901     		lsls	r1, r1, #4
 943 001e 2143     		orrs	r1, r4
 944 0020 1960     		str	r1, [r3]
  79:Core/Src/motor.c ****     GPIOB->AFR[0] |= ( (1 << 16) | (1 << 20) );
 945              		.loc 2 79 5 is_stmt 1 view .LVU285
 946              		.loc 2 79 15 is_stmt 0 view .LVU286
 947 0022 1C6A     		ldr	r4, [r3, #32]
 948              		.loc 2 79 19 view .LVU287
 949 0024 8821     		movs	r1, #136
 950 0026 4903     		lsls	r1, r1, #13
 951 0028 2143     		orrs	r1, r4
 952 002a 1962     		str	r1, [r3, #32]
  80:Core/Src/motor.c **** 
  81:Core/Src/motor.c ****     // Set up encoder interface (TIM3 encoder input mode)
  82:Core/Src/motor.c ****     RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 953              		.loc 2 82 5 is_stmt 1 view .LVU288
 954              		.loc 2 82 8 is_stmt 0 view .LVU289
 955 002c D369     		ldr	r3, [r2, #28]
 956              		.loc 2 82 18 view .LVU290
 957 002e 0221     		movs	r1, #2
 958 0030 0B43     		orrs	r3, r1
 959 0032 D361     		str	r3, [r2, #28]
  83:Core/Src/motor.c ****     TIM3->CCMR1 = 0;
 960              		.loc 2 83 5 is_stmt 1 view .LVU291
 961              		.loc 2 83 17 is_stmt 0 view .LVU292
 962 0034 1B4B     		ldr	r3, .L45+12
 963 0036 0021     		movs	r1, #0
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 33


 964 0038 9961     		str	r1, [r3, #24]
  84:Core/Src/motor.c ****     TIM3->CCER = 0;
 965              		.loc 2 84 5 is_stmt 1 view .LVU293
 966              		.loc 2 84 16 is_stmt 0 view .LVU294
 967 003a 1962     		str	r1, [r3, #32]
  85:Core/Src/motor.c ****     TIM3->SMCR = 0;
 968              		.loc 2 85 5 is_stmt 1 view .LVU295
 969              		.loc 2 85 16 is_stmt 0 view .LVU296
 970 003c 9960     		str	r1, [r3, #8]
  86:Core/Src/motor.c ****     TIM3->CR1 = 0;
 971              		.loc 2 86 5 is_stmt 1 view .LVU297
 972              		.loc 2 86 15 is_stmt 0 view .LVU298
 973 003e 1960     		str	r1, [r3]
  87:Core/Src/motor.c **** 
  88:Core/Src/motor.c ****     TIM3->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);   // TI1FP1 and TI2FP2 signals connected 
 974              		.loc 2 88 5 is_stmt 1 view .LVU299
 975              		.loc 2 88 9 is_stmt 0 view .LVU300
 976 0040 9C69     		ldr	r4, [r3, #24]
 977              		.loc 2 88 17 view .LVU301
 978 0042 0221     		movs	r1, #2
 979 0044 FF31     		adds	r1, r1, #255
 980 0046 2143     		orrs	r1, r4
 981 0048 9961     		str	r1, [r3, #24]
  89:Core/Src/motor.c ****     TIM3->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0);        // Capture encoder on both rising and f
 982              		.loc 2 89 5 is_stmt 1 view .LVU302
 983              		.loc 2 89 9 is_stmt 0 view .LVU303
 984 004a 9968     		ldr	r1, [r3, #8]
 985              		.loc 2 89 16 view .LVU304
 986 004c 0324     		movs	r4, #3
 987 004e 2143     		orrs	r1, r4
 988 0050 9960     		str	r1, [r3, #8]
  90:Core/Src/motor.c ****     TIM3->ARR = 0xFFFF;                                     // Set ARR to top of timer (longest pos
 989              		.loc 2 90 5 is_stmt 1 view .LVU305
 990              		.loc 2 90 15 is_stmt 0 view .LVU306
 991 0052 1549     		ldr	r1, .L45+16
 992 0054 D962     		str	r1, [r3, #44]
  91:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF;                                     // Bias at midpoint to allow for negati
 993              		.loc 2 91 5 is_stmt 1 view .LVU307
 994              		.loc 2 91 15 is_stmt 0 view .LVU308
 995 0056 1549     		ldr	r1, .L45+20
 996 0058 5962     		str	r1, [r3, #36]
  92:Core/Src/motor.c ****     // (Could also cast unsigned register to signed number to get negative numbers if it rotates ba
  93:Core/Src/motor.c ****     //  just another option, the mid-bias is a bit simpler to understand though.)
  94:Core/Src/motor.c ****     TIM3->CR1 |= TIM_CR1_CEN;                               // Enable timer
 997              		.loc 2 94 5 is_stmt 1 view .LVU309
 998              		.loc 2 94 9 is_stmt 0 view .LVU310
 999 005a 1C68     		ldr	r4, [r3]
 1000              		.loc 2 94 15 view .LVU311
 1001 005c 0121     		movs	r1, #1
 1002 005e 0C43     		orrs	r4, r1
 1003 0060 1C60     		str	r4, [r3]
  95:Core/Src/motor.c **** 
  96:Core/Src/motor.c ****     // Configure a second timer (TIM7) to fire an ISR on update event
  97:Core/Src/motor.c ****     // Used to periodically check and update speed variable
  98:Core/Src/motor.c ****     RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 1004              		.loc 2 98 5 is_stmt 1 view .LVU312
 1005              		.loc 2 98 8 is_stmt 0 view .LVU313
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 34


 1006 0062 D369     		ldr	r3, [r2, #28]
 1007              		.loc 2 98 18 view .LVU314
 1008 0064 2024     		movs	r4, #32
 1009 0066 2343     		orrs	r3, r4
 1010 0068 D361     		str	r3, [r2, #28]
  99:Core/Src/motor.c ****     
 100:Core/Src/motor.c ****     // Select PSC and ARR values that give an appropriate interrupt rate
 101:Core/Src/motor.c ****     TIM7->PSC = 11;
 1011              		.loc 2 101 5 is_stmt 1 view .LVU315
 1012              		.loc 2 101 15 is_stmt 0 view .LVU316
 1013 006a 114B     		ldr	r3, .L45+24
 1014 006c 0B22     		movs	r2, #11
 1015 006e 9A62     		str	r2, [r3, #40]
 102:Core/Src/motor.c ****     TIM7->ARR = 30000;
 1016              		.loc 2 102 5 is_stmt 1 view .LVU317
 1017              		.loc 2 102 15 is_stmt 0 view .LVU318
 1018 0070 104A     		ldr	r2, .L45+28
 1019 0072 DA62     		str	r2, [r3, #44]
 103:Core/Src/motor.c ****     
 104:Core/Src/motor.c ****     TIM7->DIER |= TIM_DIER_UIE;             // Enable update event interrupt
 1020              		.loc 2 104 5 is_stmt 1 view .LVU319
 1021              		.loc 2 104 9 is_stmt 0 view .LVU320
 1022 0074 DA68     		ldr	r2, [r3, #12]
 1023              		.loc 2 104 16 view .LVU321
 1024 0076 0A43     		orrs	r2, r1
 1025 0078 DA60     		str	r2, [r3, #12]
 105:Core/Src/motor.c ****     TIM7->CR1 |= TIM_CR1_CEN;               // Enable Timer
 1026              		.loc 2 105 5 is_stmt 1 view .LVU322
 1027              		.loc 2 105 9 is_stmt 0 view .LVU323
 1028 007a 1A68     		ldr	r2, [r3]
 1029              		.loc 2 105 15 view .LVU324
 1030 007c 0A43     		orrs	r2, r1
 1031 007e 1A60     		str	r2, [r3]
 106:Core/Src/motor.c **** 
 107:Core/Src/motor.c ****     NVIC_EnableIRQ(TIM7_IRQn);          // Enable interrupt in NVIC
 1032              		.loc 2 107 5 is_stmt 1 view .LVU325
 1033              	.LVL26:
 1034              	.LBB15:
 1035              	.LBI15:
 1036              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 35


  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 36


  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 37


 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 38


 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 39


 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 40


 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 41


 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 42


 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 43


 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 44


 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 45


 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 1037              		.loc 3 623 22 view .LVU326
 1038              	.LBB16:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1039              		.loc 3 625 3 view .LVU327
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1040              		.loc 3 627 5 view .LVU328
 1041              		.loc 3 627 20 is_stmt 0 view .LVU329
 1042 0080 0D4B     		ldr	r3, .L45+32
 1043 0082 1860     		str	r0, [r3]
 1044              	.LVL27:
 1045              		.loc 3 627 20 view .LVU330
 1046              	.LBE16:
 1047              	.LBE15:
 108:Core/Src/motor.c ****     NVIC_SetPriority(TIM7_IRQn,2);
 1048              		.loc 2 108 5 is_stmt 1 view .LVU331
 1049              	.LBB17:
 1050              	.LBI17:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 46


 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 47


 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 1051              		.loc 3 730 22 view .LVU332
 1052              	.LBB18:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1053              		.loc 3 732 3 view .LVU333
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1054              		.loc 3 734 5 view .LVU334
 1055              		.loc 3 734 52 is_stmt 0 view .LVU335
 1056 0084 C420     		movs	r0, #196
 1057 0086 8000     		lsls	r0, r0, #2
 1058 0088 1958     		ldr	r1, [r3, r0]
 1059              		.loc 3 734 33 view .LVU336
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 48


 1060 008a 0C4A     		ldr	r2, .L45+36
 1061 008c 1140     		ands	r1, r2
 1062              		.loc 3 734 102 view .LVU337
 1063 008e 8022     		movs	r2, #128
 1064 0090 1204     		lsls	r2, r2, #16
 1065 0092 0A43     		orrs	r2, r1
 1066              		.loc 3 734 30 view .LVU338
 1067 0094 1A50     		str	r2, [r3, r0]
 1068              	.LVL28:
 1069              		.loc 3 734 30 view .LVU339
 1070              	.LBE18:
 1071              	.LBE17:
 109:Core/Src/motor.c **** }
 1072              		.loc 2 109 1 view .LVU340
 1073              		@ sp needed
 1074 0096 10BD     		pop	{r4, pc}
 1075              	.L46:
 1076              		.align	2
 1077              	.L45:
 1078 0098 00100240 		.word	1073876992
 1079 009c 00040048 		.word	1207960576
 1080 00a0 FFFAFFFF 		.word	-1281
 1081 00a4 00040040 		.word	1073742848
 1082 00a8 FFFF0000 		.word	65535
 1083 00ac FF7F0000 		.word	32767
 1084 00b0 00140040 		.word	1073746944
 1085 00b4 30750000 		.word	30000
 1086 00b8 00E100E0 		.word	-536813312
 1087 00bc FFFF00FF 		.word	-16711681
 1088              		.cfi_endproc
 1089              	.LFE46:
 1091              		.section	.text.ADC_init,"ax",%progbits
 1092              		.align	1
 1093              		.global	ADC_init
 1094              		.syntax unified
 1095              		.code	16
 1096              		.thumb_func
 1098              	ADC_init:
 1099              	.LFB48:
 110:Core/Src/motor.c **** 
 111:Core/Src/motor.c **** // Encoder interrupt to calculate motor speed, also manages PI controller
 112:Core/Src/motor.c **** void TIM7_IRQHandler(void) {
 113:Core/Src/motor.c ****     /* Calculate the motor speed in raw encoder counts
 114:Core/Src/motor.c ****      * Note the motor speed is signed! Motor can be run in reverse.
 115:Core/Src/motor.c ****      * Speed is measured by how far the counter moved from center point
 116:Core/Src/motor.c ****      */
 117:Core/Src/motor.c ****     motor_speed = (TIM3->CNT - 0x7FFF);
 118:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 119:Core/Src/motor.c ****     
 120:Core/Src/motor.c ****     // Call the PI update function
 121:Core/Src/motor.c ****     PI_update();
 122:Core/Src/motor.c **** 
 123:Core/Src/motor.c ****     TIM7->SR &= ~TIM_SR_UIF;        // Acknowledge the interrupt
 124:Core/Src/motor.c **** }
 125:Core/Src/motor.c **** 
 126:Core/Src/motor.c **** void ADC_init(void) {
 1100              		.loc 2 126 21 is_stmt 1 view -0
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 49


 1101              		.cfi_startproc
 1102              		@ args = 0, pretend = 0, frame = 0
 1103              		@ frame_needed = 0, uses_anonymous_args = 0
 1104              		@ link register save eliminated.
 127:Core/Src/motor.c **** 
 128:Core/Src/motor.c ****     // Configure PA1 for ADC input (used for current monitoring)
 129:Core/Src/motor.c ****     GPIOA->MODER |= (GPIO_MODER_MODER1_0 | GPIO_MODER_MODER1_1);
 1105              		.loc 2 129 5 view .LVU342
 1106              		.loc 2 129 10 is_stmt 0 view .LVU343
 1107 0000 9022     		movs	r2, #144
 1108 0002 D205     		lsls	r2, r2, #23
 1109 0004 1368     		ldr	r3, [r2]
 1110              		.loc 2 129 18 view .LVU344
 1111 0006 0C21     		movs	r1, #12
 1112 0008 0B43     		orrs	r3, r1
 1113 000a 1360     		str	r3, [r2]
 130:Core/Src/motor.c **** 
 131:Core/Src/motor.c ****     // Configure ADC to 8-bit continuous-run mode, (asynchronous clock mode)
 132:Core/Src/motor.c ****     RCC->APB2ENR |= RCC_APB2ENR_ADCEN;
 1114              		.loc 2 132 5 is_stmt 1 view .LVU345
 1115              		.loc 2 132 8 is_stmt 0 view .LVU346
 1116 000c 154A     		ldr	r2, .L51
 1117 000e 9169     		ldr	r1, [r2, #24]
 1118              		.loc 2 132 18 view .LVU347
 1119 0010 8023     		movs	r3, #128
 1120 0012 9B00     		lsls	r3, r3, #2
 1121 0014 0B43     		orrs	r3, r1
 1122 0016 9361     		str	r3, [r2, #24]
 133:Core/Src/motor.c **** 
 134:Core/Src/motor.c ****     ADC1->CFGR1 = 0;                        // Default resolution is 12-bit (RES[1:0] = 00 --> 12-b
 1123              		.loc 2 134 5 is_stmt 1 view .LVU348
 1124              		.loc 2 134 17 is_stmt 0 view .LVU349
 1125 0018 134B     		ldr	r3, .L51+4
 1126 001a 0021     		movs	r1, #0
 1127 001c D960     		str	r1, [r3, #12]
 135:Core/Src/motor.c ****     ADC1->CFGR1 |= ADC_CFGR1_CONT;          // Set to continuous mode
 1128              		.loc 2 135 5 is_stmt 1 view .LVU350
 1129              		.loc 2 135 9 is_stmt 0 view .LVU351
 1130 001e D868     		ldr	r0, [r3, #12]
 1131              		.loc 2 135 17 view .LVU352
 1132 0020 8022     		movs	r2, #128
 1133 0022 9201     		lsls	r2, r2, #6
 1134 0024 0243     		orrs	r2, r0
 1135 0026 DA60     		str	r2, [r3, #12]
 136:Core/Src/motor.c ****     ADC1->CHSELR |= ADC_CHSELR_CHSEL1;      // Enable channel 1
 1136              		.loc 2 136 5 is_stmt 1 view .LVU353
 1137              		.loc 2 136 9 is_stmt 0 view .LVU354
 1138 0028 9A6A     		ldr	r2, [r3, #40]
 1139              		.loc 2 136 18 view .LVU355
 1140 002a 0220     		movs	r0, #2
 1141 002c 0243     		orrs	r2, r0
 1142 002e 9A62     		str	r2, [r3, #40]
 137:Core/Src/motor.c **** 
 138:Core/Src/motor.c ****     ADC1->CR = 0;
 1143              		.loc 2 138 5 is_stmt 1 view .LVU356
 1144              		.loc 2 138 14 is_stmt 0 view .LVU357
 1145 0030 9960     		str	r1, [r3, #8]
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 50


 139:Core/Src/motor.c ****     ADC1->CR |= ADC_CR_ADCAL;               // Perform self calibration
 1146              		.loc 2 139 5 is_stmt 1 view .LVU358
 1147              		.loc 2 139 9 is_stmt 0 view .LVU359
 1148 0032 9968     		ldr	r1, [r3, #8]
 1149              		.loc 2 139 14 view .LVU360
 1150 0034 8022     		movs	r2, #128
 1151 0036 1206     		lsls	r2, r2, #24
 1152 0038 0A43     		orrs	r2, r1
 1153 003a 9A60     		str	r2, [r3, #8]
 140:Core/Src/motor.c ****     while(ADC1->CR & ADC_CR_ADCAL);         // Delay until calibration is complete
 1154              		.loc 2 140 5 is_stmt 1 view .LVU361
 1155              	.L48:
 1156              		.loc 2 140 11 discriminator 1 view .LVU362
 1157              		.loc 2 140 15 is_stmt 0 discriminator 1 view .LVU363
 1158 003c 0A4B     		ldr	r3, .L51+4
 1159 003e 9B68     		ldr	r3, [r3, #8]
 1160              		.loc 2 140 11 discriminator 1 view .LVU364
 1161 0040 002B     		cmp	r3, #0
 1162 0042 FBDB     		blt	.L48
 141:Core/Src/motor.c **** 
 142:Core/Src/motor.c ****     ADC1->CR |= ADC_CR_ADEN;                // Enable ADC
 1163              		.loc 2 142 5 is_stmt 1 view .LVU365
 1164              		.loc 2 142 9 is_stmt 0 view .LVU366
 1165 0044 084A     		ldr	r2, .L51+4
 1166 0046 9368     		ldr	r3, [r2, #8]
 1167              		.loc 2 142 14 view .LVU367
 1168 0048 0121     		movs	r1, #1
 1169 004a 0B43     		orrs	r3, r1
 1170 004c 9360     		str	r3, [r2, #8]
 143:Core/Src/motor.c ****     while(!(ADC1->ISR & ADC_ISR_ADRDY));    // Wait until ADC ready
 1171              		.loc 2 143 5 is_stmt 1 view .LVU368
 1172              	.L49:
 1173              		.loc 2 143 11 discriminator 1 view .LVU369
 1174              		.loc 2 143 17 is_stmt 0 discriminator 1 view .LVU370
 1175 004e 064B     		ldr	r3, .L51+4
 1176 0050 1B68     		ldr	r3, [r3]
 1177              		.loc 2 143 11 discriminator 1 view .LVU371
 1178 0052 DB07     		lsls	r3, r3, #31
 1179 0054 FBD5     		bpl	.L49
 144:Core/Src/motor.c ****     ADC1->CR |= ADC_CR_ADSTART;             // Signal conversion start
 1180              		.loc 2 144 5 is_stmt 1 view .LVU372
 1181              		.loc 2 144 9 is_stmt 0 view .LVU373
 1182 0056 044A     		ldr	r2, .L51+4
 1183 0058 9368     		ldr	r3, [r2, #8]
 1184              		.loc 2 144 14 view .LVU374
 1185 005a 0421     		movs	r1, #4
 1186 005c 0B43     		orrs	r3, r1
 1187 005e 9360     		str	r3, [r2, #8]
 145:Core/Src/motor.c **** }
 1188              		.loc 2 145 1 view .LVU375
 1189              		@ sp needed
 1190 0060 7047     		bx	lr
 1191              	.L52:
 1192 0062 C046     		.align	2
 1193              	.L51:
 1194 0064 00100240 		.word	1073876992
 1195 0068 00240140 		.word	1073816576
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 51


 1196              		.cfi_endproc
 1197              	.LFE48:
 1199              		.section	.text.motor_init,"ax",%progbits
 1200              		.align	1
 1201              		.global	motor_init
 1202              		.syntax unified
 1203              		.code	16
 1204              		.thumb_func
 1206              	motor_init:
 1207              	.LFB43:
  21:Core/Src/motor.c ****     pwm_init();
 1208              		.loc 2 21 23 is_stmt 1 view -0
 1209              		.cfi_startproc
 1210              		@ args = 0, pretend = 0, frame = 0
 1211              		@ frame_needed = 0, uses_anonymous_args = 0
 1212 0000 10B5     		push	{r4, lr}
 1213              	.LCFI7:
 1214              		.cfi_def_cfa_offset 8
 1215              		.cfi_offset 4, -8
 1216              		.cfi_offset 14, -4
  22:Core/Src/motor.c ****     encoder_init();
 1217              		.loc 2 22 5 view .LVU377
 1218 0002 FFF7FEFF 		bl	pwm_init
 1219              	.LVL29:
  23:Core/Src/motor.c ****     ADC_init();
 1220              		.loc 2 23 5 view .LVU378
 1221 0006 FFF7FEFF 		bl	encoder_init
 1222              	.LVL30:
  24:Core/Src/motor.c **** }
 1223              		.loc 2 24 5 view .LVU379
 1224 000a FFF7FEFF 		bl	ADC_init
 1225              	.LVL31:
  25:Core/Src/motor.c **** 
 1226              		.loc 2 25 1 is_stmt 0 view .LVU380
 1227              		@ sp needed
 1228 000e 10BD     		pop	{r4, pc}
 1229              		.cfi_endproc
 1230              	.LFE43:
 1232              		.section	.text.PI_update,"ax",%progbits
 1233              		.align	1
 1234              		.global	PI_update
 1235              		.syntax unified
 1236              		.code	16
 1237              		.thumb_func
 1239              	PI_update:
 1240              	.LFB49:
 146:Core/Src/motor.c **** 
 147:Core/Src/motor.c **** void PI_update(void) {
 1241              		.loc 2 147 22 is_stmt 1 view -0
 1242              		.cfi_startproc
 1243              		@ args = 0, pretend = 0, frame = 0
 1244              		@ frame_needed = 0, uses_anonymous_args = 0
 1245 0000 10B5     		push	{r4, lr}
 1246              	.LCFI8:
 1247              		.cfi_def_cfa_offset 8
 1248              		.cfi_offset 4, -8
 1249              		.cfi_offset 14, -4
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 52


 148:Core/Src/motor.c ****     
 149:Core/Src/motor.c ****     /* Run PI control loop
 150:Core/Src/motor.c ****      *
 151:Core/Src/motor.c ****      * Make sure to use the indicated variable names. This allows STMStudio to monitor
 152:Core/Src/motor.c ****      * the condition of the system!
 153:Core/Src/motor.c ****      *
 154:Core/Src/motor.c ****      * target_rpm -> target motor speed in RPM
 155:Core/Src/motor.c ****      * motor_speed -> raw motor speed in encoder counts
 156:Core/Src/motor.c ****      * error -> error signal (difference between measured speed and target)
 157:Core/Src/motor.c ****      * error_integral -> integrated error signal
 158:Core/Src/motor.c ****      * Kp -> Proportional Gain
 159:Core/Src/motor.c ****      * Ki -> Integral Gain
 160:Core/Src/motor.c ****      * output -> raw output signal from PI controller
 161:Core/Src/motor.c ****      * duty_cycle -> used to report the duty cycle of the system 
 162:Core/Src/motor.c ****      * adc_value -> raw ADC counts to report current
 163:Core/Src/motor.c ****      *
 164:Core/Src/motor.c ****      */
 165:Core/Src/motor.c ****     
 166:Core/Src/motor.c ****     /// TODO: calculate error signal and write to "error" variable
 167:Core/Src/motor.c ****     error = target_rpm - motor_speed/2; // 2-to-1 conversion
 1250              		.loc 2 167 5 view .LVU382
 1251              		.loc 2 167 24 is_stmt 0 view .LVU383
 1252 0002 294B     		ldr	r3, .L63
 1253 0004 1A88     		ldrh	r2, [r3]
 1254 0006 12B2     		sxth	r2, r2
 1255 0008 284B     		ldr	r3, .L63+4
 1256 000a 1B88     		ldrh	r3, [r3]
 1257 000c 19B2     		sxth	r1, r3
 1258 000e DB0B     		lsrs	r3, r3, #15
 1259 0010 5B18     		adds	r3, r3, r1
 1260 0012 5B10     		asrs	r3, r3, #1
 1261 0014 D31A     		subs	r3, r2, r3
 1262 0016 1BB2     		sxth	r3, r3
 1263              		.loc 2 167 11 view .LVU384
 1264 0018 254A     		ldr	r2, .L63+8
 1265 001a 1380     		strh	r3, [r2]
 168:Core/Src/motor.c ****     
 169:Core/Src/motor.c ****     /* Hint: Remember that your calculated motor speed may not be directly in RPM!
 170:Core/Src/motor.c ****      *       You will need to convert the target or encoder speeds to the same units.
 171:Core/Src/motor.c ****      *       I recommend converting to whatever units result in larger values, gives
 172:Core/Src/motor.c ****      *       more resolution.
 173:Core/Src/motor.c ****      */
 174:Core/Src/motor.c ****     
 175:Core/Src/motor.c ****     
 176:Core/Src/motor.c ****     /// TODO: Calculate integral portion of PI controller, write to "error_integral" variable
 177:Core/Src/motor.c ****     error_integral = error_integral + Ki * error; 
 1266              		.loc 2 177 5 is_stmt 1 view .LVU385
 1267              		.loc 2 177 37 is_stmt 0 view .LVU386
 1268 001c 254B     		ldr	r3, .L63+12
 1269 001e 1B78     		ldrb	r3, [r3]
 1270 0020 1088     		ldrh	r0, [r2]
 1271 0022 00B2     		sxth	r0, r0
 1272 0024 244A     		ldr	r2, .L63+16
 1273 0026 1188     		ldrh	r1, [r2]
 1274 0028 09B2     		sxth	r1, r1
 1275 002a 4343     		muls	r3, r0
 1276 002c 5B18     		adds	r3, r3, r1
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 53


 1277 002e 1BB2     		sxth	r3, r3
 1278              		.loc 2 177 20 view .LVU387
 1279 0030 1380     		strh	r3, [r2]
 178:Core/Src/motor.c ****     
 179:Core/Src/motor.c ****     /// TODO: Clamp the value of the integral to a limited positive range
 180:Core/Src/motor.c ****     
 181:Core/Src/motor.c ****     /* Hint: The value clamp is needed to prevent excessive "windup" in the integral.
 182:Core/Src/motor.c ****      *       You'll read more about this for the post-lab. The exact value is arbitrary
 183:Core/Src/motor.c ****      *       but affects the PI tuning.
 184:Core/Src/motor.c ****      *       Recommend that you clamp between 0 and 3200 (what is used in the lab solution)
 185:Core/Src/motor.c ****      */
 186:Core/Src/motor.c ****     
 187:Core/Src/motor.c ****     if (error_integral < 0) {
 1280              		.loc 2 187 5 is_stmt 1 view .LVU388
 1281              		.loc 2 187 24 is_stmt 0 view .LVU389
 1282 0032 1388     		ldrh	r3, [r2]
 1283 0034 1BB2     		sxth	r3, r3
 1284              		.loc 2 187 8 view .LVU390
 1285 0036 002B     		cmp	r3, #0
 1286 0038 09DB     		blt	.L62
 188:Core/Src/motor.c ****         error_integral = 0;
 189:Core/Src/motor.c ****     }
 190:Core/Src/motor.c **** 
 191:Core/Src/motor.c ****     else if (error_integral > 3200){
 1287              		.loc 2 191 10 is_stmt 1 view .LVU391
 1288              		.loc 2 191 29 is_stmt 0 view .LVU392
 1289 003a 1F4B     		ldr	r3, .L63+16
 1290 003c 1B88     		ldrh	r3, [r3]
 1291 003e 1BB2     		sxth	r3, r3
 1292              		.loc 2 191 13 view .LVU393
 1293 0040 C822     		movs	r2, #200
 1294 0042 1201     		lsls	r2, r2, #4
 1295 0044 9342     		cmp	r3, r2
 1296 0046 05DD     		ble	.L56
 192:Core/Src/motor.c ****         error_integral = 3200;
 1297              		.loc 2 192 9 is_stmt 1 view .LVU394
 1298              		.loc 2 192 24 is_stmt 0 view .LVU395
 1299 0048 1B4B     		ldr	r3, .L63+16
 1300 004a 1A80     		strh	r2, [r3]
 1301 004c 02E0     		b	.L56
 1302              	.L62:
 188:Core/Src/motor.c ****         error_integral = 0;
 1303              		.loc 2 188 9 is_stmt 1 view .LVU396
 188:Core/Src/motor.c ****         error_integral = 0;
 1304              		.loc 2 188 24 is_stmt 0 view .LVU397
 1305 004e 1300     		movs	r3, r2
 1306 0050 0022     		movs	r2, #0
 1307 0052 1A80     		strh	r2, [r3]
 1308              	.L56:
 193:Core/Src/motor.c ****     }
 194:Core/Src/motor.c ****     /// TODO: Calculate proportional portion, add integral and write to "output" variable
 195:Core/Src/motor.c ****     int16_t output = (Kp * error) + error_integral; // Change this!
 1309              		.loc 2 195 5 is_stmt 1 view .LVU398
 1310              		.loc 2 195 35 is_stmt 0 view .LVU399
 1311 0054 194B     		ldr	r3, .L63+20
 1312 0056 1B78     		ldrb	r3, [r3]
 1313 0058 154A     		ldr	r2, .L63+8
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 54


 1314 005a 1188     		ldrh	r1, [r2]
 1315 005c 09B2     		sxth	r1, r1
 1316 005e 164A     		ldr	r2, .L63+16
 1317 0060 1288     		ldrh	r2, [r2]
 1318 0062 12B2     		sxth	r2, r2
 1319 0064 4B43     		muls	r3, r1
 1320 0066 9B18     		adds	r3, r3, r2
 1321              		.loc 2 195 13 view .LVU400
 1322 0068 1BB2     		sxth	r3, r3
 1323              	.LVL32:
 196:Core/Src/motor.c ****     
 197:Core/Src/motor.c ****     
 198:Core/Src/motor.c ****     /* Because the calculated values for the PI controller are significantly larger than 
 199:Core/Src/motor.c ****      * the allowable range for duty cycle, you'll need to divide the result down into 
 200:Core/Src/motor.c ****      * an appropriate range. (Maximum integral clamp / X = 100% duty cycle)
 201:Core/Src/motor.c ****      * 
 202:Core/Src/motor.c ****      * Hint: If you chose 3200 for the integral clamp you should divide by 32 (right shift by 5 bit
 203:Core/Src/motor.c ****      *       this will give you an output of 100 at maximum integral "windup".
 204:Core/Src/motor.c ****      *
 205:Core/Src/motor.c ****      * This division also turns the above calculations into pseudo fixed-point. This is because
 206:Core/Src/motor.c ****      * the lowest 5 bits act as if they were below the decimal point until the division where they
 207:Core/Src/motor.c ****      * were truncated off to result in an integer value. 
 208:Core/Src/motor.c ****      *
 209:Core/Src/motor.c ****      * Technically most of this is arbitrary, in a real system you would want to use a fixed-point
 210:Core/Src/motor.c ****      * math library. The main difference that these values make is the difference in the gain value
 211:Core/Src/motor.c ****      * required for tuning.
 212:Core/Src/motor.c ****      */
 213:Core/Src/motor.c **** 
 214:Core/Src/motor.c ****      /// TODO: Divide the output into the proper range for output adjustment
 215:Core/Src/motor.c ****      output = output / 32;
 1324              		.loc 2 215 6 is_stmt 1 view .LVU401
 1325              		.loc 2 215 13 is_stmt 0 view .LVU402
 1326 006a DA17     		asrs	r2, r3, #31
 1327 006c 1F24     		movs	r4, #31
 1328 006e 1440     		ands	r4, r2
 1329 0070 E418     		adds	r4, r4, r3
 1330 0072 6411     		asrs	r4, r4, #5
 1331              	.LVL33:
 216:Core/Src/motor.c ****      /// TODO: Clamp the output value between 0 and 100 
 217:Core/Src/motor.c ****     if (output < 0) output = 0;
 1332              		.loc 2 217 5 is_stmt 1 view .LVU403
 1333              		.loc 2 217 8 is_stmt 0 view .LVU404
 1334 0074 1A00     		movs	r2, r3
 1335 0076 1F32     		adds	r2, r2, #31
 1336 0078 05DB     		blt	.L59
 218:Core/Src/motor.c ****     else if (output > 100) output = 100;
 1337              		.loc 2 218 10 is_stmt 1 view .LVU405
 1338              		.loc 2 218 13 is_stmt 0 view .LVU406
 1339 007a CA22     		movs	r2, #202
 1340 007c 1201     		lsls	r2, r2, #4
 1341 007e 9342     		cmp	r3, r2
 1342 0080 02DB     		blt	.L57
 1343              		.loc 2 218 35 discriminator 1 view .LVU407
 1344 0082 6424     		movs	r4, #100
 1345              	.LVL34:
 1346              		.loc 2 218 35 discriminator 1 view .LVU408
 1347 0084 00E0     		b	.L57
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 55


 1348              	.LVL35:
 1349              	.L59:
 217:Core/Src/motor.c ****     else if (output > 100) output = 100;
 1350              		.loc 2 217 28 discriminator 1 view .LVU409
 1351 0086 0024     		movs	r4, #0
 1352              	.LVL36:
 1353              	.L57:
 219:Core/Src/motor.c ****     pwm_setDutyCycle(output);
 1354              		.loc 2 219 5 is_stmt 1 view .LVU410
 1355 0088 E4B2     		uxtb	r4, r4
 1356              	.LVL37:
 1357              		.loc 2 219 5 is_stmt 0 view .LVU411
 1358 008a 2000     		movs	r0, r4
 1359 008c FFF7FEFF 		bl	pwm_setDutyCycle
 1360              	.LVL38:
 220:Core/Src/motor.c ****     duty_cycle = output;            // For debug viewing
 1361              		.loc 2 220 5 is_stmt 1 view .LVU412
 1362              		.loc 2 220 16 is_stmt 0 view .LVU413
 1363 0090 0B4B     		ldr	r3, .L63+24
 1364 0092 1C70     		strb	r4, [r3]
 221:Core/Src/motor.c **** 
 222:Core/Src/motor.c ****     // Read the ADC value for current monitoring, actual conversion into meaningful units 
 223:Core/Src/motor.c ****     // will be performed by STMStudio
 224:Core/Src/motor.c ****     if(ADC1->ISR & ADC_ISR_EOC) {   // If the ADC has new data for us
 1365              		.loc 2 224 5 is_stmt 1 view .LVU414
 1366              		.loc 2 224 12 is_stmt 0 view .LVU415
 1367 0094 0B4B     		ldr	r3, .L63+28
 1368 0096 1B68     		ldr	r3, [r3]
 1369              		.loc 2 224 7 view .LVU416
 1370 0098 5B07     		lsls	r3, r3, #29
 1371 009a 04D5     		bpl	.L54
 225:Core/Src/motor.c ****         adc_value = ADC1->DR;       // Read the motor current for debug viewing
 1372              		.loc 2 225 9 is_stmt 1 view .LVU417
 1373              		.loc 2 225 25 is_stmt 0 view .LVU418
 1374 009c 094B     		ldr	r3, .L63+28
 1375 009e 1B6C     		ldr	r3, [r3, #64]
 1376              		.loc 2 225 19 view .LVU419
 1377 00a0 5BB2     		sxtb	r3, r3
 1378 00a2 094A     		ldr	r2, .L63+32
 1379 00a4 1370     		strb	r3, [r2]
 1380              	.L54:
 226:Core/Src/motor.c ****     }
 227:Core/Src/motor.c **** }
 1381              		.loc 2 227 1 view .LVU420
 1382              		@ sp needed
 1383 00a6 10BD     		pop	{r4, pc}
 1384              	.L64:
 1385              		.align	2
 1386              	.L63:
 1387 00a8 00000000 		.word	target_rpm
 1388 00ac 00000000 		.word	motor_speed
 1389 00b0 00000000 		.word	error
 1390 00b4 00000000 		.word	Ki
 1391 00b8 00000000 		.word	error_integral
 1392 00bc 00000000 		.word	Kp
 1393 00c0 00000000 		.word	duty_cycle
 1394 00c4 00240140 		.word	1073816576
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 56


 1395 00c8 00000000 		.word	adc_value
 1396              		.cfi_endproc
 1397              	.LFE49:
 1399              		.section	.text.TIM7_IRQHandler,"ax",%progbits
 1400              		.align	1
 1401              		.global	TIM7_IRQHandler
 1402              		.syntax unified
 1403              		.code	16
 1404              		.thumb_func
 1406              	TIM7_IRQHandler:
 1407              	.LFB47:
 112:Core/Src/motor.c ****     /* Calculate the motor speed in raw encoder counts
 1408              		.loc 2 112 28 is_stmt 1 view -0
 1409              		.cfi_startproc
 1410              		@ args = 0, pretend = 0, frame = 0
 1411              		@ frame_needed = 0, uses_anonymous_args = 0
 1412 0000 10B5     		push	{r4, lr}
 1413              	.LCFI9:
 1414              		.cfi_def_cfa_offset 8
 1415              		.cfi_offset 4, -8
 1416              		.cfi_offset 14, -4
 117:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 1417              		.loc 2 117 5 view .LVU422
 117:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 1418              		.loc 2 117 24 is_stmt 0 view .LVU423
 1419 0002 094A     		ldr	r2, .L66
 1420 0004 536A     		ldr	r3, [r2, #36]
 117:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 1421              		.loc 2 117 30 view .LVU424
 1422 0006 0949     		ldr	r1, .L66+4
 1423 0008 8C46     		mov	ip, r1
 1424 000a 6344     		add	r3, r3, ip
 1425 000c 1BB2     		sxth	r3, r3
 117:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 1426              		.loc 2 117 17 view .LVU425
 1427 000e 0849     		ldr	r1, .L66+8
 1428 0010 0B80     		strh	r3, [r1]
 118:Core/Src/motor.c ****     
 1429              		.loc 2 118 5 is_stmt 1 view .LVU426
 118:Core/Src/motor.c ****     
 1430              		.loc 2 118 15 is_stmt 0 view .LVU427
 1431 0012 084B     		ldr	r3, .L66+12
 1432 0014 5362     		str	r3, [r2, #36]
 121:Core/Src/motor.c **** 
 1433              		.loc 2 121 5 is_stmt 1 view .LVU428
 1434 0016 FFF7FEFF 		bl	PI_update
 1435              	.LVL39:
 123:Core/Src/motor.c **** }
 1436              		.loc 2 123 5 view .LVU429
 123:Core/Src/motor.c **** }
 1437              		.loc 2 123 9 is_stmt 0 view .LVU430
 1438 001a 074A     		ldr	r2, .L66+16
 1439 001c 1369     		ldr	r3, [r2, #16]
 123:Core/Src/motor.c **** }
 1440              		.loc 2 123 14 view .LVU431
 1441 001e 0121     		movs	r1, #1
 1442 0020 8B43     		bics	r3, r1
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 57


 1443 0022 1361     		str	r3, [r2, #16]
 124:Core/Src/motor.c **** 
 1444              		.loc 2 124 1 view .LVU432
 1445              		@ sp needed
 1446 0024 10BD     		pop	{r4, pc}
 1447              	.L67:
 1448 0026 C046     		.align	2
 1449              	.L66:
 1450 0028 00040040 		.word	1073742848
 1451 002c 0180FFFF 		.word	-32767
 1452 0030 00000000 		.word	motor_speed
 1453 0034 FF7F0000 		.word	32767
 1454 0038 00140040 		.word	1073746944
 1455              		.cfi_endproc
 1456              	.LFE47:
 1458              		.section	.text.button_init,"ax",%progbits
 1459              		.align	1
 1460              		.global	button_init
 1461              		.syntax unified
 1462              		.code	16
 1463              		.thumb_func
 1465              	button_init:
 1466              	.LFB51:
 199:Core/Src/main.c ****     // Initialize PA0 for button input
 1467              		.loc 1 199 25 is_stmt 1 view -0
 1468              		.cfi_startproc
 1469              		@ args = 0, pretend = 0, frame = 0
 1470              		@ frame_needed = 0, uses_anonymous_args = 0
 1471              		@ link register save eliminated.
 201:Core/Src/main.c ****     GPIOA->MODER &= ~(GPIO_MODER_MODER0_0 | GPIO_MODER_MODER0_1);               // Set PA0 to input
 1472              		.loc 1 201 5 view .LVU434
 201:Core/Src/main.c ****     GPIOA->MODER &= ~(GPIO_MODER_MODER0_0 | GPIO_MODER_MODER0_1);               // Set PA0 to input
 1473              		.loc 1 201 8 is_stmt 0 view .LVU435
 1474 0000 0A4A     		ldr	r2, .L69
 1475 0002 5169     		ldr	r1, [r2, #20]
 201:Core/Src/main.c ****     GPIOA->MODER &= ~(GPIO_MODER_MODER0_0 | GPIO_MODER_MODER0_1);               // Set PA0 to input
 1476              		.loc 1 201 17 view .LVU436
 1477 0004 8023     		movs	r3, #128
 1478 0006 9B02     		lsls	r3, r3, #10
 1479 0008 0B43     		orrs	r3, r1
 1480 000a 5361     		str	r3, [r2, #20]
 202:Core/Src/main.c ****     GPIOC->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEEDR0_0 | GPIO_OSPEEDR_OSPEEDR0_1);     // Set to low speed
 1481              		.loc 1 202 5 is_stmt 1 view .LVU437
 202:Core/Src/main.c ****     GPIOC->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEEDR0_0 | GPIO_OSPEEDR_OSPEEDR0_1);     // Set to low speed
 1482              		.loc 1 202 10 is_stmt 0 view .LVU438
 1483 000c 9022     		movs	r2, #144
 1484 000e D205     		lsls	r2, r2, #23
 1485 0010 1368     		ldr	r3, [r2]
 202:Core/Src/main.c ****     GPIOC->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEEDR0_0 | GPIO_OSPEEDR_OSPEEDR0_1);     // Set to low speed
 1486              		.loc 1 202 18 view .LVU439
 1487 0012 0321     		movs	r1, #3
 1488 0014 8B43     		bics	r3, r1
 1489 0016 1360     		str	r3, [r2]
 203:Core/Src/main.c ****     GPIOC->PUPDR |= GPIO_PUPDR_PUPDR0_1;                                        // Set to pull-down
 1490              		.loc 1 203 5 is_stmt 1 view .LVU440
 203:Core/Src/main.c ****     GPIOC->PUPDR |= GPIO_PUPDR_PUPDR0_1;                                        // Set to pull-down
 1491              		.loc 1 203 10 is_stmt 0 view .LVU441
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 58


 1492 0018 054B     		ldr	r3, .L69+4
 1493 001a 9A68     		ldr	r2, [r3, #8]
 203:Core/Src/main.c ****     GPIOC->PUPDR |= GPIO_PUPDR_PUPDR0_1;                                        // Set to pull-down
 1494              		.loc 1 203 20 view .LVU442
 1495 001c 8A43     		bics	r2, r1
 1496 001e 9A60     		str	r2, [r3, #8]
 204:Core/Src/main.c **** }
 1497              		.loc 1 204 5 is_stmt 1 view .LVU443
 204:Core/Src/main.c **** }
 1498              		.loc 1 204 10 is_stmt 0 view .LVU444
 1499 0020 DA68     		ldr	r2, [r3, #12]
 204:Core/Src/main.c **** }
 1500              		.loc 1 204 18 view .LVU445
 1501 0022 0139     		subs	r1, r1, #1
 1502 0024 0A43     		orrs	r2, r1
 1503 0026 DA60     		str	r2, [r3, #12]
 205:Core/Src/main.c **** 
 1504              		.loc 1 205 1 view .LVU446
 1505              		@ sp needed
 1506 0028 7047     		bx	lr
 1507              	.L70:
 1508 002a C046     		.align	2
 1509              	.L69:
 1510 002c 00100240 		.word	1073876992
 1511 0030 00080048 		.word	1207961600
 1512              		.cfi_endproc
 1513              	.LFE51:
 1515              		.section	.text.HAL_SYSTICK_Callback,"ax",%progbits
 1516              		.align	1
 1517              		.global	HAL_SYSTICK_Callback
 1518              		.syntax unified
 1519              		.code	16
 1520              		.thumb_func
 1522              	HAL_SYSTICK_Callback:
 1523              	.LFB52:
 211:Core/Src/main.c ****     // Remember that this function is called by the SysTick interrupt
 1524              		.loc 1 211 33 is_stmt 1 view -0
 1525              		.cfi_startproc
 1526              		@ args = 0, pretend = 0, frame = 0
 1527              		@ frame_needed = 0, uses_anonymous_args = 0
 1528              		@ link register save eliminated.
 215:Core/Src/main.c ****     if(GPIOA->IDR & (1 << 0)) {
 1529              		.loc 1 215 5 view .LVU448
 215:Core/Src/main.c ****     if(GPIOA->IDR & (1 << 0)) {
 1530              		.loc 1 215 28 is_stmt 0 view .LVU449
 1531 0000 154A     		ldr	r2, .L81
 1532 0002 1368     		ldr	r3, [r2]
 1533 0004 5B00     		lsls	r3, r3, #1
 215:Core/Src/main.c ****     if(GPIOA->IDR & (1 << 0)) {
 1534              		.loc 1 215 15 view .LVU450
 1535 0006 1360     		str	r3, [r2]
 216:Core/Src/main.c ****         debouncer |= 0x1;
 1536              		.loc 1 216 5 is_stmt 1 view .LVU451
 216:Core/Src/main.c ****         debouncer |= 0x1;
 1537              		.loc 1 216 13 is_stmt 0 view .LVU452
 1538 0008 9023     		movs	r3, #144
 1539 000a DB05     		lsls	r3, r3, #23
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 59


 1540 000c 1B69     		ldr	r3, [r3, #16]
 216:Core/Src/main.c ****         debouncer |= 0x1;
 1541              		.loc 1 216 7 view .LVU453
 1542 000e DB07     		lsls	r3, r3, #31
 1543 0010 03D5     		bpl	.L72
 217:Core/Src/main.c ****     }
 1544              		.loc 1 217 9 is_stmt 1 view .LVU454
 217:Core/Src/main.c ****     }
 1545              		.loc 1 217 19 is_stmt 0 view .LVU455
 1546 0012 1368     		ldr	r3, [r2]
 1547 0014 0121     		movs	r1, #1
 1548 0016 0B43     		orrs	r3, r1
 1549 0018 1360     		str	r3, [r2]
 1550              	.L72:
 220:Core/Src/main.c ****     switch(target_rpm) {
 1551              		.loc 1 220 5 is_stmt 1 view .LVU456
 220:Core/Src/main.c ****     switch(target_rpm) {
 1552              		.loc 1 220 18 is_stmt 0 view .LVU457
 1553 001a 0F4B     		ldr	r3, .L81
 1554 001c 1A68     		ldr	r2, [r3]
 220:Core/Src/main.c ****     switch(target_rpm) {
 1555              		.loc 1 220 7 view .LVU458
 1556 001e 0F4B     		ldr	r3, .L81+4
 1557 0020 9A42     		cmp	r2, r3
 1558 0022 00D0     		beq	.L80
 1559              	.L71:
 236:Core/Src/main.c **** 
 1560              		.loc 1 236 1 view .LVU459
 1561              		@ sp needed
 1562 0024 7047     		bx	lr
 1563              	.L80:
 221:Core/Src/main.c ****         case 80:
 1564              		.loc 1 221 5 is_stmt 1 view .LVU460
 1565 0026 0E4B     		ldr	r3, .L81+8
 1566 0028 1B88     		ldrh	r3, [r3]
 1567 002a 1BB2     		sxth	r3, r3
 1568 002c 322B     		cmp	r3, #50
 1569 002e 0BD0     		beq	.L74
 1570 0030 502B     		cmp	r3, #80
 1571 0032 05D0     		beq	.L75
 1572 0034 002B     		cmp	r3, #0
 1573 0036 0BD0     		beq	.L76
 232:Core/Src/main.c ****             break;
 1574              		.loc 1 232 13 view .LVU461
 232:Core/Src/main.c ****             break;
 1575              		.loc 1 232 24 is_stmt 0 view .LVU462
 1576 0038 094B     		ldr	r3, .L81+8
 1577 003a 0022     		movs	r2, #0
 1578 003c 1A80     		strh	r2, [r3]
 233:Core/Src/main.c ****         }
 1579              		.loc 1 233 13 is_stmt 1 view .LVU463
 236:Core/Src/main.c **** 
 1580              		.loc 1 236 1 is_stmt 0 view .LVU464
 1581 003e F1E7     		b	.L71
 1582              	.L75:
 223:Core/Src/main.c ****             break;
 1583              		.loc 1 223 13 is_stmt 1 view .LVU465
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 60


 223:Core/Src/main.c ****             break;
 1584              		.loc 1 223 24 is_stmt 0 view .LVU466
 1585 0040 074B     		ldr	r3, .L81+8
 1586 0042 3222     		movs	r2, #50
 1587 0044 1A80     		strh	r2, [r3]
 224:Core/Src/main.c ****         case 50:
 1588              		.loc 1 224 13 is_stmt 1 view .LVU467
 1589 0046 EDE7     		b	.L71
 1590              	.L74:
 226:Core/Src/main.c ****             break;
 1591              		.loc 1 226 13 view .LVU468
 226:Core/Src/main.c ****             break;
 1592              		.loc 1 226 24 is_stmt 0 view .LVU469
 1593 0048 054B     		ldr	r3, .L81+8
 1594 004a 5122     		movs	r2, #81
 1595 004c 1A80     		strh	r2, [r3]
 227:Core/Src/main.c ****         case 0:
 1596              		.loc 1 227 13 is_stmt 1 view .LVU470
 1597 004e E9E7     		b	.L71
 1598              	.L76:
 229:Core/Src/main.c ****             break;
 1599              		.loc 1 229 13 view .LVU471
 229:Core/Src/main.c ****             break;
 1600              		.loc 1 229 24 is_stmt 0 view .LVU472
 1601 0050 034B     		ldr	r3, .L81+8
 1602 0052 5022     		movs	r2, #80
 1603 0054 1A80     		strh	r2, [r3]
 230:Core/Src/main.c ****         default:
 1604              		.loc 1 230 13 is_stmt 1 view .LVU473
 1605 0056 E5E7     		b	.L71
 1606              	.L82:
 1607              		.align	2
 1608              	.L81:
 1609 0058 00000000 		.word	debouncer
 1610 005c FFFFFF7F 		.word	2147483647
 1611 0060 00000000 		.word	target_rpm
 1612              		.cfi_endproc
 1613              	.LFE52:
 1615              		.section	.text.initLEDs,"ax",%progbits
 1616              		.align	1
 1617              		.global	initLEDs
 1618              		.syntax unified
 1619              		.code	16
 1620              		.thumb_func
 1622              	initLEDs:
 1623              	.LFB60:
 544:Core/Src/main.c **** 	// red LED PC6, blue LED (PC7), green LED PC9, orange LED PC8
 1624              		.loc 1 544 21 view -0
 1625              		.cfi_startproc
 1626              		@ args = 0, pretend = 0, frame = 0
 1627              		@ frame_needed = 0, uses_anonymous_args = 0
 1628              		@ link register save eliminated.
 546:Core/Src/main.c ****   // set the MODER, 01: General purpose output mode
 1629              		.loc 1 546 3 view .LVU475
 546:Core/Src/main.c ****   // set the MODER, 01: General purpose output mode
 1630              		.loc 1 546 6 is_stmt 0 view .LVU476
 1631 0000 294A     		ldr	r2, .L84
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 61


 1632 0002 5169     		ldr	r1, [r2, #20]
 546:Core/Src/main.c ****   // set the MODER, 01: General purpose output mode
 1633              		.loc 1 546 15 view .LVU477
 1634 0004 8023     		movs	r3, #128
 1635 0006 1B03     		lsls	r3, r3, #12
 1636 0008 0B43     		orrs	r3, r1
 1637 000a 5361     		str	r3, [r2, #20]
 549:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 13);
 1638              		.loc 1 549 2 is_stmt 1 view .LVU478
 549:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 13);
 1639              		.loc 1 549 7 is_stmt 0 view .LVU479
 1640 000c 274B     		ldr	r3, .L84+4
 1641 000e 1968     		ldr	r1, [r3]
 549:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 13);
 1642              		.loc 1 549 15 view .LVU480
 1643 0010 8022     		movs	r2, #128
 1644 0012 5201     		lsls	r2, r2, #5
 1645 0014 0A43     		orrs	r2, r1
 1646 0016 1A60     		str	r2, [r3]
 550:Core/Src/main.c ****     // init PC7 MODER
 1647              		.loc 1 550 2 is_stmt 1 view .LVU481
 550:Core/Src/main.c ****     // init PC7 MODER
 1648              		.loc 1 550 7 is_stmt 0 view .LVU482
 1649 0018 1A68     		ldr	r2, [r3]
 550:Core/Src/main.c ****     // init PC7 MODER
 1650              		.loc 1 550 15 view .LVU483
 1651 001a 2549     		ldr	r1, .L84+8
 1652 001c 0A40     		ands	r2, r1
 1653 001e 1A60     		str	r2, [r3]
 552:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 15);
 1654              		.loc 1 552 2 is_stmt 1 view .LVU484
 552:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 15);
 1655              		.loc 1 552 7 is_stmt 0 view .LVU485
 1656 0020 1968     		ldr	r1, [r3]
 552:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 15);
 1657              		.loc 1 552 15 view .LVU486
 1658 0022 8022     		movs	r2, #128
 1659 0024 D201     		lsls	r2, r2, #7
 1660 0026 0A43     		orrs	r2, r1
 1661 0028 1A60     		str	r2, [r3]
 553:Core/Src/main.c **** 	// init PC8 MODER
 1662              		.loc 1 553 2 is_stmt 1 view .LVU487
 553:Core/Src/main.c **** 	// init PC8 MODER
 1663              		.loc 1 553 7 is_stmt 0 view .LVU488
 1664 002a 1A68     		ldr	r2, [r3]
 553:Core/Src/main.c **** 	// init PC8 MODER
 1665              		.loc 1 553 15 view .LVU489
 1666 002c 2149     		ldr	r1, .L84+12
 1667 002e 0A40     		ands	r2, r1
 1668 0030 1A60     		str	r2, [r3]
 555:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 17);
 1669              		.loc 1 555 2 is_stmt 1 view .LVU490
 555:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 17);
 1670              		.loc 1 555 7 is_stmt 0 view .LVU491
 1671 0032 1968     		ldr	r1, [r3]
 555:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 17);
 1672              		.loc 1 555 15 view .LVU492
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 62


 1673 0034 8022     		movs	r2, #128
 1674 0036 5202     		lsls	r2, r2, #9
 1675 0038 0A43     		orrs	r2, r1
 1676 003a 1A60     		str	r2, [r3]
 556:Core/Src/main.c **** 	// init PC9 MODER
 1677              		.loc 1 556 2 is_stmt 1 view .LVU493
 556:Core/Src/main.c **** 	// init PC9 MODER
 1678              		.loc 1 556 7 is_stmt 0 view .LVU494
 1679 003c 1A68     		ldr	r2, [r3]
 556:Core/Src/main.c **** 	// init PC9 MODER
 1680              		.loc 1 556 15 view .LVU495
 1681 003e 1E49     		ldr	r1, .L84+16
 1682 0040 0A40     		ands	r2, r1
 1683 0042 1A60     		str	r2, [r3]
 558:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 19);
 1684              		.loc 1 558 2 is_stmt 1 view .LVU496
 558:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 19);
 1685              		.loc 1 558 7 is_stmt 0 view .LVU497
 1686 0044 1968     		ldr	r1, [r3]
 558:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 19);
 1687              		.loc 1 558 15 view .LVU498
 1688 0046 8022     		movs	r2, #128
 1689 0048 D202     		lsls	r2, r2, #11
 1690 004a 0A43     		orrs	r2, r1
 1691 004c 1A60     		str	r2, [r3]
 559:Core/Src/main.c ****   // Set the pins to low speed in the OSPEEDR register
 1692              		.loc 1 559 2 is_stmt 1 view .LVU499
 559:Core/Src/main.c ****   // Set the pins to low speed in the OSPEEDR register
 1693              		.loc 1 559 7 is_stmt 0 view .LVU500
 1694 004e 1A68     		ldr	r2, [r3]
 559:Core/Src/main.c ****   // Set the pins to low speed in the OSPEEDR register
 1695              		.loc 1 559 15 view .LVU501
 1696 0050 1A49     		ldr	r1, .L84+20
 1697 0052 0A40     		ands	r2, r1
 1698 0054 1A60     		str	r2, [r3]
 561:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 14) | (1 << 15));
 1699              		.loc 1 561 2 is_stmt 1 view .LVU502
 561:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 14) | (1 << 15));
 1700              		.loc 1 561 7 is_stmt 0 view .LVU503
 1701 0056 9A68     		ldr	r2, [r3, #8]
 561:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 14) | (1 << 15));
 1702              		.loc 1 561 17 view .LVU504
 1703 0058 1949     		ldr	r1, .L84+24
 1704 005a 0A40     		ands	r2, r1
 1705 005c 9A60     		str	r2, [r3, #8]
 562:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 16) | (1 << 17));
 1706              		.loc 1 562 2 is_stmt 1 view .LVU505
 562:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 16) | (1 << 17));
 1707              		.loc 1 562 7 is_stmt 0 view .LVU506
 1708 005e 9A68     		ldr	r2, [r3, #8]
 562:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 16) | (1 << 17));
 1709              		.loc 1 562 17 view .LVU507
 1710 0060 1849     		ldr	r1, .L84+28
 1711 0062 0A40     		ands	r2, r1
 1712 0064 9A60     		str	r2, [r3, #8]
 563:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 18) | (1 << 19));
 1713              		.loc 1 563 2 is_stmt 1 view .LVU508
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 63


 563:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 18) | (1 << 19));
 1714              		.loc 1 563 7 is_stmt 0 view .LVU509
 1715 0066 9A68     		ldr	r2, [r3, #8]
 563:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 18) | (1 << 19));
 1716              		.loc 1 563 17 view .LVU510
 1717 0068 1749     		ldr	r1, .L84+32
 1718 006a 0A40     		ands	r2, r1
 1719 006c 9A60     		str	r2, [r3, #8]
 564:Core/Src/main.c **** 
 1720              		.loc 1 564 2 is_stmt 1 view .LVU511
 564:Core/Src/main.c **** 
 1721              		.loc 1 564 7 is_stmt 0 view .LVU512
 1722 006e 9A68     		ldr	r2, [r3, #8]
 564:Core/Src/main.c **** 
 1723              		.loc 1 564 17 view .LVU513
 1724 0070 1649     		ldr	r1, .L84+36
 1725 0072 0A40     		ands	r2, r1
 1726 0074 9A60     		str	r2, [r3, #8]
 568:Core/Src/main.c **** 	GPIOC->PUPDR &= ~((1 << 12) | (1 << 13) | (1 << 14) | (1 << 15));
 1727              		.loc 1 568 2 is_stmt 1 view .LVU514
 568:Core/Src/main.c **** 	GPIOC->PUPDR &= ~((1 << 12) | (1 << 13) | (1 << 14) | (1 << 15));
 1728              		.loc 1 568 7 is_stmt 0 view .LVU515
 1729 0076 DA68     		ldr	r2, [r3, #12]
 568:Core/Src/main.c **** 	GPIOC->PUPDR &= ~((1 << 12) | (1 << 13) | (1 << 14) | (1 << 15));
 1730              		.loc 1 568 15 view .LVU516
 1731 0078 1549     		ldr	r1, .L84+40
 1732 007a 0A40     		ands	r2, r1
 1733 007c DA60     		str	r2, [r3, #12]
 569:Core/Src/main.c **** 	// set PC6-9 to 0
 1734              		.loc 1 569 2 is_stmt 1 view .LVU517
 569:Core/Src/main.c **** 	// set PC6-9 to 0
 1735              		.loc 1 569 7 is_stmt 0 view .LVU518
 1736 007e DA68     		ldr	r2, [r3, #12]
 569:Core/Src/main.c **** 	// set PC6-9 to 0
 1737              		.loc 1 569 15 view .LVU519
 1738 0080 1449     		ldr	r1, .L84+44
 1739 0082 0A40     		ands	r2, r1
 1740 0084 DA60     		str	r2, [r3, #12]
 571:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 7);
 1741              		.loc 1 571 2 is_stmt 1 view .LVU520
 571:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 7);
 1742              		.loc 1 571 7 is_stmt 0 view .LVU521
 1743 0086 5A69     		ldr	r2, [r3, #20]
 571:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 7);
 1744              		.loc 1 571 13 view .LVU522
 1745 0088 4021     		movs	r1, #64
 1746 008a 8A43     		bics	r2, r1
 1747 008c 5A61     		str	r2, [r3, #20]
 572:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 8);
 1748              		.loc 1 572 2 is_stmt 1 view .LVU523
 572:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 8);
 1749              		.loc 1 572 7 is_stmt 0 view .LVU524
 1750 008e 5A69     		ldr	r2, [r3, #20]
 572:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 8);
 1751              		.loc 1 572 13 view .LVU525
 1752 0090 4031     		adds	r1, r1, #64
 1753 0092 8A43     		bics	r2, r1
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 64


 1754 0094 5A61     		str	r2, [r3, #20]
 573:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 9);
 1755              		.loc 1 573 2 is_stmt 1 view .LVU526
 573:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 9);
 1756              		.loc 1 573 7 is_stmt 0 view .LVU527
 1757 0096 5A69     		ldr	r2, [r3, #20]
 573:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 9);
 1758              		.loc 1 573 13 view .LVU528
 1759 0098 0F49     		ldr	r1, .L84+48
 1760 009a 0A40     		ands	r2, r1
 1761 009c 5A61     		str	r2, [r3, #20]
 574:Core/Src/main.c **** }
 1762              		.loc 1 574 2 is_stmt 1 view .LVU529
 574:Core/Src/main.c **** }
 1763              		.loc 1 574 7 is_stmt 0 view .LVU530
 1764 009e 5A69     		ldr	r2, [r3, #20]
 574:Core/Src/main.c **** }
 1765              		.loc 1 574 13 view .LVU531
 1766 00a0 0E49     		ldr	r1, .L84+52
 1767 00a2 0A40     		ands	r2, r1
 1768 00a4 5A61     		str	r2, [r3, #20]
 575:Core/Src/main.c **** 
 1769              		.loc 1 575 1 view .LVU532
 1770              		@ sp needed
 1771 00a6 7047     		bx	lr
 1772              	.L85:
 1773              		.align	2
 1774              	.L84:
 1775 00a8 00100240 		.word	1073876992
 1776 00ac 00080048 		.word	1207961600
 1777 00b0 FFDFFFFF 		.word	-8193
 1778 00b4 FF7FFFFF 		.word	-32769
 1779 00b8 FFFFFDFF 		.word	-131073
 1780 00bc FFFFF7FF 		.word	-524289
 1781 00c0 FFCFFFFF 		.word	-12289
 1782 00c4 FF3FFFFF 		.word	-49153
 1783 00c8 FFFFFCFF 		.word	-196609
 1784 00cc FFFFF3FF 		.word	-786433
 1785 00d0 FFFFF0FF 		.word	-983041
 1786 00d4 FF0FFFFF 		.word	-61441
 1787 00d8 FFFEFFFF 		.word	-257
 1788 00dc FFFDFFFF 		.word	-513
 1789              		.cfi_endproc
 1790              	.LFE60:
 1792              		.section	.text.StartMotorTask,"ax",%progbits
 1793              		.align	1
 1794              		.global	StartMotorTask
 1795              		.syntax unified
 1796              		.code	16
 1797              		.thumb_func
 1799              	StartMotorTask:
 1800              	.LFB62:
 677:Core/Src/main.c ****   }
 678:Core/Src/main.c **** }
 679:Core/Src/main.c **** 
 680:Core/Src/main.c **** /* USER CODE BEGIN Header_StartLEDTask */
 681:Core/Src/main.c **** /**
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 65


 682:Core/Src/main.c ****   * @brief  Function implementing the MotorTask thread.
 683:Core/Src/main.c ****   * @param  argument: Not used
 684:Core/Src/main.c ****   * @retval None
 685:Core/Src/main.c ****   */ 
 686:Core/Src/main.c **** /* USER CODE END Header_StartLEDTask */
 687:Core/Src/main.c **** void StartMotorTask(void *argument)
 688:Core/Src/main.c **** {
 1801              		.loc 1 688 1 is_stmt 1 view -0
 1802              		.cfi_startproc
 1803              		@ args = 0, pretend = 0, frame = 0
 1804              		@ frame_needed = 0, uses_anonymous_args = 0
 1805              	.LVL40:
 1806              		.loc 1 688 1 is_stmt 0 view .LVU534
 1807 0000 10B5     		push	{r4, lr}
 1808              	.LCFI10:
 1809              		.cfi_def_cfa_offset 8
 1810              		.cfi_offset 4, -8
 1811              		.cfi_offset 14, -4
 1812 0002 0BE0     		b	.L89
 1813              	.LVL41:
 1814              	.L87:
 1815              	.LBB19:
 689:Core/Src/main.c ****   extern volatile uint16_t commandMotor;
 690:Core/Src/main.c ****   int speedAdjust = 0; // boolean that says if speed needs to be adjusted: speed accounted for 3rd 
 691:Core/Src/main.c ****   //command 0xB-[1/2/3/4]
 692:Core/Src/main.c ****   /* 2nd Digit
 693:Core/Src/main.c ****   *   - 1: Turn motor on (enable 3rd and 4th digit)
 694:Core/Src/main.c ****   *   - 2: Turn motor off
 695:Core/Src/main.c ****   *   - 3: Change motor speed (enable 3rd and 4th digit)
 696:Core/Src/main.c ****   * 3rd & 4th Digit: RPM of speed --> Clamped at < 100, done in motor.c 
 697:Core/Src/main.c ****   */
 698:Core/Src/main.c **** 
 699:Core/Src/main.c ****   /* Infinite loop */
 700:Core/Src/main.c ****   for(;;)
 701:Core/Src/main.c ****   {
 702:Core/Src/main.c ****     extern volatile uint16_t commandMotor;
 703:Core/Src/main.c ****     // 1st character (turn motor on, off, or adjust speed)
 704:Core/Src/main.c ****     switch (commandMotor & 0x0F00) { 
 705:Core/Src/main.c ****       case 0x0010: 
 706:Core/Src/main.c ****         // turn motor on (will need to adjust speed)
 707:Core/Src/main.c ****         speedAdjust = 1;
 708:Core/Src/main.c ****         break;
 709:Core/Src/main.c ****       case 0x0020:
 710:Core/Src/main.c ****         // turn motor off
 711:Core/Src/main.c ****         break;
 712:Core/Src/main.c ****       case 0x0030:
 713:Core/Src/main.c ****         // change motor speed 
 714:Core/Src/main.c ****         speedAdjust = 1;
 715:Core/Src/main.c ****         break;
 716:Core/Src/main.c ****       default:
 717:Core/Src/main.c ****         break;
 718:Core/Src/main.c ****     }
 719:Core/Src/main.c ****     if (speedAdjust == 1){
 720:Core/Src/main.c ****       // 2nd & 3rd character
 721:Core/Src/main.c ****       target_rpm = (commandMotor & 0x00FF);
 1816              		.loc 1 721 7 is_stmt 1 view .LVU535
 1817              		.loc 1 721 34 is_stmt 0 view .LVU536
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 66


 1818 0004 0A4B     		ldr	r3, .L90
 1819 0006 1B88     		ldrh	r3, [r3]
 1820 0008 FF22     		movs	r2, #255
 1821 000a 1340     		ands	r3, r2
 1822              		.loc 1 721 18 view .LVU537
 1823 000c 094A     		ldr	r2, .L90+4
 1824 000e 1380     		strh	r3, [r2]
 1825              	.L88:
 722:Core/Src/main.c ****       
 723:Core/Src/main.c ****       
 724:Core/Src/main.c ****     }
 725:Core/Src/main.c ****     commandMotor = 0;
 1826              		.loc 1 725 5 is_stmt 1 view .LVU538
 1827              		.loc 1 725 18 is_stmt 0 view .LVU539
 1828 0010 074B     		ldr	r3, .L90
 1829 0012 0022     		movs	r2, #0
 1830 0014 1A80     		strh	r2, [r3]
 726:Core/Src/main.c ****     speedAdjust = 0;
 1831              		.loc 1 726 5 is_stmt 1 view .LVU540
 1832              	.LVL42:
 727:Core/Src/main.c ****     //Placeholder for task priorities
 728:Core/Src/main.c ****     osDelay(1);
 1833              		.loc 1 728 5 view .LVU541
 1834 0016 0120     		movs	r0, #1
 1835 0018 FFF7FEFF 		bl	osDelay
 1836              	.LVL43:
 1837              	.LBE19:
 700:Core/Src/main.c ****   {
 1838              		.loc 1 700 3 view .LVU542
 1839              	.L89:
 700:Core/Src/main.c ****   {
 1840              		.loc 1 700 3 view .LVU543
 1841              	.LBB20:
 702:Core/Src/main.c ****     // 1st character (turn motor on, off, or adjust speed)
 1842              		.loc 1 702 5 view .LVU544
 704:Core/Src/main.c ****       case 0x0010: 
 1843              		.loc 1 704 5 view .LVU545
 704:Core/Src/main.c ****       case 0x0010: 
 1844              		.loc 1 704 26 is_stmt 0 view .LVU546
 1845 001c 044B     		ldr	r3, .L90
 1846 001e 1B88     		ldrh	r3, [r3]
 1847 0020 F022     		movs	r2, #240
 1848 0022 1201     		lsls	r2, r2, #4
 1849 0024 1340     		ands	r3, r2
 704:Core/Src/main.c ****       case 0x0010: 
 1850              		.loc 1 704 5 view .LVU547
 1851 0026 102B     		cmp	r3, #16
 1852 0028 ECD0     		beq	.L87
 1853 002a 302B     		cmp	r3, #48
 1854 002c EAD0     		beq	.L87
 1855 002e EFE7     		b	.L88
 1856              	.L91:
 1857              		.align	2
 1858              	.L90:
 1859 0030 00000000 		.word	commandMotor
 1860 0034 00000000 		.word	target_rpm
 1861              	.LBE20:
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 67


 1862              		.cfi_endproc
 1863              	.LFE62:
 1865              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1866              		.align	1
 1867              		.global	HAL_TIM_PeriodElapsedCallback
 1868              		.syntax unified
 1869              		.code	16
 1870              		.thumb_func
 1872              	HAL_TIM_PeriodElapsedCallback:
 1873              	.LVL44:
 1874              	.LFB63:
 729:Core/Src/main.c ****   }
 730:Core/Src/main.c **** }
 731:Core/Src/main.c **** 
 732:Core/Src/main.c **** /**
 733:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 734:Core/Src/main.c ****   * @note   This function is called  when TIM6 interrupt took place, inside
 735:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 736:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 737:Core/Src/main.c ****   * @param  htim : TIM handle
 738:Core/Src/main.c ****   * @retval None
 739:Core/Src/main.c ****   */
 740:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 741:Core/Src/main.c **** {
 1875              		.loc 1 741 1 is_stmt 1 view -0
 1876              		.cfi_startproc
 1877              		@ args = 0, pretend = 0, frame = 0
 1878              		@ frame_needed = 0, uses_anonymous_args = 0
 1879              		.loc 1 741 1 is_stmt 0 view .LVU549
 1880 0000 10B5     		push	{r4, lr}
 1881              	.LCFI11:
 1882              		.cfi_def_cfa_offset 8
 1883              		.cfi_offset 4, -8
 1884              		.cfi_offset 14, -4
 742:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 743:Core/Src/main.c **** 
 744:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 745:Core/Src/main.c ****   if (htim->Instance == TIM6) {
 1885              		.loc 1 745 3 is_stmt 1 view .LVU550
 1886              		.loc 1 745 11 is_stmt 0 view .LVU551
 1887 0002 0268     		ldr	r2, [r0]
 1888              		.loc 1 745 6 view .LVU552
 1889 0004 034B     		ldr	r3, .L95
 1890 0006 9A42     		cmp	r2, r3
 1891 0008 00D0     		beq	.L94
 1892              	.LVL45:
 1893              	.L92:
 746:Core/Src/main.c ****     HAL_IncTick();
 747:Core/Src/main.c ****   }
 748:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 749:Core/Src/main.c **** 
 750:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 751:Core/Src/main.c **** }
 1894              		.loc 1 751 1 view .LVU553
 1895              		@ sp needed
 1896 000a 10BD     		pop	{r4, pc}
 1897              	.LVL46:
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 68


 1898              	.L94:
 746:Core/Src/main.c ****     HAL_IncTick();
 1899              		.loc 1 746 5 is_stmt 1 view .LVU554
 1900 000c FFF7FEFF 		bl	HAL_IncTick
 1901              	.LVL47:
 1902              		.loc 1 751 1 is_stmt 0 view .LVU555
 1903 0010 FBE7     		b	.L92
 1904              	.L96:
 1905 0012 C046     		.align	2
 1906              	.L95:
 1907 0014 00100040 		.word	1073745920
 1908              		.cfi_endproc
 1909              	.LFE63:
 1911              		.section	.text.Error_Handler,"ax",%progbits
 1912              		.align	1
 1913              		.global	Error_Handler
 1914              		.syntax unified
 1915              		.code	16
 1916              		.thumb_func
 1918              	Error_Handler:
 1919              	.LFB64:
 752:Core/Src/main.c **** 
 753:Core/Src/main.c **** /**
 754:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 755:Core/Src/main.c ****   * @retval None
 756:Core/Src/main.c ****   */
 757:Core/Src/main.c **** void Error_Handler(void)
 758:Core/Src/main.c **** {
 1920              		.loc 1 758 1 is_stmt 1 view -0
 1921              		.cfi_startproc
 1922              		@ Volatile: function does not return.
 1923              		@ args = 0, pretend = 0, frame = 0
 1924              		@ frame_needed = 0, uses_anonymous_args = 0
 1925              		@ link register save eliminated.
 759:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 760:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 761:Core/Src/main.c ****   __disable_irq();
 1926              		.loc 1 761 3 view .LVU557
 1927              	.LBB21:
 1928              	.LBI21:
 1929              		.file 4 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 69


  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 70


  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 71


 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1930              		.loc 4 140 27 view .LVU558
 1931              	.LBB22:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1932              		.loc 4 142 3 view .LVU559
 1933              		.syntax divided
 1934              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1935 0000 72B6     		cpsid i
 1936              	@ 0 "" 2
 1937              		.thumb
 1938              		.syntax unified
 1939              	.L98:
 1940              	.LBE22:
 1941              	.LBE21:
 762:Core/Src/main.c ****   while (1)
 1942              		.loc 1 762 3 view .LVU560
 763:Core/Src/main.c ****   {
 764:Core/Src/main.c ****   }
 1943              		.loc 1 764 3 view .LVU561
 762:Core/Src/main.c ****   while (1)
 1944              		.loc 1 762 9 view .LVU562
 1945 0002 FEE7     		b	.L98
 1946              		.cfi_endproc
 1947              	.LFE64:
 1949              		.section	.text.MX_I2C2_Init,"ax",%progbits
 1950              		.align	1
 1951              		.syntax unified
 1952              		.code	16
 1953              		.thumb_func
 1955              	MX_I2C2_Init:
 1956              	.LFB54:
 291:Core/Src/main.c **** 
 1957              		.loc 1 291 1 view -0
 1958              		.cfi_startproc
 1959              		@ args = 0, pretend = 0, frame = 0
 1960              		@ frame_needed = 0, uses_anonymous_args = 0
 1961 0000 10B5     		push	{r4, lr}
 1962              	.LCFI12:
 1963              		.cfi_def_cfa_offset 8
 1964              		.cfi_offset 4, -8
 1965              		.cfi_offset 14, -4
 300:Core/Src/main.c ****   hi2c2.Init.Timing = 0x20303E5D;
 1966              		.loc 1 300 3 view .LVU564
 300:Core/Src/main.c ****   hi2c2.Init.Timing = 0x20303E5D;
 1967              		.loc 1 300 18 is_stmt 0 view .LVU565
 1968 0002 1248     		ldr	r0, .L106
 1969 0004 124B     		ldr	r3, .L106+4
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 72


 1970 0006 0360     		str	r3, [r0]
 301:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 1971              		.loc 1 301 3 is_stmt 1 view .LVU566
 301:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 1972              		.loc 1 301 21 is_stmt 0 view .LVU567
 1973 0008 124B     		ldr	r3, .L106+8
 1974 000a 4360     		str	r3, [r0, #4]
 302:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1975              		.loc 1 302 3 is_stmt 1 view .LVU568
 302:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1976              		.loc 1 302 26 is_stmt 0 view .LVU569
 1977 000c 0023     		movs	r3, #0
 1978 000e 8360     		str	r3, [r0, #8]
 303:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1979              		.loc 1 303 3 is_stmt 1 view .LVU570
 303:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1980              		.loc 1 303 29 is_stmt 0 view .LVU571
 1981 0010 0122     		movs	r2, #1
 1982 0012 C260     		str	r2, [r0, #12]
 304:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 1983              		.loc 1 304 3 is_stmt 1 view .LVU572
 304:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 1984              		.loc 1 304 30 is_stmt 0 view .LVU573
 1985 0014 0361     		str	r3, [r0, #16]
 305:Core/Src/main.c ****   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 1986              		.loc 1 305 3 is_stmt 1 view .LVU574
 305:Core/Src/main.c ****   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 1987              		.loc 1 305 26 is_stmt 0 view .LVU575
 1988 0016 4361     		str	r3, [r0, #20]
 306:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1989              		.loc 1 306 3 is_stmt 1 view .LVU576
 306:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1990              		.loc 1 306 31 is_stmt 0 view .LVU577
 1991 0018 8361     		str	r3, [r0, #24]
 307:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1992              		.loc 1 307 3 is_stmt 1 view .LVU578
 307:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1993              		.loc 1 307 30 is_stmt 0 view .LVU579
 1994 001a C361     		str	r3, [r0, #28]
 308:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 1995              		.loc 1 308 3 is_stmt 1 view .LVU580
 308:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 1996              		.loc 1 308 28 is_stmt 0 view .LVU581
 1997 001c 0362     		str	r3, [r0, #32]
 309:Core/Src/main.c ****   {
 1998              		.loc 1 309 3 is_stmt 1 view .LVU582
 309:Core/Src/main.c ****   {
 1999              		.loc 1 309 7 is_stmt 0 view .LVU583
 2000 001e FFF7FEFF 		bl	HAL_I2C_Init
 2001              	.LVL48:
 309:Core/Src/main.c ****   {
 2002              		.loc 1 309 6 discriminator 1 view .LVU584
 2003 0022 0028     		cmp	r0, #0
 2004 0024 0CD1     		bne	.L103
 316:Core/Src/main.c ****   {
 2005              		.loc 1 316 3 is_stmt 1 view .LVU585
 316:Core/Src/main.c ****   {
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 73


 2006              		.loc 1 316 7 is_stmt 0 view .LVU586
 2007 0026 0948     		ldr	r0, .L106
 2008 0028 0021     		movs	r1, #0
 2009 002a FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 2010              	.LVL49:
 316:Core/Src/main.c ****   {
 2011              		.loc 1 316 6 discriminator 1 view .LVU587
 2012 002e 0028     		cmp	r0, #0
 2013 0030 08D1     		bne	.L104
 323:Core/Src/main.c ****   {
 2014              		.loc 1 323 3 is_stmt 1 view .LVU588
 323:Core/Src/main.c ****   {
 2015              		.loc 1 323 7 is_stmt 0 view .LVU589
 2016 0032 0648     		ldr	r0, .L106
 2017 0034 0021     		movs	r1, #0
 2018 0036 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 2019              	.LVL50:
 323:Core/Src/main.c ****   {
 2020              		.loc 1 323 6 discriminator 1 view .LVU590
 2021 003a 0028     		cmp	r0, #0
 2022 003c 04D1     		bne	.L105
 331:Core/Src/main.c **** 
 2023              		.loc 1 331 1 view .LVU591
 2024              		@ sp needed
 2025 003e 10BD     		pop	{r4, pc}
 2026              	.L103:
 311:Core/Src/main.c ****   }
 2027              		.loc 1 311 5 is_stmt 1 view .LVU592
 2028 0040 FFF7FEFF 		bl	Error_Handler
 2029              	.LVL51:
 2030              	.L104:
 318:Core/Src/main.c ****   }
 2031              		.loc 1 318 5 view .LVU593
 2032 0044 FFF7FEFF 		bl	Error_Handler
 2033              	.LVL52:
 2034              	.L105:
 325:Core/Src/main.c ****   }
 2035              		.loc 1 325 5 view .LVU594
 2036 0048 FFF7FEFF 		bl	Error_Handler
 2037              	.LVL53:
 2038              	.L107:
 2039              		.align	2
 2040              	.L106:
 2041 004c 00000000 		.word	hi2c2
 2042 0050 00580040 		.word	1073764352
 2043 0054 5D3E3020 		.word	540032605
 2044              		.cfi_endproc
 2045              	.LFE54:
 2047              		.section	.text.MX_SPI2_Init,"ax",%progbits
 2048              		.align	1
 2049              		.syntax unified
 2050              		.code	16
 2051              		.thumb_func
 2053              	MX_SPI2_Init:
 2054              	.LFB55:
 339:Core/Src/main.c **** 
 2055              		.loc 1 339 1 view -0
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 74


 2056              		.cfi_startproc
 2057              		@ args = 0, pretend = 0, frame = 0
 2058              		@ frame_needed = 0, uses_anonymous_args = 0
 2059 0000 10B5     		push	{r4, lr}
 2060              	.LCFI13:
 2061              		.cfi_def_cfa_offset 8
 2062              		.cfi_offset 4, -8
 2063              		.cfi_offset 14, -4
 349:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 2064              		.loc 1 349 3 view .LVU596
 349:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 2065              		.loc 1 349 18 is_stmt 0 view .LVU597
 2066 0002 1048     		ldr	r0, .L111
 2067 0004 104B     		ldr	r3, .L111+4
 2068 0006 0360     		str	r3, [r0]
 350:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 2069              		.loc 1 350 3 is_stmt 1 view .LVU598
 350:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 2070              		.loc 1 350 19 is_stmt 0 view .LVU599
 2071 0008 8223     		movs	r3, #130
 2072 000a 5B00     		lsls	r3, r3, #1
 2073 000c 4360     		str	r3, [r0, #4]
 351:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 2074              		.loc 1 351 3 is_stmt 1 view .LVU600
 351:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 2075              		.loc 1 351 24 is_stmt 0 view .LVU601
 2076 000e 0023     		movs	r3, #0
 2077 0010 8360     		str	r3, [r0, #8]
 352:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 2078              		.loc 1 352 3 is_stmt 1 view .LVU602
 352:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 2079              		.loc 1 352 23 is_stmt 0 view .LVU603
 2080 0012 C022     		movs	r2, #192
 2081 0014 9200     		lsls	r2, r2, #2
 2082 0016 C260     		str	r2, [r0, #12]
 353:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 2083              		.loc 1 353 3 is_stmt 1 view .LVU604
 353:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 2084              		.loc 1 353 26 is_stmt 0 view .LVU605
 2085 0018 0361     		str	r3, [r0, #16]
 354:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 2086              		.loc 1 354 3 is_stmt 1 view .LVU606
 354:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 2087              		.loc 1 354 23 is_stmt 0 view .LVU607
 2088 001a 4361     		str	r3, [r0, #20]
 355:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 2089              		.loc 1 355 3 is_stmt 1 view .LVU608
 355:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 2090              		.loc 1 355 18 is_stmt 0 view .LVU609
 2091 001c 013A     		subs	r2, r2, #1
 2092 001e FF3A     		subs	r2, r2, #255
 2093 0020 8261     		str	r2, [r0, #24]
 356:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 2094              		.loc 1 356 3 is_stmt 1 view .LVU610
 356:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 2095              		.loc 1 356 32 is_stmt 0 view .LVU611
 2096 0022 F93A     		subs	r2, r2, #249
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 75


 2097 0024 FF3A     		subs	r2, r2, #255
 2098 0026 C261     		str	r2, [r0, #28]
 357:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 2099              		.loc 1 357 3 is_stmt 1 view .LVU612
 357:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 2100              		.loc 1 357 23 is_stmt 0 view .LVU613
 2101 0028 0362     		str	r3, [r0, #32]
 358:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 2102              		.loc 1 358 3 is_stmt 1 view .LVU614
 358:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 2103              		.loc 1 358 21 is_stmt 0 view .LVU615
 2104 002a 4362     		str	r3, [r0, #36]
 359:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 7;
 2105              		.loc 1 359 3 is_stmt 1 view .LVU616
 359:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 7;
 2106              		.loc 1 359 29 is_stmt 0 view .LVU617
 2107 002c 8362     		str	r3, [r0, #40]
 360:Core/Src/main.c ****   hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 2108              		.loc 1 360 3 is_stmt 1 view .LVU618
 360:Core/Src/main.c ****   hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 2109              		.loc 1 360 28 is_stmt 0 view .LVU619
 2110 002e 0721     		movs	r1, #7
 2111 0030 C162     		str	r1, [r0, #44]
 361:Core/Src/main.c ****   hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 2112              		.loc 1 361 3 is_stmt 1 view .LVU620
 361:Core/Src/main.c ****   hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 2113              		.loc 1 361 24 is_stmt 0 view .LVU621
 2114 0032 0363     		str	r3, [r0, #48]
 362:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 2115              		.loc 1 362 3 is_stmt 1 view .LVU622
 362:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 2116              		.loc 1 362 23 is_stmt 0 view .LVU623
 2117 0034 4263     		str	r2, [r0, #52]
 363:Core/Src/main.c ****   {
 2118              		.loc 1 363 3 is_stmt 1 view .LVU624
 363:Core/Src/main.c ****   {
 2119              		.loc 1 363 7 is_stmt 0 view .LVU625
 2120 0036 FFF7FEFF 		bl	HAL_SPI_Init
 2121              	.LVL54:
 363:Core/Src/main.c ****   {
 2122              		.loc 1 363 6 discriminator 1 view .LVU626
 2123 003a 0028     		cmp	r0, #0
 2124 003c 00D1     		bne	.L110
 371:Core/Src/main.c **** 
 2125              		.loc 1 371 1 view .LVU627
 2126              		@ sp needed
 2127 003e 10BD     		pop	{r4, pc}
 2128              	.L110:
 365:Core/Src/main.c ****   }
 2129              		.loc 1 365 5 is_stmt 1 view .LVU628
 2130 0040 FFF7FEFF 		bl	Error_Handler
 2131              	.LVL55:
 2132              	.L112:
 2133              		.align	2
 2134              	.L111:
 2135 0044 00000000 		.word	hspi2
 2136 0048 00380040 		.word	1073756160
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 76


 2137              		.cfi_endproc
 2138              	.LFE55:
 2140              		.section	.text.MX_TSC_Init,"ax",%progbits
 2141              		.align	1
 2142              		.syntax unified
 2143              		.code	16
 2144              		.thumb_func
 2146              	MX_TSC_Init:
 2147              	.LFB56:
 379:Core/Src/main.c **** 
 2148              		.loc 1 379 1 view -0
 2149              		.cfi_startproc
 2150              		@ args = 0, pretend = 0, frame = 0
 2151              		@ frame_needed = 0, uses_anonymous_args = 0
 2152 0000 10B5     		push	{r4, lr}
 2153              	.LCFI14:
 2154              		.cfi_def_cfa_offset 8
 2155              		.cfi_offset 4, -8
 2156              		.cfi_offset 14, -4
 391:Core/Src/main.c ****   htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 2157              		.loc 1 391 3 view .LVU630
 391:Core/Src/main.c ****   htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 2158              		.loc 1 391 17 is_stmt 0 view .LVU631
 2159 0002 1348     		ldr	r0, .L116
 2160 0004 134B     		ldr	r3, .L116+4
 2161 0006 0360     		str	r3, [r0]
 392:Core/Src/main.c ****   htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 2162              		.loc 1 392 3 is_stmt 1 view .LVU632
 392:Core/Src/main.c ****   htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 2163              		.loc 1 392 31 is_stmt 0 view .LVU633
 2164 0008 8023     		movs	r3, #128
 2165 000a 5B05     		lsls	r3, r3, #21
 2166 000c 4360     		str	r3, [r0, #4]
 393:Core/Src/main.c ****   htsc.Init.SpreadSpectrum = DISABLE;
 2167              		.loc 1 393 3 is_stmt 1 view .LVU634
 393:Core/Src/main.c ****   htsc.Init.SpreadSpectrum = DISABLE;
 2168              		.loc 1 393 30 is_stmt 0 view .LVU635
 2169 000e 8023     		movs	r3, #128
 2170 0010 5B04     		lsls	r3, r3, #17
 2171 0012 8360     		str	r3, [r0, #8]
 394:Core/Src/main.c ****   htsc.Init.SpreadSpectrumDeviation = 1;
 2172              		.loc 1 394 3 is_stmt 1 view .LVU636
 394:Core/Src/main.c ****   htsc.Init.SpreadSpectrumDeviation = 1;
 2173              		.loc 1 394 28 is_stmt 0 view .LVU637
 2174 0014 0023     		movs	r3, #0
 2175 0016 0373     		strb	r3, [r0, #12]
 395:Core/Src/main.c ****   htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 2176              		.loc 1 395 3 is_stmt 1 view .LVU638
 395:Core/Src/main.c ****   htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 2177              		.loc 1 395 37 is_stmt 0 view .LVU639
 2178 0018 0122     		movs	r2, #1
 2179 001a 0261     		str	r2, [r0, #16]
 396:Core/Src/main.c ****   htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 2180              		.loc 1 396 3 is_stmt 1 view .LVU640
 396:Core/Src/main.c ****   htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 2181              		.loc 1 396 37 is_stmt 0 view .LVU641
 2182 001c 4361     		str	r3, [r0, #20]
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 77


 397:Core/Src/main.c ****   htsc.Init.MaxCountValue = TSC_MCV_8191;
 2183              		.loc 1 397 3 is_stmt 1 view .LVU642
 397:Core/Src/main.c ****   htsc.Init.MaxCountValue = TSC_MCV_8191;
 2184              		.loc 1 397 37 is_stmt 0 view .LVU643
 2185 001e 8022     		movs	r2, #128
 2186 0020 9201     		lsls	r2, r2, #6
 2187 0022 8261     		str	r2, [r0, #24]
 398:Core/Src/main.c ****   htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 2188              		.loc 1 398 3 is_stmt 1 view .LVU644
 398:Core/Src/main.c ****   htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 2189              		.loc 1 398 27 is_stmt 0 view .LVU645
 2190 0024 A022     		movs	r2, #160
 2191 0026 C261     		str	r2, [r0, #28]
 399:Core/Src/main.c ****   htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 2192              		.loc 1 399 3 is_stmt 1 view .LVU646
 399:Core/Src/main.c ****   htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 2193              		.loc 1 399 27 is_stmt 0 view .LVU647
 2194 0028 0362     		str	r3, [r0, #32]
 400:Core/Src/main.c ****   htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 2195              		.loc 1 400 3 is_stmt 1 view .LVU648
 400:Core/Src/main.c ****   htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 2196              		.loc 1 400 32 is_stmt 0 view .LVU649
 2197 002a 4362     		str	r3, [r0, #36]
 401:Core/Src/main.c ****   htsc.Init.MaxCountInterrupt = DISABLE;
 2198              		.loc 1 401 3 is_stmt 1 view .LVU650
 401:Core/Src/main.c ****   htsc.Init.MaxCountInterrupt = DISABLE;
 2199              		.loc 1 401 29 is_stmt 0 view .LVU651
 2200 002c 8362     		str	r3, [r0, #40]
 402:Core/Src/main.c ****   htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 2201              		.loc 1 402 3 is_stmt 1 view .LVU652
 402:Core/Src/main.c ****   htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 2202              		.loc 1 402 31 is_stmt 0 view .LVU653
 2203 002e 743A     		subs	r2, r2, #116
 2204 0030 8354     		strb	r3, [r0, r2]
 403:Core/Src/main.c ****   htsc.Init.ShieldIOs = 0;
 2205              		.loc 1 403 3 is_stmt 1 view .LVU654
 403:Core/Src/main.c ****   htsc.Init.ShieldIOs = 0;
 2206              		.loc 1 403 24 is_stmt 0 view .LVU655
 2207 0032 9122     		movs	r2, #145
 2208 0034 9200     		lsls	r2, r2, #2
 2209 0036 0263     		str	r2, [r0, #48]
 404:Core/Src/main.c ****   htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 2210              		.loc 1 404 3 is_stmt 1 view .LVU656
 404:Core/Src/main.c ****   htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 2211              		.loc 1 404 23 is_stmt 0 view .LVU657
 2212 0038 4363     		str	r3, [r0, #52]
 405:Core/Src/main.c ****   if (HAL_TSC_Init(&htsc) != HAL_OK)
 2213              		.loc 1 405 3 is_stmt 1 view .LVU658
 405:Core/Src/main.c ****   if (HAL_TSC_Init(&htsc) != HAL_OK)
 2214              		.loc 1 405 25 is_stmt 0 view .LVU659
 2215 003a 9123     		movs	r3, #145
 2216 003c DB00     		lsls	r3, r3, #3
 2217 003e 8363     		str	r3, [r0, #56]
 406:Core/Src/main.c ****   {
 2218              		.loc 1 406 3 is_stmt 1 view .LVU660
 406:Core/Src/main.c ****   {
 2219              		.loc 1 406 7 is_stmt 0 view .LVU661
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 78


 2220 0040 FFF7FEFF 		bl	HAL_TSC_Init
 2221              	.LVL56:
 406:Core/Src/main.c ****   {
 2222              		.loc 1 406 6 discriminator 1 view .LVU662
 2223 0044 0028     		cmp	r0, #0
 2224 0046 00D1     		bne	.L115
 414:Core/Src/main.c **** 
 2225              		.loc 1 414 1 view .LVU663
 2226              		@ sp needed
 2227 0048 10BD     		pop	{r4, pc}
 2228              	.L115:
 408:Core/Src/main.c ****   }
 2229              		.loc 1 408 5 is_stmt 1 view .LVU664
 2230 004a FFF7FEFF 		bl	Error_Handler
 2231              	.LVL57:
 2232              	.L117:
 2233 004e C046     		.align	2
 2234              	.L116:
 2235 0050 00000000 		.word	htsc
 2236 0054 00400240 		.word	1073889280
 2237              		.cfi_endproc
 2238              	.LFE56:
 2240              		.section	.text.MX_USB_PCD_Init,"ax",%progbits
 2241              		.align	1
 2242              		.syntax unified
 2243              		.code	16
 2244              		.thumb_func
 2246              	MX_USB_PCD_Init:
 2247              	.LFB57:
 422:Core/Src/main.c **** 
 2248              		.loc 1 422 1 view -0
 2249              		.cfi_startproc
 2250              		@ args = 0, pretend = 0, frame = 0
 2251              		@ frame_needed = 0, uses_anonymous_args = 0
 2252 0000 10B5     		push	{r4, lr}
 2253              	.LCFI15:
 2254              		.cfi_def_cfa_offset 8
 2255              		.cfi_offset 4, -8
 2256              		.cfi_offset 14, -4
 431:Core/Src/main.c ****   hpcd_USB_FS.Init.dev_endpoints = 8;
 2257              		.loc 1 431 3 view .LVU666
 431:Core/Src/main.c ****   hpcd_USB_FS.Init.dev_endpoints = 8;
 2258              		.loc 1 431 24 is_stmt 0 view .LVU667
 2259 0002 0948     		ldr	r0, .L121
 2260 0004 094B     		ldr	r3, .L121+4
 2261 0006 0360     		str	r3, [r0]
 432:Core/Src/main.c ****   hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 2262              		.loc 1 432 3 is_stmt 1 view .LVU668
 432:Core/Src/main.c ****   hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 2263              		.loc 1 432 34 is_stmt 0 view .LVU669
 2264 0008 0823     		movs	r3, #8
 2265 000a 4360     		str	r3, [r0, #4]
 433:Core/Src/main.c ****   hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 2266              		.loc 1 433 3 is_stmt 1 view .LVU670
 433:Core/Src/main.c ****   hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 2267              		.loc 1 433 26 is_stmt 0 view .LVU671
 2268 000c 063B     		subs	r3, r3, #6
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 79


 2269 000e 8360     		str	r3, [r0, #8]
 434:Core/Src/main.c ****   hpcd_USB_FS.Init.low_power_enable = DISABLE;
 2270              		.loc 1 434 3 is_stmt 1 view .LVU672
 434:Core/Src/main.c ****   hpcd_USB_FS.Init.low_power_enable = DISABLE;
 2271              		.loc 1 434 31 is_stmt 0 view .LVU673
 2272 0010 0361     		str	r3, [r0, #16]
 435:Core/Src/main.c ****   hpcd_USB_FS.Init.lpm_enable = DISABLE;
 2273              		.loc 1 435 3 is_stmt 1 view .LVU674
 435:Core/Src/main.c ****   hpcd_USB_FS.Init.lpm_enable = DISABLE;
 2274              		.loc 1 435 37 is_stmt 0 view .LVU675
 2275 0012 0023     		movs	r3, #0
 2276 0014 8361     		str	r3, [r0, #24]
 436:Core/Src/main.c ****   hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 2277              		.loc 1 436 3 is_stmt 1 view .LVU676
 436:Core/Src/main.c ****   hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 2278              		.loc 1 436 31 is_stmt 0 view .LVU677
 2279 0016 C361     		str	r3, [r0, #28]
 437:Core/Src/main.c ****   if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 2280              		.loc 1 437 3 is_stmt 1 view .LVU678
 437:Core/Src/main.c ****   if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 2281              		.loc 1 437 44 is_stmt 0 view .LVU679
 2282 0018 0362     		str	r3, [r0, #32]
 438:Core/Src/main.c ****   {
 2283              		.loc 1 438 3 is_stmt 1 view .LVU680
 438:Core/Src/main.c ****   {
 2284              		.loc 1 438 7 is_stmt 0 view .LVU681
 2285 001a FFF7FEFF 		bl	HAL_PCD_Init
 2286              	.LVL58:
 438:Core/Src/main.c ****   {
 2287              		.loc 1 438 6 discriminator 1 view .LVU682
 2288 001e 0028     		cmp	r0, #0
 2289 0020 00D1     		bne	.L120
 446:Core/Src/main.c **** 
 2290              		.loc 1 446 1 view .LVU683
 2291              		@ sp needed
 2292 0022 10BD     		pop	{r4, pc}
 2293              	.L120:
 440:Core/Src/main.c ****   }
 2294              		.loc 1 440 5 is_stmt 1 view .LVU684
 2295 0024 FFF7FEFF 		bl	Error_Handler
 2296              	.LVL59:
 2297              	.L122:
 2298              		.align	2
 2299              	.L121:
 2300 0028 00000000 		.word	hpcd_USB_FS
 2301 002c 005C0040 		.word	1073765376
 2302              		.cfi_endproc
 2303              	.LFE57:
 2305              		.section	.text.SystemClock_Config,"ax",%progbits
 2306              		.align	1
 2307              		.global	SystemClock_Config
 2308              		.syntax unified
 2309              		.code	16
 2310              		.thumb_func
 2312              	SystemClock_Config:
 2313              	.LFB53:
 243:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 80


 2314              		.loc 1 243 1 view -0
 2315              		.cfi_startproc
 2316              		@ args = 0, pretend = 0, frame = 96
 2317              		@ frame_needed = 0, uses_anonymous_args = 0
 2318 0000 00B5     		push	{lr}
 2319              	.LCFI16:
 2320              		.cfi_def_cfa_offset 4
 2321              		.cfi_offset 14, -4
 2322 0002 99B0     		sub	sp, sp, #100
 2323              	.LCFI17:
 2324              		.cfi_def_cfa_offset 104
 244:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2325              		.loc 1 244 3 view .LVU686
 244:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2326              		.loc 1 244 22 is_stmt 0 view .LVU687
 2327 0004 3422     		movs	r2, #52
 2328 0006 0021     		movs	r1, #0
 2329 0008 0BA8     		add	r0, sp, #44
 2330 000a FFF7FEFF 		bl	memset
 2331              	.LVL60:
 245:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 2332              		.loc 1 245 3 is_stmt 1 view .LVU688
 245:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 2333              		.loc 1 245 22 is_stmt 0 view .LVU689
 2334 000e 1022     		movs	r2, #16
 2335 0010 0021     		movs	r1, #0
 2336 0012 07A8     		add	r0, sp, #28
 2337 0014 FFF7FEFF 		bl	memset
 2338              	.LVL61:
 246:Core/Src/main.c **** 
 2339              		.loc 1 246 3 is_stmt 1 view .LVU690
 246:Core/Src/main.c **** 
 2340              		.loc 1 246 28 is_stmt 0 view .LVU691
 2341 0018 1C22     		movs	r2, #28
 2342 001a 0021     		movs	r1, #0
 2343 001c 6846     		mov	r0, sp
 2344 001e FFF7FEFF 		bl	memset
 2345              	.LVL62:
 251:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2346              		.loc 1 251 3 is_stmt 1 view .LVU692
 251:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2347              		.loc 1 251 36 is_stmt 0 view .LVU693
 2348 0022 2223     		movs	r3, #34
 2349 0024 0B93     		str	r3, [sp, #44]
 252:Core/Src/main.c ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 2350              		.loc 1 252 3 is_stmt 1 view .LVU694
 252:Core/Src/main.c ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 2351              		.loc 1 252 30 is_stmt 0 view .LVU695
 2352 0026 213B     		subs	r3, r3, #33
 2353 0028 0E93     		str	r3, [sp, #56]
 253:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 2354              		.loc 1 253 3 is_stmt 1 view .LVU696
 253:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 2355              		.loc 1 253 32 is_stmt 0 view .LVU697
 2356 002a 1393     		str	r3, [sp, #76]
 254:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2357              		.loc 1 254 3 is_stmt 1 view .LVU698
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 81


 254:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2358              		.loc 1 254 41 is_stmt 0 view .LVU699
 2359 002c 0F33     		adds	r3, r3, #15
 2360 002e 0F93     		str	r3, [sp, #60]
 255:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 2361              		.loc 1 255 3 is_stmt 1 view .LVU700
 255:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 2362              		.loc 1 255 34 is_stmt 0 view .LVU701
 2363 0030 0E3B     		subs	r3, r3, #14
 2364 0032 1493     		str	r3, [sp, #80]
 256:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 2365              		.loc 1 256 3 is_stmt 1 view .LVU702
 256:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 2366              		.loc 1 256 35 is_stmt 0 view .LVU703
 2367 0034 8023     		movs	r3, #128
 2368 0036 1B02     		lsls	r3, r3, #8
 2369 0038 1593     		str	r3, [sp, #84]
 257:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 2370              		.loc 1 257 3 is_stmt 1 view .LVU704
 257:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 2371              		.loc 1 257 32 is_stmt 0 view .LVU705
 2372 003a 8023     		movs	r3, #128
 2373 003c 5B03     		lsls	r3, r3, #13
 2374 003e 1693     		str	r3, [sp, #88]
 258:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2375              		.loc 1 258 3 is_stmt 1 view .LVU706
 259:Core/Src/main.c ****   {
 2376              		.loc 1 259 3 view .LVU707
 259:Core/Src/main.c ****   {
 2377              		.loc 1 259 7 is_stmt 0 view .LVU708
 2378 0040 0BA8     		add	r0, sp, #44
 2379 0042 FFF7FEFF 		bl	HAL_RCC_OscConfig
 2380              	.LVL63:
 259:Core/Src/main.c ****   {
 2381              		.loc 1 259 6 discriminator 1 view .LVU709
 2382 0046 0028     		cmp	r0, #0
 2383 0048 18D1     		bne	.L127
 266:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 2384              		.loc 1 266 3 is_stmt 1 view .LVU710
 266:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 2385              		.loc 1 266 31 is_stmt 0 view .LVU711
 2386 004a 0723     		movs	r3, #7
 2387 004c 0793     		str	r3, [sp, #28]
 268:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2388              		.loc 1 268 3 is_stmt 1 view .LVU712
 268:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2389              		.loc 1 268 34 is_stmt 0 view .LVU713
 2390 004e 053B     		subs	r3, r3, #5
 2391 0050 0893     		str	r3, [sp, #32]
 269:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 2392              		.loc 1 269 3 is_stmt 1 view .LVU714
 269:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 2393              		.loc 1 269 35 is_stmt 0 view .LVU715
 2394 0052 0023     		movs	r3, #0
 2395 0054 0993     		str	r3, [sp, #36]
 270:Core/Src/main.c **** 
 2396              		.loc 1 270 3 is_stmt 1 view .LVU716
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 82


 270:Core/Src/main.c **** 
 2397              		.loc 1 270 36 is_stmt 0 view .LVU717
 2398 0056 0A93     		str	r3, [sp, #40]
 272:Core/Src/main.c ****   {
 2399              		.loc 1 272 3 is_stmt 1 view .LVU718
 272:Core/Src/main.c ****   {
 2400              		.loc 1 272 7 is_stmt 0 view .LVU719
 2401 0058 0121     		movs	r1, #1
 2402 005a 07A8     		add	r0, sp, #28
 2403 005c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2404              	.LVL64:
 272:Core/Src/main.c ****   {
 2405              		.loc 1 272 6 discriminator 1 view .LVU720
 2406 0060 0028     		cmp	r0, #0
 2407 0062 0DD1     		bne	.L128
 276:Core/Src/main.c ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 2408              		.loc 1 276 3 is_stmt 1 view .LVU721
 276:Core/Src/main.c ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 2409              		.loc 1 276 38 is_stmt 0 view .LVU722
 2410 0064 8023     		movs	r3, #128
 2411 0066 9B02     		lsls	r3, r3, #10
 2412 0068 0093     		str	r3, [sp]
 277:Core/Src/main.c **** 
 2413              		.loc 1 277 3 is_stmt 1 view .LVU723
 277:Core/Src/main.c **** 
 2414              		.loc 1 277 35 is_stmt 0 view .LVU724
 2415 006a 0023     		movs	r3, #0
 2416 006c 0693     		str	r3, [sp, #24]
 279:Core/Src/main.c ****   {
 2417              		.loc 1 279 3 is_stmt 1 view .LVU725
 279:Core/Src/main.c ****   {
 2418              		.loc 1 279 7 is_stmt 0 view .LVU726
 2419 006e 6846     		mov	r0, sp
 2420 0070 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 2421              	.LVL65:
 279:Core/Src/main.c ****   {
 2422              		.loc 1 279 6 discriminator 1 view .LVU727
 2423 0074 0028     		cmp	r0, #0
 2424 0076 05D1     		bne	.L129
 283:Core/Src/main.c **** 
 2425              		.loc 1 283 1 view .LVU728
 2426 0078 19B0     		add	sp, sp, #100
 2427              		@ sp needed
 2428 007a 00BD     		pop	{pc}
 2429              	.L127:
 261:Core/Src/main.c ****   }
 2430              		.loc 1 261 5 is_stmt 1 view .LVU729
 2431 007c FFF7FEFF 		bl	Error_Handler
 2432              	.LVL66:
 2433              	.L128:
 274:Core/Src/main.c ****   }
 2434              		.loc 1 274 5 view .LVU730
 2435 0080 FFF7FEFF 		bl	Error_Handler
 2436              	.LVL67:
 2437              	.L129:
 281:Core/Src/main.c ****   }
 2438              		.loc 1 281 5 view .LVU731
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 83


 2439 0084 FFF7FEFF 		bl	Error_Handler
 2440              	.LVL68:
 2441              		.cfi_endproc
 2442              	.LFE53:
 2444              		.section	.text.main,"ax",%progbits
 2445              		.align	1
 2446              		.global	main
 2447              		.syntax unified
 2448              		.code	16
 2449              		.thumb_func
 2451              	main:
 2452              	.LFB50:
 112:Core/Src/main.c ****   debouncer = 0;
 2453              		.loc 1 112 1 view -0
 2454              		.cfi_startproc
 2455              		@ Volatile: function does not return.
 2456              		@ args = 0, pretend = 0, frame = 8
 2457              		@ frame_needed = 0, uses_anonymous_args = 0
 2458 0000 00B5     		push	{lr}
 2459              	.LCFI18:
 2460              		.cfi_def_cfa_offset 4
 2461              		.cfi_offset 14, -4
 2462 0002 83B0     		sub	sp, sp, #12
 2463              	.LCFI19:
 2464              		.cfi_def_cfa_offset 16
 113:Core/Src/main.c ****   volatile uint32_t encoder_count = 0;
 2465              		.loc 1 113 3 view .LVU733
 113:Core/Src/main.c ****   volatile uint32_t encoder_count = 0;
 2466              		.loc 1 113 13 is_stmt 0 view .LVU734
 2467 0004 1C4B     		ldr	r3, .L132
 2468 0006 0022     		movs	r2, #0
 2469 0008 1A60     		str	r2, [r3]
 114:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 2470              		.loc 1 114 3 is_stmt 1 view .LVU735
 114:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 2471              		.loc 1 114 21 is_stmt 0 view .LVU736
 2472 000a 0192     		str	r2, [sp, #4]
 119:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 2473              		.loc 1 119 3 is_stmt 1 view .LVU737
 2474 000c FFF7FEFF 		bl	button_init
 2475              	.LVL69:
 123:Core/Src/main.c **** 
 2476              		.loc 1 123 3 view .LVU738
 2477 0010 FFF7FEFF 		bl	HAL_Init
 2478              	.LVL70:
 130:Core/Src/main.c **** 
 2479              		.loc 1 130 3 view .LVU739
 2480 0014 FFF7FEFF 		bl	SystemClock_Config
 2481              	.LVL71:
 137:Core/Src/main.c ****   MX_I2C2_Init();
 2482              		.loc 1 137 3 view .LVU740
 2483 0018 FFF7FEFF 		bl	MX_GPIO_Init
 2484              	.LVL72:
 138:Core/Src/main.c ****   MX_SPI2_Init();
 2485              		.loc 1 138 3 view .LVU741
 2486 001c FFF7FEFF 		bl	MX_I2C2_Init
 2487              	.LVL73:
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 84


 139:Core/Src/main.c ****   MX_TSC_Init();
 2488              		.loc 1 139 3 view .LVU742
 2489 0020 FFF7FEFF 		bl	MX_SPI2_Init
 2490              	.LVL74:
 140:Core/Src/main.c ****   MX_USB_PCD_Init();
 2491              		.loc 1 140 3 view .LVU743
 2492 0024 FFF7FEFF 		bl	MX_TSC_Init
 2493              	.LVL75:
 141:Core/Src/main.c **** 
 2494              		.loc 1 141 3 view .LVU744
 2495 0028 FFF7FEFF 		bl	MX_USB_PCD_Init
 2496              	.LVL76:
 143:Core/Src/main.c ****   initLEDs();
 2497              		.loc 1 143 3 view .LVU745
 2498 002c FFF7FEFF 		bl	initUsart3
 2499              	.LVL77:
 144:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 2500              		.loc 1 144 3 view .LVU746
 2501 0030 FFF7FEFF 		bl	initLEDs
 2502              	.LVL78:
 150:Core/Src/main.c **** 
 2503              		.loc 1 150 3 view .LVU747
 2504 0034 FFF7FEFF 		bl	osKernelInitialize
 2505              	.LVL79:
 171:Core/Src/main.c ****   /* creation of LEDTask */
 2506              		.loc 1 171 3 view .LVU748
 171:Core/Src/main.c ****   /* creation of LEDTask */
 2507              		.loc 1 171 22 is_stmt 0 view .LVU749
 2508 0038 104A     		ldr	r2, .L132+4
 2509 003a 1148     		ldr	r0, .L132+8
 2510 003c 0021     		movs	r1, #0
 2511 003e FFF7FEFF 		bl	osThreadNew
 2512              	.LVL80:
 171:Core/Src/main.c ****   /* creation of LEDTask */
 2513              		.loc 1 171 20 discriminator 1 view .LVU750
 2514 0042 104B     		ldr	r3, .L132+12
 2515 0044 1860     		str	r0, [r3]
 173:Core/Src/main.c ****   /* creation of UARTTask */
 2516              		.loc 1 173 3 is_stmt 1 view .LVU751
 173:Core/Src/main.c ****   /* creation of UARTTask */
 2517              		.loc 1 173 19 is_stmt 0 view .LVU752
 2518 0046 104A     		ldr	r2, .L132+16
 2519 0048 1048     		ldr	r0, .L132+20
 2520 004a 0021     		movs	r1, #0
 2521 004c FFF7FEFF 		bl	osThreadNew
 2522              	.LVL81:
 173:Core/Src/main.c ****   /* creation of UARTTask */
 2523              		.loc 1 173 17 discriminator 1 view .LVU753
 2524 0050 0F4B     		ldr	r3, .L132+24
 2525 0052 1860     		str	r0, [r3]
 175:Core/Src/main.c **** 
 2526              		.loc 1 175 3 is_stmt 1 view .LVU754
 175:Core/Src/main.c **** 
 2527              		.loc 1 175 20 is_stmt 0 view .LVU755
 2528 0054 0F4A     		ldr	r2, .L132+28
 2529 0056 1048     		ldr	r0, .L132+32
 2530 0058 0021     		movs	r1, #0
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 85


 2531 005a FFF7FEFF 		bl	osThreadNew
 2532              	.LVL82:
 175:Core/Src/main.c **** 
 2533              		.loc 1 175 18 discriminator 1 view .LVU756
 2534 005e 0F4B     		ldr	r3, .L132+36
 2535 0060 1860     		str	r0, [r3]
 186:Core/Src/main.c **** 
 2536              		.loc 1 186 3 is_stmt 1 view .LVU757
 2537 0062 FFF7FEFF 		bl	osKernelStart
 2538              	.LVL83:
 2539              	.L131:
 191:Core/Src/main.c ****   {
 2540              		.loc 1 191 3 view .LVU758
 194:Core/Src/main.c ****     HAL_Delay(128);                      // Delay 1/8 second
 2541              		.loc 1 194 5 view .LVU759
 194:Core/Src/main.c ****     HAL_Delay(128);                      // Delay 1/8 second
 2542              		.loc 1 194 25 is_stmt 0 view .LVU760
 2543 0066 8023     		movs	r3, #128
 2544 0068 DB05     		lsls	r3, r3, #23
 2545 006a 5B6A     		ldr	r3, [r3, #36]
 194:Core/Src/main.c ****     HAL_Delay(128);                      // Delay 1/8 second
 2546              		.loc 1 194 19 view .LVU761
 2547 006c 0193     		str	r3, [sp, #4]
 195:Core/Src/main.c ****   }
 2548              		.loc 1 195 5 is_stmt 1 discriminator 1 view .LVU762
 2549 006e 8020     		movs	r0, #128
 2550 0070 FFF7FEFF 		bl	HAL_Delay
 2551              	.LVL84:
 191:Core/Src/main.c ****   {
 2552              		.loc 1 191 9 view .LVU763
 2553 0074 F7E7     		b	.L131
 2554              	.L133:
 2555 0076 C046     		.align	2
 2556              	.L132:
 2557 0078 00000000 		.word	debouncer
 2558 007c 00000000 		.word	routerTask_attributes
 2559 0080 00000000 		.word	StartRouterTask
 2560 0084 00000000 		.word	routerTaskHandle
 2561 0088 00000000 		.word	LEDTask_attributes
 2562 008c 00000000 		.word	StartLEDTask
 2563 0090 00000000 		.word	LEDTaskHandle
 2564 0094 00000000 		.word	UARTTask_attributes
 2565 0098 00000000 		.word	StartParseUartTask
 2566 009c 00000000 		.word	UARTTaskHandle
 2567              		.cfi_endproc
 2568              	.LFE50:
 2570              		.global	LEDTask_attributes
 2571              		.section	.rodata.str1.4,"aMS",%progbits,1
 2572              		.align	2
 2573              	.LC34:
 2574 0000 4C454454 		.ascii	"LEDTask\000"
 2574      61736B00 
 2575              		.section	.rodata.LEDTask_attributes,"a"
 2576              		.align	2
 2579              	LEDTask_attributes:
 2580 0000 00000000 		.word	.LC34
 2581 0004 00000000 		.space	16
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 86


 2581      00000000 
 2581      00000000 
 2581      00000000 
 2582 0014 00020000 		.word	512
 2583 0018 18000000 		.word	24
 2584 001c 00000000 		.space	8
 2584      00000000 
 2585              		.global	LEDTaskHandle
 2586              		.section	.bss.LEDTaskHandle,"aw",%nobits
 2587              		.align	2
 2590              	LEDTaskHandle:
 2591 0000 00000000 		.space	4
 2592              		.global	routerTask_attributes
 2593              		.section	.rodata.str1.4
 2594              		.align	2
 2595              	.LC35:
 2596 0008 726F7574 		.ascii	"routerTask\000"
 2596      65725461 
 2596      736B00
 2597              		.section	.rodata.routerTask_attributes,"a"
 2598              		.align	2
 2601              	routerTask_attributes:
 2602 0000 08000000 		.word	.LC35
 2603 0004 00000000 		.space	16
 2603      00000000 
 2603      00000000 
 2603      00000000 
 2604 0014 00020000 		.word	512
 2605 0018 18000000 		.word	24
 2606 001c 00000000 		.space	8
 2606      00000000 
 2607              		.global	routerTaskHandle
 2608              		.section	.bss.routerTaskHandle,"aw",%nobits
 2609              		.align	2
 2612              	routerTaskHandle:
 2613 0000 00000000 		.space	4
 2614              		.global	hpcd_USB_FS
 2615              		.section	.bss.hpcd_USB_FS,"aw",%nobits
 2616              		.align	2
 2619              	hpcd_USB_FS:
 2620 0000 00000000 		.space	756
 2620      00000000 
 2620      00000000 
 2620      00000000 
 2620      00000000 
 2621              		.global	target_rpm
 2622              		.section	.bss.target_rpm,"aw",%nobits
 2623              		.align	1
 2626              	target_rpm:
 2627 0000 0000     		.space	2
 2628              		.global	debouncer
 2629              		.section	.bss.debouncer,"aw",%nobits
 2630              		.align	2
 2633              	debouncer:
 2634 0000 00000000 		.space	4
 2635              		.global	htsc
 2636              		.section	.bss.htsc,"aw",%nobits
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 87


 2637              		.align	2
 2640              	htsc:
 2641 0000 00000000 		.space	68
 2641      00000000 
 2641      00000000 
 2641      00000000 
 2641      00000000 
 2642              		.global	hspi2
 2643              		.section	.bss.hspi2,"aw",%nobits
 2644              		.align	2
 2647              	hspi2:
 2648 0000 00000000 		.space	100
 2648      00000000 
 2648      00000000 
 2648      00000000 
 2648      00000000 
 2649              		.global	hi2c2
 2650              		.section	.bss.hi2c2,"aw",%nobits
 2651              		.align	2
 2654              	hi2c2:
 2655 0000 00000000 		.space	84
 2655      00000000 
 2655      00000000 
 2655      00000000 
 2655      00000000 
 2656              		.global	binarySem04MotorWorkerHandle
 2657              		.section	.bss.binarySem04MotorWorkerHandle,"aw",%nobits
 2658              		.align	2
 2661              	binarySem04MotorWorkerHandle:
 2662 0000 00000000 		.space	4
 2663              		.global	binarySem03LEDWorkerHandle
 2664              		.section	.bss.binarySem03LEDWorkerHandle,"aw",%nobits
 2665              		.align	2
 2668              	binarySem03LEDWorkerHandle:
 2669 0000 00000000 		.space	4
 2670              		.global	commandMotor
 2671              		.section	.bss.commandMotor,"aw",%nobits
 2672              		.align	1
 2675              	commandMotor:
 2676 0000 0000     		.space	2
 2677              		.global	commandLED
 2678              		.section	.bss.commandLED,"aw",%nobits
 2679              		.align	1
 2682              	commandLED:
 2683 0000 0000     		.space	2
 2684              		.global	Ki
 2685              		.section	.data.Ki,"aw"
 2688              	Ki:
 2689 0000 01       		.byte	1
 2690              		.global	Kp
 2691              		.section	.data.Kp,"aw"
 2694              	Kp:
 2695 0000 01       		.byte	1
 2696              		.global	error
 2697              		.section	.bss.error,"aw",%nobits
 2698              		.align	1
 2701              	error:
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 88


 2702 0000 0000     		.space	2
 2703              		.global	adc_value
 2704              		.section	.bss.adc_value,"aw",%nobits
 2707              	adc_value:
 2708 0000 00       		.space	1
 2709              		.global	motor_speed
 2710              		.section	.bss.motor_speed,"aw",%nobits
 2711              		.align	1
 2714              	motor_speed:
 2715 0000 0000     		.space	2
 2716              		.global	duty_cycle
 2717              		.section	.bss.duty_cycle,"aw",%nobits
 2720              	duty_cycle:
 2721 0000 00       		.space	1
 2722              		.global	error_integral
 2723              		.section	.bss.error_integral,"aw",%nobits
 2724              		.align	1
 2727              	error_integral:
 2728 0000 0000     		.space	2
 2729              		.section	.rodata
 2730              		.align	2
 2731              		.set	.LANCHOR0,. + 0
 2732              	.LC0:
 2733 0000 40000000 		.word	64
 2734 0004 00020000 		.word	512
 2735 0008 80000000 		.word	128
 2736 000c 00010000 		.word	256
 2737 0010 C0030000 		.word	960
 2738              		.text
 2739              	.Letext0:
 2740              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 2741              		.file 6 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 2742              		.file 7 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 2743              		.file 8 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 2744              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2745              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 2746              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 2747              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 2748              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 2749              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c.h"
 2750              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usb.h"
 2751              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_pcd.h"
 2752              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_spi.h"
 2753              		.file 18 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 2754              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tsc.h"
 2755              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 2756              		.file 21 "Core/Inc/cmdQueue.h"
 2757              		.file 22 "Core/Inc/uartParser.h"
 2758              		.file 23 "Core/Inc/main.h"
 2759              		.file 24 "Core/Inc/motor.h"
 2760              		.file 25 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c_ex.h"
 2761              		.file 26 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 2762              		.file 27 "<built-in>"
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 89


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:19     .text.MX_GPIO_Init:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:166    .text.MX_GPIO_Init:00000090 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:173    .text.StartRouterTask:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:179    .text.StartRouterTask:00000000 StartRouterTask
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:243    .text.StartRouterTask:00000040 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2682   .bss.commandLED:00000000 commandLED
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2675   .bss.commandMotor:00000000 commandMotor
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:250    .text.StartLEDTask:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:256    .text.StartLEDTask:00000000 StartLEDTask
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:704    .text.StartLEDTask:000001f0 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2668   .bss.binarySem03LEDWorkerHandle:00000000 binarySem03LEDWorkerHandle
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:713    .text.pwm_init:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:719    .text.pwm_init:00000000 pwm_init
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:845    .text.pwm_init:00000084 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:855    .text.pwm_setDutyCycle:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:861    .text.pwm_setDutyCycle:00000000 pwm_setDutyCycle
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:898    .text.pwm_setDutyCycle:00000018 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:903    .text.encoder_init:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:909    .text.encoder_init:00000000 encoder_init
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1078   .text.encoder_init:00000098 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1092   .text.ADC_init:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1098   .text.ADC_init:00000000 ADC_init
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1194   .text.ADC_init:00000064 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1200   .text.motor_init:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1206   .text.motor_init:00000000 motor_init
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1233   .text.PI_update:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1239   .text.PI_update:00000000 PI_update
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1387   .text.PI_update:000000a8 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2626   .bss.target_rpm:00000000 target_rpm
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2714   .bss.motor_speed:00000000 motor_speed
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2701   .bss.error:00000000 error
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2688   .data.Ki:00000000 Ki
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2727   .bss.error_integral:00000000 error_integral
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2694   .data.Kp:00000000 Kp
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2720   .bss.duty_cycle:00000000 duty_cycle
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2707   .bss.adc_value:00000000 adc_value
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1400   .text.TIM7_IRQHandler:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1406   .text.TIM7_IRQHandler:00000000 TIM7_IRQHandler
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1450   .text.TIM7_IRQHandler:00000028 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1459   .text.button_init:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1465   .text.button_init:00000000 button_init
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1510   .text.button_init:0000002c $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1516   .text.HAL_SYSTICK_Callback:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1522   .text.HAL_SYSTICK_Callback:00000000 HAL_SYSTICK_Callback
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1609   .text.HAL_SYSTICK_Callback:00000058 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2633   .bss.debouncer:00000000 debouncer
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1616   .text.initLEDs:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1622   .text.initLEDs:00000000 initLEDs
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1775   .text.initLEDs:000000a8 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1793   .text.StartMotorTask:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1799   .text.StartMotorTask:00000000 StartMotorTask
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1859   .text.StartMotorTask:00000030 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1866   .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1872   .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 90


/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1907   .text.HAL_TIM_PeriodElapsedCallback:00000014 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1912   .text.Error_Handler:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1918   .text.Error_Handler:00000000 Error_Handler
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1950   .text.MX_I2C2_Init:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:1955   .text.MX_I2C2_Init:00000000 MX_I2C2_Init
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2041   .text.MX_I2C2_Init:0000004c $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2654   .bss.hi2c2:00000000 hi2c2
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2048   .text.MX_SPI2_Init:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2053   .text.MX_SPI2_Init:00000000 MX_SPI2_Init
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2135   .text.MX_SPI2_Init:00000044 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2647   .bss.hspi2:00000000 hspi2
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2141   .text.MX_TSC_Init:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2146   .text.MX_TSC_Init:00000000 MX_TSC_Init
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2235   .text.MX_TSC_Init:00000050 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2640   .bss.htsc:00000000 htsc
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2241   .text.MX_USB_PCD_Init:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2246   .text.MX_USB_PCD_Init:00000000 MX_USB_PCD_Init
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2300   .text.MX_USB_PCD_Init:00000028 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2619   .bss.hpcd_USB_FS:00000000 hpcd_USB_FS
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2306   .text.SystemClock_Config:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2312   .text.SystemClock_Config:00000000 SystemClock_Config
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2445   .text.main:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2451   .text.main:00000000 main
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2557   .text.main:00000078 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2601   .rodata.routerTask_attributes:00000000 routerTask_attributes
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2612   .bss.routerTaskHandle:00000000 routerTaskHandle
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2579   .rodata.LEDTask_attributes:00000000 LEDTask_attributes
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2590   .bss.LEDTaskHandle:00000000 LEDTaskHandle
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2572   .rodata.str1.4:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2576   .rodata.LEDTask_attributes:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2587   .bss.LEDTaskHandle:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2598   .rodata.routerTask_attributes:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2609   .bss.routerTaskHandle:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2616   .bss.hpcd_USB_FS:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2623   .bss.target_rpm:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2630   .bss.debouncer:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2637   .bss.htsc:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2644   .bss.hspi2:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2651   .bss.hi2c2:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2661   .bss.binarySem04MotorWorkerHandle:00000000 binarySem04MotorWorkerHandle
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2658   .bss.binarySem04MotorWorkerHandle:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2665   .bss.binarySem03LEDWorkerHandle:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2672   .bss.commandMotor:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2679   .bss.commandLED:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2698   .bss.error:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2708   .bss.adc_value:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2711   .bss.motor_speed:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2721   .bss.duty_cycle:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2724   .bss.error_integral:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s:2730   .rodata:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
isQueueEmpty
osDelay
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccpj6yul.s 			page 91


queuePop
cmdQueue
osSemaphoreNew
xTaskGetTickCount
osSemaphoreRelease
osSemaphoreAcquire
__aeabi_uidiv
HAL_IncTick
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_SPI_Init
HAL_TSC_Init
HAL_PCD_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
initUsart3
osKernelInitialize
osThreadNew
osKernelStart
HAL_Delay
UARTTask_attributes
StartParseUartTask
UARTTaskHandle
