ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB52:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "cmsis_os.h"
  22:Core/Src/main.c **** #include "stm32f072xb.h"
  23:Core/Src/main.c **** #include "motor.h"
  24:Core/Src/main.c **** #include "motor.c"
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** //Global variables
  27:Core/Src/main.c **** volatile uint16_t commandLED = 0;
  28:Core/Src/main.c **** volatile uint16_t commandMotor = 0;
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** //Semaphores
  31:Core/Src/main.c **** osSemaphoreId_t binarySem03LEDWorkerHandle;
  32:Core/Src/main.c **** osSemaphoreId_t binarySem04MotorWorkerHandle;
  33:Core/Src/main.c **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 2


  34:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* USER CODE END Includes */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* USER CODE END PTD */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  45:Core/Src/main.c **** /* USER CODE BEGIN PD */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* USER CODE END PD */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  50:Core/Src/main.c **** /* USER CODE BEGIN PM */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE END PM */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  55:Core/Src/main.c **** I2C_HandleTypeDef hi2c2;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** SPI_HandleTypeDef hspi2;
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** TSC_HandleTypeDef htsc;
  60:Core/Src/main.c **** /* For motor */
  61:Core/Src/main.c **** volatile uint32_t debouncer; 
  62:Core/Src/main.c **** // The speed we are setting the motor to (3rd and 4th digits)
  63:Core/Src/main.c **** volatile int16_t target_rpm = 0;
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** PCD_HandleTypeDef hpcd_USB_FS;
  66:Core/Src/main.c **** /* Definitions for task router */
  67:Core/Src/main.c **** osThreadId_t routerTaskHandle;
  68:Core/Src/main.c **** const osThreadAttr_t routerTask_attributes = {
  69:Core/Src/main.c ****   .name = "routerTask",
  70:Core/Src/main.c ****   .stack_size = 128 * 4,
  71:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
  72:Core/Src/main.c **** };
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /* Definitions for LED worker task */
  75:Core/Src/main.c **** osThreadId_t LEDTaskHandle;
  76:Core/Src/main.c **** const osThreadAttr_t LEDTask_attributes = {
  77:Core/Src/main.c ****   .name = "LEDTask",
  78:Core/Src/main.c ****   .stack_size = 128 * 4,
  79:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
  80:Core/Src/main.c **** };
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** /* Definitions for Motor worker task */
  83:Core/Src/main.c **** osThreadId_t motorTaskHandle;
  84:Core/Src/main.c **** const osThreadAttr_t motorTask_attributes = {
  85:Core/Src/main.c ****   .name = "motorTask",
  86:Core/Src/main.c ****   .stack_size = 128 * 4,
  87:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
  88:Core/Src/main.c **** };
  89:Core/Src/main.c **** 
  90:Core/Src/main.c **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 3


  91:Core/Src/main.c **** /* USER CODE BEGIN PV */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c **** /* USER CODE END PV */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  96:Core/Src/main.c **** void SystemClock_Config(void);
  97:Core/Src/main.c **** static void MX_GPIO_Init(void);
  98:Core/Src/main.c **** static void MX_I2C2_Init(void);
  99:Core/Src/main.c **** static void MX_SPI2_Init(void);
 100:Core/Src/main.c **** static void MX_TSC_Init(void);
 101:Core/Src/main.c **** static void MX_USB_PCD_Init(void);
 102:Core/Src/main.c **** void StartRouterTask(void *argument);
 103:Core/Src/main.c **** void StartMotorTask(void *argument);
 104:Core/Src/main.c **** void StartLEDTask(void *argument);
 105:Core/Src/main.c **** void initLEDs(void);
 106:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c **** /* USER CODE END PFP */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 111:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 112:Core/Src/main.c **** 
 113:Core/Src/main.c **** /* USER CODE END 0 */
 114:Core/Src/main.c **** 
 115:Core/Src/main.c **** /**
 116:Core/Src/main.c ****   * @brief  The application entry point.
 117:Core/Src/main.c ****   * @retval int
 118:Core/Src/main.c ****   */
 119:Core/Src/main.c **** int main(void)
 120:Core/Src/main.c **** {
 121:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 122:Core/Src/main.c ****   HAL_Init();
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   /* Configure the system clock */
 125:Core/Src/main.c ****   SystemClock_Config();
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****   /* Initialize all configured peripherals */
 128:Core/Src/main.c ****   MX_GPIO_Init();
 129:Core/Src/main.c ****   initUsart3();
 130:Core/Src/main.c ****   initLEDs();
 131:Core/Src/main.c ****   motor_init();
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****   /* Init scheduler */
 134:Core/Src/main.c ****   osKernelInitialize();
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 137:Core/Src/main.c ****   /* add mutexes, ... */
 138:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 141:Core/Src/main.c ****   /* add semaphores, ... */
 142:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 143:Core/Src/main.c **** 
 144:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 145:Core/Src/main.c ****   /* add queues, ... */
 146:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 147:Core/Src/main.c **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 4


 148:Core/Src/main.c ****   /* Create the thread(s) */
 149:Core/Src/main.c ****   // comment thread temprariely.
 150:Core/Src/main.c ****   /* creation of routerTask */
 151:Core/Src/main.c ****   routerTaskHandle = osThreadNew(StartRouterTask, NULL, &routerTask_attributes);
 152:Core/Src/main.c ****   /* creation of LEDTask */
 153:Core/Src/main.c ****   LEDTaskHandle = osThreadNew(StartLEDTask, NULL, &LEDTask_attributes);
 154:Core/Src/main.c ****   /* creation of motorTask */
 155:Core/Src/main.c ****   motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 156:Core/Src/main.c ****   /* creation of UARTTask */
 157:Core/Src/main.c ****   UARTTaskHandle = osThreadNew(StartParseUartTask, NULL, &UARTTask_attributes);
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 160:Core/Src/main.c ****   /* add threads, ... */
 161:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_EVENTS */
 164:Core/Src/main.c ****   /* add events, ... */
 165:Core/Src/main.c ****   /* USER CODE END RTOS_EVENTS */
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****   /* Start scheduler */
 168:Core/Src/main.c ****   osKernelStart();
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 171:Core/Src/main.c **** 
 172:Core/Src/main.c ****   /* Infinite loop */
 173:Core/Src/main.c ****   while (1)
 174:Core/Src/main.c ****   {
 175:Core/Src/main.c ****   }
 176:Core/Src/main.c **** }
 177:Core/Src/main.c **** 
 178:Core/Src/main.c **** /**
 179:Core/Src/main.c ****   * @brief System Clock Configuration
 180:Core/Src/main.c ****   * @retval None
 181:Core/Src/main.c ****   */
 182:Core/Src/main.c **** void SystemClock_Config(void)
 183:Core/Src/main.c **** {
 184:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 185:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 186:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 189:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 190:Core/Src/main.c ****   */
 191:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 192:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 193:Core/Src/main.c ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 194:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 195:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 196:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 197:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 198:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 199:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 200:Core/Src/main.c ****   {
 201:Core/Src/main.c ****     Error_Handler();
 202:Core/Src/main.c ****   }
 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 5


 205:Core/Src/main.c ****   */
 206:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 207:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 208:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 209:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 210:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 213:Core/Src/main.c ****   {
 214:Core/Src/main.c ****     Error_Handler();
 215:Core/Src/main.c ****   }
 216:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 217:Core/Src/main.c ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 220:Core/Src/main.c ****   {
 221:Core/Src/main.c ****     Error_Handler();
 222:Core/Src/main.c ****   }
 223:Core/Src/main.c **** }
 224:Core/Src/main.c **** 
 225:Core/Src/main.c **** /**
 226:Core/Src/main.c ****   * @brief GPIO Initialization Function
 227:Core/Src/main.c ****   * @param None
 228:Core/Src/main.c ****   * @retval None
 229:Core/Src/main.c ****   */
 230:Core/Src/main.c **** static void MX_GPIO_Init(void)
 231:Core/Src/main.c **** {
  26              		.loc 1 231 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 20
  33              		.cfi_offset 4, -20
  34              		.cfi_offset 5, -16
  35              		.cfi_offset 6, -12
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 89B0     		sub	sp, sp, #36
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 232:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 232 3 view .LVU1
  42              		.loc 1 232 20 is_stmt 0 view .LVU2
  43 0004 1422     		movs	r2, #20
  44 0006 0021     		movs	r1, #0
  45 0008 03A8     		add	r0, sp, #12
  46 000a FFF7FEFF 		bl	memset
  47              	.LVL0:
 233:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 234:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 237:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 237 3 is_stmt 1 view .LVU3
  49              	.LBB9:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 6


  50              		.loc 1 237 3 view .LVU4
  51              		.loc 1 237 3 view .LVU5
  52 000e 204B     		ldr	r3, .L2
  53 0010 5A69     		ldr	r2, [r3, #20]
  54 0012 8021     		movs	r1, #128
  55 0014 0903     		lsls	r1, r1, #12
  56 0016 0A43     		orrs	r2, r1
  57 0018 5A61     		str	r2, [r3, #20]
  58              		.loc 1 237 3 view .LVU6
  59 001a 5A69     		ldr	r2, [r3, #20]
  60 001c 0A40     		ands	r2, r1
  61 001e 0092     		str	r2, [sp]
  62              		.loc 1 237 3 view .LVU7
  63 0020 009A     		ldr	r2, [sp]
  64              	.LBE9:
  65              		.loc 1 237 3 view .LVU8
 238:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  66              		.loc 1 238 3 view .LVU9
  67              	.LBB10:
  68              		.loc 1 238 3 view .LVU10
  69              		.loc 1 238 3 view .LVU11
  70 0022 5A69     		ldr	r2, [r3, #20]
  71 0024 8021     		movs	r1, #128
  72 0026 8902     		lsls	r1, r1, #10
  73 0028 0A43     		orrs	r2, r1
  74 002a 5A61     		str	r2, [r3, #20]
  75              		.loc 1 238 3 view .LVU12
  76 002c 5A69     		ldr	r2, [r3, #20]
  77 002e 0A40     		ands	r2, r1
  78 0030 0192     		str	r2, [sp, #4]
  79              		.loc 1 238 3 view .LVU13
  80 0032 019A     		ldr	r2, [sp, #4]
  81              	.LBE10:
  82              		.loc 1 238 3 view .LVU14
 239:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  83              		.loc 1 239 3 view .LVU15
  84              	.LBB11:
  85              		.loc 1 239 3 view .LVU16
  86              		.loc 1 239 3 view .LVU17
  87 0034 5A69     		ldr	r2, [r3, #20]
  88 0036 8021     		movs	r1, #128
  89 0038 C902     		lsls	r1, r1, #11
  90 003a 0A43     		orrs	r2, r1
  91 003c 5A61     		str	r2, [r3, #20]
  92              		.loc 1 239 3 view .LVU18
  93 003e 5B69     		ldr	r3, [r3, #20]
  94 0040 0B40     		ands	r3, r1
  95 0042 0293     		str	r3, [sp, #8]
  96              		.loc 1 239 3 view .LVU19
  97 0044 029B     		ldr	r3, [sp, #8]
  98              	.LBE11:
  99              		.loc 1 239 3 view .LVU20
 240:Core/Src/main.c **** 
 241:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 242:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 100              		.loc 1 242 3 view .LVU21
 101 0046 134C     		ldr	r4, .L2+4
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 7


 102 0048 134D     		ldr	r5, .L2+8
 103 004a 0022     		movs	r2, #0
 104 004c 2100     		movs	r1, r4
 105 004e 2800     		movs	r0, r5
 106 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 107              	.LVL1:
 243:Core/Src/main.c ****                           |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
 246:Core/Src/main.c ****                            LD4_Pin LD5_Pin */
 247:Core/Src/main.c ****   GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 108              		.loc 1 247 3 view .LVU22
 109              		.loc 1 247 23 is_stmt 0 view .LVU23
 110 0054 0394     		str	r4, [sp, #12]
 248:Core/Src/main.c ****                           |LD4_Pin|LD5_Pin;
 249:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 111              		.loc 1 249 3 is_stmt 1 view .LVU24
 112              		.loc 1 249 24 is_stmt 0 view .LVU25
 113 0056 0127     		movs	r7, #1
 114 0058 0497     		str	r7, [sp, #16]
 250:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 115              		.loc 1 250 3 is_stmt 1 view .LVU26
 116              		.loc 1 250 24 is_stmt 0 view .LVU27
 117 005a 0024     		movs	r4, #0
 118 005c 0594     		str	r4, [sp, #20]
 251:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 119              		.loc 1 251 3 is_stmt 1 view .LVU28
 120              		.loc 1 251 25 is_stmt 0 view .LVU29
 121 005e 0694     		str	r4, [sp, #24]
 252:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 122              		.loc 1 252 3 is_stmt 1 view .LVU30
 123 0060 03A9     		add	r1, sp, #12
 124 0062 2800     		movs	r0, r5
 125 0064 FFF7FEFF 		bl	HAL_GPIO_Init
 126              	.LVL2:
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
 255:Core/Src/main.c ****   GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 127              		.loc 1 255 3 view .LVU31
 128              		.loc 1 255 23 is_stmt 0 view .LVU32
 129 0068 0623     		movs	r3, #6
 130 006a 0393     		str	r3, [sp, #12]
 256:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 131              		.loc 1 256 3 is_stmt 1 view .LVU33
 132              		.loc 1 256 24 is_stmt 0 view .LVU34
 133 006c 9026     		movs	r6, #144
 134 006e 7603     		lsls	r6, r6, #13
 135 0070 0496     		str	r6, [sp, #16]
 257:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 136              		.loc 1 257 3 is_stmt 1 view .LVU35
 137              		.loc 1 257 24 is_stmt 0 view .LVU36
 138 0072 0594     		str	r4, [sp, #20]
 258:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 139              		.loc 1 258 3 is_stmt 1 view .LVU37
 140 0074 03A9     		add	r1, sp, #12
 141 0076 2800     		movs	r0, r5
 142 0078 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 8


 143              	.LVL3:
 259:Core/Src/main.c **** 
 260:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 261:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 144              		.loc 1 261 3 view .LVU38
 145              		.loc 1 261 23 is_stmt 0 view .LVU39
 146 007c 0397     		str	r7, [sp, #12]
 262:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 147              		.loc 1 262 3 is_stmt 1 view .LVU40
 148              		.loc 1 262 24 is_stmt 0 view .LVU41
 149 007e 0496     		str	r6, [sp, #16]
 263:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 150              		.loc 1 263 3 is_stmt 1 view .LVU42
 151              		.loc 1 263 24 is_stmt 0 view .LVU43
 152 0080 0594     		str	r4, [sp, #20]
 264:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 153              		.loc 1 264 3 is_stmt 1 view .LVU44
 154 0082 9020     		movs	r0, #144
 155 0084 03A9     		add	r1, sp, #12
 156 0086 C005     		lsls	r0, r0, #23
 157 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 158              	.LVL4:
 265:Core/Src/main.c **** 
 266:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 267:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 268:Core/Src/main.c **** }
 159              		.loc 1 268 1 is_stmt 0 view .LVU45
 160 008c 09B0     		add	sp, sp, #36
 161              		@ sp needed
 162 008e F0BD     		pop	{r4, r5, r6, r7, pc}
 163              	.L3:
 164              		.align	2
 165              	.L2:
 166 0090 00100240 		.word	1073876992
 167 0094 E1030000 		.word	993
 168 0098 00080048 		.word	1207961600
 169              		.cfi_endproc
 170              	.LFE52:
 172              		.section	.text.StartMotorTask,"ax",%progbits
 173              		.align	1
 174              		.global	StartMotorTask
 175              		.syntax unified
 176              		.code	16
 177              		.thumb_func
 179              	StartMotorTask:
 180              	.LFB56:
 269:Core/Src/main.c **** 
 270:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 271:Core/Src/main.c **** 
 272:Core/Src/main.c **** /* USER CODE END 4 */
 273:Core/Src/main.c **** 
 274:Core/Src/main.c **** //New branch
 275:Core/Src/main.c **** 
 276:Core/Src/main.c **** /* USER CODE BEGIN Header_StartRouterTask */
 277:Core/Src/main.c **** /**
 278:Core/Src/main.c ****   * @brief  Function implementing the routerTask thread.
 279:Core/Src/main.c ****   * @param  argument: Not used
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 9


 280:Core/Src/main.c ****   * @retval None
 281:Core/Src/main.c ****   */
 282:Core/Src/main.c **** /* USER CODE END Header_StartRouterTask */
 283:Core/Src/main.c **** void StartRouterTask(void *argument)
 284:Core/Src/main.c **** { 
 285:Core/Src/main.c ****   //Global command queue
 286:Core/Src/main.c ****   extern Cmd_Queue * cmdQueue;
 287:Core/Src/main.c ****   //Global variables to pass command to worker threads
 288:Core/Src/main.c ****   extern volatile uint16_t commandLED;
 289:Core/Src/main.c ****   extern volatile uint16_t commandMotor;
 290:Core/Src/main.c ****   //Command popped from queue
 291:Core/Src/main.c ****   uint16_t commandIn = 0;
 292:Core/Src/main.c ****   /* Infinite loop */
 293:Core/Src/main.c ****   //uint16_t item = queuePop(cmdQueue);
 294:Core/Src/main.c ****   
 295:Core/Src/main.c ****   for(;;)
 296:Core/Src/main.c ****   {
 297:Core/Src/main.c ****     //If queue is not empty
 298:Core/Src/main.c ****     if (!isQueueEmpty(cmdQueue)) {
 299:Core/Src/main.c ****       //Placeholder for task priorities
 300:Core/Src/main.c ****       osDelay(1);
 301:Core/Src/main.c ****       //Retrieve command from queue
 302:Core/Src/main.c ****       commandIn = queuePop(cmdQueue);
 303:Core/Src/main.c ****       //Determine which worker task corresponds to command
 304:Core/Src/main.c ****         switch (commandIn & 0xF000) {
 305:Core/Src/main.c ****         //LED command
 306:Core/Src/main.c ****         case 0xA000:
 307:Core/Src/main.c ****           commandLED = commandIn;
 308:Core/Src/main.c ****           break;
 309:Core/Src/main.c ****         //Motor command
 310:Core/Src/main.c ****         case 0xB000:
 311:Core/Src/main.c ****           commandMotor = commandIn;
 312:Core/Src/main.c ****           break;
 313:Core/Src/main.c ****         default:
 314:Core/Src/main.c ****         break;
 315:Core/Src/main.c ****       }
 316:Core/Src/main.c ****     }
 317:Core/Src/main.c ****   }
 318:Core/Src/main.c **** }
 319:Core/Src/main.c ****   /* USER CODE END 5 */
 320:Core/Src/main.c **** 
 321:Core/Src/main.c **** void initLEDs(void) {
 322:Core/Src/main.c **** 	// red LED PC6, blue LED (PC7), green LED PC9, orange LED PC8
 323:Core/Src/main.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 324:Core/Src/main.c ****   // set the MODER, 01: General purpose output mode
 325:Core/Src/main.c **** 	// init PC6 MODER
 326:Core/Src/main.c **** 	GPIOC->MODER |= (1 << 12);
 327:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 13);
 328:Core/Src/main.c ****     // init PC7 MODER
 329:Core/Src/main.c **** 	GPIOC->MODER |= (1 << 14);
 330:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 15);
 331:Core/Src/main.c **** 	// init PC8 MODER
 332:Core/Src/main.c **** 	GPIOC->MODER |= (1 << 16);
 333:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 17);
 334:Core/Src/main.c **** 	// init PC9 MODER
 335:Core/Src/main.c **** 	GPIOC->MODER |= (1 << 18);
 336:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 19);
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 10


 337:Core/Src/main.c ****   // Set the pins to low speed in the OSPEEDR register
 338:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 12) | (1 << 13));
 339:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 14) | (1 << 15));
 340:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 16) | (1 << 17));
 341:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 18) | (1 << 19));
 342:Core/Src/main.c **** 
 343:Core/Src/main.c **** 	// Set LED to no pull-up/down resistors in the PUPDR register
 344:Core/Src/main.c **** 	// 00: No pull-up, pull-down
 345:Core/Src/main.c **** 	GPIOC->PUPDR &= ~((1 << 16) | (1 << 17) | (1 << 18) | (1 << 19));
 346:Core/Src/main.c **** 	GPIOC->PUPDR &= ~((1 << 12) | (1 << 13) | (1 << 14) | (1 << 15));
 347:Core/Src/main.c **** 	// set PC6-9 to 0
 348:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 6);
 349:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 7);
 350:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 8);
 351:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 9);
 352:Core/Src/main.c **** }
 353:Core/Src/main.c **** 
 354:Core/Src/main.c **** /* USER CODE BEGIN Header_StartLEDTask */
 355:Core/Src/main.c **** /**
 356:Core/Src/main.c ****   * @brief  Function implementing the LEDTask thread.
 357:Core/Src/main.c ****   * @param  argument: Not used
 358:Core/Src/main.c ****   * @retval None
 359:Core/Src/main.c ****   */
 360:Core/Src/main.c **** /* USER CODE END Header_StartLEDTask */
 361:Core/Src/main.c **** void StartLEDTask(void *argument)
 362:Core/Src/main.c **** {
 363:Core/Src/main.c ****   binarySem03LEDWorkerHandle = osSemaphoreNew(1, 1, NULL);
 364:Core/Src/main.c **** 
 365:Core/Src/main.c ****   extern volatile uint16_t commandLED;
 366:Core/Src/main.c ****   volatile uint8_t LEDColor = 0, LEDAction = 0, LEDSpeed = 0;
 367:Core/Src/main.c ****   volatile uint32_t colorMask[5] = {GPIO_ODR_6, GPIO_ODR_9, GPIO_ODR_7, GPIO_ODR_8, GPIO_ODR_6 | GP
 368:Core/Src/main.c ****   volatile uint8_t blink[4] = {0,0,0,0};
 369:Core/Src/main.c ****   volatile uint8_t blinkTime[4] = {0,0,0,0};
 370:Core/Src/main.c ****   volatile uint32_t startTime[4] = {0,0,0,0};
 371:Core/Src/main.c ****   volatile uint32_t currentTime = 0;
 372:Core/Src/main.c **** 
 373:Core/Src/main.c ****   /* Infinite loop */
 374:Core/Src/main.c ****   for(;;)
 375:Core/Src/main.c ****   {
 376:Core/Src/main.c ****     osSemaphoreAcquire(binarySem03LEDWorkerHandle, osWaitForever);
 377:Core/Src/main.c **** 
 378:Core/Src/main.c ****     LEDColor = (commandLED & 0x0F00) >> 8;
 379:Core/Src/main.c ****     LEDAction = (commandLED & 0x00F0) >> 4;
 380:Core/Src/main.c **** 
 381:Core/Src/main.c ****     //LED action
 382:Core/Src/main.c ****     switch (LEDAction) {
 383:Core/Src/main.c ****       //On
 384:Core/Src/main.c ****       case 1:
 385:Core/Src/main.c ****         GPIOC->ODR |= colorMask[LEDColor-1];
 386:Core/Src/main.c ****         if (LEDColor == 5) {
 387:Core/Src/main.c ****           blink[0] = 0;
 388:Core/Src/main.c ****           blink[1] = 0;
 389:Core/Src/main.c ****           blink[2] = 0;
 390:Core/Src/main.c ****           blink[3] = 0;
 391:Core/Src/main.c ****         }
 392:Core/Src/main.c ****         else
 393:Core/Src/main.c ****           blink[LEDColor-1] = 0;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 11


 394:Core/Src/main.c ****         break;
 395:Core/Src/main.c ****       //Off
 396:Core/Src/main.c ****       case 2:
 397:Core/Src/main.c ****         GPIOC->ODR &= ~colorMask[LEDColor-1];
 398:Core/Src/main.c ****         if (LEDColor == 5) {
 399:Core/Src/main.c ****           blink[0] = 0;
 400:Core/Src/main.c ****           blink[1] = 0;
 401:Core/Src/main.c ****           blink[2] = 0;
 402:Core/Src/main.c ****           blink[3] = 0;
 403:Core/Src/main.c ****         }
 404:Core/Src/main.c ****         else
 405:Core/Src/main.c ****           blink[LEDColor-1] = 0;
 406:Core/Src/main.c ****         break;
 407:Core/Src/main.c ****       //Toggle
 408:Core/Src/main.c ****       case 3:
 409:Core/Src/main.c ****         GPIOC->ODR ^= colorMask[LEDColor-1];
 410:Core/Src/main.c ****         if (LEDColor == 5) {
 411:Core/Src/main.c ****           blink[0] = 0;
 412:Core/Src/main.c ****           blink[1] = 0;
 413:Core/Src/main.c ****           blink[2] = 0;
 414:Core/Src/main.c ****           blink[3] = 0;
 415:Core/Src/main.c ****         }
 416:Core/Src/main.c ****         else
 417:Core/Src/main.c ****           blink[LEDColor-1] = 0;
 418:Core/Src/main.c ****         break;
 419:Core/Src/main.c ****       //Blink
 420:Core/Src/main.c ****       case 4:
 421:Core/Src/main.c ****         if (LEDColor == 5) {
 422:Core/Src/main.c ****           blink[0] = 1;
 423:Core/Src/main.c ****           blinkTime[0] = commandLED & 0xF;
 424:Core/Src/main.c ****           blink[1] = 1;
 425:Core/Src/main.c ****           blinkTime[1] = commandLED & 0xF;
 426:Core/Src/main.c ****           blink[2] = 1;
 427:Core/Src/main.c ****           blinkTime[2] = commandLED & 0xF;
 428:Core/Src/main.c ****           blink[3] = 1;
 429:Core/Src/main.c ****           blinkTime[3] = commandLED & 0xF;
 430:Core/Src/main.c ****         }
 431:Core/Src/main.c ****         else
 432:Core/Src/main.c ****           blink[LEDColor-1] = 1;
 433:Core/Src/main.c ****           blinkTime[LEDColor-1] = commandLED & 0xF;
 434:Core/Src/main.c ****         break;
 435:Core/Src/main.c ****       default:
 436:Core/Src/main.c ****     }
 437:Core/Src/main.c **** 
 438:Core/Src/main.c ****     //Blinking
 439:Core/Src/main.c ****     currentTime = xTaskGetTickCount();
 440:Core/Src/main.c ****     for (int i = 0; i < 4; i++) {
 441:Core/Src/main.c ****       if (blink[i]) {
 442:Core/Src/main.c ****         if (currentTime - startTime[i] > blinkTime[i]*100) {
 443:Core/Src/main.c ****           GPIOC->ODR ^= colorMask[i];
 444:Core/Src/main.c ****           startTime[i] = currentTime;
 445:Core/Src/main.c ****         }
 446:Core/Src/main.c ****       }
 447:Core/Src/main.c ****       else
 448:Core/Src/main.c ****         startTime[i] = currentTime;
 449:Core/Src/main.c ****     }
 450:Core/Src/main.c **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 12


 451:Core/Src/main.c ****     commandLED = 0;
 452:Core/Src/main.c **** 
 453:Core/Src/main.c ****     osSemaphoreRelease(binarySem03LEDWorkerHandle);
 454:Core/Src/main.c ****   }
 455:Core/Src/main.c **** }
 456:Core/Src/main.c **** 
 457:Core/Src/main.c **** /* USER CODE BEGIN Header_StartLEDTask */
 458:Core/Src/main.c **** /**
 459:Core/Src/main.c ****   * @brief  Function implementing the MotorTask thread.
 460:Core/Src/main.c ****   * @param  argument: Not used
 461:Core/Src/main.c ****   * @retval None
 462:Core/Src/main.c ****   */ 
 463:Core/Src/main.c **** /* USER CODE END Header_StartLEDTask */
 464:Core/Src/main.c **** void StartMotorTask(void *argument)
 465:Core/Src/main.c **** {
 181              		.loc 1 465 1 is_stmt 1 view -0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185              	.LVL5:
 186              		.loc 1 465 1 is_stmt 0 view .LVU47
 187 0000 10B5     		push	{r4, lr}
 188              	.LCFI2:
 189              		.cfi_def_cfa_offset 8
 190              		.cfi_offset 4, -8
 191              		.cfi_offset 14, -4
 192 0002 18E0     		b	.L8
 193              	.LVL6:
 194              	.L9:
 195              	.LBB12:
 466:Core/Src/main.c ****   extern volatile uint16_t commandMotor;
 467:Core/Src/main.c ****   int speedAdjust = 0; // boolean that says if speed needs to be adjusted: speed accounted for 3rd 
 468:Core/Src/main.c ****   //command 0xB-[1/2/3/4]
 469:Core/Src/main.c ****   /* 2nd Digit
 470:Core/Src/main.c ****   *   - 1: Turn motor on (enable 3rd and 4th digit)
 471:Core/Src/main.c ****   *   - 2: Turn motor off
 472:Core/Src/main.c ****   *   - 3: Change motor speed (enable 3rd and 4th digit)
 473:Core/Src/main.c ****   * 3rd & 4th Digit: RPM of speed --> Clamped at < 100, done in motor.c 
 474:Core/Src/main.c ****   */
 475:Core/Src/main.c **** 
 476:Core/Src/main.c ****   /* Infinite loop */
 477:Core/Src/main.c ****   for(;;)
 478:Core/Src/main.c ****   {
 479:Core/Src/main.c **** 
 480:Core/Src/main.c ****     extern volatile uint16_t commandMotor;
 481:Core/Src/main.c ****     // 2nd character (turn motor on, off, or adjust speed)
 482:Core/Src/main.c ****     switch (commandMotor & 0x0F00) { 
 483:Core/Src/main.c ****       case 0x0100: 
 484:Core/Src/main.c ****         // turn motor on (will need to adjust speed)
 485:Core/Src/main.c ****         speedAdjust = 1;
 196              		.loc 1 485 9 is_stmt 1 view .LVU48
 486:Core/Src/main.c ****         NVIC_EnableIRQ(TIM7_IRQn);          // Enable interrupt in NVIC
 197              		.loc 1 486 9 view .LVU49
 198              	.LBB13:
 199              	.LBI13:
 200              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 13


   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 14


  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 15


 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 16


 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 17


 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 18


 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 19


 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 20


 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 21


 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 22


 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 23


 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 201              		.loc 2 623 22 view .LVU50
 202              	.LBB14:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 203              		.loc 2 625 3 view .LVU51
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 24


 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 204              		.loc 2 627 5 view .LVU52
 205              		.loc 2 627 20 is_stmt 0 view .LVU53
 206 0004 174B     		ldr	r3, .L10
 207 0006 8022     		movs	r2, #128
 208 0008 D202     		lsls	r2, r2, #11
 209 000a 1A60     		str	r2, [r3]
 210              	.LVL7:
 211              		.loc 2 627 20 view .LVU54
 212              	.LBE14:
 213              	.LBE13:
 487:Core/Src/main.c ****         NVIC_SetPriority(TIM7_IRQn,2);
 214              		.loc 1 487 9 is_stmt 1 view .LVU55
 215              	.LBB15:
 216              	.LBI15:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 25


 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 26


 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 217              		.loc 2 730 22 view .LVU56
 218              	.LBB16:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 219              		.loc 2 732 3 view .LVU57
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 220              		.loc 2 734 5 view .LVU58
 221              		.loc 2 734 52 is_stmt 0 view .LVU59
 222 000c C420     		movs	r0, #196
 223 000e 8000     		lsls	r0, r0, #2
 224 0010 1958     		ldr	r1, [r3, r0]
 225              		.loc 2 734 33 view .LVU60
 226 0012 154A     		ldr	r2, .L10+4
 227 0014 1140     		ands	r1, r2
 228              		.loc 2 734 102 view .LVU61
 229 0016 8022     		movs	r2, #128
 230 0018 1204     		lsls	r2, r2, #16
 231 001a 0A43     		orrs	r2, r1
 232              		.loc 2 734 30 view .LVU62
 233 001c 1A50     		str	r2, [r3, r0]
 234              	.LVL8:
 235              		.loc 2 734 30 view .LVU63
 236              	.LBE16:
 237              	.LBE15:
 488:Core/Src/main.c ****         break;
 238              		.loc 1 488 9 is_stmt 1 view .LVU64
 489:Core/Src/main.c ****       case 0x0200:
 490:Core/Src/main.c ****         // turn motor off
 491:Core/Src/main.c ****         target_rpm = 0;
 492:Core/Src/main.c ****         //NVIC_DisableIRQ(TIM7_IRQn);          // Enable interrupt in NVIC
 493:Core/Src/main.c ****         break;
 494:Core/Src/main.c ****       case 0x0300:
 495:Core/Src/main.c ****         // change motor speed 
 496:Core/Src/main.c ****         speedAdjust = 1;
 497:Core/Src/main.c ****         break;
 498:Core/Src/main.c ****       default:
 499:Core/Src/main.c ****         break;
 500:Core/Src/main.c ****     }
 501:Core/Src/main.c ****     if (speedAdjust == 1){
 239              		.loc 1 501 5 view .LVU65
 240              	.L6:
 502:Core/Src/main.c ****       // 3rd & 4th character
 503:Core/Src/main.c ****       target_rpm = (commandMotor & 0x00FF);
 241              		.loc 1 503 7 view .LVU66
 242              		.loc 1 503 34 is_stmt 0 view .LVU67
 243 001e 134B     		ldr	r3, .L10+8
 244 0020 1B88     		ldrh	r3, [r3]
 245 0022 FF22     		movs	r2, #255
 246 0024 1340     		ands	r3, r2
 247              		.loc 1 503 18 view .LVU68
 248 0026 124A     		ldr	r2, .L10+12
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 27


 249 0028 1380     		strh	r3, [r2]
 250              	.L7:
 504:Core/Src/main.c ****     }
 505:Core/Src/main.c ****     commandMotor = 0;
 251              		.loc 1 505 5 is_stmt 1 view .LVU69
 252              		.loc 1 505 18 is_stmt 0 view .LVU70
 253 002a 104B     		ldr	r3, .L10+8
 254 002c 0022     		movs	r2, #0
 255 002e 1A80     		strh	r2, [r3]
 506:Core/Src/main.c ****     speedAdjust = 0;
 256              		.loc 1 506 5 is_stmt 1 view .LVU71
 257              	.LVL9:
 507:Core/Src/main.c ****     
 508:Core/Src/main.c ****     //If motor is running
 509:Core/Src/main.c ****       //Read encoder in timer 3
 510:Core/Src/main.c ****       //osDelay known time
 511:Core/Src/main.c ****       //Read encoder in timer 3
 512:Core/Src/main.c ****       //Reset encoder value
 513:Core/Src/main.c ****       //do PI update
 514:Core/Src/main.c **** 
 515:Core/Src/main.c ****     //Placeholder for task priorities
 516:Core/Src/main.c ****     osDelay(1);
 258              		.loc 1 516 5 view .LVU72
 259 0030 0120     		movs	r0, #1
 260 0032 FFF7FEFF 		bl	osDelay
 261              	.LVL10:
 262              	.LBE12:
 477:Core/Src/main.c ****   {
 263              		.loc 1 477 3 view .LVU73
 264              	.L8:
 477:Core/Src/main.c ****   {
 265              		.loc 1 477 3 view .LVU74
 266              	.LBB17:
 480:Core/Src/main.c ****     // 2nd character (turn motor on, off, or adjust speed)
 267              		.loc 1 480 5 view .LVU75
 482:Core/Src/main.c ****       case 0x0100: 
 268              		.loc 1 482 5 view .LVU76
 482:Core/Src/main.c ****       case 0x0100: 
 269              		.loc 1 482 26 is_stmt 0 view .LVU77
 270 0036 0D4B     		ldr	r3, .L10+8
 271 0038 1B88     		ldrh	r3, [r3]
 272 003a F022     		movs	r2, #240
 273 003c 1201     		lsls	r2, r2, #4
 274 003e 1340     		ands	r3, r2
 482:Core/Src/main.c ****       case 0x0100: 
 275              		.loc 1 482 5 view .LVU78
 276 0040 8022     		movs	r2, #128
 277 0042 9200     		lsls	r2, r2, #2
 278 0044 9342     		cmp	r3, r2
 279 0046 08D0     		beq	.L5
 280 0048 0132     		adds	r2, r2, #1
 281 004a FF32     		adds	r2, r2, #255
 282 004c 9342     		cmp	r3, r2
 283 004e E6D0     		beq	.L6
 284 0050 8022     		movs	r2, #128
 285 0052 5200     		lsls	r2, r2, #1
 286 0054 9342     		cmp	r3, r2
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 28


 287 0056 E8D1     		bne	.L7
 288 0058 D4E7     		b	.L9
 289              	.L5:
 491:Core/Src/main.c ****         //NVIC_DisableIRQ(TIM7_IRQn);          // Enable interrupt in NVIC
 290              		.loc 1 491 9 is_stmt 1 view .LVU79
 491:Core/Src/main.c ****         //NVIC_DisableIRQ(TIM7_IRQn);          // Enable interrupt in NVIC
 291              		.loc 1 491 20 is_stmt 0 view .LVU80
 292 005a 054B     		ldr	r3, .L10+12
 293 005c 0022     		movs	r2, #0
 294 005e 1A80     		strh	r2, [r3]
 493:Core/Src/main.c ****       case 0x0300:
 295              		.loc 1 493 9 is_stmt 1 view .LVU81
 501:Core/Src/main.c ****       // 3rd & 4th character
 296              		.loc 1 501 5 view .LVU82
 297 0060 E3E7     		b	.L7
 298              	.L11:
 299 0062 C046     		.align	2
 300              	.L10:
 301 0064 00E100E0 		.word	-536813312
 302 0068 FFFF00FF 		.word	-16711681
 303 006c 00000000 		.word	commandMotor
 304 0070 00000000 		.word	target_rpm
 305              	.LBE17:
 306              		.cfi_endproc
 307              	.LFE56:
 309              		.section	.text.StartRouterTask,"ax",%progbits
 310              		.align	1
 311              		.global	StartRouterTask
 312              		.syntax unified
 313              		.code	16
 314              		.thumb_func
 316              	StartRouterTask:
 317              	.LFB53:
 284:Core/Src/main.c ****   //Global command queue
 318              		.loc 1 284 1 view -0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              	.LVL11:
 284:Core/Src/main.c ****   //Global command queue
 323              		.loc 1 284 1 is_stmt 0 view .LVU84
 324 0000 10B5     		push	{r4, lr}
 325              	.LCFI3:
 326              		.cfi_def_cfa_offset 8
 327              		.cfi_offset 4, -8
 328              		.cfi_offset 14, -4
 329 0002 01E0     		b	.L14
 330              	.LVL12:
 331              	.L15:
 307:Core/Src/main.c ****           break;
 332              		.loc 1 307 11 is_stmt 1 view .LVU85
 307:Core/Src/main.c ****           break;
 333              		.loc 1 307 22 is_stmt 0 view .LVU86
 334 0004 0E4B     		ldr	r3, .L19
 335 0006 1880     		strh	r0, [r3]
 308:Core/Src/main.c ****         //Motor command
 336              		.loc 1 308 11 is_stmt 1 view .LVU87
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 29


 337              	.LVL13:
 338              	.L14:
 295:Core/Src/main.c ****   {
 339              		.loc 1 295 3 view .LVU88
 298:Core/Src/main.c ****       //Placeholder for task priorities
 340              		.loc 1 298 5 view .LVU89
 298:Core/Src/main.c ****       //Placeholder for task priorities
 341              		.loc 1 298 10 is_stmt 0 view .LVU90
 342 0008 0E4B     		ldr	r3, .L19+4
 343 000a 1868     		ldr	r0, [r3]
 344 000c FFF7FEFF 		bl	isQueueEmpty
 345              	.LVL14:
 298:Core/Src/main.c ****       //Placeholder for task priorities
 346              		.loc 1 298 8 discriminator 1 view .LVU91
 347 0010 0028     		cmp	r0, #0
 348 0012 F9D1     		bne	.L14
 300:Core/Src/main.c ****       //Retrieve command from queue
 349              		.loc 1 300 7 is_stmt 1 view .LVU92
 350 0014 0130     		adds	r0, r0, #1
 351 0016 FFF7FEFF 		bl	osDelay
 352              	.LVL15:
 302:Core/Src/main.c ****       //Determine which worker task corresponds to command
 353              		.loc 1 302 7 view .LVU93
 302:Core/Src/main.c ****       //Determine which worker task corresponds to command
 354              		.loc 1 302 19 is_stmt 0 view .LVU94
 355 001a 0A4B     		ldr	r3, .L19+4
 356 001c 1868     		ldr	r0, [r3]
 357 001e FFF7FEFF 		bl	queuePop
 358              	.LVL16:
 304:Core/Src/main.c ****         //LED command
 359              		.loc 1 304 9 is_stmt 1 view .LVU95
 360 0022 030B     		lsrs	r3, r0, #12
 361 0024 1B03     		lsls	r3, r3, #12
 362 0026 9BB2     		uxth	r3, r3
 363 0028 A022     		movs	r2, #160
 364 002a 1202     		lsls	r2, r2, #8
 365 002c 9342     		cmp	r3, r2
 366 002e E9D0     		beq	.L15
 367 0030 B022     		movs	r2, #176
 368 0032 1202     		lsls	r2, r2, #8
 369 0034 9342     		cmp	r3, r2
 370 0036 E7D1     		bne	.L14
 311:Core/Src/main.c ****           break;
 371              		.loc 1 311 11 view .LVU96
 311:Core/Src/main.c ****           break;
 372              		.loc 1 311 24 is_stmt 0 view .LVU97
 373 0038 034B     		ldr	r3, .L19+8
 374 003a 1880     		strh	r0, [r3]
 312:Core/Src/main.c ****         default:
 375              		.loc 1 312 11 is_stmt 1 view .LVU98
 376 003c E4E7     		b	.L14
 377              	.L20:
 378 003e C046     		.align	2
 379              	.L19:
 380 0040 00000000 		.word	commandLED
 381 0044 00000000 		.word	cmdQueue
 382 0048 00000000 		.word	commandMotor
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 30


 383              		.cfi_endproc
 384              	.LFE53:
 386              		.section	.text.StartLEDTask,"ax",%progbits
 387              		.align	1
 388              		.global	StartLEDTask
 389              		.syntax unified
 390              		.code	16
 391              		.thumb_func
 393              	StartLEDTask:
 394              	.LVL17:
 395              	.LFB55:
 362:Core/Src/main.c ****   binarySem03LEDWorkerHandle = osSemaphoreNew(1, 1, NULL);
 396              		.loc 1 362 1 view -0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 56
 399              		@ frame_needed = 0, uses_anonymous_args = 0
 362:Core/Src/main.c ****   binarySem03LEDWorkerHandle = osSemaphoreNew(1, 1, NULL);
 400              		.loc 1 362 1 is_stmt 0 view .LVU100
 401 0000 70B5     		push	{r4, r5, r6, lr}
 402              	.LCFI4:
 403              		.cfi_def_cfa_offset 16
 404              		.cfi_offset 4, -16
 405              		.cfi_offset 5, -12
 406              		.cfi_offset 6, -8
 407              		.cfi_offset 14, -4
 408 0002 8EB0     		sub	sp, sp, #56
 409              	.LCFI5:
 410              		.cfi_def_cfa_offset 72
 363:Core/Src/main.c **** 
 411              		.loc 1 363 3 is_stmt 1 view .LVU101
 363:Core/Src/main.c **** 
 412              		.loc 1 363 32 is_stmt 0 view .LVU102
 413 0004 0022     		movs	r2, #0
 414 0006 0121     		movs	r1, #1
 415 0008 0120     		movs	r0, #1
 416              	.LVL18:
 363:Core/Src/main.c **** 
 417              		.loc 1 363 32 view .LVU103
 418 000a FFF7FEFF 		bl	osSemaphoreNew
 419              	.LVL19:
 363:Core/Src/main.c **** 
 420              		.loc 1 363 30 discriminator 1 view .LVU104
 421 000e 784B     		ldr	r3, .L43
 422 0010 1860     		str	r0, [r3]
 365:Core/Src/main.c ****   volatile uint8_t LEDColor = 0, LEDAction = 0, LEDSpeed = 0;
 423              		.loc 1 365 3 is_stmt 1 view .LVU105
 366:Core/Src/main.c ****   volatile uint32_t colorMask[5] = {GPIO_ODR_6, GPIO_ODR_9, GPIO_ODR_7, GPIO_ODR_8, GPIO_ODR_6 | GP
 424              		.loc 1 366 3 view .LVU106
 366:Core/Src/main.c ****   volatile uint32_t colorMask[5] = {GPIO_ODR_6, GPIO_ODR_9, GPIO_ODR_7, GPIO_ODR_8, GPIO_ODR_6 | GP
 425              		.loc 1 366 20 is_stmt 0 view .LVU107
 426 0012 0024     		movs	r4, #0
 427 0014 3723     		movs	r3, #55
 428 0016 6B44     		add	r3, r3, sp
 429 0018 1C70     		strb	r4, [r3]
 366:Core/Src/main.c ****   volatile uint32_t colorMask[5] = {GPIO_ODR_6, GPIO_ODR_9, GPIO_ODR_7, GPIO_ODR_8, GPIO_ODR_6 | GP
 430              		.loc 1 366 34 view .LVU108
 431 001a 3623     		movs	r3, #54
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 31


 432 001c 6B44     		add	r3, r3, sp
 433 001e 1C70     		strb	r4, [r3]
 366:Core/Src/main.c ****   volatile uint32_t colorMask[5] = {GPIO_ODR_6, GPIO_ODR_9, GPIO_ODR_7, GPIO_ODR_8, GPIO_ODR_6 | GP
 434              		.loc 1 366 49 view .LVU109
 435 0020 3523     		movs	r3, #53
 436 0022 6B44     		add	r3, r3, sp
 437 0024 1C70     		strb	r4, [r3]
 367:Core/Src/main.c ****   volatile uint8_t blink[4] = {0,0,0,0};
 438              		.loc 1 367 3 is_stmt 1 view .LVU110
 367:Core/Src/main.c ****   volatile uint8_t blink[4] = {0,0,0,0};
 439              		.loc 1 367 21 is_stmt 0 view .LVU111
 440 0026 08A9     		add	r1, sp, #32
 441 0028 724B     		ldr	r3, .L43+4
 442 002a 0A00     		movs	r2, r1
 443 002c 61CB     		ldmia	r3!, {r0, r5, r6}
 444 002e 61C2     		stmia	r2!, {r0, r5, r6}
 445 0030 03CB     		ldmia	r3!, {r0, r1}
 446 0032 03C2     		stmia	r2!, {r0, r1}
 368:Core/Src/main.c ****   volatile uint8_t blinkTime[4] = {0,0,0,0};
 447              		.loc 1 368 3 is_stmt 1 view .LVU112
 368:Core/Src/main.c ****   volatile uint8_t blinkTime[4] = {0,0,0,0};
 448              		.loc 1 368 20 is_stmt 0 view .LVU113
 449 0034 0794     		str	r4, [sp, #28]
 369:Core/Src/main.c ****   volatile uint32_t startTime[4] = {0,0,0,0};
 450              		.loc 1 369 3 is_stmt 1 view .LVU114
 369:Core/Src/main.c ****   volatile uint32_t startTime[4] = {0,0,0,0};
 451              		.loc 1 369 20 is_stmt 0 view .LVU115
 452 0036 0694     		str	r4, [sp, #24]
 370:Core/Src/main.c ****   volatile uint32_t currentTime = 0;
 453              		.loc 1 370 3 is_stmt 1 view .LVU116
 370:Core/Src/main.c ****   volatile uint32_t currentTime = 0;
 454              		.loc 1 370 21 is_stmt 0 view .LVU117
 455 0038 1022     		movs	r2, #16
 456 003a 0021     		movs	r1, #0
 457 003c 02A8     		add	r0, sp, #8
 458 003e FFF7FEFF 		bl	memset
 459              	.LVL20:
 371:Core/Src/main.c **** 
 460              		.loc 1 371 3 is_stmt 1 view .LVU118
 371:Core/Src/main.c **** 
 461              		.loc 1 371 21 is_stmt 0 view .LVU119
 462 0042 0194     		str	r4, [sp, #4]
 463 0044 9BE0     		b	.L37
 464              	.L23:
 465              	.LBB18:
 382:Core/Src/main.c ****       //On
 466              		.loc 1 382 5 view .LVU120
 467 0046 042A     		cmp	r2, #4
 468 0048 15D1     		bne	.L26
 421:Core/Src/main.c ****           blink[0] = 1;
 469              		.loc 1 421 9 is_stmt 1 view .LVU121
 421:Core/Src/main.c ****           blink[0] = 1;
 470              		.loc 1 421 22 is_stmt 0 view .LVU122
 471 004a 3723     		movs	r3, #55
 472 004c 6B44     		add	r3, r3, sp
 473 004e 1B78     		ldrb	r3, [r3]
 421:Core/Src/main.c ****           blink[0] = 1;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 32


 474              		.loc 1 421 12 view .LVU123
 475 0050 052B     		cmp	r3, #5
 476 0052 56D0     		beq	.L38
 432:Core/Src/main.c ****           blinkTime[LEDColor-1] = commandLED & 0xF;
 477              		.loc 1 432 11 is_stmt 1 view .LVU124
 432:Core/Src/main.c ****           blinkTime[LEDColor-1] = commandLED & 0xF;
 478              		.loc 1 432 25 is_stmt 0 view .LVU125
 479 0054 3723     		movs	r3, #55
 480 0056 6B44     		add	r3, r3, sp
 481 0058 1B78     		ldrb	r3, [r3]
 482 005a 013B     		subs	r3, r3, #1
 432:Core/Src/main.c ****           blinkTime[LEDColor-1] = commandLED & 0xF;
 483              		.loc 1 432 29 view .LVU126
 484 005c 07AA     		add	r2, sp, #28
 485 005e 0121     		movs	r1, #1
 486 0060 D154     		strb	r1, [r2, r3]
 487              	.L32:
 433:Core/Src/main.c ****         break;
 488              		.loc 1 433 11 is_stmt 1 view .LVU127
 433:Core/Src/main.c ****         break;
 489              		.loc 1 433 46 is_stmt 0 view .LVU128
 490 0062 654B     		ldr	r3, .L43+8
 491 0064 1A88     		ldrh	r2, [r3]
 433:Core/Src/main.c ****         break;
 492              		.loc 1 433 29 view .LVU129
 493 0066 3723     		movs	r3, #55
 494 0068 6B44     		add	r3, r3, sp
 495 006a 1B78     		ldrb	r3, [r3]
 496 006c 013B     		subs	r3, r3, #1
 433:Core/Src/main.c ****         break;
 497              		.loc 1 433 46 view .LVU130
 498 006e 0F21     		movs	r1, #15
 499 0070 0A40     		ands	r2, r1
 433:Core/Src/main.c ****         break;
 500              		.loc 1 433 33 view .LVU131
 501 0072 06A9     		add	r1, sp, #24
 502 0074 CA54     		strb	r2, [r1, r3]
 434:Core/Src/main.c ****       default:
 503              		.loc 1 434 9 is_stmt 1 view .LVU132
 504              	.L26:
 439:Core/Src/main.c ****     for (int i = 0; i < 4; i++) {
 505              		.loc 1 439 5 view .LVU133
 439:Core/Src/main.c ****     for (int i = 0; i < 4; i++) {
 506              		.loc 1 439 19 is_stmt 0 view .LVU134
 507 0076 FFF7FEFF 		bl	xTaskGetTickCount
 508              	.LVL21:
 439:Core/Src/main.c ****     for (int i = 0; i < 4; i++) {
 509              		.loc 1 439 17 discriminator 1 view .LVU135
 510 007a 0190     		str	r0, [sp, #4]
 440:Core/Src/main.c ****       if (blink[i]) {
 511              		.loc 1 440 5 is_stmt 1 view .LVU136
 512              	.LBB19:
 440:Core/Src/main.c ****       if (blink[i]) {
 513              		.loc 1 440 10 view .LVU137
 514              	.LVL22:
 440:Core/Src/main.c ****       if (blink[i]) {
 515              		.loc 1 440 14 is_stmt 0 view .LVU138
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 33


 516 007c 0023     		movs	r3, #0
 440:Core/Src/main.c ****       if (blink[i]) {
 517              		.loc 1 440 5 view .LVU139
 518 007e 5BE0     		b	.L33
 519              	.LVL23:
 520              	.L24:
 440:Core/Src/main.c ****       if (blink[i]) {
 521              		.loc 1 440 5 view .LVU140
 522              	.LBE19:
 385:Core/Src/main.c ****         if (LEDColor == 5) {
 523              		.loc 1 385 9 is_stmt 1 view .LVU141
 385:Core/Src/main.c ****         if (LEDColor == 5) {
 524              		.loc 1 385 41 is_stmt 0 view .LVU142
 525 0080 3722     		movs	r2, #55
 526 0082 6A44     		add	r2, r2, sp
 527 0084 1378     		ldrb	r3, [r2]
 528 0086 013B     		subs	r3, r3, #1
 385:Core/Src/main.c ****         if (LEDColor == 5) {
 529              		.loc 1 385 32 view .LVU143
 530 0088 9B00     		lsls	r3, r3, #2
 531 008a 08A9     		add	r1, sp, #32
 532 008c 5858     		ldr	r0, [r3, r1]
 385:Core/Src/main.c ****         if (LEDColor == 5) {
 533              		.loc 1 385 14 view .LVU144
 534 008e 5B49     		ldr	r1, .L43+12
 535 0090 4B69     		ldr	r3, [r1, #20]
 385:Core/Src/main.c ****         if (LEDColor == 5) {
 536              		.loc 1 385 20 view .LVU145
 537 0092 0343     		orrs	r3, r0
 538 0094 4B61     		str	r3, [r1, #20]
 386:Core/Src/main.c ****           blink[0] = 0;
 539              		.loc 1 386 9 is_stmt 1 view .LVU146
 386:Core/Src/main.c ****           blink[0] = 0;
 540              		.loc 1 386 22 is_stmt 0 view .LVU147
 541 0096 1378     		ldrb	r3, [r2]
 386:Core/Src/main.c ****           blink[0] = 0;
 542              		.loc 1 386 12 view .LVU148
 543 0098 052B     		cmp	r3, #5
 544 009a 07D0     		beq	.L39
 393:Core/Src/main.c ****         break;
 545              		.loc 1 393 11 is_stmt 1 view .LVU149
 393:Core/Src/main.c ****         break;
 546              		.loc 1 393 25 is_stmt 0 view .LVU150
 547 009c 3723     		movs	r3, #55
 548 009e 6B44     		add	r3, r3, sp
 549 00a0 1B78     		ldrb	r3, [r3]
 550 00a2 013B     		subs	r3, r3, #1
 393:Core/Src/main.c ****         break;
 551              		.loc 1 393 29 view .LVU151
 552 00a4 07AA     		add	r2, sp, #28
 553 00a6 0021     		movs	r1, #0
 554 00a8 D154     		strb	r1, [r2, r3]
 555 00aa E4E7     		b	.L26
 556              	.L39:
 387:Core/Src/main.c ****           blink[1] = 0;
 557              		.loc 1 387 11 is_stmt 1 view .LVU152
 387:Core/Src/main.c ****           blink[1] = 0;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 34


 558              		.loc 1 387 20 is_stmt 0 view .LVU153
 559 00ac 07AB     		add	r3, sp, #28
 560 00ae 0022     		movs	r2, #0
 561 00b0 1A70     		strb	r2, [r3]
 388:Core/Src/main.c ****           blink[2] = 0;
 562              		.loc 1 388 11 is_stmt 1 view .LVU154
 388:Core/Src/main.c ****           blink[2] = 0;
 563              		.loc 1 388 20 is_stmt 0 view .LVU155
 564 00b2 5A70     		strb	r2, [r3, #1]
 389:Core/Src/main.c ****           blink[3] = 0;
 565              		.loc 1 389 11 is_stmt 1 view .LVU156
 389:Core/Src/main.c ****           blink[3] = 0;
 566              		.loc 1 389 20 is_stmt 0 view .LVU157
 567 00b4 9A70     		strb	r2, [r3, #2]
 390:Core/Src/main.c ****         }
 568              		.loc 1 390 11 is_stmt 1 view .LVU158
 390:Core/Src/main.c ****         }
 569              		.loc 1 390 20 is_stmt 0 view .LVU159
 570 00b6 DA70     		strb	r2, [r3, #3]
 571 00b8 DDE7     		b	.L26
 572              	.L42:
 399:Core/Src/main.c ****           blink[1] = 0;
 573              		.loc 1 399 11 is_stmt 1 view .LVU160
 399:Core/Src/main.c ****           blink[1] = 0;
 574              		.loc 1 399 20 is_stmt 0 view .LVU161
 575 00ba 07AB     		add	r3, sp, #28
 576 00bc 0022     		movs	r2, #0
 577 00be 1A70     		strb	r2, [r3]
 400:Core/Src/main.c ****           blink[2] = 0;
 578              		.loc 1 400 11 is_stmt 1 view .LVU162
 400:Core/Src/main.c ****           blink[2] = 0;
 579              		.loc 1 400 20 is_stmt 0 view .LVU163
 580 00c0 5A70     		strb	r2, [r3, #1]
 401:Core/Src/main.c ****           blink[3] = 0;
 581              		.loc 1 401 11 is_stmt 1 view .LVU164
 401:Core/Src/main.c ****           blink[3] = 0;
 582              		.loc 1 401 20 is_stmt 0 view .LVU165
 583 00c2 9A70     		strb	r2, [r3, #2]
 402:Core/Src/main.c ****         }
 584              		.loc 1 402 11 is_stmt 1 view .LVU166
 402:Core/Src/main.c ****         }
 585              		.loc 1 402 20 is_stmt 0 view .LVU167
 586 00c4 DA70     		strb	r2, [r3, #3]
 587 00c6 D6E7     		b	.L26
 588              	.L22:
 409:Core/Src/main.c ****         if (LEDColor == 5) {
 589              		.loc 1 409 9 is_stmt 1 view .LVU168
 409:Core/Src/main.c ****         if (LEDColor == 5) {
 590              		.loc 1 409 41 is_stmt 0 view .LVU169
 591 00c8 3722     		movs	r2, #55
 592 00ca 6A44     		add	r2, r2, sp
 593 00cc 1378     		ldrb	r3, [r2]
 594 00ce 013B     		subs	r3, r3, #1
 409:Core/Src/main.c ****         if (LEDColor == 5) {
 595              		.loc 1 409 32 view .LVU170
 596 00d0 9B00     		lsls	r3, r3, #2
 597 00d2 08A9     		add	r1, sp, #32
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 35


 598 00d4 5858     		ldr	r0, [r3, r1]
 409:Core/Src/main.c ****         if (LEDColor == 5) {
 599              		.loc 1 409 14 view .LVU171
 600 00d6 4949     		ldr	r1, .L43+12
 601 00d8 4B69     		ldr	r3, [r1, #20]
 409:Core/Src/main.c ****         if (LEDColor == 5) {
 602              		.loc 1 409 20 view .LVU172
 603 00da 4340     		eors	r3, r0
 604 00dc 4B61     		str	r3, [r1, #20]
 410:Core/Src/main.c ****           blink[0] = 0;
 605              		.loc 1 410 9 is_stmt 1 view .LVU173
 410:Core/Src/main.c ****           blink[0] = 0;
 606              		.loc 1 410 22 is_stmt 0 view .LVU174
 607 00de 1378     		ldrb	r3, [r2]
 410:Core/Src/main.c ****           blink[0] = 0;
 608              		.loc 1 410 12 view .LVU175
 609 00e0 052B     		cmp	r3, #5
 610 00e2 07D0     		beq	.L40
 417:Core/Src/main.c ****         break;
 611              		.loc 1 417 11 is_stmt 1 view .LVU176
 417:Core/Src/main.c ****         break;
 612              		.loc 1 417 25 is_stmt 0 view .LVU177
 613 00e4 3723     		movs	r3, #55
 614 00e6 6B44     		add	r3, r3, sp
 615 00e8 1B78     		ldrb	r3, [r3]
 616 00ea 013B     		subs	r3, r3, #1
 417:Core/Src/main.c ****         break;
 617              		.loc 1 417 29 view .LVU178
 618 00ec 07AA     		add	r2, sp, #28
 619 00ee 0021     		movs	r1, #0
 620 00f0 D154     		strb	r1, [r2, r3]
 621 00f2 C0E7     		b	.L26
 622              	.L40:
 411:Core/Src/main.c ****           blink[1] = 0;
 623              		.loc 1 411 11 is_stmt 1 view .LVU179
 411:Core/Src/main.c ****           blink[1] = 0;
 624              		.loc 1 411 20 is_stmt 0 view .LVU180
 625 00f4 07AB     		add	r3, sp, #28
 626 00f6 0022     		movs	r2, #0
 627 00f8 1A70     		strb	r2, [r3]
 412:Core/Src/main.c ****           blink[2] = 0;
 628              		.loc 1 412 11 is_stmt 1 view .LVU181
 412:Core/Src/main.c ****           blink[2] = 0;
 629              		.loc 1 412 20 is_stmt 0 view .LVU182
 630 00fa 5A70     		strb	r2, [r3, #1]
 413:Core/Src/main.c ****           blink[3] = 0;
 631              		.loc 1 413 11 is_stmt 1 view .LVU183
 413:Core/Src/main.c ****           blink[3] = 0;
 632              		.loc 1 413 20 is_stmt 0 view .LVU184
 633 00fc 9A70     		strb	r2, [r3, #2]
 414:Core/Src/main.c ****         }
 634              		.loc 1 414 11 is_stmt 1 view .LVU185
 414:Core/Src/main.c ****         }
 635              		.loc 1 414 20 is_stmt 0 view .LVU186
 636 00fe DA70     		strb	r2, [r3, #3]
 637 0100 B9E7     		b	.L26
 638              	.L38:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 36


 422:Core/Src/main.c ****           blinkTime[0] = commandLED & 0xF;
 639              		.loc 1 422 11 is_stmt 1 view .LVU187
 422:Core/Src/main.c ****           blinkTime[0] = commandLED & 0xF;
 640              		.loc 1 422 20 is_stmt 0 view .LVU188
 641 0102 07A8     		add	r0, sp, #28
 642 0104 0124     		movs	r4, #1
 643 0106 0470     		strb	r4, [r0]
 423:Core/Src/main.c ****           blink[1] = 1;
 644              		.loc 1 423 11 is_stmt 1 view .LVU189
 423:Core/Src/main.c ****           blink[1] = 1;
 645              		.loc 1 423 37 is_stmt 0 view .LVU190
 646 0108 3B49     		ldr	r1, .L43+8
 647 010a 0D88     		ldrh	r5, [r1]
 648 010c 0F22     		movs	r2, #15
 649 010e 1540     		ands	r5, r2
 423:Core/Src/main.c ****           blink[1] = 1;
 650              		.loc 1 423 24 view .LVU191
 651 0110 06AB     		add	r3, sp, #24
 652 0112 1D70     		strb	r5, [r3]
 424:Core/Src/main.c ****           blinkTime[1] = commandLED & 0xF;
 653              		.loc 1 424 11 is_stmt 1 view .LVU192
 424:Core/Src/main.c ****           blinkTime[1] = commandLED & 0xF;
 654              		.loc 1 424 20 is_stmt 0 view .LVU193
 655 0114 4470     		strb	r4, [r0, #1]
 425:Core/Src/main.c ****           blink[2] = 1;
 656              		.loc 1 425 11 is_stmt 1 view .LVU194
 425:Core/Src/main.c ****           blink[2] = 1;
 657              		.loc 1 425 37 is_stmt 0 view .LVU195
 658 0116 0D88     		ldrh	r5, [r1]
 659 0118 1540     		ands	r5, r2
 425:Core/Src/main.c ****           blink[2] = 1;
 660              		.loc 1 425 24 view .LVU196
 661 011a 5D70     		strb	r5, [r3, #1]
 426:Core/Src/main.c ****           blinkTime[2] = commandLED & 0xF;
 662              		.loc 1 426 11 is_stmt 1 view .LVU197
 426:Core/Src/main.c ****           blinkTime[2] = commandLED & 0xF;
 663              		.loc 1 426 20 is_stmt 0 view .LVU198
 664 011c 8470     		strb	r4, [r0, #2]
 427:Core/Src/main.c ****           blink[3] = 1;
 665              		.loc 1 427 11 is_stmt 1 view .LVU199
 427:Core/Src/main.c ****           blink[3] = 1;
 666              		.loc 1 427 37 is_stmt 0 view .LVU200
 667 011e 0D88     		ldrh	r5, [r1]
 668 0120 1540     		ands	r5, r2
 427:Core/Src/main.c ****           blink[3] = 1;
 669              		.loc 1 427 24 view .LVU201
 670 0122 9D70     		strb	r5, [r3, #2]
 428:Core/Src/main.c ****           blinkTime[3] = commandLED & 0xF;
 671              		.loc 1 428 11 is_stmt 1 view .LVU202
 428:Core/Src/main.c ****           blinkTime[3] = commandLED & 0xF;
 672              		.loc 1 428 20 is_stmt 0 view .LVU203
 673 0124 C470     		strb	r4, [r0, #3]
 429:Core/Src/main.c ****         }
 674              		.loc 1 429 11 is_stmt 1 view .LVU204
 429:Core/Src/main.c ****         }
 675              		.loc 1 429 37 is_stmt 0 view .LVU205
 676 0126 0988     		ldrh	r1, [r1]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 37


 677 0128 0A40     		ands	r2, r1
 429:Core/Src/main.c ****         }
 678              		.loc 1 429 24 view .LVU206
 679 012a DA70     		strb	r2, [r3, #3]
 680 012c 99E7     		b	.L32
 681              	.LVL24:
 682              	.L34:
 683              	.LBB20:
 448:Core/Src/main.c ****     }
 684              		.loc 1 448 9 is_stmt 1 view .LVU207
 448:Core/Src/main.c ****     }
 685              		.loc 1 448 22 is_stmt 0 view .LVU208
 686 012e 0198     		ldr	r0, [sp, #4]
 687 0130 9A00     		lsls	r2, r3, #2
 688 0132 02A9     		add	r1, sp, #8
 689 0134 5050     		str	r0, [r2, r1]
 690              	.L35:
 440:Core/Src/main.c ****       if (blink[i]) {
 691              		.loc 1 440 29 is_stmt 1 discriminator 2 view .LVU209
 692 0136 0133     		adds	r3, r3, #1
 693              	.LVL25:
 694              	.L33:
 440:Core/Src/main.c ****       if (blink[i]) {
 695              		.loc 1 440 23 discriminator 1 view .LVU210
 696 0138 032B     		cmp	r3, #3
 697 013a 19DC     		bgt	.L41
 441:Core/Src/main.c ****         if (currentTime - startTime[i] > blinkTime[i]*100) {
 698              		.loc 1 441 7 view .LVU211
 441:Core/Src/main.c ****         if (currentTime - startTime[i] > blinkTime[i]*100) {
 699              		.loc 1 441 16 is_stmt 0 view .LVU212
 700 013c 07AA     		add	r2, sp, #28
 701 013e D25C     		ldrb	r2, [r2, r3]
 441:Core/Src/main.c ****         if (currentTime - startTime[i] > blinkTime[i]*100) {
 702              		.loc 1 441 10 view .LVU213
 703 0140 002A     		cmp	r2, #0
 704 0142 F4D0     		beq	.L34
 442:Core/Src/main.c ****           GPIOC->ODR ^= colorMask[i];
 705              		.loc 1 442 9 is_stmt 1 view .LVU214
 442:Core/Src/main.c ****           GPIOC->ODR ^= colorMask[i];
 706              		.loc 1 442 25 is_stmt 0 view .LVU215
 707 0144 0199     		ldr	r1, [sp, #4]
 442:Core/Src/main.c ****           GPIOC->ODR ^= colorMask[i];
 708              		.loc 1 442 36 view .LVU216
 709 0146 9A00     		lsls	r2, r3, #2
 710 0148 02A8     		add	r0, sp, #8
 711 014a 1258     		ldr	r2, [r2, r0]
 442:Core/Src/main.c ****           GPIOC->ODR ^= colorMask[i];
 712              		.loc 1 442 25 view .LVU217
 713 014c 891A     		subs	r1, r1, r2
 442:Core/Src/main.c ****           GPIOC->ODR ^= colorMask[i];
 714              		.loc 1 442 51 view .LVU218
 715 014e 06AA     		add	r2, sp, #24
 716 0150 D25C     		ldrb	r2, [r2, r3]
 442:Core/Src/main.c ****           GPIOC->ODR ^= colorMask[i];
 717              		.loc 1 442 54 view .LVU219
 718 0152 6420     		movs	r0, #100
 719 0154 4243     		muls	r2, r0
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 38


 442:Core/Src/main.c ****           GPIOC->ODR ^= colorMask[i];
 720              		.loc 1 442 12 view .LVU220
 721 0156 9142     		cmp	r1, r2
 722 0158 EDD9     		bls	.L35
 443:Core/Src/main.c ****           startTime[i] = currentTime;
 723              		.loc 1 443 11 is_stmt 1 view .LVU221
 443:Core/Src/main.c ****           startTime[i] = currentTime;
 724              		.loc 1 443 34 is_stmt 0 view .LVU222
 725 015a 9A00     		lsls	r2, r3, #2
 726 015c 08A9     		add	r1, sp, #32
 727 015e 5458     		ldr	r4, [r2, r1]
 443:Core/Src/main.c ****           startTime[i] = currentTime;
 728              		.loc 1 443 16 view .LVU223
 729 0160 2648     		ldr	r0, .L43+12
 730 0162 4169     		ldr	r1, [r0, #20]
 443:Core/Src/main.c ****           startTime[i] = currentTime;
 731              		.loc 1 443 22 view .LVU224
 732 0164 6140     		eors	r1, r4
 733 0166 4161     		str	r1, [r0, #20]
 444:Core/Src/main.c ****         }
 734              		.loc 1 444 11 is_stmt 1 view .LVU225
 444:Core/Src/main.c ****         }
 735              		.loc 1 444 24 is_stmt 0 view .LVU226
 736 0168 0198     		ldr	r0, [sp, #4]
 737 016a 02A9     		add	r1, sp, #8
 738 016c 5050     		str	r0, [r2, r1]
 739 016e E2E7     		b	.L35
 740              	.L41:
 741              	.LBE20:
 451:Core/Src/main.c **** 
 742              		.loc 1 451 5 is_stmt 1 view .LVU227
 451:Core/Src/main.c **** 
 743              		.loc 1 451 16 is_stmt 0 view .LVU228
 744 0170 214B     		ldr	r3, .L43+8
 745              	.LVL26:
 451:Core/Src/main.c **** 
 746              		.loc 1 451 16 view .LVU229
 747 0172 0022     		movs	r2, #0
 748 0174 1A80     		strh	r2, [r3]
 453:Core/Src/main.c ****   }
 749              		.loc 1 453 5 is_stmt 1 view .LVU230
 750 0176 1E4B     		ldr	r3, .L43
 751 0178 1868     		ldr	r0, [r3]
 752 017a FFF7FEFF 		bl	osSemaphoreRelease
 753              	.LVL27:
 754              	.LBE18:
 374:Core/Src/main.c ****   {
 755              		.loc 1 374 3 view .LVU231
 756              	.L37:
 374:Core/Src/main.c ****   {
 757              		.loc 1 374 3 view .LVU232
 758              	.LBB21:
 376:Core/Src/main.c **** 
 759              		.loc 1 376 5 view .LVU233
 760 017e 0121     		movs	r1, #1
 761 0180 1B4B     		ldr	r3, .L43
 762 0182 1868     		ldr	r0, [r3]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 39


 763 0184 4942     		rsbs	r1, r1, #0
 764 0186 FFF7FEFF 		bl	osSemaphoreAcquire
 765              	.LVL28:
 378:Core/Src/main.c ****     LEDAction = (commandLED & 0x00F0) >> 4;
 766              		.loc 1 378 5 view .LVU234
 378:Core/Src/main.c ****     LEDAction = (commandLED & 0x00F0) >> 4;
 767              		.loc 1 378 38 is_stmt 0 view .LVU235
 768 018a 1B49     		ldr	r1, .L43+8
 769 018c 0B88     		ldrh	r3, [r1]
 770 018e 1B0A     		lsrs	r3, r3, #8
 771 0190 0F22     		movs	r2, #15
 772 0192 1340     		ands	r3, r2
 378:Core/Src/main.c ****     LEDAction = (commandLED & 0x00F0) >> 4;
 773              		.loc 1 378 14 view .LVU236
 774 0194 3720     		movs	r0, #55
 775 0196 6844     		add	r0, r0, sp
 776 0198 0370     		strb	r3, [r0]
 379:Core/Src/main.c **** 
 777              		.loc 1 379 5 is_stmt 1 view .LVU237
 379:Core/Src/main.c **** 
 778              		.loc 1 379 39 is_stmt 0 view .LVU238
 779 019a 0B88     		ldrh	r3, [r1]
 780 019c 1B09     		lsrs	r3, r3, #4
 781 019e 1A40     		ands	r2, r3
 379:Core/Src/main.c **** 
 782              		.loc 1 379 15 view .LVU239
 783 01a0 3623     		movs	r3, #54
 784 01a2 6B44     		add	r3, r3, sp
 785 01a4 1A70     		strb	r2, [r3]
 382:Core/Src/main.c ****       //On
 786              		.loc 1 382 5 is_stmt 1 view .LVU240
 787 01a6 1B78     		ldrb	r3, [r3]
 788 01a8 DAB2     		uxtb	r2, r3
 789 01aa 032B     		cmp	r3, #3
 790 01ac 8CD0     		beq	.L22
 791 01ae 032A     		cmp	r2, #3
 792 01b0 00D9     		bls	.LCB695
 793 01b2 48E7     		b	.L23	@long jump
 794              	.LCB695:
 795 01b4 012A     		cmp	r2, #1
 796 01b6 00D1     		bne	.LCB697
 797 01b8 62E7     		b	.L24	@long jump
 798              	.LCB697:
 799 01ba 022A     		cmp	r2, #2
 800 01bc 00D0     		beq	.LCB699
 801 01be 5AE7     		b	.L26	@long jump
 802              	.LCB699:
 397:Core/Src/main.c ****         if (LEDColor == 5) {
 803              		.loc 1 397 9 view .LVU241
 397:Core/Src/main.c ****         if (LEDColor == 5) {
 804              		.loc 1 397 42 is_stmt 0 view .LVU242
 805 01c0 3722     		movs	r2, #55
 806 01c2 6A44     		add	r2, r2, sp
 807 01c4 1378     		ldrb	r3, [r2]
 808 01c6 013B     		subs	r3, r3, #1
 397:Core/Src/main.c ****         if (LEDColor == 5) {
 809              		.loc 1 397 33 view .LVU243
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 40


 810 01c8 9B00     		lsls	r3, r3, #2
 811 01ca 08A9     		add	r1, sp, #32
 812 01cc 5858     		ldr	r0, [r3, r1]
 397:Core/Src/main.c ****         if (LEDColor == 5) {
 813              		.loc 1 397 14 view .LVU244
 814 01ce 0B49     		ldr	r1, .L43+12
 815 01d0 4B69     		ldr	r3, [r1, #20]
 397:Core/Src/main.c ****         if (LEDColor == 5) {
 816              		.loc 1 397 20 view .LVU245
 817 01d2 8343     		bics	r3, r0
 818 01d4 4B61     		str	r3, [r1, #20]
 398:Core/Src/main.c ****           blink[0] = 0;
 819              		.loc 1 398 9 is_stmt 1 view .LVU246
 398:Core/Src/main.c ****           blink[0] = 0;
 820              		.loc 1 398 22 is_stmt 0 view .LVU247
 821 01d6 1378     		ldrb	r3, [r2]
 398:Core/Src/main.c ****           blink[0] = 0;
 822              		.loc 1 398 12 view .LVU248
 823 01d8 052B     		cmp	r3, #5
 824 01da 00D1     		bne	.LCB718
 825 01dc 6DE7     		b	.L42	@long jump
 826              	.LCB718:
 405:Core/Src/main.c ****         break;
 827              		.loc 1 405 11 is_stmt 1 view .LVU249
 405:Core/Src/main.c ****         break;
 828              		.loc 1 405 25 is_stmt 0 view .LVU250
 829 01de 3723     		movs	r3, #55
 830 01e0 6B44     		add	r3, r3, sp
 831 01e2 1B78     		ldrb	r3, [r3]
 832 01e4 013B     		subs	r3, r3, #1
 405:Core/Src/main.c ****         break;
 833              		.loc 1 405 29 view .LVU251
 834 01e6 07AA     		add	r2, sp, #28
 835 01e8 0021     		movs	r1, #0
 836 01ea D154     		strb	r1, [r2, r3]
 837 01ec 43E7     		b	.L26
 838              	.L44:
 839 01ee C046     		.align	2
 840              	.L43:
 841 01f0 00000000 		.word	binarySem03LEDWorkerHandle
 842 01f4 00000000 		.word	.LANCHOR0
 843 01f8 00000000 		.word	commandLED
 844 01fc 00080048 		.word	1207961600
 845              	.LBE21:
 846              		.cfi_endproc
 847              	.LFE55:
 849              		.section	.text.pwm_init,"ax",%progbits
 850              		.align	1
 851              		.global	pwm_init
 852              		.syntax unified
 853              		.code	16
 854              		.thumb_func
 856              	pwm_init:
 857              	.LFB44:
 858              		.file 3 "Core/Src/motor.c"
   1:Core/Src/motor.c **** /* ------------------------------------------------------------------------------------------------
   2:Core/Src/motor.c ****  *  Motor Control and Initialization Functions
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 41


   3:Core/Src/motor.c ****  * ------------------------------------------------------------------------------------------------
   4:Core/Src/motor.c ****  */
   5:Core/Src/motor.c **** #include "motor.h"
   6:Core/Src/motor.c **** #include "stm32f0xx.h"
   7:Core/Src/motor.c **** #include "stm32f072xb.h"
   8:Core/Src/motor.c **** 
   9:Core/Src/motor.c **** volatile int16_t error_integral = 0;    // Integrated error signal
  10:Core/Src/motor.c **** volatile uint8_t duty_cycle = 0;    	// Output PWM duty cycle
  11:Core/Src/motor.c **** // volatile int16_t target_rpm = 0;    	// Desired speed target
  12:Core/Src/motor.c **** //Global variables to pass command to worker threads
  13:Core/Src/motor.c **** extern volatile int16_t target_rpm;
  14:Core/Src/motor.c **** volatile int16_t motor_speed = 0;   	// Measured motor speed
  15:Core/Src/motor.c **** volatile int8_t adc_value = 0;      	// ADC measured motor current
  16:Core/Src/motor.c **** volatile int16_t error = 0;         	// Speed error signal
  17:Core/Src/motor.c **** volatile uint8_t Kp = 1;            	// Proportional gain
  18:Core/Src/motor.c **** volatile uint8_t Ki = 1;            	// Integral gain
  19:Core/Src/motor.c **** 
  20:Core/Src/motor.c **** // Sets up the entire motor drive system
  21:Core/Src/motor.c **** void motor_init(void) {
  22:Core/Src/motor.c ****     pwm_init();
  23:Core/Src/motor.c ****     encoder_init();
  24:Core/Src/motor.c ****     ADC_init();
  25:Core/Src/motor.c **** }
  26:Core/Src/motor.c **** 
  27:Core/Src/motor.c **** // Sets up the PWM and direction signals to drive the H-Bridge
  28:Core/Src/motor.c **** void pwm_init(void) {
 859              		.loc 3 28 21 is_stmt 1 view -0
 860              		.cfi_startproc
 861              		@ args = 0, pretend = 0, frame = 0
 862              		@ frame_needed = 0, uses_anonymous_args = 0
 863              		@ link register save eliminated.
  29:Core/Src/motor.c ****     
  30:Core/Src/motor.c ****     // Set up pin PA4 for H-bridge PWM output (TIMER 14 CH1)
  31:Core/Src/motor.c ****     GPIOA->MODER |= (1 << 9);
 864              		.loc 3 31 5 view .LVU253
 865              		.loc 3 31 10 is_stmt 0 view .LVU254
 866 0000 9023     		movs	r3, #144
 867 0002 DB05     		lsls	r3, r3, #23
 868 0004 1968     		ldr	r1, [r3]
 869              		.loc 3 31 18 view .LVU255
 870 0006 8022     		movs	r2, #128
 871 0008 9200     		lsls	r2, r2, #2
 872 000a 0A43     		orrs	r2, r1
 873 000c 1A60     		str	r2, [r3]
  32:Core/Src/motor.c ****     GPIOA->MODER &= ~(1 << 8);
 874              		.loc 3 32 5 is_stmt 1 view .LVU256
 875              		.loc 3 32 10 is_stmt 0 view .LVU257
 876 000e 1A68     		ldr	r2, [r3]
 877              		.loc 3 32 18 view .LVU258
 878 0010 1C49     		ldr	r1, .L46
 879 0012 0A40     		ands	r2, r1
 880 0014 1A60     		str	r2, [r3]
  33:Core/Src/motor.c **** 
  34:Core/Src/motor.c ****     // Set PA4 to AF4,
  35:Core/Src/motor.c ****     GPIOA->AFR[0] &= 0xFFF0FFFF; // clear PA4 bits,
 881              		.loc 3 35 5 is_stmt 1 view .LVU259
 882              		.loc 3 35 15 is_stmt 0 view .LVU260
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 42


 883 0016 1A6A     		ldr	r2, [r3, #32]
 884              		.loc 3 35 19 view .LVU261
 885 0018 1B49     		ldr	r1, .L46+4
 886 001a 0A40     		ands	r2, r1
 887 001c 1A62     		str	r2, [r3, #32]
  36:Core/Src/motor.c ****     GPIOA->AFR[0] |= (1 << 18);
 888              		.loc 3 36 5 is_stmt 1 view .LVU262
 889              		.loc 3 36 15 is_stmt 0 view .LVU263
 890 001e 196A     		ldr	r1, [r3, #32]
 891              		.loc 3 36 19 view .LVU264
 892 0020 8022     		movs	r2, #128
 893 0022 D202     		lsls	r2, r2, #11
 894 0024 0A43     		orrs	r2, r1
 895 0026 1A62     		str	r2, [r3, #32]
  37:Core/Src/motor.c **** 
  38:Core/Src/motor.c ****     // Set up a PA5, PA6 as GPIO output pins for motor direction control
  39:Core/Src/motor.c ****     GPIOA->MODER &= 0xFFFFC3FF; // clear PA5, PA6 bits,
 896              		.loc 3 39 5 is_stmt 1 view .LVU265
 897              		.loc 3 39 10 is_stmt 0 view .LVU266
 898 0028 1A68     		ldr	r2, [r3]
 899              		.loc 3 39 18 view .LVU267
 900 002a 1849     		ldr	r1, .L46+8
 901 002c 0A40     		ands	r2, r1
 902 002e 1A60     		str	r2, [r3]
  40:Core/Src/motor.c ****     GPIOA->MODER |= (1 << 10) | (1 << 12);
 903              		.loc 3 40 5 is_stmt 1 view .LVU268
 904              		.loc 3 40 10 is_stmt 0 view .LVU269
 905 0030 1968     		ldr	r1, [r3]
 906              		.loc 3 40 18 view .LVU270
 907 0032 A022     		movs	r2, #160
 908 0034 5201     		lsls	r2, r2, #5
 909 0036 0A43     		orrs	r2, r1
 910 0038 1A60     		str	r2, [r3]
  41:Core/Src/motor.c ****     
  42:Core/Src/motor.c ****     //Initialize one direction pin to high, the other low
  43:Core/Src/motor.c ****     GPIOA->ODR |= (1 << 5);
 911              		.loc 3 43 5 is_stmt 1 view .LVU271
 912              		.loc 3 43 10 is_stmt 0 view .LVU272
 913 003a 5A69     		ldr	r2, [r3, #20]
 914              		.loc 3 43 16 view .LVU273
 915 003c 2021     		movs	r1, #32
 916 003e 0A43     		orrs	r2, r1
 917 0040 5A61     		str	r2, [r3, #20]
  44:Core/Src/motor.c ****     GPIOA->ODR &= ~(1 << 6);
 918              		.loc 3 44 5 is_stmt 1 view .LVU274
 919              		.loc 3 44 10 is_stmt 0 view .LVU275
 920 0042 5A69     		ldr	r2, [r3, #20]
 921              		.loc 3 44 16 view .LVU276
 922 0044 2031     		adds	r1, r1, #32
 923 0046 8A43     		bics	r2, r1
 924 0048 5A61     		str	r2, [r3, #20]
  45:Core/Src/motor.c **** 
  46:Core/Src/motor.c ****     // Set up PWM timer
  47:Core/Src/motor.c ****     RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 925              		.loc 3 47 5 is_stmt 1 view .LVU277
 926              		.loc 3 47 8 is_stmt 0 view .LVU278
 927 004a 114A     		ldr	r2, .L46+12
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 43


 928 004c D169     		ldr	r1, [r2, #28]
 929              		.loc 3 47 18 view .LVU279
 930 004e 8023     		movs	r3, #128
 931 0050 5B00     		lsls	r3, r3, #1
 932 0052 0B43     		orrs	r3, r1
 933 0054 D361     		str	r3, [r2, #28]
  48:Core/Src/motor.c ****     TIM14->CR1 = 0;                         // Clear control registers
 934              		.loc 3 48 5 is_stmt 1 view .LVU280
 935              		.loc 3 48 16 is_stmt 0 view .LVU281
 936 0056 0F4B     		ldr	r3, .L46+16
 937 0058 0022     		movs	r2, #0
 938 005a 1A60     		str	r2, [r3]
  49:Core/Src/motor.c ****     TIM14->CCMR1 = 0;                       // (prevents having to manually clear bits)
 939              		.loc 3 49 5 is_stmt 1 view .LVU282
 940              		.loc 3 49 18 is_stmt 0 view .LVU283
 941 005c 9A61     		str	r2, [r3, #24]
  50:Core/Src/motor.c ****     TIM14->CCER = 0;
 942              		.loc 3 50 5 is_stmt 1 view .LVU284
 943              		.loc 3 50 17 is_stmt 0 view .LVU285
 944 005e 1A62     		str	r2, [r3, #32]
  51:Core/Src/motor.c **** 
  52:Core/Src/motor.c ****     // Set output-compare CH1 to PWM1 mode and enable CCR1 preload buffer
  53:Core/Src/motor.c ****     TIM14->CCMR1 |= (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE);
 945              		.loc 3 53 5 is_stmt 1 view .LVU286
 946              		.loc 3 53 10 is_stmt 0 view .LVU287
 947 0060 9969     		ldr	r1, [r3, #24]
 948              		.loc 3 53 18 view .LVU288
 949 0062 6820     		movs	r0, #104
 950 0064 0143     		orrs	r1, r0
 951 0066 9961     		str	r1, [r3, #24]
  54:Core/Src/motor.c ****     TIM14->CCER |= TIM_CCER_CC1E;           // Enable capture-compare channel 1
 952              		.loc 3 54 5 is_stmt 1 view .LVU289
 953              		.loc 3 54 10 is_stmt 0 view .LVU290
 954 0068 186A     		ldr	r0, [r3, #32]
 955              		.loc 3 54 17 view .LVU291
 956 006a 0121     		movs	r1, #1
 957 006c 0843     		orrs	r0, r1
 958 006e 1862     		str	r0, [r3, #32]
  55:Core/Src/motor.c ****     TIM14->PSC = 1;                         // Run timer on 24Mhz
 959              		.loc 3 55 5 is_stmt 1 view .LVU292
 960              		.loc 3 55 16 is_stmt 0 view .LVU293
 961 0070 9962     		str	r1, [r3, #40]
  56:Core/Src/motor.c ****     TIM14->ARR = 1200;                      // PWM at 20kHz
 962              		.loc 3 56 5 is_stmt 1 view .LVU294
 963              		.loc 3 56 16 is_stmt 0 view .LVU295
 964 0072 9620     		movs	r0, #150
 965 0074 C000     		lsls	r0, r0, #3
 966 0076 D862     		str	r0, [r3, #44]
  57:Core/Src/motor.c ****     TIM14->CCR1 = 0;                        // Start PWM at 0% duty cycle
 967              		.loc 3 57 5 is_stmt 1 view .LVU296
 968              		.loc 3 57 17 is_stmt 0 view .LVU297
 969 0078 5A63     		str	r2, [r3, #52]
  58:Core/Src/motor.c ****     
  59:Core/Src/motor.c ****     TIM14->CR1 |= TIM_CR1_CEN;              // Enable timer
 970              		.loc 3 59 5 is_stmt 1 view .LVU298
 971              		.loc 3 59 10 is_stmt 0 view .LVU299
 972 007a 1A68     		ldr	r2, [r3]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 44


 973              		.loc 3 59 16 view .LVU300
 974 007c 0A43     		orrs	r2, r1
 975 007e 1A60     		str	r2, [r3]
  60:Core/Src/motor.c **** }
 976              		.loc 3 60 1 view .LVU301
 977              		@ sp needed
 978 0080 7047     		bx	lr
 979              	.L47:
 980 0082 C046     		.align	2
 981              	.L46:
 982 0084 FFFEFFFF 		.word	-257
 983 0088 FFFFF0FF 		.word	-983041
 984 008c FFC3FFFF 		.word	-15361
 985 0090 00100240 		.word	1073876992
 986 0094 00200040 		.word	1073750016
 987              		.cfi_endproc
 988              	.LFE44:
 990              		.global	__aeabi_uidiv
 991              		.section	.text.pwm_setDutyCycle,"ax",%progbits
 992              		.align	1
 993              		.global	pwm_setDutyCycle
 994              		.syntax unified
 995              		.code	16
 996              		.thumb_func
 998              	pwm_setDutyCycle:
 999              	.LVL29:
 1000              	.LFB45:
  61:Core/Src/motor.c **** 
  62:Core/Src/motor.c **** // Set the duty cycle of the PWM, accepts (0-100)
  63:Core/Src/motor.c **** void pwm_setDutyCycle(uint8_t duty) {
 1001              		.loc 3 63 37 is_stmt 1 view -0
 1002              		.cfi_startproc
 1003              		@ args = 0, pretend = 0, frame = 0
 1004              		@ frame_needed = 0, uses_anonymous_args = 0
 1005              		.loc 3 63 37 is_stmt 0 view .LVU303
 1006 0000 10B5     		push	{r4, lr}
 1007              	.LCFI6:
 1008              		.cfi_def_cfa_offset 8
 1009              		.cfi_offset 4, -8
 1010              		.cfi_offset 14, -4
  64:Core/Src/motor.c ****     if(duty <= 100) {
 1011              		.loc 3 64 5 is_stmt 1 view .LVU304
 1012              		.loc 3 64 7 is_stmt 0 view .LVU305
 1013 0002 6428     		cmp	r0, #100
 1014 0004 06D8     		bhi	.L48
  65:Core/Src/motor.c ****         TIM14->CCR1 = ((uint32_t)duty*TIM14->ARR)/100;  // Use linear transform to produce CCR1 val
 1015              		.loc 3 65 9 is_stmt 1 view .LVU306
 1016              		.loc 3 65 44 is_stmt 0 view .LVU307
 1017 0006 044C     		ldr	r4, .L50
 1018 0008 E36A     		ldr	r3, [r4, #44]
 1019              		.loc 3 65 38 view .LVU308
 1020 000a 5843     		muls	r0, r3
 1021              	.LVL30:
 1022              		.loc 3 65 50 view .LVU309
 1023 000c 6421     		movs	r1, #100
 1024 000e FFF7FEFF 		bl	__aeabi_uidiv
 1025              	.LVL31:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 45


 1026              		.loc 3 65 21 view .LVU310
 1027 0012 6063     		str	r0, [r4, #52]
 1028              	.L48:
  66:Core/Src/motor.c ****         // (CCR1 == "pulse" parameter in PWM struct used by peripheral library)
  67:Core/Src/motor.c ****     }
  68:Core/Src/motor.c **** }
 1029              		.loc 3 68 1 view .LVU311
 1030              		@ sp needed
 1031 0014 10BD     		pop	{r4, pc}
 1032              	.L51:
 1033 0016 C046     		.align	2
 1034              	.L50:
 1035 0018 00200040 		.word	1073750016
 1036              		.cfi_endproc
 1037              	.LFE45:
 1039              		.section	.text.encoder_init,"ax",%progbits
 1040              		.align	1
 1041              		.global	encoder_init
 1042              		.syntax unified
 1043              		.code	16
 1044              		.thumb_func
 1046              	encoder_init:
 1047              	.LFB46:
  69:Core/Src/motor.c **** 
  70:Core/Src/motor.c **** // Sets up encoder interface to read motor speed
  71:Core/Src/motor.c **** void encoder_init(void) {
 1048              		.loc 3 71 25 is_stmt 1 view -0
 1049              		.cfi_startproc
 1050              		@ args = 0, pretend = 0, frame = 0
 1051              		@ frame_needed = 0, uses_anonymous_args = 0
 1052              		@ link register save eliminated.
  72:Core/Src/motor.c ****     
  73:Core/Src/motor.c ****     // Set up encoder input pins (TIMER 3 CH1 and CH2)
  74:Core/Src/motor.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 1053              		.loc 3 74 5 view .LVU313
 1054              		.loc 3 74 8 is_stmt 0 view .LVU314
 1055 0000 1F4A     		ldr	r2, .L53
 1056 0002 5169     		ldr	r1, [r2, #20]
 1057              		.loc 3 74 17 view .LVU315
 1058 0004 8023     		movs	r3, #128
 1059 0006 DB02     		lsls	r3, r3, #11
 1060 0008 0B43     		orrs	r3, r1
 1061 000a 5361     		str	r3, [r2, #20]
  75:Core/Src/motor.c **** 
  76:Core/Src/motor.c ****     // PB4(ENCA) and PB5(ENCB) are encoder 
  77:Core/Src/motor.c ****     GPIOB->MODER &= ~(GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0);
 1062              		.loc 3 77 5 is_stmt 1 view .LVU316
 1063              		.loc 3 77 10 is_stmt 0 view .LVU317
 1064 000c 1D4B     		ldr	r3, .L53+4
 1065 000e 1968     		ldr	r1, [r3]
 1066              		.loc 3 77 18 view .LVU318
 1067 0010 1D48     		ldr	r0, .L53+8
 1068 0012 0140     		ands	r1, r0
 1069 0014 1960     		str	r1, [r3]
  78:Core/Src/motor.c ****     GPIOB->MODER |= (GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1);
 1070              		.loc 3 78 5 is_stmt 1 view .LVU319
 1071              		.loc 3 78 10 is_stmt 0 view .LVU320
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 46


 1072 0016 1868     		ldr	r0, [r3]
 1073              		.loc 3 78 18 view .LVU321
 1074 0018 A021     		movs	r1, #160
 1075 001a 0901     		lsls	r1, r1, #4
 1076 001c 0143     		orrs	r1, r0
 1077 001e 1960     		str	r1, [r3]
  79:Core/Src/motor.c ****     GPIOB->AFR[0] |= ( (1 << 16) | (1 << 20) );
 1078              		.loc 3 79 5 is_stmt 1 view .LVU322
 1079              		.loc 3 79 15 is_stmt 0 view .LVU323
 1080 0020 186A     		ldr	r0, [r3, #32]
 1081              		.loc 3 79 19 view .LVU324
 1082 0022 8821     		movs	r1, #136
 1083 0024 4903     		lsls	r1, r1, #13
 1084 0026 0143     		orrs	r1, r0
 1085 0028 1962     		str	r1, [r3, #32]
  80:Core/Src/motor.c **** 
  81:Core/Src/motor.c ****     // Set up encoder interface (TIM3 encoder input mode)
  82:Core/Src/motor.c ****     RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 1086              		.loc 3 82 5 is_stmt 1 view .LVU325
 1087              		.loc 3 82 8 is_stmt 0 view .LVU326
 1088 002a D369     		ldr	r3, [r2, #28]
 1089              		.loc 3 82 18 view .LVU327
 1090 002c 0221     		movs	r1, #2
 1091 002e 0B43     		orrs	r3, r1
 1092 0030 D361     		str	r3, [r2, #28]
  83:Core/Src/motor.c ****     TIM3->CCMR1 = 0;
 1093              		.loc 3 83 5 is_stmt 1 view .LVU328
 1094              		.loc 3 83 17 is_stmt 0 view .LVU329
 1095 0032 164B     		ldr	r3, .L53+12
 1096 0034 0021     		movs	r1, #0
 1097 0036 9961     		str	r1, [r3, #24]
  84:Core/Src/motor.c ****     TIM3->CCER = 0;
 1098              		.loc 3 84 5 is_stmt 1 view .LVU330
 1099              		.loc 3 84 16 is_stmt 0 view .LVU331
 1100 0038 1962     		str	r1, [r3, #32]
  85:Core/Src/motor.c ****     TIM3->SMCR = 0;
 1101              		.loc 3 85 5 is_stmt 1 view .LVU332
 1102              		.loc 3 85 16 is_stmt 0 view .LVU333
 1103 003a 9960     		str	r1, [r3, #8]
  86:Core/Src/motor.c ****     TIM3->CR1 = 0;
 1104              		.loc 3 86 5 is_stmt 1 view .LVU334
 1105              		.loc 3 86 15 is_stmt 0 view .LVU335
 1106 003c 1960     		str	r1, [r3]
  87:Core/Src/motor.c **** 
  88:Core/Src/motor.c ****     TIM3->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);   // TI1FP1 and TI2FP2 signals connected 
 1107              		.loc 3 88 5 is_stmt 1 view .LVU336
 1108              		.loc 3 88 9 is_stmt 0 view .LVU337
 1109 003e 9869     		ldr	r0, [r3, #24]
 1110              		.loc 3 88 17 view .LVU338
 1111 0040 0221     		movs	r1, #2
 1112 0042 FF31     		adds	r1, r1, #255
 1113 0044 0143     		orrs	r1, r0
 1114 0046 9961     		str	r1, [r3, #24]
  89:Core/Src/motor.c ****     TIM3->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0);        // Capture encoder on both rising and f
 1115              		.loc 3 89 5 is_stmt 1 view .LVU339
 1116              		.loc 3 89 9 is_stmt 0 view .LVU340
 1117 0048 9968     		ldr	r1, [r3, #8]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 47


 1118              		.loc 3 89 16 view .LVU341
 1119 004a 0320     		movs	r0, #3
 1120 004c 0143     		orrs	r1, r0
 1121 004e 9960     		str	r1, [r3, #8]
  90:Core/Src/motor.c ****     TIM3->ARR = 0xFFFF;                                     // Set ARR to top of timer (longest pos
 1122              		.loc 3 90 5 is_stmt 1 view .LVU342
 1123              		.loc 3 90 15 is_stmt 0 view .LVU343
 1124 0050 0F49     		ldr	r1, .L53+16
 1125 0052 D962     		str	r1, [r3, #44]
  91:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF;                                     // Bias at midpoint to allow for negati
 1126              		.loc 3 91 5 is_stmt 1 view .LVU344
 1127              		.loc 3 91 15 is_stmt 0 view .LVU345
 1128 0054 0F49     		ldr	r1, .L53+20
 1129 0056 5962     		str	r1, [r3, #36]
  92:Core/Src/motor.c ****     // (Could also cast unsigned register to signed number to get negative numbers if it rotates ba
  93:Core/Src/motor.c ****     //  just another option, the mid-bias is a bit simpler to understand though.)
  94:Core/Src/motor.c ****     TIM3->CR1 |= TIM_CR1_CEN;                               // Enable timer
 1130              		.loc 3 94 5 is_stmt 1 view .LVU346
 1131              		.loc 3 94 9 is_stmt 0 view .LVU347
 1132 0058 1868     		ldr	r0, [r3]
 1133              		.loc 3 94 15 view .LVU348
 1134 005a 0121     		movs	r1, #1
 1135 005c 0843     		orrs	r0, r1
 1136 005e 1860     		str	r0, [r3]
  95:Core/Src/motor.c **** 
  96:Core/Src/motor.c ****     // Configure a second timer (TIM7) to fire an ISR on update event
  97:Core/Src/motor.c ****     // Used to periodically check and update speed variable
  98:Core/Src/motor.c ****     RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 1137              		.loc 3 98 5 is_stmt 1 view .LVU349
 1138              		.loc 3 98 8 is_stmt 0 view .LVU350
 1139 0060 D369     		ldr	r3, [r2, #28]
 1140              		.loc 3 98 18 view .LVU351
 1141 0062 2020     		movs	r0, #32
 1142 0064 0343     		orrs	r3, r0
 1143 0066 D361     		str	r3, [r2, #28]
  99:Core/Src/motor.c ****     
 100:Core/Src/motor.c ****     // Select PSC and ARR values that give an appropriate interrupt rate
 101:Core/Src/motor.c ****     //TIM7->PSC = 11;
 102:Core/Src/motor.c ****     //TIM7->ARR = 30000;
 103:Core/Src/motor.c ****     TIM7->PSC = 15;
 1144              		.loc 3 103 5 is_stmt 1 view .LVU352
 1145              		.loc 3 103 15 is_stmt 0 view .LVU353
 1146 0068 0B4B     		ldr	r3, .L53+24
 1147 006a 0F22     		movs	r2, #15
 1148 006c 9A62     		str	r2, [r3, #40]
 104:Core/Src/motor.c ****     TIM7->ARR = 46875;
 1149              		.loc 3 104 5 is_stmt 1 view .LVU354
 1150              		.loc 3 104 15 is_stmt 0 view .LVU355
 1151 006e 0B4A     		ldr	r2, .L53+28
 1152 0070 DA62     		str	r2, [r3, #44]
 105:Core/Src/motor.c ****     
 106:Core/Src/motor.c ****     
 107:Core/Src/motor.c ****     TIM7->DIER |= TIM_DIER_UIE;             // Enable update event interrupt
 1153              		.loc 3 107 5 is_stmt 1 view .LVU356
 1154              		.loc 3 107 9 is_stmt 0 view .LVU357
 1155 0072 DA68     		ldr	r2, [r3, #12]
 1156              		.loc 3 107 16 view .LVU358
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 48


 1157 0074 0A43     		orrs	r2, r1
 1158 0076 DA60     		str	r2, [r3, #12]
 108:Core/Src/motor.c ****     TIM7->CR1 |= TIM_CR1_CEN;               // Enable Timer
 1159              		.loc 3 108 5 is_stmt 1 view .LVU359
 1160              		.loc 3 108 9 is_stmt 0 view .LVU360
 1161 0078 1A68     		ldr	r2, [r3]
 1162              		.loc 3 108 15 view .LVU361
 1163 007a 0A43     		orrs	r2, r1
 1164 007c 1A60     		str	r2, [r3]
 109:Core/Src/motor.c **** }
 1165              		.loc 3 109 1 view .LVU362
 1166              		@ sp needed
 1167 007e 7047     		bx	lr
 1168              	.L54:
 1169              		.align	2
 1170              	.L53:
 1171 0080 00100240 		.word	1073876992
 1172 0084 00040048 		.word	1207960576
 1173 0088 FFFAFFFF 		.word	-1281
 1174 008c 00040040 		.word	1073742848
 1175 0090 FFFF0000 		.word	65535
 1176 0094 FF7F0000 		.word	32767
 1177 0098 00140040 		.word	1073746944
 1178 009c 1BB70000 		.word	46875
 1179              		.cfi_endproc
 1180              	.LFE46:
 1182              		.section	.text.ADC_init,"ax",%progbits
 1183              		.align	1
 1184              		.global	ADC_init
 1185              		.syntax unified
 1186              		.code	16
 1187              		.thumb_func
 1189              	ADC_init:
 1190              	.LFB48:
 110:Core/Src/motor.c **** 
 111:Core/Src/motor.c **** // Encoder interrupt to calculate motor speed, also manages PI controller
 112:Core/Src/motor.c **** void TIM7_IRQHandler(void) {
 113:Core/Src/motor.c ****     /* Calculate the motor speed in raw encoder counts
 114:Core/Src/motor.c ****      * Note the motor speed is signed! Motor can be run in reverse.
 115:Core/Src/motor.c ****      * Speed is measured by how far the counter moved from center point
 116:Core/Src/motor.c ****      */
 117:Core/Src/motor.c ****     motor_speed = (TIM3->CNT - 0x7FFF);
 118:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 119:Core/Src/motor.c ****     // Call the PI update function
 120:Core/Src/motor.c ****     PI_update();
 121:Core/Src/motor.c **** 
 122:Core/Src/motor.c ****     TIM7->SR &= ~TIM_SR_UIF;        // Acknowledge the interrupt
 123:Core/Src/motor.c **** }
 124:Core/Src/motor.c **** 
 125:Core/Src/motor.c **** void ADC_init(void) {
 1191              		.loc 3 125 21 is_stmt 1 view -0
 1192              		.cfi_startproc
 1193              		@ args = 0, pretend = 0, frame = 0
 1194              		@ frame_needed = 0, uses_anonymous_args = 0
 1195              		@ link register save eliminated.
 126:Core/Src/motor.c **** 
 127:Core/Src/motor.c ****     // Configure PA1 for ADC input (used for current monitoring)
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 49


 128:Core/Src/motor.c ****     GPIOA->MODER |= (GPIO_MODER_MODER1_0 | GPIO_MODER_MODER1_1);
 1196              		.loc 3 128 5 view .LVU364
 1197              		.loc 3 128 10 is_stmt 0 view .LVU365
 1198 0000 9022     		movs	r2, #144
 1199 0002 D205     		lsls	r2, r2, #23
 1200 0004 1368     		ldr	r3, [r2]
 1201              		.loc 3 128 18 view .LVU366
 1202 0006 0C21     		movs	r1, #12
 1203 0008 0B43     		orrs	r3, r1
 1204 000a 1360     		str	r3, [r2]
 129:Core/Src/motor.c **** 
 130:Core/Src/motor.c ****     // Configure ADC to 8-bit continuous-run mode, (asynchronous clock mode)
 131:Core/Src/motor.c ****     RCC->APB2ENR |= RCC_APB2ENR_ADCEN;
 1205              		.loc 3 131 5 is_stmt 1 view .LVU367
 1206              		.loc 3 131 8 is_stmt 0 view .LVU368
 1207 000c 154A     		ldr	r2, .L59
 1208 000e 9169     		ldr	r1, [r2, #24]
 1209              		.loc 3 131 18 view .LVU369
 1210 0010 8023     		movs	r3, #128
 1211 0012 9B00     		lsls	r3, r3, #2
 1212 0014 0B43     		orrs	r3, r1
 1213 0016 9361     		str	r3, [r2, #24]
 132:Core/Src/motor.c **** 
 133:Core/Src/motor.c ****     ADC1->CFGR1 = 0;                        // Default resolution is 12-bit (RES[1:0] = 00 --> 12-b
 1214              		.loc 3 133 5 is_stmt 1 view .LVU370
 1215              		.loc 3 133 17 is_stmt 0 view .LVU371
 1216 0018 134B     		ldr	r3, .L59+4
 1217 001a 0021     		movs	r1, #0
 1218 001c D960     		str	r1, [r3, #12]
 134:Core/Src/motor.c ****     ADC1->CFGR1 |= ADC_CFGR1_CONT;          // Set to continuous mode
 1219              		.loc 3 134 5 is_stmt 1 view .LVU372
 1220              		.loc 3 134 9 is_stmt 0 view .LVU373
 1221 001e D868     		ldr	r0, [r3, #12]
 1222              		.loc 3 134 17 view .LVU374
 1223 0020 8022     		movs	r2, #128
 1224 0022 9201     		lsls	r2, r2, #6
 1225 0024 0243     		orrs	r2, r0
 1226 0026 DA60     		str	r2, [r3, #12]
 135:Core/Src/motor.c ****     ADC1->CHSELR |= ADC_CHSELR_CHSEL1;      // Enable channel 1
 1227              		.loc 3 135 5 is_stmt 1 view .LVU375
 1228              		.loc 3 135 9 is_stmt 0 view .LVU376
 1229 0028 9A6A     		ldr	r2, [r3, #40]
 1230              		.loc 3 135 18 view .LVU377
 1231 002a 0220     		movs	r0, #2
 1232 002c 0243     		orrs	r2, r0
 1233 002e 9A62     		str	r2, [r3, #40]
 136:Core/Src/motor.c **** 
 137:Core/Src/motor.c ****     ADC1->CR = 0;
 1234              		.loc 3 137 5 is_stmt 1 view .LVU378
 1235              		.loc 3 137 14 is_stmt 0 view .LVU379
 1236 0030 9960     		str	r1, [r3, #8]
 138:Core/Src/motor.c ****     ADC1->CR |= ADC_CR_ADCAL;               // Perform self calibration
 1237              		.loc 3 138 5 is_stmt 1 view .LVU380
 1238              		.loc 3 138 9 is_stmt 0 view .LVU381
 1239 0032 9968     		ldr	r1, [r3, #8]
 1240              		.loc 3 138 14 view .LVU382
 1241 0034 8022     		movs	r2, #128
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 50


 1242 0036 1206     		lsls	r2, r2, #24
 1243 0038 0A43     		orrs	r2, r1
 1244 003a 9A60     		str	r2, [r3, #8]
 139:Core/Src/motor.c ****     while(ADC1->CR & ADC_CR_ADCAL);         // Delay until calibration is complete
 1245              		.loc 3 139 5 is_stmt 1 view .LVU383
 1246              	.L56:
 1247              		.loc 3 139 11 discriminator 1 view .LVU384
 1248              		.loc 3 139 15 is_stmt 0 discriminator 1 view .LVU385
 1249 003c 0A4B     		ldr	r3, .L59+4
 1250 003e 9B68     		ldr	r3, [r3, #8]
 1251              		.loc 3 139 11 discriminator 1 view .LVU386
 1252 0040 002B     		cmp	r3, #0
 1253 0042 FBDB     		blt	.L56
 140:Core/Src/motor.c **** 
 141:Core/Src/motor.c ****     ADC1->CR |= ADC_CR_ADEN;                // Enable ADC
 1254              		.loc 3 141 5 is_stmt 1 view .LVU387
 1255              		.loc 3 141 9 is_stmt 0 view .LVU388
 1256 0044 084A     		ldr	r2, .L59+4
 1257 0046 9368     		ldr	r3, [r2, #8]
 1258              		.loc 3 141 14 view .LVU389
 1259 0048 0121     		movs	r1, #1
 1260 004a 0B43     		orrs	r3, r1
 1261 004c 9360     		str	r3, [r2, #8]
 142:Core/Src/motor.c ****     while(!(ADC1->ISR & ADC_ISR_ADRDY));    // Wait until ADC ready
 1262              		.loc 3 142 5 is_stmt 1 view .LVU390
 1263              	.L57:
 1264              		.loc 3 142 11 discriminator 1 view .LVU391
 1265              		.loc 3 142 17 is_stmt 0 discriminator 1 view .LVU392
 1266 004e 064B     		ldr	r3, .L59+4
 1267 0050 1B68     		ldr	r3, [r3]
 1268              		.loc 3 142 11 discriminator 1 view .LVU393
 1269 0052 DB07     		lsls	r3, r3, #31
 1270 0054 FBD5     		bpl	.L57
 143:Core/Src/motor.c ****     ADC1->CR |= ADC_CR_ADSTART;             // Signal conversion start
 1271              		.loc 3 143 5 is_stmt 1 view .LVU394
 1272              		.loc 3 143 9 is_stmt 0 view .LVU395
 1273 0056 044A     		ldr	r2, .L59+4
 1274 0058 9368     		ldr	r3, [r2, #8]
 1275              		.loc 3 143 14 view .LVU396
 1276 005a 0421     		movs	r1, #4
 1277 005c 0B43     		orrs	r3, r1
 1278 005e 9360     		str	r3, [r2, #8]
 144:Core/Src/motor.c **** }
 1279              		.loc 3 144 1 view .LVU397
 1280              		@ sp needed
 1281 0060 7047     		bx	lr
 1282              	.L60:
 1283 0062 C046     		.align	2
 1284              	.L59:
 1285 0064 00100240 		.word	1073876992
 1286 0068 00240140 		.word	1073816576
 1287              		.cfi_endproc
 1288              	.LFE48:
 1290              		.section	.text.motor_init,"ax",%progbits
 1291              		.align	1
 1292              		.global	motor_init
 1293              		.syntax unified
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 51


 1294              		.code	16
 1295              		.thumb_func
 1297              	motor_init:
 1298              	.LFB43:
  21:Core/Src/motor.c ****     pwm_init();
 1299              		.loc 3 21 23 is_stmt 1 view -0
 1300              		.cfi_startproc
 1301              		@ args = 0, pretend = 0, frame = 0
 1302              		@ frame_needed = 0, uses_anonymous_args = 0
 1303 0000 10B5     		push	{r4, lr}
 1304              	.LCFI7:
 1305              		.cfi_def_cfa_offset 8
 1306              		.cfi_offset 4, -8
 1307              		.cfi_offset 14, -4
  22:Core/Src/motor.c ****     encoder_init();
 1308              		.loc 3 22 5 view .LVU399
 1309 0002 FFF7FEFF 		bl	pwm_init
 1310              	.LVL32:
  23:Core/Src/motor.c ****     ADC_init();
 1311              		.loc 3 23 5 view .LVU400
 1312 0006 FFF7FEFF 		bl	encoder_init
 1313              	.LVL33:
  24:Core/Src/motor.c **** }
 1314              		.loc 3 24 5 view .LVU401
 1315 000a FFF7FEFF 		bl	ADC_init
 1316              	.LVL34:
  25:Core/Src/motor.c **** 
 1317              		.loc 3 25 1 is_stmt 0 view .LVU402
 1318              		@ sp needed
 1319 000e 10BD     		pop	{r4, pc}
 1320              		.cfi_endproc
 1321              	.LFE43:
 1323              		.section	.rodata.PI_update.str1.4,"aMS",%progbits,1
 1324              		.align	2
 1325              	.LC9:
 1326 0000 6D656173 		.ascii	"measured rpm:\000"
 1326      75726564 
 1326      2072706D 
 1326      3A00
 1327              		.section	.text.PI_update,"ax",%progbits
 1328              		.align	1
 1329              		.global	PI_update
 1330              		.syntax unified
 1331              		.code	16
 1332              		.thumb_func
 1334              	PI_update:
 1335              	.LFB49:
 145:Core/Src/motor.c **** 
 146:Core/Src/motor.c **** void PI_update(void) {
 1336              		.loc 3 146 22 is_stmt 1 view -0
 1337              		.cfi_startproc
 1338              		@ args = 0, pretend = 0, frame = 0
 1339              		@ frame_needed = 0, uses_anonymous_args = 0
 1340 0000 10B5     		push	{r4, lr}
 1341              	.LCFI8:
 1342              		.cfi_def_cfa_offset 8
 1343              		.cfi_offset 4, -8
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 52


 1344              		.cfi_offset 14, -4
 147:Core/Src/motor.c ****     transmitCharArray("measured rpm:");
 1345              		.loc 3 147 5 view .LVU404
 1346 0002 2E48     		ldr	r0, .L71
 1347 0004 FFF7FEFF 		bl	transmitCharArray
 1348              	.LVL35:
 148:Core/Src/motor.c ****     sendUint16BinToUart(motor_speed/2);
 1349              		.loc 3 148 5 view .LVU405
 1350 0008 2D4C     		ldr	r4, .L71+4
 1351 000a 2088     		ldrh	r0, [r4]
 1352 000c 03B2     		sxth	r3, r0
 1353 000e C00B     		lsrs	r0, r0, #15
 1354 0010 C018     		adds	r0, r0, r3
 1355 0012 4010     		asrs	r0, r0, #1
 1356 0014 80B2     		uxth	r0, r0
 1357 0016 FFF7FEFF 		bl	sendUint16BinToUart
 1358              	.LVL36:
 149:Core/Src/motor.c ****     // Run PI control loop
 150:Core/Src/motor.c ****     //error = target_rpm - motor_speed/2; // 2-to-1 conversion
 151:Core/Src/motor.c ****     //error_integral = error_integral + Ki * error; 
 152:Core/Src/motor.c ****     
 153:Core/Src/motor.c ****     error =  (target_rpm * 5) - motor_speed;
 1359              		.loc 3 153 5 view .LVU406
 1360              		.loc 3 153 26 is_stmt 0 view .LVU407
 1361 001a 2A4B     		ldr	r3, .L71+8
 1362 001c 1B88     		ldrh	r3, [r3]
 1363 001e 1BB2     		sxth	r3, r3
 1364 0020 9A00     		lsls	r2, r3, #2
 1365 0022 9B18     		adds	r3, r3, r2
 1366 0024 9BB2     		uxth	r3, r3
 1367              		.loc 3 153 31 view .LVU408
 1368 0026 2288     		ldrh	r2, [r4]
 1369 0028 12B2     		sxth	r2, r2
 1370 002a 9B1A     		subs	r3, r3, r2
 1371 002c 1BB2     		sxth	r3, r3
 1372              		.loc 3 153 11 view .LVU409
 1373 002e 2648     		ldr	r0, .L71+12
 1374 0030 0380     		strh	r3, [r0]
 154:Core/Src/motor.c **** 
 155:Core/Src/motor.c ****     error_integral = Ki * (error_integral + error);
 1375              		.loc 3 155 5 is_stmt 1 view .LVU410
 1376              		.loc 3 155 20 is_stmt 0 view .LVU411
 1377 0032 264B     		ldr	r3, .L71+16
 1378 0034 1B78     		ldrb	r3, [r3]
 1379              		.loc 3 155 43 view .LVU412
 1380 0036 2649     		ldr	r1, .L71+20
 1381 0038 0A88     		ldrh	r2, [r1]
 1382 003a 12B2     		sxth	r2, r2
 1383 003c 0088     		ldrh	r0, [r0]
 1384 003e 00B2     		sxth	r0, r0
 1385 0040 1218     		adds	r2, r2, r0
 1386              		.loc 3 155 20 view .LVU413
 1387 0042 5343     		muls	r3, r2
 1388 0044 1BB2     		sxth	r3, r3
 1389 0046 0B80     		strh	r3, [r1]
 156:Core/Src/motor.c **** 
 157:Core/Src/motor.c ****     if (error_integral < 0) {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 53


 1390              		.loc 3 157 5 is_stmt 1 view .LVU414
 1391              		.loc 3 157 24 is_stmt 0 view .LVU415
 1392 0048 0B88     		ldrh	r3, [r1]
 1393 004a 1BB2     		sxth	r3, r3
 1394              		.loc 3 157 8 view .LVU416
 1395 004c 002B     		cmp	r3, #0
 1396 004e 09DB     		blt	.L70
 158:Core/Src/motor.c ****         error_integral = 0;
 159:Core/Src/motor.c ****     }
 160:Core/Src/motor.c **** 
 161:Core/Src/motor.c ****     else if (error_integral > 3200){
 1397              		.loc 3 161 10 is_stmt 1 view .LVU417
 1398              		.loc 3 161 29 is_stmt 0 view .LVU418
 1399 0050 1F4B     		ldr	r3, .L71+20
 1400 0052 1B88     		ldrh	r3, [r3]
 1401 0054 1BB2     		sxth	r3, r3
 1402              		.loc 3 161 13 view .LVU419
 1403 0056 C822     		movs	r2, #200
 1404 0058 1201     		lsls	r2, r2, #4
 1405 005a 9342     		cmp	r3, r2
 1406 005c 04DD     		ble	.L64
 162:Core/Src/motor.c ****         error_integral = 3200;
 1407              		.loc 3 162 9 is_stmt 1 view .LVU420
 1408              		.loc 3 162 24 is_stmt 0 view .LVU421
 1409 005e 1C4B     		ldr	r3, .L71+20
 1410 0060 1A80     		strh	r2, [r3]
 1411 0062 01E0     		b	.L64
 1412              	.L70:
 158:Core/Src/motor.c ****         error_integral = 0;
 1413              		.loc 3 158 9 is_stmt 1 view .LVU422
 158:Core/Src/motor.c ****         error_integral = 0;
 1414              		.loc 3 158 24 is_stmt 0 view .LVU423
 1415 0064 0022     		movs	r2, #0
 1416 0066 0A80     		strh	r2, [r1]
 1417              	.L64:
 163:Core/Src/motor.c ****     }
 164:Core/Src/motor.c ****     
 165:Core/Src/motor.c ****     int16_t output = (Kp * error) + error_integral; // Change this!
 1418              		.loc 3 165 5 is_stmt 1 view .LVU424
 1419              		.loc 3 165 35 is_stmt 0 view .LVU425
 1420 0068 1A4B     		ldr	r3, .L71+24
 1421 006a 1B78     		ldrb	r3, [r3]
 1422 006c 164A     		ldr	r2, .L71+12
 1423 006e 1188     		ldrh	r1, [r2]
 1424 0070 09B2     		sxth	r1, r1
 1425 0072 174A     		ldr	r2, .L71+20
 1426 0074 1288     		ldrh	r2, [r2]
 1427 0076 12B2     		sxth	r2, r2
 1428 0078 4B43     		muls	r3, r1
 1429 007a 9B18     		adds	r3, r3, r2
 1430              		.loc 3 165 13 view .LVU426
 1431 007c 1BB2     		sxth	r3, r3
 1432              	.LVL37:
 166:Core/Src/motor.c ****     
 167:Core/Src/motor.c ****      output = output / 32;
 1433              		.loc 3 167 6 is_stmt 1 view .LVU427
 1434              		.loc 3 167 13 is_stmt 0 view .LVU428
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 54


 1435 007e DA17     		asrs	r2, r3, #31
 1436 0080 1F24     		movs	r4, #31
 1437 0082 1440     		ands	r4, r2
 1438 0084 E418     		adds	r4, r4, r3
 1439 0086 6411     		asrs	r4, r4, #5
 1440              	.LVL38:
 168:Core/Src/motor.c **** 
 169:Core/Src/motor.c ****     if (output < 0) output = 0;
 1441              		.loc 3 169 5 is_stmt 1 view .LVU429
 1442              		.loc 3 169 8 is_stmt 0 view .LVU430
 1443 0088 1A00     		movs	r2, r3
 1444 008a 1F32     		adds	r2, r2, #31
 1445 008c 05DB     		blt	.L67
 170:Core/Src/motor.c ****     else if (output > 100) output = 100;
 1446              		.loc 3 170 10 is_stmt 1 view .LVU431
 1447              		.loc 3 170 13 is_stmt 0 view .LVU432
 1448 008e CA22     		movs	r2, #202
 1449 0090 1201     		lsls	r2, r2, #4
 1450 0092 9342     		cmp	r3, r2
 1451 0094 02DB     		blt	.L65
 1452              		.loc 3 170 35 discriminator 1 view .LVU433
 1453 0096 6424     		movs	r4, #100
 1454              	.LVL39:
 1455              		.loc 3 170 35 discriminator 1 view .LVU434
 1456 0098 00E0     		b	.L65
 1457              	.LVL40:
 1458              	.L67:
 169:Core/Src/motor.c ****     else if (output > 100) output = 100;
 1459              		.loc 3 169 28 discriminator 1 view .LVU435
 1460 009a 0024     		movs	r4, #0
 1461              	.LVL41:
 1462              	.L65:
 171:Core/Src/motor.c ****     pwm_setDutyCycle(output);
 1463              		.loc 3 171 5 is_stmt 1 view .LVU436
 1464 009c E4B2     		uxtb	r4, r4
 1465              	.LVL42:
 1466              		.loc 3 171 5 is_stmt 0 view .LVU437
 1467 009e 2000     		movs	r0, r4
 1468 00a0 FFF7FEFF 		bl	pwm_setDutyCycle
 1469              	.LVL43:
 172:Core/Src/motor.c ****     duty_cycle = output;            // For debug viewing
 1470              		.loc 3 172 5 is_stmt 1 view .LVU438
 1471              		.loc 3 172 16 is_stmt 0 view .LVU439
 1472 00a4 0C4B     		ldr	r3, .L71+28
 1473 00a6 1C70     		strb	r4, [r3]
 173:Core/Src/motor.c **** 
 174:Core/Src/motor.c ****     // Read the ADC value for current monitoring, actual conversion into meaningful units 
 175:Core/Src/motor.c ****     // will be performed by STMStudio
 176:Core/Src/motor.c ****     if(ADC1->ISR & ADC_ISR_EOC) {   // If the ADC has new data for us
 1474              		.loc 3 176 5 is_stmt 1 view .LVU440
 1475              		.loc 3 176 12 is_stmt 0 view .LVU441
 1476 00a8 0C4B     		ldr	r3, .L71+32
 1477 00aa 1B68     		ldr	r3, [r3]
 1478              		.loc 3 176 7 view .LVU442
 1479 00ac 5B07     		lsls	r3, r3, #29
 1480 00ae 04D5     		bpl	.L62
 177:Core/Src/motor.c ****         adc_value = ADC1->DR;       // Read the motor current for debug viewing
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 55


 1481              		.loc 3 177 9 is_stmt 1 view .LVU443
 1482              		.loc 3 177 25 is_stmt 0 view .LVU444
 1483 00b0 0A4B     		ldr	r3, .L71+32
 1484 00b2 1B6C     		ldr	r3, [r3, #64]
 1485              		.loc 3 177 19 view .LVU445
 1486 00b4 5BB2     		sxtb	r3, r3
 1487 00b6 0A4A     		ldr	r2, .L71+36
 1488 00b8 1370     		strb	r3, [r2]
 1489              	.L62:
 178:Core/Src/motor.c ****     }
 179:Core/Src/motor.c **** }
 1490              		.loc 3 179 1 view .LVU446
 1491              		@ sp needed
 1492 00ba 10BD     		pop	{r4, pc}
 1493              	.L72:
 1494              		.align	2
 1495              	.L71:
 1496 00bc 00000000 		.word	.LC9
 1497 00c0 00000000 		.word	motor_speed
 1498 00c4 00000000 		.word	target_rpm
 1499 00c8 00000000 		.word	error
 1500 00cc 00000000 		.word	Ki
 1501 00d0 00000000 		.word	error_integral
 1502 00d4 00000000 		.word	Kp
 1503 00d8 00000000 		.word	duty_cycle
 1504 00dc 00240140 		.word	1073816576
 1505 00e0 00000000 		.word	adc_value
 1506              		.cfi_endproc
 1507              	.LFE49:
 1509              		.section	.text.TIM7_IRQHandler,"ax",%progbits
 1510              		.align	1
 1511              		.global	TIM7_IRQHandler
 1512              		.syntax unified
 1513              		.code	16
 1514              		.thumb_func
 1516              	TIM7_IRQHandler:
 1517              	.LFB47:
 112:Core/Src/motor.c ****     /* Calculate the motor speed in raw encoder counts
 1518              		.loc 3 112 28 is_stmt 1 view -0
 1519              		.cfi_startproc
 1520              		@ args = 0, pretend = 0, frame = 0
 1521              		@ frame_needed = 0, uses_anonymous_args = 0
 1522 0000 10B5     		push	{r4, lr}
 1523              	.LCFI9:
 1524              		.cfi_def_cfa_offset 8
 1525              		.cfi_offset 4, -8
 1526              		.cfi_offset 14, -4
 117:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 1527              		.loc 3 117 5 view .LVU448
 117:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 1528              		.loc 3 117 24 is_stmt 0 view .LVU449
 1529 0002 094A     		ldr	r2, .L74
 1530 0004 536A     		ldr	r3, [r2, #36]
 117:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 1531              		.loc 3 117 30 view .LVU450
 1532 0006 0949     		ldr	r1, .L74+4
 1533 0008 8C46     		mov	ip, r1
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 56


 1534 000a 6344     		add	r3, r3, ip
 1535 000c 1BB2     		sxth	r3, r3
 117:Core/Src/motor.c ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 1536              		.loc 3 117 17 view .LVU451
 1537 000e 0849     		ldr	r1, .L74+8
 1538 0010 0B80     		strh	r3, [r1]
 118:Core/Src/motor.c ****     // Call the PI update function
 1539              		.loc 3 118 5 is_stmt 1 view .LVU452
 118:Core/Src/motor.c ****     // Call the PI update function
 1540              		.loc 3 118 15 is_stmt 0 view .LVU453
 1541 0012 084B     		ldr	r3, .L74+12
 1542 0014 5362     		str	r3, [r2, #36]
 120:Core/Src/motor.c **** 
 1543              		.loc 3 120 5 is_stmt 1 view .LVU454
 1544 0016 FFF7FEFF 		bl	PI_update
 1545              	.LVL44:
 122:Core/Src/motor.c **** }
 1546              		.loc 3 122 5 view .LVU455
 122:Core/Src/motor.c **** }
 1547              		.loc 3 122 9 is_stmt 0 view .LVU456
 1548 001a 074A     		ldr	r2, .L74+16
 1549 001c 1369     		ldr	r3, [r2, #16]
 122:Core/Src/motor.c **** }
 1550              		.loc 3 122 14 view .LVU457
 1551 001e 0121     		movs	r1, #1
 1552 0020 8B43     		bics	r3, r1
 1553 0022 1361     		str	r3, [r2, #16]
 123:Core/Src/motor.c **** 
 1554              		.loc 3 123 1 view .LVU458
 1555              		@ sp needed
 1556 0024 10BD     		pop	{r4, pc}
 1557              	.L75:
 1558 0026 C046     		.align	2
 1559              	.L74:
 1560 0028 00040040 		.word	1073742848
 1561 002c 0180FFFF 		.word	-32767
 1562 0030 00000000 		.word	motor_speed
 1563 0034 FF7F0000 		.word	32767
 1564 0038 00140040 		.word	1073746944
 1565              		.cfi_endproc
 1566              	.LFE47:
 1568              		.section	.text.initLEDs,"ax",%progbits
 1569              		.align	1
 1570              		.global	initLEDs
 1571              		.syntax unified
 1572              		.code	16
 1573              		.thumb_func
 1575              	initLEDs:
 1576              	.LFB54:
 321:Core/Src/main.c **** 	// red LED PC6, blue LED (PC7), green LED PC9, orange LED PC8
 1577              		.loc 1 321 21 is_stmt 1 view -0
 1578              		.cfi_startproc
 1579              		@ args = 0, pretend = 0, frame = 0
 1580              		@ frame_needed = 0, uses_anonymous_args = 0
 1581              		@ link register save eliminated.
 323:Core/Src/main.c ****   // set the MODER, 01: General purpose output mode
 1582              		.loc 1 323 3 view .LVU460
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 57


 323:Core/Src/main.c ****   // set the MODER, 01: General purpose output mode
 1583              		.loc 1 323 6 is_stmt 0 view .LVU461
 1584 0000 294A     		ldr	r2, .L77
 1585 0002 5169     		ldr	r1, [r2, #20]
 323:Core/Src/main.c ****   // set the MODER, 01: General purpose output mode
 1586              		.loc 1 323 15 view .LVU462
 1587 0004 8023     		movs	r3, #128
 1588 0006 1B03     		lsls	r3, r3, #12
 1589 0008 0B43     		orrs	r3, r1
 1590 000a 5361     		str	r3, [r2, #20]
 326:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 13);
 1591              		.loc 1 326 2 is_stmt 1 view .LVU463
 326:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 13);
 1592              		.loc 1 326 7 is_stmt 0 view .LVU464
 1593 000c 274B     		ldr	r3, .L77+4
 1594 000e 1968     		ldr	r1, [r3]
 326:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 13);
 1595              		.loc 1 326 15 view .LVU465
 1596 0010 8022     		movs	r2, #128
 1597 0012 5201     		lsls	r2, r2, #5
 1598 0014 0A43     		orrs	r2, r1
 1599 0016 1A60     		str	r2, [r3]
 327:Core/Src/main.c ****     // init PC7 MODER
 1600              		.loc 1 327 2 is_stmt 1 view .LVU466
 327:Core/Src/main.c ****     // init PC7 MODER
 1601              		.loc 1 327 7 is_stmt 0 view .LVU467
 1602 0018 1A68     		ldr	r2, [r3]
 327:Core/Src/main.c ****     // init PC7 MODER
 1603              		.loc 1 327 15 view .LVU468
 1604 001a 2549     		ldr	r1, .L77+8
 1605 001c 0A40     		ands	r2, r1
 1606 001e 1A60     		str	r2, [r3]
 329:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 15);
 1607              		.loc 1 329 2 is_stmt 1 view .LVU469
 329:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 15);
 1608              		.loc 1 329 7 is_stmt 0 view .LVU470
 1609 0020 1968     		ldr	r1, [r3]
 329:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 15);
 1610              		.loc 1 329 15 view .LVU471
 1611 0022 8022     		movs	r2, #128
 1612 0024 D201     		lsls	r2, r2, #7
 1613 0026 0A43     		orrs	r2, r1
 1614 0028 1A60     		str	r2, [r3]
 330:Core/Src/main.c **** 	// init PC8 MODER
 1615              		.loc 1 330 2 is_stmt 1 view .LVU472
 330:Core/Src/main.c **** 	// init PC8 MODER
 1616              		.loc 1 330 7 is_stmt 0 view .LVU473
 1617 002a 1A68     		ldr	r2, [r3]
 330:Core/Src/main.c **** 	// init PC8 MODER
 1618              		.loc 1 330 15 view .LVU474
 1619 002c 2149     		ldr	r1, .L77+12
 1620 002e 0A40     		ands	r2, r1
 1621 0030 1A60     		str	r2, [r3]
 332:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 17);
 1622              		.loc 1 332 2 is_stmt 1 view .LVU475
 332:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 17);
 1623              		.loc 1 332 7 is_stmt 0 view .LVU476
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 58


 1624 0032 1968     		ldr	r1, [r3]
 332:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 17);
 1625              		.loc 1 332 15 view .LVU477
 1626 0034 8022     		movs	r2, #128
 1627 0036 5202     		lsls	r2, r2, #9
 1628 0038 0A43     		orrs	r2, r1
 1629 003a 1A60     		str	r2, [r3]
 333:Core/Src/main.c **** 	// init PC9 MODER
 1630              		.loc 1 333 2 is_stmt 1 view .LVU478
 333:Core/Src/main.c **** 	// init PC9 MODER
 1631              		.loc 1 333 7 is_stmt 0 view .LVU479
 1632 003c 1A68     		ldr	r2, [r3]
 333:Core/Src/main.c **** 	// init PC9 MODER
 1633              		.loc 1 333 15 view .LVU480
 1634 003e 1E49     		ldr	r1, .L77+16
 1635 0040 0A40     		ands	r2, r1
 1636 0042 1A60     		str	r2, [r3]
 335:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 19);
 1637              		.loc 1 335 2 is_stmt 1 view .LVU481
 335:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 19);
 1638              		.loc 1 335 7 is_stmt 0 view .LVU482
 1639 0044 1968     		ldr	r1, [r3]
 335:Core/Src/main.c **** 	GPIOC->MODER &= ~(1 << 19);
 1640              		.loc 1 335 15 view .LVU483
 1641 0046 8022     		movs	r2, #128
 1642 0048 D202     		lsls	r2, r2, #11
 1643 004a 0A43     		orrs	r2, r1
 1644 004c 1A60     		str	r2, [r3]
 336:Core/Src/main.c ****   // Set the pins to low speed in the OSPEEDR register
 1645              		.loc 1 336 2 is_stmt 1 view .LVU484
 336:Core/Src/main.c ****   // Set the pins to low speed in the OSPEEDR register
 1646              		.loc 1 336 7 is_stmt 0 view .LVU485
 1647 004e 1A68     		ldr	r2, [r3]
 336:Core/Src/main.c ****   // Set the pins to low speed in the OSPEEDR register
 1648              		.loc 1 336 15 view .LVU486
 1649 0050 1A49     		ldr	r1, .L77+20
 1650 0052 0A40     		ands	r2, r1
 1651 0054 1A60     		str	r2, [r3]
 338:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 14) | (1 << 15));
 1652              		.loc 1 338 2 is_stmt 1 view .LVU487
 338:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 14) | (1 << 15));
 1653              		.loc 1 338 7 is_stmt 0 view .LVU488
 1654 0056 9A68     		ldr	r2, [r3, #8]
 338:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 14) | (1 << 15));
 1655              		.loc 1 338 17 view .LVU489
 1656 0058 1949     		ldr	r1, .L77+24
 1657 005a 0A40     		ands	r2, r1
 1658 005c 9A60     		str	r2, [r3, #8]
 339:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 16) | (1 << 17));
 1659              		.loc 1 339 2 is_stmt 1 view .LVU490
 339:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 16) | (1 << 17));
 1660              		.loc 1 339 7 is_stmt 0 view .LVU491
 1661 005e 9A68     		ldr	r2, [r3, #8]
 339:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 16) | (1 << 17));
 1662              		.loc 1 339 17 view .LVU492
 1663 0060 1849     		ldr	r1, .L77+28
 1664 0062 0A40     		ands	r2, r1
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 59


 1665 0064 9A60     		str	r2, [r3, #8]
 340:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 18) | (1 << 19));
 1666              		.loc 1 340 2 is_stmt 1 view .LVU493
 340:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 18) | (1 << 19));
 1667              		.loc 1 340 7 is_stmt 0 view .LVU494
 1668 0066 9A68     		ldr	r2, [r3, #8]
 340:Core/Src/main.c **** 	GPIOC->OSPEEDR &= ~((1 << 18) | (1 << 19));
 1669              		.loc 1 340 17 view .LVU495
 1670 0068 1749     		ldr	r1, .L77+32
 1671 006a 0A40     		ands	r2, r1
 1672 006c 9A60     		str	r2, [r3, #8]
 341:Core/Src/main.c **** 
 1673              		.loc 1 341 2 is_stmt 1 view .LVU496
 341:Core/Src/main.c **** 
 1674              		.loc 1 341 7 is_stmt 0 view .LVU497
 1675 006e 9A68     		ldr	r2, [r3, #8]
 341:Core/Src/main.c **** 
 1676              		.loc 1 341 17 view .LVU498
 1677 0070 1649     		ldr	r1, .L77+36
 1678 0072 0A40     		ands	r2, r1
 1679 0074 9A60     		str	r2, [r3, #8]
 345:Core/Src/main.c **** 	GPIOC->PUPDR &= ~((1 << 12) | (1 << 13) | (1 << 14) | (1 << 15));
 1680              		.loc 1 345 2 is_stmt 1 view .LVU499
 345:Core/Src/main.c **** 	GPIOC->PUPDR &= ~((1 << 12) | (1 << 13) | (1 << 14) | (1 << 15));
 1681              		.loc 1 345 7 is_stmt 0 view .LVU500
 1682 0076 DA68     		ldr	r2, [r3, #12]
 345:Core/Src/main.c **** 	GPIOC->PUPDR &= ~((1 << 12) | (1 << 13) | (1 << 14) | (1 << 15));
 1683              		.loc 1 345 15 view .LVU501
 1684 0078 1549     		ldr	r1, .L77+40
 1685 007a 0A40     		ands	r2, r1
 1686 007c DA60     		str	r2, [r3, #12]
 346:Core/Src/main.c **** 	// set PC6-9 to 0
 1687              		.loc 1 346 2 is_stmt 1 view .LVU502
 346:Core/Src/main.c **** 	// set PC6-9 to 0
 1688              		.loc 1 346 7 is_stmt 0 view .LVU503
 1689 007e DA68     		ldr	r2, [r3, #12]
 346:Core/Src/main.c **** 	// set PC6-9 to 0
 1690              		.loc 1 346 15 view .LVU504
 1691 0080 1449     		ldr	r1, .L77+44
 1692 0082 0A40     		ands	r2, r1
 1693 0084 DA60     		str	r2, [r3, #12]
 348:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 7);
 1694              		.loc 1 348 2 is_stmt 1 view .LVU505
 348:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 7);
 1695              		.loc 1 348 7 is_stmt 0 view .LVU506
 1696 0086 5A69     		ldr	r2, [r3, #20]
 348:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 7);
 1697              		.loc 1 348 13 view .LVU507
 1698 0088 4021     		movs	r1, #64
 1699 008a 8A43     		bics	r2, r1
 1700 008c 5A61     		str	r2, [r3, #20]
 349:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 8);
 1701              		.loc 1 349 2 is_stmt 1 view .LVU508
 349:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 8);
 1702              		.loc 1 349 7 is_stmt 0 view .LVU509
 1703 008e 5A69     		ldr	r2, [r3, #20]
 349:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 8);
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 60


 1704              		.loc 1 349 13 view .LVU510
 1705 0090 4031     		adds	r1, r1, #64
 1706 0092 8A43     		bics	r2, r1
 1707 0094 5A61     		str	r2, [r3, #20]
 350:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 9);
 1708              		.loc 1 350 2 is_stmt 1 view .LVU511
 350:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 9);
 1709              		.loc 1 350 7 is_stmt 0 view .LVU512
 1710 0096 5A69     		ldr	r2, [r3, #20]
 350:Core/Src/main.c **** 	GPIOC->ODR &= ~(1 << 9);
 1711              		.loc 1 350 13 view .LVU513
 1712 0098 0F49     		ldr	r1, .L77+48
 1713 009a 0A40     		ands	r2, r1
 1714 009c 5A61     		str	r2, [r3, #20]
 351:Core/Src/main.c **** }
 1715              		.loc 1 351 2 is_stmt 1 view .LVU514
 351:Core/Src/main.c **** }
 1716              		.loc 1 351 7 is_stmt 0 view .LVU515
 1717 009e 5A69     		ldr	r2, [r3, #20]
 351:Core/Src/main.c **** }
 1718              		.loc 1 351 13 view .LVU516
 1719 00a0 0E49     		ldr	r1, .L77+52
 1720 00a2 0A40     		ands	r2, r1
 1721 00a4 5A61     		str	r2, [r3, #20]
 352:Core/Src/main.c **** 
 1722              		.loc 1 352 1 view .LVU517
 1723              		@ sp needed
 1724 00a6 7047     		bx	lr
 1725              	.L78:
 1726              		.align	2
 1727              	.L77:
 1728 00a8 00100240 		.word	1073876992
 1729 00ac 00080048 		.word	1207961600
 1730 00b0 FFDFFFFF 		.word	-8193
 1731 00b4 FF7FFFFF 		.word	-32769
 1732 00b8 FFFFFDFF 		.word	-131073
 1733 00bc FFFFF7FF 		.word	-524289
 1734 00c0 FFCFFFFF 		.word	-12289
 1735 00c4 FF3FFFFF 		.word	-49153
 1736 00c8 FFFFFCFF 		.word	-196609
 1737 00cc FFFFF3FF 		.word	-786433
 1738 00d0 FFFFF0FF 		.word	-983041
 1739 00d4 FF0FFFFF 		.word	-61441
 1740 00d8 FFFEFFFF 		.word	-257
 1741 00dc FFFDFFFF 		.word	-513
 1742              		.cfi_endproc
 1743              	.LFE54:
 1745              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1746              		.align	1
 1747              		.global	HAL_TIM_PeriodElapsedCallback
 1748              		.syntax unified
 1749              		.code	16
 1750              		.thumb_func
 1752              	HAL_TIM_PeriodElapsedCallback:
 1753              	.LVL45:
 1754              	.LFB57:
 517:Core/Src/main.c ****   }
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 61


 518:Core/Src/main.c **** }
 519:Core/Src/main.c **** 
 520:Core/Src/main.c **** /**
 521:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 522:Core/Src/main.c ****   * @note   This function is called  when TIM6 interrupt took place, inside
 523:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 524:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 525:Core/Src/main.c ****   * @param  htim : TIM handle
 526:Core/Src/main.c ****   * @retval None
 527:Core/Src/main.c ****   */
 528:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 529:Core/Src/main.c **** {
 1755              		.loc 1 529 1 is_stmt 1 view -0
 1756              		.cfi_startproc
 1757              		@ args = 0, pretend = 0, frame = 0
 1758              		@ frame_needed = 0, uses_anonymous_args = 0
 1759              		.loc 1 529 1 is_stmt 0 view .LVU519
 1760 0000 10B5     		push	{r4, lr}
 1761              	.LCFI10:
 1762              		.cfi_def_cfa_offset 8
 1763              		.cfi_offset 4, -8
 1764              		.cfi_offset 14, -4
 530:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 531:Core/Src/main.c **** 
 532:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 533:Core/Src/main.c ****   if (htim->Instance == TIM6) {
 1765              		.loc 1 533 3 is_stmt 1 view .LVU520
 1766              		.loc 1 533 11 is_stmt 0 view .LVU521
 1767 0002 0268     		ldr	r2, [r0]
 1768              		.loc 1 533 6 view .LVU522
 1769 0004 034B     		ldr	r3, .L82
 1770 0006 9A42     		cmp	r2, r3
 1771 0008 00D0     		beq	.L81
 1772              	.LVL46:
 1773              	.L79:
 534:Core/Src/main.c ****     HAL_IncTick();
 535:Core/Src/main.c ****   }
 536:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 537:Core/Src/main.c **** 
 538:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 539:Core/Src/main.c **** }
 1774              		.loc 1 539 1 view .LVU523
 1775              		@ sp needed
 1776 000a 10BD     		pop	{r4, pc}
 1777              	.LVL47:
 1778              	.L81:
 534:Core/Src/main.c ****     HAL_IncTick();
 1779              		.loc 1 534 5 is_stmt 1 view .LVU524
 1780 000c FFF7FEFF 		bl	HAL_IncTick
 1781              	.LVL48:
 1782              		.loc 1 539 1 is_stmt 0 view .LVU525
 1783 0010 FBE7     		b	.L79
 1784              	.L83:
 1785 0012 C046     		.align	2
 1786              	.L82:
 1787 0014 00100040 		.word	1073745920
 1788              		.cfi_endproc
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 62


 1789              	.LFE57:
 1791              		.section	.text.Error_Handler,"ax",%progbits
 1792              		.align	1
 1793              		.global	Error_Handler
 1794              		.syntax unified
 1795              		.code	16
 1796              		.thumb_func
 1798              	Error_Handler:
 1799              	.LFB58:
 540:Core/Src/main.c **** 
 541:Core/Src/main.c **** /**
 542:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 543:Core/Src/main.c ****   * @retval None
 544:Core/Src/main.c ****   */
 545:Core/Src/main.c **** void Error_Handler(void)
 546:Core/Src/main.c **** {
 1800              		.loc 1 546 1 is_stmt 1 view -0
 1801              		.cfi_startproc
 1802              		@ Volatile: function does not return.
 1803              		@ args = 0, pretend = 0, frame = 0
 1804              		@ frame_needed = 0, uses_anonymous_args = 0
 1805              		@ link register save eliminated.
 547:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 548:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 549:Core/Src/main.c ****   __disable_irq();
 1806              		.loc 1 549 3 view .LVU527
 1807              	.LBB22:
 1808              	.LBI22:
 1809              		.file 4 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 63


  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 64


  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1810              		.loc 4 140 27 view .LVU528
 1811              	.LBB23:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 65


 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1812              		.loc 4 142 3 view .LVU529
 1813              		.syntax divided
 1814              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1815 0000 72B6     		cpsid i
 1816              	@ 0 "" 2
 1817              		.thumb
 1818              		.syntax unified
 1819              	.L85:
 1820              	.LBE23:
 1821              	.LBE22:
 550:Core/Src/main.c ****   while (1)
 1822              		.loc 1 550 3 view .LVU530
 551:Core/Src/main.c ****   {
 552:Core/Src/main.c ****   }
 1823              		.loc 1 552 3 view .LVU531
 550:Core/Src/main.c ****   while (1)
 1824              		.loc 1 550 9 view .LVU532
 1825 0002 FEE7     		b	.L85
 1826              		.cfi_endproc
 1827              	.LFE58:
 1829              		.section	.text.SystemClock_Config,"ax",%progbits
 1830              		.align	1
 1831              		.global	SystemClock_Config
 1832              		.syntax unified
 1833              		.code	16
 1834              		.thumb_func
 1836              	SystemClock_Config:
 1837              	.LFB51:
 183:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1838              		.loc 1 183 1 view -0
 1839              		.cfi_startproc
 1840              		@ args = 0, pretend = 0, frame = 96
 1841              		@ frame_needed = 0, uses_anonymous_args = 0
 1842 0000 00B5     		push	{lr}
 1843              	.LCFI11:
 1844              		.cfi_def_cfa_offset 4
 1845              		.cfi_offset 14, -4
 1846 0002 99B0     		sub	sp, sp, #100
 1847              	.LCFI12:
 1848              		.cfi_def_cfa_offset 104
 184:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1849              		.loc 1 184 3 view .LVU534
 184:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1850              		.loc 1 184 22 is_stmt 0 view .LVU535
 1851 0004 3422     		movs	r2, #52
 1852 0006 0021     		movs	r1, #0
 1853 0008 0BA8     		add	r0, sp, #44
 1854 000a FFF7FEFF 		bl	memset
 1855              	.LVL49:
 185:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1856              		.loc 1 185 3 is_stmt 1 view .LVU536
 185:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1857              		.loc 1 185 22 is_stmt 0 view .LVU537
 1858 000e 1022     		movs	r2, #16
 1859 0010 0021     		movs	r1, #0
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 66


 1860 0012 07A8     		add	r0, sp, #28
 1861 0014 FFF7FEFF 		bl	memset
 1862              	.LVL50:
 186:Core/Src/main.c **** 
 1863              		.loc 1 186 3 is_stmt 1 view .LVU538
 186:Core/Src/main.c **** 
 1864              		.loc 1 186 28 is_stmt 0 view .LVU539
 1865 0018 1C22     		movs	r2, #28
 1866 001a 0021     		movs	r1, #0
 1867 001c 6846     		mov	r0, sp
 1868 001e FFF7FEFF 		bl	memset
 1869              	.LVL51:
 191:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1870              		.loc 1 191 3 is_stmt 1 view .LVU540
 191:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1871              		.loc 1 191 36 is_stmt 0 view .LVU541
 1872 0022 2223     		movs	r3, #34
 1873 0024 0B93     		str	r3, [sp, #44]
 192:Core/Src/main.c ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 1874              		.loc 1 192 3 is_stmt 1 view .LVU542
 192:Core/Src/main.c ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 1875              		.loc 1 192 30 is_stmt 0 view .LVU543
 1876 0026 213B     		subs	r3, r3, #33
 1877 0028 0E93     		str	r3, [sp, #56]
 193:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1878              		.loc 1 193 3 is_stmt 1 view .LVU544
 193:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1879              		.loc 1 193 32 is_stmt 0 view .LVU545
 1880 002a 1393     		str	r3, [sp, #76]
 194:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1881              		.loc 1 194 3 is_stmt 1 view .LVU546
 194:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1882              		.loc 1 194 41 is_stmt 0 view .LVU547
 1883 002c 0F33     		adds	r3, r3, #15
 1884 002e 0F93     		str	r3, [sp, #60]
 195:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1885              		.loc 1 195 3 is_stmt 1 view .LVU548
 195:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1886              		.loc 1 195 34 is_stmt 0 view .LVU549
 1887 0030 0E3B     		subs	r3, r3, #14
 1888 0032 1493     		str	r3, [sp, #80]
 196:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 1889              		.loc 1 196 3 is_stmt 1 view .LVU550
 196:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 1890              		.loc 1 196 35 is_stmt 0 view .LVU551
 1891 0034 8023     		movs	r3, #128
 1892 0036 1B02     		lsls	r3, r3, #8
 1893 0038 1593     		str	r3, [sp, #84]
 197:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 1894              		.loc 1 197 3 is_stmt 1 view .LVU552
 197:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 1895              		.loc 1 197 32 is_stmt 0 view .LVU553
 1896 003a 8023     		movs	r3, #128
 1897 003c 5B03     		lsls	r3, r3, #13
 1898 003e 1693     		str	r3, [sp, #88]
 198:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1899              		.loc 1 198 3 is_stmt 1 view .LVU554
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 67


 199:Core/Src/main.c ****   {
 1900              		.loc 1 199 3 view .LVU555
 199:Core/Src/main.c ****   {
 1901              		.loc 1 199 7 is_stmt 0 view .LVU556
 1902 0040 0BA8     		add	r0, sp, #44
 1903 0042 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1904              	.LVL52:
 199:Core/Src/main.c ****   {
 1905              		.loc 1 199 6 discriminator 1 view .LVU557
 1906 0046 0028     		cmp	r0, #0
 1907 0048 18D1     		bne	.L90
 206:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 1908              		.loc 1 206 3 is_stmt 1 view .LVU558
 206:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 1909              		.loc 1 206 31 is_stmt 0 view .LVU559
 1910 004a 0723     		movs	r3, #7
 1911 004c 0793     		str	r3, [sp, #28]
 208:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1912              		.loc 1 208 3 is_stmt 1 view .LVU560
 208:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1913              		.loc 1 208 34 is_stmt 0 view .LVU561
 1914 004e 053B     		subs	r3, r3, #5
 1915 0050 0893     		str	r3, [sp, #32]
 209:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1916              		.loc 1 209 3 is_stmt 1 view .LVU562
 209:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1917              		.loc 1 209 35 is_stmt 0 view .LVU563
 1918 0052 0023     		movs	r3, #0
 1919 0054 0993     		str	r3, [sp, #36]
 210:Core/Src/main.c **** 
 1920              		.loc 1 210 3 is_stmt 1 view .LVU564
 210:Core/Src/main.c **** 
 1921              		.loc 1 210 36 is_stmt 0 view .LVU565
 1922 0056 0A93     		str	r3, [sp, #40]
 212:Core/Src/main.c ****   {
 1923              		.loc 1 212 3 is_stmt 1 view .LVU566
 212:Core/Src/main.c ****   {
 1924              		.loc 1 212 7 is_stmt 0 view .LVU567
 1925 0058 0121     		movs	r1, #1
 1926 005a 07A8     		add	r0, sp, #28
 1927 005c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1928              	.LVL53:
 212:Core/Src/main.c ****   {
 1929              		.loc 1 212 6 discriminator 1 view .LVU568
 1930 0060 0028     		cmp	r0, #0
 1931 0062 0DD1     		bne	.L91
 216:Core/Src/main.c ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 1932              		.loc 1 216 3 is_stmt 1 view .LVU569
 216:Core/Src/main.c ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 1933              		.loc 1 216 38 is_stmt 0 view .LVU570
 1934 0064 8023     		movs	r3, #128
 1935 0066 9B02     		lsls	r3, r3, #10
 1936 0068 0093     		str	r3, [sp]
 217:Core/Src/main.c **** 
 1937              		.loc 1 217 3 is_stmt 1 view .LVU571
 217:Core/Src/main.c **** 
 1938              		.loc 1 217 35 is_stmt 0 view .LVU572
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 68


 1939 006a 0023     		movs	r3, #0
 1940 006c 0693     		str	r3, [sp, #24]
 219:Core/Src/main.c ****   {
 1941              		.loc 1 219 3 is_stmt 1 view .LVU573
 219:Core/Src/main.c ****   {
 1942              		.loc 1 219 7 is_stmt 0 view .LVU574
 1943 006e 6846     		mov	r0, sp
 1944 0070 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1945              	.LVL54:
 219:Core/Src/main.c ****   {
 1946              		.loc 1 219 6 discriminator 1 view .LVU575
 1947 0074 0028     		cmp	r0, #0
 1948 0076 05D1     		bne	.L92
 223:Core/Src/main.c **** 
 1949              		.loc 1 223 1 view .LVU576
 1950 0078 19B0     		add	sp, sp, #100
 1951              		@ sp needed
 1952 007a 00BD     		pop	{pc}
 1953              	.L90:
 201:Core/Src/main.c ****   }
 1954              		.loc 1 201 5 is_stmt 1 view .LVU577
 1955 007c FFF7FEFF 		bl	Error_Handler
 1956              	.LVL55:
 1957              	.L91:
 214:Core/Src/main.c ****   }
 1958              		.loc 1 214 5 view .LVU578
 1959 0080 FFF7FEFF 		bl	Error_Handler
 1960              	.LVL56:
 1961              	.L92:
 221:Core/Src/main.c ****   }
 1962              		.loc 1 221 5 view .LVU579
 1963 0084 FFF7FEFF 		bl	Error_Handler
 1964              	.LVL57:
 1965              		.cfi_endproc
 1966              	.LFE51:
 1968              		.section	.text.main,"ax",%progbits
 1969              		.align	1
 1970              		.global	main
 1971              		.syntax unified
 1972              		.code	16
 1973              		.thumb_func
 1975              	main:
 1976              	.LFB50:
 120:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 1977              		.loc 1 120 1 view -0
 1978              		.cfi_startproc
 1979              		@ Volatile: function does not return.
 1980              		@ args = 0, pretend = 0, frame = 0
 1981              		@ frame_needed = 0, uses_anonymous_args = 0
 1982 0000 10B5     		push	{r4, lr}
 1983              	.LCFI13:
 1984              		.cfi_def_cfa_offset 8
 1985              		.cfi_offset 4, -8
 1986              		.cfi_offset 14, -4
 122:Core/Src/main.c **** 
 1987              		.loc 1 122 3 view .LVU581
 1988 0002 FFF7FEFF 		bl	HAL_Init
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 69


 1989              	.LVL58:
 125:Core/Src/main.c **** 
 1990              		.loc 1 125 3 view .LVU582
 1991 0006 FFF7FEFF 		bl	SystemClock_Config
 1992              	.LVL59:
 128:Core/Src/main.c ****   initUsart3();
 1993              		.loc 1 128 3 view .LVU583
 1994 000a FFF7FEFF 		bl	MX_GPIO_Init
 1995              	.LVL60:
 129:Core/Src/main.c ****   initLEDs();
 1996              		.loc 1 129 3 view .LVU584
 1997 000e FFF7FEFF 		bl	initUsart3
 1998              	.LVL61:
 130:Core/Src/main.c ****   motor_init();
 1999              		.loc 1 130 3 view .LVU585
 2000 0012 FFF7FEFF 		bl	initLEDs
 2001              	.LVL62:
 131:Core/Src/main.c **** 
 2002              		.loc 1 131 3 view .LVU586
 2003 0016 FFF7FEFF 		bl	motor_init
 2004              	.LVL63:
 134:Core/Src/main.c **** 
 2005              		.loc 1 134 3 view .LVU587
 2006 001a FFF7FEFF 		bl	osKernelInitialize
 2007              	.LVL64:
 151:Core/Src/main.c ****   /* creation of LEDTask */
 2008              		.loc 1 151 3 view .LVU588
 151:Core/Src/main.c ****   /* creation of LEDTask */
 2009              		.loc 1 151 22 is_stmt 0 view .LVU589
 2010 001e 0F4A     		ldr	r2, .L95
 2011 0020 0F48     		ldr	r0, .L95+4
 2012 0022 0021     		movs	r1, #0
 2013 0024 FFF7FEFF 		bl	osThreadNew
 2014              	.LVL65:
 151:Core/Src/main.c ****   /* creation of LEDTask */
 2015              		.loc 1 151 20 discriminator 1 view .LVU590
 2016 0028 0E4B     		ldr	r3, .L95+8
 2017 002a 1860     		str	r0, [r3]
 153:Core/Src/main.c ****   /* creation of motorTask */
 2018              		.loc 1 153 3 is_stmt 1 view .LVU591
 153:Core/Src/main.c ****   /* creation of motorTask */
 2019              		.loc 1 153 19 is_stmt 0 view .LVU592
 2020 002c 0E4A     		ldr	r2, .L95+12
 2021 002e 0F48     		ldr	r0, .L95+16
 2022 0030 0021     		movs	r1, #0
 2023 0032 FFF7FEFF 		bl	osThreadNew
 2024              	.LVL66:
 153:Core/Src/main.c ****   /* creation of motorTask */
 2025              		.loc 1 153 17 discriminator 1 view .LVU593
 2026 0036 0E4B     		ldr	r3, .L95+20
 2027 0038 1860     		str	r0, [r3]
 155:Core/Src/main.c ****   /* creation of UARTTask */
 2028              		.loc 1 155 3 is_stmt 1 view .LVU594
 155:Core/Src/main.c ****   /* creation of UARTTask */
 2029              		.loc 1 155 21 is_stmt 0 view .LVU595
 2030 003a 0E4A     		ldr	r2, .L95+24
 2031 003c 0E48     		ldr	r0, .L95+28
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 70


 2032 003e 0021     		movs	r1, #0
 2033 0040 FFF7FEFF 		bl	osThreadNew
 2034              	.LVL67:
 155:Core/Src/main.c ****   /* creation of UARTTask */
 2035              		.loc 1 155 19 discriminator 1 view .LVU596
 2036 0044 0D4B     		ldr	r3, .L95+32
 2037 0046 1860     		str	r0, [r3]
 157:Core/Src/main.c **** 
 2038              		.loc 1 157 3 is_stmt 1 view .LVU597
 157:Core/Src/main.c **** 
 2039              		.loc 1 157 20 is_stmt 0 view .LVU598
 2040 0048 0D4A     		ldr	r2, .L95+36
 2041 004a 0E48     		ldr	r0, .L95+40
 2042 004c 0021     		movs	r1, #0
 2043 004e FFF7FEFF 		bl	osThreadNew
 2044              	.LVL68:
 157:Core/Src/main.c **** 
 2045              		.loc 1 157 18 discriminator 1 view .LVU599
 2046 0052 0D4B     		ldr	r3, .L95+44
 2047 0054 1860     		str	r0, [r3]
 168:Core/Src/main.c **** 
 2048              		.loc 1 168 3 is_stmt 1 view .LVU600
 2049 0056 FFF7FEFF 		bl	osKernelStart
 2050              	.LVL69:
 2051              	.L94:
 173:Core/Src/main.c ****   {
 2052              		.loc 1 173 3 view .LVU601
 175:Core/Src/main.c **** }
 2053              		.loc 1 175 3 view .LVU602
 173:Core/Src/main.c ****   {
 2054              		.loc 1 173 9 view .LVU603
 2055 005a FEE7     		b	.L94
 2056              	.L96:
 2057              		.align	2
 2058              	.L95:
 2059 005c 00000000 		.word	routerTask_attributes
 2060 0060 00000000 		.word	StartRouterTask
 2061 0064 00000000 		.word	routerTaskHandle
 2062 0068 00000000 		.word	LEDTask_attributes
 2063 006c 00000000 		.word	StartLEDTask
 2064 0070 00000000 		.word	LEDTaskHandle
 2065 0074 00000000 		.word	motorTask_attributes
 2066 0078 00000000 		.word	StartMotorTask
 2067 007c 00000000 		.word	motorTaskHandle
 2068 0080 00000000 		.word	UARTTask_attributes
 2069 0084 00000000 		.word	StartParseUartTask
 2070 0088 00000000 		.word	UARTTaskHandle
 2071              		.cfi_endproc
 2072              	.LFE50:
 2074              		.global	motorTask_attributes
 2075              		.section	.rodata.str1.4,"aMS",%progbits,1
 2076              		.align	2
 2077              	.LC32:
 2078 0000 6D6F746F 		.ascii	"motorTask\000"
 2078      72546173 
 2078      6B00
 2079              		.section	.rodata.motorTask_attributes,"a"
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 71


 2080              		.align	2
 2083              	motorTask_attributes:
 2084 0000 00000000 		.word	.LC32
 2085 0004 00000000 		.space	16
 2085      00000000 
 2085      00000000 
 2085      00000000 
 2086 0014 00020000 		.word	512
 2087 0018 18000000 		.word	24
 2088 001c 00000000 		.space	8
 2088      00000000 
 2089              		.global	motorTaskHandle
 2090              		.section	.bss.motorTaskHandle,"aw",%nobits
 2091              		.align	2
 2094              	motorTaskHandle:
 2095 0000 00000000 		.space	4
 2096              		.global	LEDTask_attributes
 2097              		.section	.rodata.str1.4
 2098 000a 0000     		.align	2
 2099              	.LC33:
 2100 000c 4C454454 		.ascii	"LEDTask\000"
 2100      61736B00 
 2101              		.section	.rodata.LEDTask_attributes,"a"
 2102              		.align	2
 2105              	LEDTask_attributes:
 2106 0000 0C000000 		.word	.LC33
 2107 0004 00000000 		.space	16
 2107      00000000 
 2107      00000000 
 2107      00000000 
 2108 0014 00020000 		.word	512
 2109 0018 18000000 		.word	24
 2110 001c 00000000 		.space	8
 2110      00000000 
 2111              		.global	LEDTaskHandle
 2112              		.section	.bss.LEDTaskHandle,"aw",%nobits
 2113              		.align	2
 2116              	LEDTaskHandle:
 2117 0000 00000000 		.space	4
 2118              		.global	routerTask_attributes
 2119              		.section	.rodata.str1.4
 2120              		.align	2
 2121              	.LC34:
 2122 0014 726F7574 		.ascii	"routerTask\000"
 2122      65725461 
 2122      736B00
 2123              		.section	.rodata.routerTask_attributes,"a"
 2124              		.align	2
 2127              	routerTask_attributes:
 2128 0000 14000000 		.word	.LC34
 2129 0004 00000000 		.space	16
 2129      00000000 
 2129      00000000 
 2129      00000000 
 2130 0014 00020000 		.word	512
 2131 0018 18000000 		.word	24
 2132 001c 00000000 		.space	8
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 72


 2132      00000000 
 2133              		.global	routerTaskHandle
 2134              		.section	.bss.routerTaskHandle,"aw",%nobits
 2135              		.align	2
 2138              	routerTaskHandle:
 2139 0000 00000000 		.space	4
 2140              		.global	hpcd_USB_FS
 2141              		.section	.bss.hpcd_USB_FS,"aw",%nobits
 2142              		.align	2
 2145              	hpcd_USB_FS:
 2146 0000 00000000 		.space	756
 2146      00000000 
 2146      00000000 
 2146      00000000 
 2146      00000000 
 2147              		.global	target_rpm
 2148              		.section	.bss.target_rpm,"aw",%nobits
 2149              		.align	1
 2152              	target_rpm:
 2153 0000 0000     		.space	2
 2154              		.global	debouncer
 2155              		.section	.bss.debouncer,"aw",%nobits
 2156              		.align	2
 2159              	debouncer:
 2160 0000 00000000 		.space	4
 2161              		.global	htsc
 2162              		.section	.bss.htsc,"aw",%nobits
 2163              		.align	2
 2166              	htsc:
 2167 0000 00000000 		.space	68
 2167      00000000 
 2167      00000000 
 2167      00000000 
 2167      00000000 
 2168              		.global	hspi2
 2169              		.section	.bss.hspi2,"aw",%nobits
 2170              		.align	2
 2173              	hspi2:
 2174 0000 00000000 		.space	100
 2174      00000000 
 2174      00000000 
 2174      00000000 
 2174      00000000 
 2175              		.global	hi2c2
 2176              		.section	.bss.hi2c2,"aw",%nobits
 2177              		.align	2
 2180              	hi2c2:
 2181 0000 00000000 		.space	84
 2181      00000000 
 2181      00000000 
 2181      00000000 
 2181      00000000 
 2182              		.global	binarySem04MotorWorkerHandle
 2183              		.section	.bss.binarySem04MotorWorkerHandle,"aw",%nobits
 2184              		.align	2
 2187              	binarySem04MotorWorkerHandle:
 2188 0000 00000000 		.space	4
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 73


 2189              		.global	binarySem03LEDWorkerHandle
 2190              		.section	.bss.binarySem03LEDWorkerHandle,"aw",%nobits
 2191              		.align	2
 2194              	binarySem03LEDWorkerHandle:
 2195 0000 00000000 		.space	4
 2196              		.global	commandMotor
 2197              		.section	.bss.commandMotor,"aw",%nobits
 2198              		.align	1
 2201              	commandMotor:
 2202 0000 0000     		.space	2
 2203              		.global	commandLED
 2204              		.section	.bss.commandLED,"aw",%nobits
 2205              		.align	1
 2208              	commandLED:
 2209 0000 0000     		.space	2
 2210              		.global	Ki
 2211              		.section	.data.Ki,"aw"
 2214              	Ki:
 2215 0000 01       		.byte	1
 2216              		.global	Kp
 2217              		.section	.data.Kp,"aw"
 2220              	Kp:
 2221 0000 01       		.byte	1
 2222              		.global	error
 2223              		.section	.bss.error,"aw",%nobits
 2224              		.align	1
 2227              	error:
 2228 0000 0000     		.space	2
 2229              		.global	adc_value
 2230              		.section	.bss.adc_value,"aw",%nobits
 2233              	adc_value:
 2234 0000 00       		.space	1
 2235              		.global	motor_speed
 2236              		.section	.bss.motor_speed,"aw",%nobits
 2237              		.align	1
 2240              	motor_speed:
 2241 0000 0000     		.space	2
 2242              		.global	duty_cycle
 2243              		.section	.bss.duty_cycle,"aw",%nobits
 2246              	duty_cycle:
 2247 0000 00       		.space	1
 2248              		.global	error_integral
 2249              		.section	.bss.error_integral,"aw",%nobits
 2250              		.align	1
 2253              	error_integral:
 2254 0000 0000     		.space	2
 2255              		.section	.rodata
 2256              		.align	2
 2257              		.set	.LANCHOR0,. + 0
 2258              	.LC0:
 2259 0000 40000000 		.word	64
 2260 0004 00020000 		.word	512
 2261 0008 80000000 		.word	128
 2262 000c 00010000 		.word	256
 2263 0010 C0030000 		.word	960
 2264              		.text
 2265              	.Letext0:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 74


 2266              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 2267              		.file 6 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 2268              		.file 7 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 2269              		.file 8 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 2270              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2271              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 2272              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 2273              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 2274              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 2275              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c.h"
 2276              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_ll_usb.h"
 2277              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_pcd.h"
 2278              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_spi.h"
 2279              		.file 18 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 2280              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tsc.h"
 2281              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 2282              		.file 21 "Core/Inc/cmdQueue.h"
 2283              		.file 22 "Core/Inc/uartParser.h"
 2284              		.file 23 "Core/Inc/main.h"
 2285              		.file 24 "Core/Inc/motor.h"
 2286              		.file 25 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 2287              		.file 26 "<built-in>"
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 75


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:19     .text.MX_GPIO_Init:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:166    .text.MX_GPIO_Init:00000090 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:173    .text.StartMotorTask:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:179    .text.StartMotorTask:00000000 StartMotorTask
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:301    .text.StartMotorTask:00000064 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2201   .bss.commandMotor:00000000 commandMotor
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2152   .bss.target_rpm:00000000 target_rpm
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:310    .text.StartRouterTask:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:316    .text.StartRouterTask:00000000 StartRouterTask
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:380    .text.StartRouterTask:00000040 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2208   .bss.commandLED:00000000 commandLED
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:387    .text.StartLEDTask:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:393    .text.StartLEDTask:00000000 StartLEDTask
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:841    .text.StartLEDTask:000001f0 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2194   .bss.binarySem03LEDWorkerHandle:00000000 binarySem03LEDWorkerHandle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:850    .text.pwm_init:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:856    .text.pwm_init:00000000 pwm_init
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:982    .text.pwm_init:00000084 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:992    .text.pwm_setDutyCycle:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:998    .text.pwm_setDutyCycle:00000000 pwm_setDutyCycle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1035   .text.pwm_setDutyCycle:00000018 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1040   .text.encoder_init:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1046   .text.encoder_init:00000000 encoder_init
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1171   .text.encoder_init:00000080 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1183   .text.ADC_init:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1189   .text.ADC_init:00000000 ADC_init
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1285   .text.ADC_init:00000064 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1291   .text.motor_init:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1297   .text.motor_init:00000000 motor_init
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1324   .rodata.PI_update.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1328   .text.PI_update:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1334   .text.PI_update:00000000 PI_update
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1496   .text.PI_update:000000bc $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2240   .bss.motor_speed:00000000 motor_speed
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2227   .bss.error:00000000 error
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2214   .data.Ki:00000000 Ki
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2253   .bss.error_integral:00000000 error_integral
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2220   .data.Kp:00000000 Kp
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2246   .bss.duty_cycle:00000000 duty_cycle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2233   .bss.adc_value:00000000 adc_value
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1510   .text.TIM7_IRQHandler:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1516   .text.TIM7_IRQHandler:00000000 TIM7_IRQHandler
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1560   .text.TIM7_IRQHandler:00000028 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1569   .text.initLEDs:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1575   .text.initLEDs:00000000 initLEDs
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1728   .text.initLEDs:000000a8 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1746   .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1752   .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1787   .text.HAL_TIM_PeriodElapsedCallback:00000014 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1792   .text.Error_Handler:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1798   .text.Error_Handler:00000000 Error_Handler
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1830   .text.SystemClock_Config:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1836   .text.SystemClock_Config:00000000 SystemClock_Config
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1969   .text.main:00000000 $t
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 76


/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:1975   .text.main:00000000 main
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2059   .text.main:0000005c $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2127   .rodata.routerTask_attributes:00000000 routerTask_attributes
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2138   .bss.routerTaskHandle:00000000 routerTaskHandle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2105   .rodata.LEDTask_attributes:00000000 LEDTask_attributes
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2116   .bss.LEDTaskHandle:00000000 LEDTaskHandle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2083   .rodata.motorTask_attributes:00000000 motorTask_attributes
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2094   .bss.motorTaskHandle:00000000 motorTaskHandle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2076   .rodata.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2080   .rodata.motorTask_attributes:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2091   .bss.motorTaskHandle:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2102   .rodata.LEDTask_attributes:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2113   .bss.LEDTaskHandle:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2124   .rodata.routerTask_attributes:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2135   .bss.routerTaskHandle:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2145   .bss.hpcd_USB_FS:00000000 hpcd_USB_FS
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2142   .bss.hpcd_USB_FS:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2149   .bss.target_rpm:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2159   .bss.debouncer:00000000 debouncer
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2156   .bss.debouncer:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2166   .bss.htsc:00000000 htsc
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2163   .bss.htsc:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2173   .bss.hspi2:00000000 hspi2
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2170   .bss.hspi2:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2180   .bss.hi2c2:00000000 hi2c2
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2177   .bss.hi2c2:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2187   .bss.binarySem04MotorWorkerHandle:00000000 binarySem04MotorWorkerHandle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2184   .bss.binarySem04MotorWorkerHandle:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2191   .bss.binarySem03LEDWorkerHandle:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2198   .bss.commandMotor:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2205   .bss.commandLED:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2224   .bss.error:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2234   .bss.adc_value:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2237   .bss.motor_speed:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2247   .bss.duty_cycle:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2250   .bss.error_integral:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s:2256   .rodata:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
osDelay
isQueueEmpty
queuePop
cmdQueue
osSemaphoreNew
xTaskGetTickCount
osSemaphoreRelease
osSemaphoreAcquire
__aeabi_uidiv
transmitCharArray
sendUint16BinToUart
HAL_IncTick
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccIGYi8r.s 			page 77


HAL_Init
initUsart3
osKernelInitialize
osThreadNew
osKernelStart
UARTTask_attributes
StartParseUartTask
UARTTaskHandle
