ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"uartParser.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/uartParser.c"
  18              		.section	.text.convertSpeed,"ax",%progbits
  19              		.align	1
  20              		.global	convertSpeed
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	convertSpeed:
  26              	.LVL0:
  27              	.LFB45:
   1:Core/Src/uartParser.c **** #include "uartParser.h"
   2:Core/Src/uartParser.c **** #include "cmsis_os2.h"
   3:Core/Src/uartParser.c **** #include <string.h>
   4:Core/Src/uartParser.c **** 
   5:Core/Src/uartParser.c **** osThreadId_t UARTTaskHandle;
   6:Core/Src/uartParser.c **** Cmd_Queue * cmdQueue = NULL;
   7:Core/Src/uartParser.c **** osSemaphoreId_t binarySem02UartParserHandle;
   8:Core/Src/uartParser.c **** static const osSemaphoreAttr_t semAttr_SEM1 = {
   9:Core/Src/uartParser.c ****   .name = "SEM02",
  10:Core/Src/uartParser.c **** };
  11:Core/Src/uartParser.c **** 
  12:Core/Src/uartParser.c **** volatile uint8_t strIndex = 0;
  13:Core/Src/uartParser.c **** volatile uint8_t cmdIndex = 0;
  14:Core/Src/uartParser.c **** volatile uint8_t cmdStrIndex = 0;
  15:Core/Src/uartParser.c **** volatile char tmpStr[TMP_STR_LEN];
  16:Core/Src/uartParser.c **** volatile char cmd[4][TMP_STR_LEN];
  17:Core/Src/uartParser.c **** volatile uint16_t commandOut = 0x0000;
  18:Core/Src/uartParser.c **** 
  19:Core/Src/uartParser.c **** // 0 not working, 1 working
  20:Core/Src/uartParser.c **** volatile uint8_t uartStatus = 0;
  21:Core/Src/uartParser.c **** 
  22:Core/Src/uartParser.c **** const osThreadAttr_t UARTTask_attributes = {
  23:Core/Src/uartParser.c ****   .name = "UARTParseTask",
  24:Core/Src/uartParser.c ****   .stack_size = 128 * 4,
  25:Core/Src/uartParser.c ****   .priority = (osPriority_t) osPriorityNormal1, // higher priority than osPriorityNormal
  26:Core/Src/uartParser.c **** };
  27:Core/Src/uartParser.c **** 
  28:Core/Src/uartParser.c **** void sendUint16BinToUart(uint16_t x) {
  29:Core/Src/uartParser.c **** 	char str[17];
  30:Core/Src/uartParser.c **** 	uint8_t i = 0;
  31:Core/Src/uartParser.c **** 	while (i < 16) {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 2


  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
  33:Core/Src/uartParser.c **** 	  i++;
  34:Core/Src/uartParser.c **** 	}
  35:Core/Src/uartParser.c ****   str[16] = '\n';
  36:Core/Src/uartParser.c **** 	transmitCharArray(str);
  37:Core/Src/uartParser.c **** }
  38:Core/Src/uartParser.c **** 
  39:Core/Src/uartParser.c **** uint8_t parseCmd(void) {
  40:Core/Src/uartParser.c ****   uint8_t error = 0;
  41:Core/Src/uartParser.c ****   uint8_t speed = 0;
  42:Core/Src/uartParser.c ****   //Parse words from received command string
  43:Core/Src/uartParser.c ****   volatile uint8_t strLen = strIndex + 1;
  44:Core/Src/uartParser.c ****   strIndex = 0;
  45:Core/Src/uartParser.c ****   cmdStrIndex = 0;
  46:Core/Src/uartParser.c ****   cmdIndex = 0;
  47:Core/Src/uartParser.c ****   while (strIndex < strLen) {
  48:Core/Src/uartParser.c ****     if (tmpStr[strIndex] == ' ') {
  49:Core/Src/uartParser.c ****       cmdIndex++;
  50:Core/Src/uartParser.c ****       cmdStrIndex = 0;
  51:Core/Src/uartParser.c ****     } else {
  52:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
  53:Core/Src/uartParser.c ****       cmdStrIndex++;
  54:Core/Src/uartParser.c ****     }
  55:Core/Src/uartParser.c ****     strIndex++;
  56:Core/Src/uartParser.c ****   }
  57:Core/Src/uartParser.c ****   //Convert words into command format
  58:Core/Src/uartParser.c ****   //First digit
  59:Core/Src/uartParser.c ****   if (strcasecmp(cmd[0], "led") == 0) {
  60:Core/Src/uartParser.c ****     commandOut |= 0xA000;
  61:Core/Src/uartParser.c ****     //Second digit - LED
  62:Core/Src/uartParser.c ****     if (strcasecmp(cmd[1], "red") == 0) {
  63:Core/Src/uartParser.c ****       commandOut |= 0x0100;
  64:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "green") == 0) {
  65:Core/Src/uartParser.c ****       commandOut |= 0x0200;
  66:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "blue") == 0) {
  67:Core/Src/uartParser.c ****       commandOut |= 0x0300;
  68:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "orange") == 0) {
  69:Core/Src/uartParser.c ****       commandOut |= 0x0400;
  70:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "all") == 0) {
  71:Core/Src/uartParser.c ****       commandOut |= 0x0500;
  72:Core/Src/uartParser.c ****     }else {
  73:Core/Src/uartParser.c ****       error = 1;
  74:Core/Src/uartParser.c ****     }
  75:Core/Src/uartParser.c ****     //Third digit - LED
  76:Core/Src/uartParser.c ****     if (strcasecmp(cmd[2], "on") == 0) {
  77:Core/Src/uartParser.c ****       commandOut |= 0x0010;
  78:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
  79:Core/Src/uartParser.c ****         error = 1;
  80:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "off") == 0) {
  81:Core/Src/uartParser.c ****       commandOut |= 0x0020;
  82:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
  83:Core/Src/uartParser.c ****         error = 1;
  84:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "toggle") == 0) {
  85:Core/Src/uartParser.c ****       commandOut |= 0x0030;
  86:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
  87:Core/Src/uartParser.c ****         error = 1;
  88:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "blink") == 0) {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 3


  89:Core/Src/uartParser.c ****       commandOut |= 0x0040;
  90:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[3]);
  91:Core/Src/uartParser.c ****     } else {
  92:Core/Src/uartParser.c ****       error = 1;
  93:Core/Src/uartParser.c ****     }
  94:Core/Src/uartParser.c **** 
  95:Core/Src/uartParser.c ****     //LED blink speed
  96:Core/Src/uartParser.c ****     if (speed == 255)
  97:Core/Src/uartParser.c ****       error = 1;
  98:Core/Src/uartParser.c ****     else 
  99:Core/Src/uartParser.c ****       if (speed > 15) {
 100:Core/Src/uartParser.c ****         transmitCharArray("Blink speed limited to 1500 ms");
 101:Core/Src/uartParser.c ****         commandOut |= 15U;
 102:Core/Src/uartParser.c ****       }
 103:Core/Src/uartParser.c ****       else
 104:Core/Src/uartParser.c ****         commandOut |= speed;
 105:Core/Src/uartParser.c **** 
 106:Core/Src/uartParser.c ****   } else if (strcasecmp(cmd[0], "motor") == 0) {
 107:Core/Src/uartParser.c ****     commandOut |= 0xB000;
 108:Core/Src/uartParser.c ****     //Second digit - Motor
 109:Core/Src/uartParser.c ****     if (strcasecmp(cmd[1], "on") == 0) {
 110:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 111:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 112:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "off") == 0) {
 113:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 114:Core/Src/uartParser.c ****       if (cmd[2][0] != '\0')
 115:Core/Src/uartParser.c ****         error = 1;
 116:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "speed") == 0) {
 117:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 118:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 119:Core/Src/uartParser.c ****     } else {
 120:Core/Src/uartParser.c ****       error = 1;
 121:Core/Src/uartParser.c ****     }
 122:Core/Src/uartParser.c **** 
 123:Core/Src/uartParser.c ****     if (cmd[3][0] != '\0')
 124:Core/Src/uartParser.c ****       error = 1;
 125:Core/Src/uartParser.c **** 
 126:Core/Src/uartParser.c ****     //Motor speed
 127:Core/Src/uartParser.c ****     if (speed == 255)
 128:Core/Src/uartParser.c ****       error = 1;
 129:Core/Src/uartParser.c ****     else 
 130:Core/Src/uartParser.c ****       if (speed > 100) {
 131:Core/Src/uartParser.c ****         transmitCharArray("Motor speed limited to 100 RPM");
 132:Core/Src/uartParser.c ****         commandOut |= 100U;
 133:Core/Src/uartParser.c ****       }
 134:Core/Src/uartParser.c ****       else
 135:Core/Src/uartParser.c ****         commandOut |= speed;
 136:Core/Src/uartParser.c ****   } else {
 137:Core/Src/uartParser.c ****     error = 1;
 138:Core/Src/uartParser.c ****   }
 139:Core/Src/uartParser.c ****   return error;
 140:Core/Src/uartParser.c **** }
 141:Core/Src/uartParser.c **** 
 142:Core/Src/uartParser.c **** //Convert UART ascii sped into into uint8 to add to command
 143:Core/Src/uartParser.c **** uint8_t convertSpeed(char *ascii) {
  28              		.loc 1 143 35 view -0
  29              		.cfi_startproc
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 4


  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 143 35 is_stmt 0 view .LVU1
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
  40 0002 0500     		movs	r5, r0
 144:Core/Src/uartParser.c ****   uint8_t hundreds = 0, tens = 0, ones = 0;
  41              		.loc 1 144 3 is_stmt 1 view .LVU2
  42              	.LVL1:
 145:Core/Src/uartParser.c ****   //Throw error if speed is not a number
 146:Core/Src/uartParser.c ****   for (int i = 0; i < strlen(ascii); i ++){
  43              		.loc 1 146 3 view .LVU3
  44              	.LBB6:
  45              		.loc 1 146 8 view .LVU4
  46              		.loc 1 146 12 is_stmt 0 view .LVU5
  47 0004 0024     		movs	r4, #0
  48              		.loc 1 146 3 view .LVU6
  49 0006 00E0     		b	.L2
  50              	.LVL2:
  51              	.L12:
  52              		.loc 1 146 40 is_stmt 1 discriminator 2 view .LVU7
  53 0008 0134     		adds	r4, r4, #1
  54              	.LVL3:
  55              	.L2:
  56              		.loc 1 146 21 discriminator 1 view .LVU8
  57              		.loc 1 146 23 is_stmt 0 discriminator 1 view .LVU9
  58 000a 2800     		movs	r0, r5
  59 000c FFF7FEFF 		bl	strlen
  60              	.LVL4:
  61              		.loc 1 146 21 discriminator 1 view .LVU10
  62 0010 A042     		cmp	r0, r4
  63 0012 08D9     		bls	.L11
 147:Core/Src/uartParser.c ****     if ((ascii[i] < 48 && ascii[i] != 0) || ascii[i] > 57) {
  64              		.loc 1 147 5 is_stmt 1 view .LVU11
  65              		.loc 1 147 15 is_stmt 0 view .LVU12
  66 0014 2A5D     		ldrb	r2, [r5, r4]
  67              		.loc 1 147 24 view .LVU13
  68 0016 531E     		subs	r3, r2, #1
  69 0018 DBB2     		uxtb	r3, r3
  70              		.loc 1 147 8 view .LVU14
  71 001a 2E2B     		cmp	r3, #46
  72 001c 2DD9     		bls	.L8
  73              		.loc 1 147 42 discriminator 1 view .LVU15
  74 001e 392A     		cmp	r2, #57
  75 0020 F2D9     		bls	.L12
 148:Core/Src/uartParser.c ****       return 255;
  76              		.loc 1 148 14 view .LVU16
  77 0022 FF20     		movs	r0, #255
  78 0024 13E0     		b	.L3
  79              	.L11:
  80              	.LBE6:
 149:Core/Src/uartParser.c ****     }
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 5


 150:Core/Src/uartParser.c ****   }
 151:Core/Src/uartParser.c ****   //3 digit number
 152:Core/Src/uartParser.c ****   if (ascii[2] != 0) {
  81              		.loc 1 152 3 is_stmt 1 view .LVU17
  82              		.loc 1 152 12 is_stmt 0 view .LVU18
  83 0026 A978     		ldrb	r1, [r5, #2]
  84              		.loc 1 152 6 view .LVU19
  85 0028 0029     		cmp	r1, #0
  86 002a 11D0     		beq	.L5
 153:Core/Src/uartParser.c ****     hundreds = ascii[0] - 48;
  87              		.loc 1 153 5 is_stmt 1 view .LVU20
  88              		.loc 1 153 21 is_stmt 0 view .LVU21
  89 002c 2A78     		ldrb	r2, [r5]
  90              		.loc 1 153 14 view .LVU22
  91 002e 303A     		subs	r2, r2, #48
  92 0030 D2B2     		uxtb	r2, r2
  93              	.LVL5:
 154:Core/Src/uartParser.c ****     tens = ascii[1] - 48;
  94              		.loc 1 154 5 is_stmt 1 view .LVU23
  95              		.loc 1 154 17 is_stmt 0 view .LVU24
  96 0032 6B78     		ldrb	r3, [r5, #1]
  97              		.loc 1 154 10 view .LVU25
  98 0034 303B     		subs	r3, r3, #48
  99 0036 DBB2     		uxtb	r3, r3
 100              	.LVL6:
 155:Core/Src/uartParser.c ****     ones = ascii[2] - 48;
 101              		.loc 1 155 5 is_stmt 1 view .LVU26
 102              		.loc 1 155 10 is_stmt 0 view .LVU27
 103 0038 3039     		subs	r1, r1, #48
 104 003a CCB2     		uxtb	r4, r1
 105              	.LVL7:
 106              	.L6:
 156:Core/Src/uartParser.c ****   } else {
 157:Core/Src/uartParser.c ****     hundreds = 0;
 158:Core/Src/uartParser.c ****     //2 digit number
 159:Core/Src/uartParser.c ****     if (ascii[1] != 0) {
 160:Core/Src/uartParser.c ****       tens = ascii[0] - 48;
 161:Core/Src/uartParser.c ****       ones = ascii[1] - 48;
 162:Core/Src/uartParser.c ****     }
 163:Core/Src/uartParser.c ****     else {
 164:Core/Src/uartParser.c ****       tens = 0;
 165:Core/Src/uartParser.c ****       //1 digit number
 166:Core/Src/uartParser.c ****       if (ascii[0] != 0) {
 167:Core/Src/uartParser.c ****         ones = ascii[0] - 48;
 168:Core/Src/uartParser.c ****       }
 169:Core/Src/uartParser.c ****       else {
 170:Core/Src/uartParser.c ****         ones = 0;
 171:Core/Src/uartParser.c ****       }
 172:Core/Src/uartParser.c ****     }
 173:Core/Src/uartParser.c ****   }
 174:Core/Src/uartParser.c ****   return hundreds*100 + tens*10 + ones;
 107              		.loc 1 174 3 is_stmt 1 view .LVU28
 108              		.loc 1 174 23 is_stmt 0 view .LVU29
 109 003c 6420     		movs	r0, #100
 110 003e 5043     		muls	r0, r2
 111 0040 9A00     		lsls	r2, r3, #2
 112              	.LVL8:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 6


 113              		.loc 1 174 23 view .LVU30
 114 0042 9B18     		adds	r3, r3, r2
 115              	.LVL9:
 116              		.loc 1 174 23 view .LVU31
 117 0044 5B00     		lsls	r3, r3, #1
 118 0046 C018     		adds	r0, r0, r3
 119 0048 C0B2     		uxtb	r0, r0
 120              		.loc 1 174 33 view .LVU32
 121 004a 0019     		adds	r0, r0, r4
 122 004c C0B2     		uxtb	r0, r0
 123              	.LVL10:
 124              	.L3:
 175:Core/Src/uartParser.c **** }
 125              		.loc 1 175 1 view .LVU33
 126              		@ sp needed
 127              	.LVL11:
 128              		.loc 1 175 1 view .LVU34
 129 004e 70BD     		pop	{r4, r5, r6, pc}
 130              	.LVL12:
 131              	.L5:
 157:Core/Src/uartParser.c ****     //2 digit number
 132              		.loc 1 157 5 is_stmt 1 view .LVU35
 159:Core/Src/uartParser.c ****       tens = ascii[0] - 48;
 133              		.loc 1 159 5 view .LVU36
 159:Core/Src/uartParser.c ****       tens = ascii[0] - 48;
 134              		.loc 1 159 14 is_stmt 0 view .LVU37
 135 0050 6878     		ldrb	r0, [r5, #1]
 159:Core/Src/uartParser.c ****       tens = ascii[0] - 48;
 136              		.loc 1 159 8 view .LVU38
 137 0052 0028     		cmp	r0, #0
 138 0054 06D0     		beq	.L7
 160:Core/Src/uartParser.c ****       ones = ascii[1] - 48;
 139              		.loc 1 160 7 is_stmt 1 view .LVU39
 160:Core/Src/uartParser.c ****       ones = ascii[1] - 48;
 140              		.loc 1 160 19 is_stmt 0 view .LVU40
 141 0056 2B78     		ldrb	r3, [r5]
 160:Core/Src/uartParser.c ****       ones = ascii[1] - 48;
 142              		.loc 1 160 12 view .LVU41
 143 0058 303B     		subs	r3, r3, #48
 144 005a DBB2     		uxtb	r3, r3
 145              	.LVL13:
 161:Core/Src/uartParser.c ****     }
 146              		.loc 1 161 7 is_stmt 1 view .LVU42
 161:Core/Src/uartParser.c ****     }
 147              		.loc 1 161 12 is_stmt 0 view .LVU43
 148 005c 3038     		subs	r0, r0, #48
 149 005e C4B2     		uxtb	r4, r0
 150              	.LVL14:
 157:Core/Src/uartParser.c ****     //2 digit number
 151              		.loc 1 157 14 view .LVU44
 152 0060 0A00     		movs	r2, r1
 153 0062 EBE7     		b	.L6
 154              	.LVL15:
 155              	.L7:
 164:Core/Src/uartParser.c ****       //1 digit number
 156              		.loc 1 164 7 is_stmt 1 view .LVU45
 166:Core/Src/uartParser.c ****         ones = ascii[0] - 48;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 7


 157              		.loc 1 166 7 view .LVU46
 166:Core/Src/uartParser.c ****         ones = ascii[0] - 48;
 158              		.loc 1 166 16 is_stmt 0 view .LVU47
 159 0064 2A78     		ldrb	r2, [r5]
 166:Core/Src/uartParser.c ****         ones = ascii[0] - 48;
 160              		.loc 1 166 10 view .LVU48
 161 0066 002A     		cmp	r2, #0
 162 0068 04D0     		beq	.L10
 167:Core/Src/uartParser.c ****       }
 163              		.loc 1 167 9 is_stmt 1 view .LVU49
 167:Core/Src/uartParser.c ****       }
 164              		.loc 1 167 14 is_stmt 0 view .LVU50
 165 006a 303A     		subs	r2, r2, #48
 166 006c D4B2     		uxtb	r4, r2
 167              	.LVL16:
 164:Core/Src/uartParser.c ****       //1 digit number
 168              		.loc 1 164 12 view .LVU51
 169 006e 0200     		movs	r2, r0
 157:Core/Src/uartParser.c ****     //2 digit number
 170              		.loc 1 157 14 view .LVU52
 171 0070 0300     		movs	r3, r0
 172 0072 E3E7     		b	.L6
 173              	.LVL17:
 174              	.L10:
 170:Core/Src/uartParser.c ****       }
 175              		.loc 1 170 14 view .LVU53
 176 0074 1400     		movs	r4, r2
 177              	.LVL18:
 164:Core/Src/uartParser.c ****       //1 digit number
 178              		.loc 1 164 12 view .LVU54
 179 0076 1300     		movs	r3, r2
 180 0078 E0E7     		b	.L6
 181              	.LVL19:
 182              	.L8:
 183              	.LBB7:
 148:Core/Src/uartParser.c ****     }
 184              		.loc 1 148 14 view .LVU55
 185 007a FF20     		movs	r0, #255
 186 007c E7E7     		b	.L3
 187              	.LBE7:
 188              		.cfi_endproc
 189              	.LFE45:
 191              		.section	.text.transmitOneChar,"ax",%progbits
 192              		.align	1
 193              		.global	transmitOneChar
 194              		.syntax unified
 195              		.code	16
 196              		.thumb_func
 198              	transmitOneChar:
 199              	.LFB49:
 176:Core/Src/uartParser.c **** 
 177:Core/Src/uartParser.c **** /* UART CODE BEGIN Header_StartLEDTask */
 178:Core/Src/uartParser.c **** /**
 179:Core/Src/uartParser.c ****   * @brief  Function implementing the LEDTask thread.
 180:Core/Src/uartParser.c ****   * @param  argument: Not used
 181:Core/Src/uartParser.c ****   * @retval None
 182:Core/Src/uartParser.c ****   */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 8


 183:Core/Src/uartParser.c **** /* USER CODE END Header_StartLEDTask */
 184:Core/Src/uartParser.c **** void StartParseUartTask(void *argument) {
 185:Core/Src/uartParser.c ****   // TODO: add a timer to limit the max execution time
 186:Core/Src/uartParser.c **** 
 187:Core/Src/uartParser.c ****   while (1) {
 188:Core/Src/uartParser.c ****     //transmitCharArray("Waiting to get sem02.\n");
 189:Core/Src/uartParser.c ****     osSemaphoreAcquire(binarySem02UartParserHandle, osWaitForever);
 190:Core/Src/uartParser.c ****     //transmitCharArray("get sem02!\n");
 191:Core/Src/uartParser.c ****     //Command string terminated with enter key
 192:Core/Src/uartParser.c ****     uint8_t error = parseCmd();
 193:Core/Src/uartParser.c ****     //Command syntax correct
 194:Core/Src/uartParser.c ****     if (error == 0) {
 195:Core/Src/uartParser.c ****       // Store the commandOut in queue
 196:Core/Src/uartParser.c ****       if (queuePush(cmdQueue, commandOut) != -1) {
 197:Core/Src/uartParser.c ****         transmitCharArray("Push command to queue success.\n");
 198:Core/Src/uartParser.c ****         transmitCharArray(tmpStr);
 199:Core/Src/uartParser.c ****         sendUint16BinToUart(commandOut);
 200:Core/Src/uartParser.c ****       } else {
 201:Core/Src/uartParser.c ****         transmitCharArray("Fail to push command to queue, try again.\n");
 202:Core/Src/uartParser.c ****       }
 203:Core/Src/uartParser.c ****       //Command syntax malformed
 204:Core/Src/uartParser.c ****     } else {
 205:Core/Src/uartParser.c ****       transmitCharArray("Command not recognized");
 206:Core/Src/uartParser.c ****       transmitCharArray(tmpStr);    
 207:Core/Src/uartParser.c ****     }
 208:Core/Src/uartParser.c ****     //Reset command string and index
 209:Core/Src/uartParser.c ****     strIndex = 0;
 210:Core/Src/uartParser.c ****     for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 211:Core/Src/uartParser.c ****       tmpStr[i] = '\0';
 212:Core/Src/uartParser.c ****       cmd[0][i] = '\0';
 213:Core/Src/uartParser.c ****       cmd[1][i] = '\0';
 214:Core/Src/uartParser.c ****       cmd[2][i] = '\0';
 215:Core/Src/uartParser.c ****       cmd[3][i] = '\0';
 216:Core/Src/uartParser.c ****     }
 217:Core/Src/uartParser.c **** 
 218:Core/Src/uartParser.c ****     //Reset commandOut before starting next command receive
 219:Core/Src/uartParser.c ****     commandOut = 0;
 220:Core/Src/uartParser.c ****   }
 221:Core/Src/uartParser.c **** /*
 222:Core/Src/uartParser.c ****   // test queue pop
 223:Core/Src/uartParser.c ****   uint16_t item = queuePop(cmdQueue);
 224:Core/Src/uartParser.c ****   transmitCharArray("Pop items from queue\n");
 225:Core/Src/uartParser.c ****   while (item != 0xffff) {
 226:Core/Src/uartParser.c ****     sendUint16BinToUart(item);
 227:Core/Src/uartParser.c ****     item = queuePop(cmdQueue);
 228:Core/Src/uartParser.c ****   }*/
 229:Core/Src/uartParser.c **** }
 230:Core/Src/uartParser.c **** 
 231:Core/Src/uartParser.c **** //Initialize USART3 - PC4 TX, PC5 RX
 232:Core/Src/uartParser.c **** void initUsart3(void) {
 233:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 234:Core/Src/uartParser.c ****   // set pc4 to AF mode, 0x10
 235:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 236:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 237:Core/Src/uartParser.c ****   // set pc5 to AF mode, 0x10
 238:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 239:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 9


 240:Core/Src/uartParser.c **** 
 241:Core/Src/uartParser.c ****   // set PC4 AFRL to 0001: AF1
 242:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 243:Core/Src/uartParser.c ****   // set PC5 AFRL to 0001: AF1
 244:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 245:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 246:Core/Src/uartParser.c **** 
 247:Core/Src/uartParser.c ****   uint32_t fClk = HAL_RCC_GetHCLKFreq();
 248:Core/Src/uartParser.c **** 
 249:Core/Src/uartParser.c ****   // set baud rate
 250:Core/Src/uartParser.c ****   uint32_t baudRate = 115200;
 251:Core/Src/uartParser.c ****   uint32_t usartBRR = fClk / baudRate;
 252:Core/Src/uartParser.c ****   USART3->BRR = usartBRR;
 253:Core/Src/uartParser.c **** 
 254:Core/Src/uartParser.c ****   // enable the transmitter and receiver hardware of USART3
 255:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 256:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 257:Core/Src/uartParser.c **** 
 258:Core/Src/uartParser.c ****   // Enable USART peripheral.
 259:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 260:Core/Src/uartParser.c ****   transmitCharArray("UART enabled");
 261:Core/Src/uartParser.c **** 
 262:Core/Src/uartParser.c ****   // Enable the receive register not empty interrupt.
 263:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 264:Core/Src/uartParser.c ****   // Enable and set the USART interrupt priority in the NVIC.
 265:Core/Src/uartParser.c ****   NVIC_EnableIRQ(USART3_4_IRQn);
 266:Core/Src/uartParser.c ****   NVIC_SetPriority(USART3_4_IRQn, 3);
 267:Core/Src/uartParser.c ****   /* Create the semaphores(s) */
 268:Core/Src/uartParser.c ****   /* definition and creation of myBinarySem02 */
 269:Core/Src/uartParser.c ****   // The semaphore is created with an initial count of 0 
 270:Core/Src/uartParser.c ****   // ,which means it is not available initially. 
 271:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
 272:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 273:Core/Src/uartParser.c **** }
 274:Core/Src/uartParser.c **** 
 275:Core/Src/uartParser.c **** // Handle uart RX with interrupt
 276:Core/Src/uartParser.c **** void USART3_4_IRQHandler(void) {
 277:Core/Src/uartParser.c ****   //transmitCharArray("UART RX interrupt.");
 278:Core/Src/uartParser.c **** 
 279:Core/Src/uartParser.c ****   while((USART3->ISR & USART_ISR_RXNE) == 0) {
 280:Core/Src/uartParser.c **** 	}
 281:Core/Src/uartParser.c ****   //transmitCharArray("Release sem02\n");
 282:Core/Src/uartParser.c ****     
 283:Core/Src/uartParser.c ****   volatile uint8_t usartReceivedData = USART3->RDR;
 284:Core/Src/uartParser.c ****   //transmitCharArray("cmd:\n");
 285:Core/Src/uartParser.c ****   transmitOneChar(usartReceivedData);
 286:Core/Src/uartParser.c **** 
 287:Core/Src/uartParser.c ****   if (usartReceivedData == 8 || usartReceivedData == 127) {
 288:Core/Src/uartParser.c ****     if (strIndex > 0) {
 289:Core/Src/uartParser.c ****       strIndex -= 1;
 290:Core/Src/uartParser.c ****       tmpStr[strIndex] = '\0';
 291:Core/Src/uartParser.c ****     }
 292:Core/Src/uartParser.c ****   } else if (usartReceivedData != '\r') {
 293:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 294:Core/Src/uartParser.c ****     strIndex += 1;
 295:Core/Src/uartParser.c ****     //Command too long
 296:Core/Src/uartParser.c ****     if (strIndex == TMP_STR_LEN) {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 10


 297:Core/Src/uartParser.c ****     	transmitCharArray("\n\rCommand is too long!");
 298:Core/Src/uartParser.c ****       strIndex = 0;
 299:Core/Src/uartParser.c ****       for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 300:Core/Src/uartParser.c ****         tmpStr[i] = '\0';
 301:Core/Src/uartParser.c ****       }
 302:Core/Src/uartParser.c ****     }
 303:Core/Src/uartParser.c ****   } else {
 304:Core/Src/uartParser.c ****     osSemaphoreRelease(binarySem02UartParserHandle);
 305:Core/Src/uartParser.c ****   }
 306:Core/Src/uartParser.c ****   // Disable the receive register not empty interrupt.
 307:Core/Src/uartParser.c ****   //USART3->CR1 &= ~USART_CR1_RXNEIE;
 308:Core/Src/uartParser.c **** }
 309:Core/Src/uartParser.c **** 
 310:Core/Src/uartParser.c **** void transmitOneChar(uint8_t ch) {
 200              		.loc 1 310 34 is_stmt 1 view -0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204              		@ link register save eliminated.
 205              	.LVL20:
 206              	.L14:
 311:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 312:Core/Src/uartParser.c ****   }
 207              		.loc 1 312 3 view .LVU57
 311:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 208              		.loc 1 311 40 discriminator 1 view .LVU58
 311:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 209              		.loc 1 311 17 is_stmt 0 discriminator 1 view .LVU59
 210 0000 034B     		ldr	r3, .L16
 211 0002 DB69     		ldr	r3, [r3, #28]
 311:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 212              		.loc 1 311 40 discriminator 1 view .LVU60
 213 0004 1B06     		lsls	r3, r3, #24
 214 0006 FBD5     		bpl	.L14
 313:Core/Src/uartParser.c ****   USART3->TDR = ch;
 215              		.loc 1 313 3 is_stmt 1 view .LVU61
 216              		.loc 1 313 15 is_stmt 0 view .LVU62
 217 0008 014B     		ldr	r3, .L16
 218 000a 1885     		strh	r0, [r3, #40]
 314:Core/Src/uartParser.c **** }
 219              		.loc 1 314 1 view .LVU63
 220              		@ sp needed
 221 000c 7047     		bx	lr
 222              	.L17:
 223 000e C046     		.align	2
 224              	.L16:
 225 0010 00480040 		.word	1073760256
 226              		.cfi_endproc
 227              	.LFE49:
 229              		.section	.text.transmitCharArray,"ax",%progbits
 230              		.align	1
 231              		.global	transmitCharArray
 232              		.syntax unified
 233              		.code	16
 234              		.thumb_func
 236              	transmitCharArray:
 237              	.LVL21:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 11


 238              	.LFB50:
 315:Core/Src/uartParser.c **** 
 316:Core/Src/uartParser.c **** void transmitCharArray (char *arr) {
 239              		.loc 1 316 36 is_stmt 1 view -0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 243              		.loc 1 316 36 is_stmt 0 view .LVU65
 244 0000 10B5     		push	{r4, lr}
 245              	.LCFI1:
 246              		.cfi_def_cfa_offset 8
 247              		.cfi_offset 4, -8
 248              		.cfi_offset 14, -4
 249 0002 0400     		movs	r4, r0
 317:Core/Src/uartParser.c ****   while (*arr != '\0') {
 250              		.loc 1 317 3 is_stmt 1 view .LVU66
 251              		.loc 1 317 9 is_stmt 0 view .LVU67
 252 0004 02E0     		b	.L19
 253              	.LVL22:
 254              	.L20:
 318:Core/Src/uartParser.c **** 		transmitOneChar(*arr);
 255              		.loc 1 318 3 is_stmt 1 view .LVU68
 256 0006 FFF7FEFF 		bl	transmitOneChar
 257              	.LVL23:
 319:Core/Src/uartParser.c **** 		arr++;
 258              		.loc 1 319 3 view .LVU69
 259              		.loc 1 319 6 is_stmt 0 view .LVU70
 260 000a 0134     		adds	r4, r4, #1
 261              	.LVL24:
 262              	.L19:
 317:Core/Src/uartParser.c ****   while (*arr != '\0') {
 263              		.loc 1 317 15 is_stmt 1 view .LVU71
 317:Core/Src/uartParser.c ****   while (*arr != '\0') {
 264              		.loc 1 317 10 is_stmt 0 view .LVU72
 265 000c 2078     		ldrb	r0, [r4]
 317:Core/Src/uartParser.c ****   while (*arr != '\0') {
 266              		.loc 1 317 15 view .LVU73
 267 000e 0028     		cmp	r0, #0
 268 0010 F9D1     		bne	.L20
 320:Core/Src/uartParser.c **** 	}
 321:Core/Src/uartParser.c ****   transmitOneChar('\n');
 269              		.loc 1 321 3 is_stmt 1 view .LVU74
 270 0012 0A30     		adds	r0, r0, #10
 271 0014 FFF7FEFF 		bl	transmitOneChar
 272              	.LVL25:
 322:Core/Src/uartParser.c ****   transmitOneChar('\r');
 273              		.loc 1 322 3 view .LVU75
 274 0018 0D20     		movs	r0, #13
 275 001a FFF7FEFF 		bl	transmitOneChar
 276              	.LVL26:
 323:Core/Src/uartParser.c **** }...
 277              		.loc 1 323 1 is_stmt 0 view .LVU76
 278              		@ sp needed
 279              	.LVL27:
 280              		.loc 1 323 1 view .LVU77
 281 001e 10BD     		pop	{r4, pc}
 282              		.cfi_endproc
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 12


 283              	.LFE50:
 285              		.section	.text.sendUint16BinToUart,"ax",%progbits
 286              		.align	1
 287              		.global	sendUint16BinToUart
 288              		.syntax unified
 289              		.code	16
 290              		.thumb_func
 292              	sendUint16BinToUart:
 293              	.LVL28:
 294              	.LFB43:
  28:Core/Src/uartParser.c **** void sendUint16BinToUart(uint16_t x) {
 295              		.loc 1 28 38 is_stmt 1 view -0
 296              		.cfi_startproc
 297              		@ args = 0, pretend = 0, frame = 24
 298              		@ frame_needed = 0, uses_anonymous_args = 0
  28:Core/Src/uartParser.c **** void sendUint16BinToUart(uint16_t x) {
 299              		.loc 1 28 38 is_stmt 0 view .LVU79
 300 0000 10B5     		push	{r4, lr}
 301              	.LCFI2:
 302              		.cfi_def_cfa_offset 8
 303              		.cfi_offset 4, -8
 304              		.cfi_offset 14, -4
 305 0002 86B0     		sub	sp, sp, #24
 306              	.LCFI3:
 307              		.cfi_def_cfa_offset 32
  29:Core/Src/uartParser.c **** 	char str[17];
 308              		.loc 1 29 2 is_stmt 1 view .LVU80
  30:Core/Src/uartParser.c **** 	uint8_t i = 0;
 309              		.loc 1 30 2 view .LVU81
 310              	.LVL29:
  31:Core/Src/uartParser.c **** 	while (i < 16) {
 311              		.loc 1 31 2 view .LVU82
  30:Core/Src/uartParser.c **** 	uint8_t i = 0;
 312              		.loc 1 30 10 is_stmt 0 view .LVU83
 313 0004 0023     		movs	r3, #0
  31:Core/Src/uartParser.c **** 	while (i < 16) {
 314              		.loc 1 31 8 view .LVU84
 315 0006 0AE0     		b	.L22
 316              	.LVL30:
 317              	.L23:
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 318              		.loc 1 32 3 is_stmt 1 view .LVU85
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 319              		.loc 1 32 25 is_stmt 0 view .LVU86
 320 0008 0100     		movs	r1, r0
 321 000a 1941     		asrs	r1, r1, r3
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 322              		.loc 1 32 31 view .LVU87
 323 000c 0122     		movs	r2, #1
 324 000e 0A40     		ands	r2, r1
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 325              		.loc 1 32 9 view .LVU88
 326 0010 0F21     		movs	r1, #15
 327 0012 C91A     		subs	r1, r1, r3
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 328              		.loc 1 32 19 view .LVU89
 329 0014 3032     		adds	r2, r2, #48
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 13


  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 330              		.loc 1 32 13 view .LVU90
 331 0016 01AC     		add	r4, sp, #4
 332 0018 6254     		strb	r2, [r4, r1]
  33:Core/Src/uartParser.c **** 	  i++;
 333              		.loc 1 33 4 is_stmt 1 view .LVU91
  33:Core/Src/uartParser.c **** 	  i++;
 334              		.loc 1 33 5 is_stmt 0 view .LVU92
 335 001a 0133     		adds	r3, r3, #1
 336              	.LVL31:
  33:Core/Src/uartParser.c **** 	  i++;
 337              		.loc 1 33 5 view .LVU93
 338 001c DBB2     		uxtb	r3, r3
 339              	.LVL32:
 340              	.L22:
  31:Core/Src/uartParser.c **** 	while (i < 16) {
 341              		.loc 1 31 11 is_stmt 1 view .LVU94
 342 001e 0F2B     		cmp	r3, #15
 343 0020 F2D9     		bls	.L23
  35:Core/Src/uartParser.c ****   str[16] = '\n';
 344              		.loc 1 35 3 view .LVU95
  35:Core/Src/uartParser.c ****   str[16] = '\n';
 345              		.loc 1 35 11 is_stmt 0 view .LVU96
 346 0022 01A8     		add	r0, sp, #4
 347              	.LVL33:
  35:Core/Src/uartParser.c ****   str[16] = '\n';
 348              		.loc 1 35 11 view .LVU97
 349 0024 0A23     		movs	r3, #10
 350              	.LVL34:
  35:Core/Src/uartParser.c ****   str[16] = '\n';
 351              		.loc 1 35 11 view .LVU98
 352 0026 0374     		strb	r3, [r0, #16]
  36:Core/Src/uartParser.c **** 	transmitCharArray(str);
 353              		.loc 1 36 2 is_stmt 1 view .LVU99
 354 0028 FFF7FEFF 		bl	transmitCharArray
 355              	.LVL35:
  37:Core/Src/uartParser.c **** }
 356              		.loc 1 37 1 is_stmt 0 view .LVU100
 357 002c 06B0     		add	sp, sp, #24
 358              		@ sp needed
 359 002e 10BD     		pop	{r4, pc}
 360              		.cfi_endproc
 361              	.LFE43:
 363              		.section	.rodata.parseCmd.str1.4,"aMS",%progbits,1
 364              		.align	2
 365              	.LC5:
 366 0000 6C656400 		.ascii	"led\000"
 367              		.align	2
 368              	.LC8:
 369 0004 72656400 		.ascii	"red\000"
 370              		.align	2
 371              	.LC11:
 372 0008 67726565 		.ascii	"green\000"
 372      6E00
 373 000e 0000     		.align	2
 374              	.LC13:
 375 0010 626C7565 		.ascii	"blue\000"
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 14


 375      00
 376 0015 000000   		.align	2
 377              	.LC15:
 378 0018 6F72616E 		.ascii	"orange\000"
 378      676500
 379 001f 00       		.align	2
 380              	.LC17:
 381 0020 616C6C00 		.ascii	"all\000"
 382              		.align	2
 383              	.LC19:
 384 0024 6F6E00   		.ascii	"on\000"
 385 0027 00       		.align	2
 386              	.LC22:
 387 0028 6F666600 		.ascii	"off\000"
 388              		.align	2
 389              	.LC24:
 390 002c 746F6767 		.ascii	"toggle\000"
 390      6C6500
 391 0033 00       		.align	2
 392              	.LC26:
 393 0034 626C696E 		.ascii	"blink\000"
 393      6B00
 394 003a 0000     		.align	2
 395              	.LC29:
 396 003c 426C696E 		.ascii	"Blink speed limited to 1500 ms\000"
 396      6B207370 
 396      65656420 
 396      6C696D69 
 396      74656420 
 397 005b 00       		.align	2
 398              	.LC31:
 399 005c 6D6F746F 		.ascii	"motor\000"
 399      7200
 400 0062 0000     		.align	2
 401              	.LC33:
 402 0064 73706565 		.ascii	"speed\000"
 402      6400
 403 006a 0000     		.align	2
 404              	.LC35:
 405 006c 4D6F746F 		.ascii	"Motor speed limited to 100 RPM\000"
 405      72207370 
 405      65656420 
 405      6C696D69 
 405      74656420 
 406              		.section	.text.parseCmd,"ax",%progbits
 407              		.align	1
 408              		.global	parseCmd
 409              		.syntax unified
 410              		.code	16
 411              		.thumb_func
 413              	parseCmd:
 414              	.LFB44:
  39:Core/Src/uartParser.c **** uint8_t parseCmd(void) {
 415              		.loc 1 39 24 is_stmt 1 view -0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 8
 418              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 15


 419 0000 30B5     		push	{r4, r5, lr}
 420              	.LCFI4:
 421              		.cfi_def_cfa_offset 12
 422              		.cfi_offset 4, -12
 423              		.cfi_offset 5, -8
 424              		.cfi_offset 14, -4
 425 0002 83B0     		sub	sp, sp, #12
 426              	.LCFI5:
 427              		.cfi_def_cfa_offset 24
  40:Core/Src/uartParser.c ****   uint8_t error = 0;
 428              		.loc 1 40 3 view .LVU102
 429              	.LVL36:
  41:Core/Src/uartParser.c ****   uint8_t speed = 0;
 430              		.loc 1 41 3 view .LVU103
  43:Core/Src/uartParser.c ****   volatile uint8_t strLen = strIndex + 1;
 431              		.loc 1 43 3 view .LVU104
  43:Core/Src/uartParser.c ****   volatile uint8_t strLen = strIndex + 1;
 432              		.loc 1 43 38 is_stmt 0 view .LVU105
 433 0004 B14A     		ldr	r2, .L58
 434 0006 1378     		ldrb	r3, [r2]
 435 0008 0133     		adds	r3, r3, #1
 436 000a DBB2     		uxtb	r3, r3
  43:Core/Src/uartParser.c ****   volatile uint8_t strLen = strIndex + 1;
 437              		.loc 1 43 20 view .LVU106
 438 000c 6946     		mov	r1, sp
 439 000e CB71     		strb	r3, [r1, #7]
  44:Core/Src/uartParser.c ****   strIndex = 0;
 440              		.loc 1 44 3 is_stmt 1 view .LVU107
  44:Core/Src/uartParser.c ****   strIndex = 0;
 441              		.loc 1 44 12 is_stmt 0 view .LVU108
 442 0010 0023     		movs	r3, #0
 443 0012 1370     		strb	r3, [r2]
  45:Core/Src/uartParser.c ****   cmdStrIndex = 0;
 444              		.loc 1 45 3 is_stmt 1 view .LVU109
  45:Core/Src/uartParser.c ****   cmdStrIndex = 0;
 445              		.loc 1 45 15 is_stmt 0 view .LVU110
 446 0014 AE4A     		ldr	r2, .L58+4
 447 0016 1370     		strb	r3, [r2]
  46:Core/Src/uartParser.c ****   cmdIndex = 0;
 448              		.loc 1 46 3 is_stmt 1 view .LVU111
  46:Core/Src/uartParser.c ****   cmdIndex = 0;
 449              		.loc 1 46 12 is_stmt 0 view .LVU112
 450 0018 AE4A     		ldr	r2, .L58+8
 451 001a 1370     		strb	r3, [r2]
  47:Core/Src/uartParser.c ****   while (strIndex < strLen) {
 452              		.loc 1 47 3 is_stmt 1 view .LVU113
  47:Core/Src/uartParser.c ****   while (strIndex < strLen) {
 453              		.loc 1 47 9 is_stmt 0 view .LVU114
 454 001c 0CE0     		b	.L25
 455              	.L55:
  49:Core/Src/uartParser.c ****       cmdIndex++;
 456              		.loc 1 49 7 is_stmt 1 view .LVU115
  49:Core/Src/uartParser.c ****       cmdIndex++;
 457              		.loc 1 49 15 is_stmt 0 view .LVU116
 458 001e AD4A     		ldr	r2, .L58+8
 459 0020 1378     		ldrb	r3, [r2]
 460 0022 0133     		adds	r3, r3, #1
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 16


 461 0024 DBB2     		uxtb	r3, r3
 462 0026 1370     		strb	r3, [r2]
  50:Core/Src/uartParser.c ****       cmdStrIndex = 0;
 463              		.loc 1 50 7 is_stmt 1 view .LVU117
  50:Core/Src/uartParser.c ****       cmdStrIndex = 0;
 464              		.loc 1 50 19 is_stmt 0 view .LVU118
 465 0028 A94B     		ldr	r3, .L58+4
 466 002a 0022     		movs	r2, #0
 467 002c 1A70     		strb	r2, [r3]
 468              	.L27:
  55:Core/Src/uartParser.c ****     strIndex++;
 469              		.loc 1 55 5 is_stmt 1 view .LVU119
  55:Core/Src/uartParser.c ****     strIndex++;
 470              		.loc 1 55 13 is_stmt 0 view .LVU120
 471 002e A74A     		ldr	r2, .L58
 472 0030 1378     		ldrb	r3, [r2]
 473 0032 0133     		adds	r3, r3, #1
 474 0034 DBB2     		uxtb	r3, r3
 475 0036 1370     		strb	r3, [r2]
 476              	.L25:
  47:Core/Src/uartParser.c ****   while (strIndex < strLen) {
 477              		.loc 1 47 19 is_stmt 1 view .LVU121
 478 0038 A44B     		ldr	r3, .L58
 479 003a 1A78     		ldrb	r2, [r3]
 480 003c D2B2     		uxtb	r2, r2
 481 003e 6B46     		mov	r3, sp
 482 0040 0733     		adds	r3, r3, #7
 483 0042 1B78     		ldrb	r3, [r3]
 484 0044 DBB2     		uxtb	r3, r3
 485 0046 9A42     		cmp	r2, r3
 486 0048 1CD2     		bcs	.L54
  48:Core/Src/uartParser.c ****     if (tmpStr[strIndex] == ' ') {
 487              		.loc 1 48 5 view .LVU122
  48:Core/Src/uartParser.c ****     if (tmpStr[strIndex] == ' ') {
 488              		.loc 1 48 15 is_stmt 0 view .LVU123
 489 004a A04B     		ldr	r3, .L58
 490 004c 1B78     		ldrb	r3, [r3]
 491 004e DBB2     		uxtb	r3, r3
 492 0050 A14A     		ldr	r2, .L58+12
 493 0052 D35C     		ldrb	r3, [r2, r3]
  48:Core/Src/uartParser.c ****     if (tmpStr[strIndex] == ' ') {
 494              		.loc 1 48 8 view .LVU124
 495 0054 202B     		cmp	r3, #32
 496 0056 E2D0     		beq	.L55
  52:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 497              		.loc 1 52 7 is_stmt 1 view .LVU125
  52:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 498              		.loc 1 52 42 is_stmt 0 view .LVU126
 499 0058 9C4B     		ldr	r3, .L58
 500 005a 1A78     		ldrb	r2, [r3]
 501 005c D2B2     		uxtb	r2, r2
  52:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 502              		.loc 1 52 20 view .LVU127
 503 005e 9D4B     		ldr	r3, .L58+8
 504 0060 1B78     		ldrb	r3, [r3]
 505 0062 9B49     		ldr	r1, .L58+4
 506 0064 0878     		ldrb	r0, [r1]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 17


 507 0066 C0B2     		uxtb	r0, r0
  52:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 508              		.loc 1 52 42 view .LVU128
 509 0068 9B4C     		ldr	r4, .L58+12
 510 006a A45C     		ldrb	r4, [r4, r2]
 511 006c E4B2     		uxtb	r4, r4
  52:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 512              		.loc 1 52 34 view .LVU129
 513 006e 9B4A     		ldr	r2, .L58+16
 514 0070 9D00     		lsls	r5, r3, #2
 515 0072 5B19     		adds	r3, r3, r5
 516 0074 9B00     		lsls	r3, r3, #2
 517 0076 D218     		adds	r2, r2, r3
 518 0078 1454     		strb	r4, [r2, r0]
  53:Core/Src/uartParser.c ****       cmdStrIndex++;
 519              		.loc 1 53 7 is_stmt 1 view .LVU130
  53:Core/Src/uartParser.c ****       cmdStrIndex++;
 520              		.loc 1 53 18 is_stmt 0 view .LVU131
 521 007a 0B78     		ldrb	r3, [r1]
 522 007c 0133     		adds	r3, r3, #1
 523 007e DBB2     		uxtb	r3, r3
 524 0080 0B70     		strb	r3, [r1]
 525 0082 D4E7     		b	.L27
 526              	.L54:
  59:Core/Src/uartParser.c ****   if (strcasecmp(cmd[0], "led") == 0) {
 527              		.loc 1 59 3 is_stmt 1 view .LVU132
  59:Core/Src/uartParser.c ****   if (strcasecmp(cmd[0], "led") == 0) {
 528              		.loc 1 59 7 is_stmt 0 view .LVU133
 529 0084 9649     		ldr	r1, .L58+20
 530 0086 9548     		ldr	r0, .L58+16
 531 0088 FFF7FEFF 		bl	strcasecmp
 532              	.LVL37:
  59:Core/Src/uartParser.c ****   if (strcasecmp(cmd[0], "led") == 0) {
 533              		.loc 1 59 6 discriminator 1 view .LVU134
 534 008c 0028     		cmp	r0, #0
 535 008e 00D0     		beq	.LCB427
 536 0090 B7E0     		b	.L29	@long jump
 537              	.LCB427:
  60:Core/Src/uartParser.c ****     commandOut |= 0xA000;
 538              		.loc 1 60 5 is_stmt 1 view .LVU135
  60:Core/Src/uartParser.c ****     commandOut |= 0xA000;
 539              		.loc 1 60 16 is_stmt 0 view .LVU136
 540 0092 944A     		ldr	r2, .L58+24
 541 0094 1388     		ldrh	r3, [r2]
 542 0096 9449     		ldr	r1, .L58+28
 543 0098 0B43     		orrs	r3, r1
 544 009a 9BB2     		uxth	r3, r3
 545 009c 1380     		strh	r3, [r2]
  62:Core/Src/uartParser.c ****     if (strcasecmp(cmd[1], "red") == 0) {
 546              		.loc 1 62 5 is_stmt 1 view .LVU137
  62:Core/Src/uartParser.c ****     if (strcasecmp(cmd[1], "red") == 0) {
 547              		.loc 1 62 9 is_stmt 0 view .LVU138
 548 009e 9349     		ldr	r1, .L58+32
 549 00a0 9348     		ldr	r0, .L58+36
 550 00a2 FFF7FEFF 		bl	strcasecmp
 551              	.LVL38:
  62:Core/Src/uartParser.c ****     if (strcasecmp(cmd[1], "red") == 0) {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 18


 552              		.loc 1 62 8 discriminator 1 view .LVU139
 553 00a6 0028     		cmp	r0, #0
 554 00a8 25D1     		bne	.L30
  63:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 555              		.loc 1 63 7 is_stmt 1 view .LVU140
  63:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 556              		.loc 1 63 18 is_stmt 0 view .LVU141
 557 00aa 8E4A     		ldr	r2, .L58+24
 558 00ac 1388     		ldrh	r3, [r2]
 559 00ae 8021     		movs	r1, #128
 560 00b0 4900     		lsls	r1, r1, #1
 561 00b2 0B43     		orrs	r3, r1
 562 00b4 1380     		strh	r3, [r2]
  40:Core/Src/uartParser.c ****   uint8_t error = 0;
 563              		.loc 1 40 11 view .LVU142
 564 00b6 0024     		movs	r4, #0
 565              	.L31:
 566              	.LVL39:
  76:Core/Src/uartParser.c ****     if (strcasecmp(cmd[2], "on") == 0) {
 567              		.loc 1 76 5 is_stmt 1 view .LVU143
  76:Core/Src/uartParser.c ****     if (strcasecmp(cmd[2], "on") == 0) {
 568              		.loc 1 76 9 is_stmt 0 view .LVU144
 569 00b8 8E49     		ldr	r1, .L58+40
 570 00ba 8F48     		ldr	r0, .L58+44
 571 00bc FFF7FEFF 		bl	strcasecmp
 572              	.LVL40:
  76:Core/Src/uartParser.c ****     if (strcasecmp(cmd[2], "on") == 0) {
 573              		.loc 1 76 8 discriminator 1 view .LVU145
 574 00c0 0028     		cmp	r0, #0
 575 00c2 52D1     		bne	.L35
  77:Core/Src/uartParser.c ****       commandOut |= 0x0010;
 576              		.loc 1 77 7 is_stmt 1 view .LVU146
  77:Core/Src/uartParser.c ****       commandOut |= 0x0010;
 577              		.loc 1 77 18 is_stmt 0 view .LVU147
 578 00c4 874A     		ldr	r2, .L58+24
 579 00c6 1388     		ldrh	r3, [r2]
 580 00c8 1021     		movs	r1, #16
 581 00ca 0B43     		orrs	r3, r1
 582 00cc 9BB2     		uxth	r3, r3
 583 00ce 1380     		strh	r3, [r2]
  78:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
 584              		.loc 1 78 7 is_stmt 1 view .LVU148
  78:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
 585              		.loc 1 78 17 is_stmt 0 view .LVU149
 586 00d0 824B     		ldr	r3, .L58+16
 587 00d2 3C22     		movs	r2, #60
 588 00d4 9B5C     		ldrb	r3, [r3, r2]
 589 00d6 D8B2     		uxtb	r0, r3
  78:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
 590              		.loc 1 78 10 view .LVU150
 591 00d8 002B     		cmp	r3, #0
 592 00da 01D0     		beq	.L36
  41:Core/Src/uartParser.c ****   uint8_t speed = 0;
 593              		.loc 1 41 11 view .LVU151
 594 00dc 0020     		movs	r0, #0
  79:Core/Src/uartParser.c ****         error = 1;
 595              		.loc 1 79 15 view .LVU152
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 19


 596 00de 0124     		movs	r4, #1
 597              	.LVL41:
 598              	.L36:
  99:Core/Src/uartParser.c ****       if (speed > 15) {
 599              		.loc 1 99 7 is_stmt 1 view .LVU153
  99:Core/Src/uartParser.c ****       if (speed > 15) {
 600              		.loc 1 99 10 is_stmt 0 view .LVU154
 601 00e0 0F28     		cmp	r0, #15
 602 00e2 00D9     		bls	.LCB487
 603 00e4 83E0     		b	.L56	@long jump
 604              	.LCB487:
 104:Core/Src/uartParser.c ****         commandOut |= speed;
 605              		.loc 1 104 9 is_stmt 1 view .LVU155
 104:Core/Src/uartParser.c ****         commandOut |= speed;
 606              		.loc 1 104 20 is_stmt 0 view .LVU156
 607 00e6 7F4A     		ldr	r2, .L58+24
 608 00e8 1388     		ldrh	r3, [r2]
 609 00ea 0343     		orrs	r3, r0
 610 00ec 9BB2     		uxth	r3, r3
 611 00ee 1380     		strh	r3, [r2]
 612              	.L39:
 613              	.LVL42:
 139:Core/Src/uartParser.c ****   return error;
 614              		.loc 1 139 3 is_stmt 1 view .LVU157
 140:Core/Src/uartParser.c **** }
 615              		.loc 1 140 1 is_stmt 0 view .LVU158
 616 00f0 2000     		movs	r0, r4
 617 00f2 03B0     		add	sp, sp, #12
 618              		@ sp needed
 619              	.LVL43:
 140:Core/Src/uartParser.c **** }
 620              		.loc 1 140 1 view .LVU159
 621 00f4 30BD     		pop	{r4, r5, pc}
 622              	.LVL44:
 623              	.L30:
  64:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "green") == 0) {
 624              		.loc 1 64 12 is_stmt 1 view .LVU160
  64:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "green") == 0) {
 625              		.loc 1 64 16 is_stmt 0 view .LVU161
 626 00f6 8149     		ldr	r1, .L58+48
 627 00f8 7D48     		ldr	r0, .L58+36
 628 00fa FFF7FEFF 		bl	strcasecmp
 629              	.LVL45:
  64:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "green") == 0) {
 630              		.loc 1 64 15 discriminator 1 view .LVU162
 631 00fe 0028     		cmp	r0, #0
 632 0100 07D1     		bne	.L32
  65:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 633              		.loc 1 65 7 is_stmt 1 view .LVU163
  65:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 634              		.loc 1 65 18 is_stmt 0 view .LVU164
 635 0102 784A     		ldr	r2, .L58+24
 636 0104 1388     		ldrh	r3, [r2]
 637 0106 8021     		movs	r1, #128
 638 0108 8900     		lsls	r1, r1, #2
 639 010a 0B43     		orrs	r3, r1
 640 010c 1380     		strh	r3, [r2]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 20


  40:Core/Src/uartParser.c ****   uint8_t error = 0;
 641              		.loc 1 40 11 view .LVU165
 642 010e 0024     		movs	r4, #0
 643 0110 D2E7     		b	.L31
 644              	.L32:
  66:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "blue") == 0) {
 645              		.loc 1 66 12 is_stmt 1 view .LVU166
  66:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "blue") == 0) {
 646              		.loc 1 66 16 is_stmt 0 view .LVU167
 647 0112 7B49     		ldr	r1, .L58+52
 648 0114 7648     		ldr	r0, .L58+36
 649 0116 FFF7FEFF 		bl	strcasecmp
 650              	.LVL46:
  66:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "blue") == 0) {
 651              		.loc 1 66 15 discriminator 1 view .LVU168
 652 011a 0028     		cmp	r0, #0
 653 011c 07D1     		bne	.L33
  67:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 654              		.loc 1 67 7 is_stmt 1 view .LVU169
  67:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 655              		.loc 1 67 18 is_stmt 0 view .LVU170
 656 011e 714A     		ldr	r2, .L58+24
 657 0120 1388     		ldrh	r3, [r2]
 658 0122 C021     		movs	r1, #192
 659 0124 8900     		lsls	r1, r1, #2
 660 0126 0B43     		orrs	r3, r1
 661 0128 1380     		strh	r3, [r2]
  40:Core/Src/uartParser.c ****   uint8_t error = 0;
 662              		.loc 1 40 11 view .LVU171
 663 012a 0024     		movs	r4, #0
 664 012c C4E7     		b	.L31
 665              	.L33:
  68:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "orange") == 0) {
 666              		.loc 1 68 12 is_stmt 1 view .LVU172
  68:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "orange") == 0) {
 667              		.loc 1 68 16 is_stmt 0 view .LVU173
 668 012e 7549     		ldr	r1, .L58+56
 669 0130 6F48     		ldr	r0, .L58+36
 670 0132 FFF7FEFF 		bl	strcasecmp
 671              	.LVL47:
  68:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "orange") == 0) {
 672              		.loc 1 68 15 discriminator 1 view .LVU174
 673 0136 0028     		cmp	r0, #0
 674 0138 07D1     		bne	.L34
  69:Core/Src/uartParser.c ****       commandOut |= 0x0400;
 675              		.loc 1 69 7 is_stmt 1 view .LVU175
  69:Core/Src/uartParser.c ****       commandOut |= 0x0400;
 676              		.loc 1 69 18 is_stmt 0 view .LVU176
 677 013a 6A4A     		ldr	r2, .L58+24
 678 013c 1388     		ldrh	r3, [r2]
 679 013e 8021     		movs	r1, #128
 680 0140 C900     		lsls	r1, r1, #3
 681 0142 0B43     		orrs	r3, r1
 682 0144 1380     		strh	r3, [r2]
  40:Core/Src/uartParser.c ****   uint8_t error = 0;
 683              		.loc 1 40 11 view .LVU177
 684 0146 0024     		movs	r4, #0
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 21


 685 0148 B6E7     		b	.L31
 686              	.L34:
  70:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "all") == 0) {
 687              		.loc 1 70 12 is_stmt 1 view .LVU178
  70:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "all") == 0) {
 688              		.loc 1 70 16 is_stmt 0 view .LVU179
 689 014a 6F49     		ldr	r1, .L58+60
 690 014c 6848     		ldr	r0, .L58+36
 691 014e FFF7FEFF 		bl	strcasecmp
 692              	.LVL48:
  70:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "all") == 0) {
 693              		.loc 1 70 15 discriminator 1 view .LVU180
 694 0152 0028     		cmp	r0, #0
 695 0154 07D1     		bne	.L46
  71:Core/Src/uartParser.c ****       commandOut |= 0x0500;
 696              		.loc 1 71 7 is_stmt 1 view .LVU181
  71:Core/Src/uartParser.c ****       commandOut |= 0x0500;
 697              		.loc 1 71 18 is_stmt 0 view .LVU182
 698 0156 634A     		ldr	r2, .L58+24
 699 0158 1388     		ldrh	r3, [r2]
 700 015a A021     		movs	r1, #160
 701 015c C900     		lsls	r1, r1, #3
 702 015e 0B43     		orrs	r3, r1
 703 0160 1380     		strh	r3, [r2]
  40:Core/Src/uartParser.c ****   uint8_t error = 0;
 704              		.loc 1 40 11 view .LVU183
 705 0162 0024     		movs	r4, #0
 706 0164 A8E7     		b	.L31
 707              	.L46:
  73:Core/Src/uartParser.c ****       error = 1;
 708              		.loc 1 73 13 view .LVU184
 709 0166 0124     		movs	r4, #1
 710 0168 A6E7     		b	.L31
 711              	.LVL49:
 712              	.L35:
  80:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "off") == 0) {
 713              		.loc 1 80 12 is_stmt 1 view .LVU185
  80:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "off") == 0) {
 714              		.loc 1 80 16 is_stmt 0 view .LVU186
 715 016a 6849     		ldr	r1, .L58+64
 716 016c 6248     		ldr	r0, .L58+44
 717 016e FFF7FEFF 		bl	strcasecmp
 718              	.LVL50:
  80:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "off") == 0) {
 719              		.loc 1 80 15 discriminator 1 view .LVU187
 720 0172 0028     		cmp	r0, #0
 721 0174 0ED1     		bne	.L37
  81:Core/Src/uartParser.c ****       commandOut |= 0x0020;
 722              		.loc 1 81 7 is_stmt 1 view .LVU188
  81:Core/Src/uartParser.c ****       commandOut |= 0x0020;
 723              		.loc 1 81 18 is_stmt 0 view .LVU189
 724 0176 5B4A     		ldr	r2, .L58+24
 725 0178 1388     		ldrh	r3, [r2]
 726 017a 2021     		movs	r1, #32
 727 017c 0B43     		orrs	r3, r1
 728 017e 9BB2     		uxth	r3, r3
 729 0180 1380     		strh	r3, [r2]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 22


  82:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
 730              		.loc 1 82 7 is_stmt 1 view .LVU190
  82:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
 731              		.loc 1 82 17 is_stmt 0 view .LVU191
 732 0182 564B     		ldr	r3, .L58+16
 733 0184 3C22     		movs	r2, #60
 734 0186 9B5C     		ldrb	r3, [r3, r2]
 735 0188 D8B2     		uxtb	r0, r3
  82:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
 736              		.loc 1 82 10 view .LVU192
 737 018a 002B     		cmp	r3, #0
 738 018c A8D0     		beq	.L36
  41:Core/Src/uartParser.c ****   uint8_t speed = 0;
 739              		.loc 1 41 11 view .LVU193
 740 018e 0020     		movs	r0, #0
  83:Core/Src/uartParser.c ****         error = 1;
 741              		.loc 1 83 15 view .LVU194
 742 0190 0124     		movs	r4, #1
 743              	.LVL51:
  83:Core/Src/uartParser.c ****         error = 1;
 744              		.loc 1 83 15 view .LVU195
 745 0192 A5E7     		b	.L36
 746              	.LVL52:
 747              	.L37:
  84:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "toggle") == 0) {
 748              		.loc 1 84 12 is_stmt 1 view .LVU196
  84:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "toggle") == 0) {
 749              		.loc 1 84 16 is_stmt 0 view .LVU197
 750 0194 5E49     		ldr	r1, .L58+68
 751 0196 5848     		ldr	r0, .L58+44
 752 0198 FFF7FEFF 		bl	strcasecmp
 753              	.LVL53:
  84:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "toggle") == 0) {
 754              		.loc 1 84 15 discriminator 1 view .LVU198
 755 019c 0028     		cmp	r0, #0
 756 019e 0FD1     		bne	.L38
  85:Core/Src/uartParser.c ****       commandOut |= 0x0030;
 757              		.loc 1 85 7 is_stmt 1 view .LVU199
  85:Core/Src/uartParser.c ****       commandOut |= 0x0030;
 758              		.loc 1 85 18 is_stmt 0 view .LVU200
 759 01a0 504A     		ldr	r2, .L58+24
 760 01a2 1388     		ldrh	r3, [r2]
 761 01a4 3021     		movs	r1, #48
 762 01a6 0B43     		orrs	r3, r1
 763 01a8 9BB2     		uxth	r3, r3
 764 01aa 1380     		strh	r3, [r2]
  86:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
 765              		.loc 1 86 7 is_stmt 1 view .LVU201
  86:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
 766              		.loc 1 86 17 is_stmt 0 view .LVU202
 767 01ac 4B4B     		ldr	r3, .L58+16
 768 01ae 3C22     		movs	r2, #60
 769 01b0 9B5C     		ldrb	r3, [r3, r2]
 770 01b2 D8B2     		uxtb	r0, r3
  86:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
 771              		.loc 1 86 10 view .LVU203
 772 01b4 002B     		cmp	r3, #0
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 23


 773 01b6 00D1     		bne	.LCB655
 774 01b8 92E7     		b	.L36	@long jump
 775              	.LCB655:
  41:Core/Src/uartParser.c ****   uint8_t speed = 0;
 776              		.loc 1 41 11 view .LVU204
 777 01ba 0020     		movs	r0, #0
  87:Core/Src/uartParser.c ****         error = 1;
 778              		.loc 1 87 15 view .LVU205
 779 01bc 0124     		movs	r4, #1
 780              	.LVL54:
  87:Core/Src/uartParser.c ****         error = 1;
 781              		.loc 1 87 15 view .LVU206
 782 01be 8FE7     		b	.L36
 783              	.LVL55:
 784              	.L38:
  88:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "blink") == 0) {
 785              		.loc 1 88 12 is_stmt 1 view .LVU207
  88:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "blink") == 0) {
 786              		.loc 1 88 16 is_stmt 0 view .LVU208
 787 01c0 5449     		ldr	r1, .L58+72
 788 01c2 4D48     		ldr	r0, .L58+44
 789 01c4 FFF7FEFF 		bl	strcasecmp
 790              	.LVL56:
  88:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "blink") == 0) {
 791              		.loc 1 88 15 discriminator 1 view .LVU209
 792 01c8 0028     		cmp	r0, #0
 793 01ca 0DD1     		bne	.L47
  89:Core/Src/uartParser.c ****       commandOut |= 0x0040;
 794              		.loc 1 89 7 is_stmt 1 view .LVU210
  89:Core/Src/uartParser.c ****       commandOut |= 0x0040;
 795              		.loc 1 89 18 is_stmt 0 view .LVU211
 796 01cc 454A     		ldr	r2, .L58+24
 797 01ce 1388     		ldrh	r3, [r2]
 798 01d0 4021     		movs	r1, #64
 799 01d2 0B43     		orrs	r3, r1
 800 01d4 9BB2     		uxth	r3, r3
 801 01d6 1380     		strh	r3, [r2]
  90:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[3]);
 802              		.loc 1 90 7 is_stmt 1 view .LVU212
  90:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[3]);
 803              		.loc 1 90 15 is_stmt 0 view .LVU213
 804 01d8 4F48     		ldr	r0, .L58+76
 805 01da FFF7FEFF 		bl	convertSpeed
 806              	.LVL57:
  96:Core/Src/uartParser.c ****     if (speed == 255)
 807              		.loc 1 96 5 is_stmt 1 view .LVU214
  96:Core/Src/uartParser.c ****     if (speed == 255)
 808              		.loc 1 96 8 is_stmt 0 view .LVU215
 809 01de FF28     		cmp	r0, #255
 810 01e0 00D0     		beq	.LCB687
 811 01e2 7DE7     		b	.L36	@long jump
 812              	.LCB687:
  97:Core/Src/uartParser.c ****       error = 1;
 813              		.loc 1 97 13 view .LVU216
 814 01e4 0124     		movs	r4, #1
 815              	.LVL58:
  97:Core/Src/uartParser.c ****       error = 1;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 24


 816              		.loc 1 97 13 view .LVU217
 817 01e6 83E7     		b	.L39
 818              	.LVL59:
 819              	.L47:
  41:Core/Src/uartParser.c ****   uint8_t speed = 0;
 820              		.loc 1 41 11 view .LVU218
 821 01e8 0020     		movs	r0, #0
  92:Core/Src/uartParser.c ****       error = 1;
 822              		.loc 1 92 13 view .LVU219
 823 01ea 0124     		movs	r4, #1
 824              	.LVL60:
  92:Core/Src/uartParser.c ****       error = 1;
 825              		.loc 1 92 13 view .LVU220
 826 01ec 78E7     		b	.L36
 827              	.LVL61:
 828              	.L56:
 100:Core/Src/uartParser.c ****         transmitCharArray("Blink speed limited to 1500 ms");
 829              		.loc 1 100 9 is_stmt 1 view .LVU221
 830 01ee 4B48     		ldr	r0, .L58+80
 831 01f0 FFF7FEFF 		bl	transmitCharArray
 832              	.LVL62:
 101:Core/Src/uartParser.c ****         commandOut |= 15U;
 833              		.loc 1 101 9 view .LVU222
 101:Core/Src/uartParser.c ****         commandOut |= 15U;
 834              		.loc 1 101 20 is_stmt 0 view .LVU223
 835 01f4 3B4A     		ldr	r2, .L58+24
 836 01f6 1388     		ldrh	r3, [r2]
 837 01f8 0F21     		movs	r1, #15
 838 01fa 0B43     		orrs	r3, r1
 839 01fc 9BB2     		uxth	r3, r3
 840 01fe 1380     		strh	r3, [r2]
 841 0200 76E7     		b	.L39
 842              	.LVL63:
 843              	.L29:
 106:Core/Src/uartParser.c ****   } else if (strcasecmp(cmd[0], "motor") == 0) {
 844              		.loc 1 106 10 is_stmt 1 view .LVU224
 106:Core/Src/uartParser.c ****   } else if (strcasecmp(cmd[0], "motor") == 0) {
 845              		.loc 1 106 14 is_stmt 0 view .LVU225
 846 0202 4749     		ldr	r1, .L58+84
 847 0204 3548     		ldr	r0, .L58+16
 848 0206 FFF7FEFF 		bl	strcasecmp
 849              	.LVL64:
 106:Core/Src/uartParser.c ****   } else if (strcasecmp(cmd[0], "motor") == 0) {
 850              		.loc 1 106 13 discriminator 1 view .LVU226
 851 020a 0028     		cmp	r0, #0
 852 020c 5AD1     		bne	.L49
 107:Core/Src/uartParser.c ****     commandOut |= 0xB000;
 853              		.loc 1 107 5 is_stmt 1 view .LVU227
 107:Core/Src/uartParser.c ****     commandOut |= 0xB000;
 854              		.loc 1 107 16 is_stmt 0 view .LVU228
 855 020e 354A     		ldr	r2, .L58+24
 856 0210 1388     		ldrh	r3, [r2]
 857 0212 4449     		ldr	r1, .L58+88
 858 0214 0B43     		orrs	r3, r1
 859 0216 9BB2     		uxth	r3, r3
 860 0218 1380     		strh	r3, [r2]
 109:Core/Src/uartParser.c ****     if (strcasecmp(cmd[1], "on") == 0) {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 25


 861              		.loc 1 109 5 is_stmt 1 view .LVU229
 109:Core/Src/uartParser.c ****     if (strcasecmp(cmd[1], "on") == 0) {
 862              		.loc 1 109 9 is_stmt 0 view .LVU230
 863 021a 3649     		ldr	r1, .L58+40
 864 021c 3448     		ldr	r0, .L58+36
 865 021e FFF7FEFF 		bl	strcasecmp
 866              	.LVL65:
 109:Core/Src/uartParser.c ****     if (strcasecmp(cmd[1], "on") == 0) {
 867              		.loc 1 109 8 discriminator 1 view .LVU231
 868 0222 0028     		cmp	r0, #0
 869 0224 19D1     		bne	.L41
 110:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 870              		.loc 1 110 7 is_stmt 1 view .LVU232
 110:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 871              		.loc 1 110 18 is_stmt 0 view .LVU233
 872 0226 2F4A     		ldr	r2, .L58+24
 873 0228 1388     		ldrh	r3, [r2]
 874 022a 8021     		movs	r1, #128
 875 022c 4900     		lsls	r1, r1, #1
 876 022e 0B43     		orrs	r3, r1
 877 0230 1380     		strh	r3, [r2]
 111:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 878              		.loc 1 111 7 is_stmt 1 view .LVU234
 111:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 879              		.loc 1 111 15 is_stmt 0 view .LVU235
 880 0232 3148     		ldr	r0, .L58+44
 881 0234 FFF7FEFF 		bl	convertSpeed
 882              	.LVL66:
  40:Core/Src/uartParser.c ****   uint8_t error = 0;
 883              		.loc 1 40 11 view .LVU236
 884 0238 0024     		movs	r4, #0
 885              	.LVL67:
 886              	.L42:
 123:Core/Src/uartParser.c ****     if (cmd[3][0] != '\0')
 887              		.loc 1 123 5 is_stmt 1 view .LVU237
 123:Core/Src/uartParser.c ****     if (cmd[3][0] != '\0')
 888              		.loc 1 123 15 is_stmt 0 view .LVU238
 889 023a 284B     		ldr	r3, .L58+16
 890 023c 3C22     		movs	r2, #60
 891 023e 9B5C     		ldrb	r3, [r3, r2]
 123:Core/Src/uartParser.c ****     if (cmd[3][0] != '\0')
 892              		.loc 1 123 8 view .LVU239
 893 0240 002B     		cmp	r3, #0
 894 0242 00D0     		beq	.L44
 124:Core/Src/uartParser.c ****       error = 1;
 895              		.loc 1 124 13 view .LVU240
 896 0244 0124     		movs	r4, #1
 897              	.LVL68:
 898              	.L44:
 127:Core/Src/uartParser.c ****     if (speed == 255)
 899              		.loc 1 127 5 is_stmt 1 view .LVU241
 127:Core/Src/uartParser.c ****     if (speed == 255)
 900              		.loc 1 127 8 is_stmt 0 view .LVU242
 901 0246 FF28     		cmp	r0, #255
 902 0248 3ED0     		beq	.L53
 130:Core/Src/uartParser.c ****       if (speed > 100) {
 903              		.loc 1 130 7 is_stmt 1 view .LVU243
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 26


 130:Core/Src/uartParser.c ****       if (speed > 100) {
 904              		.loc 1 130 10 is_stmt 0 view .LVU244
 905 024a 6428     		cmp	r0, #100
 906 024c 30D8     		bhi	.L57
 135:Core/Src/uartParser.c ****         commandOut |= speed;
 907              		.loc 1 135 9 is_stmt 1 view .LVU245
 135:Core/Src/uartParser.c ****         commandOut |= speed;
 908              		.loc 1 135 20 is_stmt 0 view .LVU246
 909 024e 254A     		ldr	r2, .L58+24
 910 0250 1388     		ldrh	r3, [r2]
 911 0252 0343     		orrs	r3, r0
 912 0254 9BB2     		uxth	r3, r3
 913 0256 1380     		strh	r3, [r2]
 914 0258 4AE7     		b	.L39
 915              	.LVL69:
 916              	.L41:
 112:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "off") == 0) {
 917              		.loc 1 112 12 is_stmt 1 view .LVU247
 112:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "off") == 0) {
 918              		.loc 1 112 16 is_stmt 0 view .LVU248
 919 025a 2C49     		ldr	r1, .L58+64
 920 025c 2448     		ldr	r0, .L58+36
 921 025e FFF7FEFF 		bl	strcasecmp
 922              	.LVL70:
 112:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "off") == 0) {
 923              		.loc 1 112 15 discriminator 1 view .LVU249
 924 0262 0028     		cmp	r0, #0
 925 0264 0DD1     		bne	.L43
 113:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 926              		.loc 1 113 7 is_stmt 1 view .LVU250
 113:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 927              		.loc 1 113 18 is_stmt 0 view .LVU251
 928 0266 1F4A     		ldr	r2, .L58+24
 929 0268 1388     		ldrh	r3, [r2]
 930 026a 8021     		movs	r1, #128
 931 026c 8900     		lsls	r1, r1, #2
 932 026e 0B43     		orrs	r3, r1
 933 0270 1380     		strh	r3, [r2]
 114:Core/Src/uartParser.c ****       if (cmd[2][0] != '\0')
 934              		.loc 1 114 7 is_stmt 1 view .LVU252
 114:Core/Src/uartParser.c ****       if (cmd[2][0] != '\0')
 935              		.loc 1 114 17 is_stmt 0 view .LVU253
 936 0272 1A4B     		ldr	r3, .L58+16
 937 0274 2822     		movs	r2, #40
 938 0276 9B5C     		ldrb	r3, [r3, r2]
 939 0278 DCB2     		uxtb	r4, r3
 114:Core/Src/uartParser.c ****       if (cmd[2][0] != '\0')
 940              		.loc 1 114 10 view .LVU254
 941 027a 002B     		cmp	r3, #0
 942 027c 12D1     		bne	.L50
  41:Core/Src/uartParser.c ****   uint8_t speed = 0;
 943              		.loc 1 41 11 view .LVU255
 944 027e 2000     		movs	r0, r4
 945 0280 DBE7     		b	.L42
 946              	.L43:
 116:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "speed") == 0) {
 947              		.loc 1 116 12 is_stmt 1 view .LVU256
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 27


 116:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "speed") == 0) {
 948              		.loc 1 116 16 is_stmt 0 view .LVU257
 949 0282 2949     		ldr	r1, .L58+92
 950 0284 1A48     		ldr	r0, .L58+36
 951 0286 FFF7FEFF 		bl	strcasecmp
 952              	.LVL71:
 116:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "speed") == 0) {
 953              		.loc 1 116 15 discriminator 1 view .LVU258
 954 028a 0028     		cmp	r0, #0
 955 028c 0DD1     		bne	.L51
 117:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 956              		.loc 1 117 7 is_stmt 1 view .LVU259
 117:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 957              		.loc 1 117 18 is_stmt 0 view .LVU260
 958 028e 154A     		ldr	r2, .L58+24
 959 0290 1388     		ldrh	r3, [r2]
 960 0292 C021     		movs	r1, #192
 961 0294 8900     		lsls	r1, r1, #2
 962 0296 0B43     		orrs	r3, r1
 963 0298 1380     		strh	r3, [r2]
 118:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 964              		.loc 1 118 7 is_stmt 1 view .LVU261
 118:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 965              		.loc 1 118 15 is_stmt 0 view .LVU262
 966 029a 1748     		ldr	r0, .L58+44
 967 029c FFF7FEFF 		bl	convertSpeed
 968              	.LVL72:
  40:Core/Src/uartParser.c ****   uint8_t error = 0;
 969              		.loc 1 40 11 view .LVU263
 970 02a0 0024     		movs	r4, #0
 971 02a2 CAE7     		b	.L42
 972              	.LVL73:
 973              	.L50:
  41:Core/Src/uartParser.c ****   uint8_t speed = 0;
 974              		.loc 1 41 11 view .LVU264
 975 02a4 0020     		movs	r0, #0
 115:Core/Src/uartParser.c ****         error = 1;
 976              		.loc 1 115 15 view .LVU265
 977 02a6 0124     		movs	r4, #1
 978 02a8 C7E7     		b	.L42
 979              	.L51:
  41:Core/Src/uartParser.c ****   uint8_t speed = 0;
 980              		.loc 1 41 11 view .LVU266
 981 02aa 0020     		movs	r0, #0
 120:Core/Src/uartParser.c ****       error = 1;
 982              		.loc 1 120 13 view .LVU267
 983 02ac 0124     		movs	r4, #1
 984 02ae C4E7     		b	.L42
 985              	.LVL74:
 986              	.L57:
 131:Core/Src/uartParser.c ****         transmitCharArray("Motor speed limited to 100 RPM");
 987              		.loc 1 131 9 is_stmt 1 view .LVU268
 988 02b0 1E48     		ldr	r0, .L58+96
 989              	.LVL75:
 131:Core/Src/uartParser.c ****         transmitCharArray("Motor speed limited to 100 RPM");
 990              		.loc 1 131 9 is_stmt 0 view .LVU269
 991 02b2 FFF7FEFF 		bl	transmitCharArray
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 28


 992              	.LVL76:
 132:Core/Src/uartParser.c ****         commandOut |= 100U;
 993              		.loc 1 132 9 is_stmt 1 view .LVU270
 132:Core/Src/uartParser.c ****         commandOut |= 100U;
 994              		.loc 1 132 20 is_stmt 0 view .LVU271
 995 02b6 0B4A     		ldr	r2, .L58+24
 996 02b8 1388     		ldrh	r3, [r2]
 997 02ba 6421     		movs	r1, #100
 998 02bc 0B43     		orrs	r3, r1
 999 02be 9BB2     		uxth	r3, r3
 1000 02c0 1380     		strh	r3, [r2]
 1001 02c2 15E7     		b	.L39
 1002              	.LVL77:
 1003              	.L49:
 137:Core/Src/uartParser.c ****     error = 1;
 1004              		.loc 1 137 11 view .LVU272
 1005 02c4 0124     		movs	r4, #1
 1006 02c6 13E7     		b	.L39
 1007              	.LVL78:
 1008              	.L53:
 128:Core/Src/uartParser.c ****       error = 1;
 1009              		.loc 1 128 13 view .LVU273
 1010 02c8 0124     		movs	r4, #1
 1011              	.LVL79:
 128:Core/Src/uartParser.c ****       error = 1;
 1012              		.loc 1 128 13 view .LVU274
 1013 02ca 11E7     		b	.L39
 1014              	.L59:
 1015              		.align	2
 1016              	.L58:
 1017 02cc 00000000 		.word	strIndex
 1018 02d0 00000000 		.word	cmdStrIndex
 1019 02d4 00000000 		.word	cmdIndex
 1020 02d8 00000000 		.word	tmpStr
 1021 02dc 00000000 		.word	cmd
 1022 02e0 00000000 		.word	.LC5
 1023 02e4 00000000 		.word	commandOut
 1024 02e8 00A0FFFF 		.word	-24576
 1025 02ec 04000000 		.word	.LC8
 1026 02f0 14000000 		.word	cmd+20
 1027 02f4 24000000 		.word	.LC19
 1028 02f8 28000000 		.word	cmd+40
 1029 02fc 08000000 		.word	.LC11
 1030 0300 10000000 		.word	.LC13
 1031 0304 18000000 		.word	.LC15
 1032 0308 20000000 		.word	.LC17
 1033 030c 28000000 		.word	.LC22
 1034 0310 2C000000 		.word	.LC24
 1035 0314 34000000 		.word	.LC26
 1036 0318 3C000000 		.word	cmd+60
 1037 031c 3C000000 		.word	.LC29
 1038 0320 5C000000 		.word	.LC31
 1039 0324 00B0FFFF 		.word	-20480
 1040 0328 64000000 		.word	.LC33
 1041 032c 6C000000 		.word	.LC35
 1042              		.cfi_endproc
 1043              	.LFE44:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 29


 1045              		.section	.rodata.StartParseUartTask.str1.4,"aMS",%progbits,1
 1046              		.align	2
 1047              	.LC40:
 1048 0000 50757368 		.ascii	"Push command to queue success.\012\000"
 1048      20636F6D 
 1048      6D616E64 
 1048      20746F20 
 1048      71756575 
 1049              		.align	2
 1050              	.LC43:
 1051 0020 4661696C 		.ascii	"Fail to push command to queue, try again.\012\000"
 1051      20746F20 
 1051      70757368 
 1051      20636F6D 
 1051      6D616E64 
 1052 004b 00       		.align	2
 1053              	.LC45:
 1054 004c 436F6D6D 		.ascii	"Command not recognized\000"
 1054      616E6420 
 1054      6E6F7420 
 1054      7265636F 
 1054      676E697A 
 1055              		.section	.text.StartParseUartTask,"ax",%progbits
 1056              		.align	1
 1057              		.global	StartParseUartTask
 1058              		.syntax unified
 1059              		.code	16
 1060              		.thumb_func
 1062              	StartParseUartTask:
 1063              	.LFB46:
 184:Core/Src/uartParser.c **** void StartParseUartTask(void *argument) {
 1064              		.loc 1 184 41 is_stmt 1 view -0
 1065              		.cfi_startproc
 1066              		@ args = 0, pretend = 0, frame = 0
 1067              		@ frame_needed = 0, uses_anonymous_args = 0
 1068              	.LVL80:
 184:Core/Src/uartParser.c **** void StartParseUartTask(void *argument) {
 1069              		.loc 1 184 41 is_stmt 0 view .LVU276
 1070 0000 10B5     		push	{r4, lr}
 1071              	.LCFI6:
 1072              		.cfi_def_cfa_offset 8
 1073              		.cfi_offset 4, -8
 1074              		.cfi_offset 14, -4
 1075 0002 20E0     		b	.L66
 1076              	.LVL81:
 1077              	.L62:
 1078              	.LBB8:
 201:Core/Src/uartParser.c ****         transmitCharArray("Fail to push command to queue, try again.\n");
 1079              		.loc 1 201 9 is_stmt 1 view .LVU277
 1080 0004 1F48     		ldr	r0, .L67
 1081 0006 FFF7FEFF 		bl	transmitCharArray
 1082              	.LVL82:
 1083 000a 05E0     		b	.L63
 1084              	.LVL83:
 1085              	.L61:
 205:Core/Src/uartParser.c ****       transmitCharArray("Command not recognized");
 1086              		.loc 1 205 7 view .LVU278
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 30


 1087 000c 1E48     		ldr	r0, .L67+4
 1088              	.LVL84:
 205:Core/Src/uartParser.c ****       transmitCharArray("Command not recognized");
 1089              		.loc 1 205 7 is_stmt 0 view .LVU279
 1090 000e FFF7FEFF 		bl	transmitCharArray
 1091              	.LVL85:
 206:Core/Src/uartParser.c ****       transmitCharArray(tmpStr);    
 1092              		.loc 1 206 7 is_stmt 1 view .LVU280
 1093 0012 1E48     		ldr	r0, .L67+8
 1094 0014 FFF7FEFF 		bl	transmitCharArray
 1095              	.LVL86:
 1096              	.L63:
 209:Core/Src/uartParser.c ****     strIndex = 0;
 1097              		.loc 1 209 5 view .LVU281
 209:Core/Src/uartParser.c ****     strIndex = 0;
 1098              		.loc 1 209 14 is_stmt 0 view .LVU282
 1099 0018 1D4B     		ldr	r3, .L67+12
 1100 001a 0022     		movs	r2, #0
 1101 001c 1A70     		strb	r2, [r3]
 210:Core/Src/uartParser.c ****     for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1102              		.loc 1 210 5 is_stmt 1 view .LVU283
 1103              	.LBB9:
 210:Core/Src/uartParser.c ****     for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1104              		.loc 1 210 10 view .LVU284
 1105              	.LVL87:
 210:Core/Src/uartParser.c ****     for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1106              		.loc 1 210 5 is_stmt 0 view .LVU285
 1107 001e 0DE0     		b	.L64
 1108              	.LVL88:
 1109              	.L65:
 211:Core/Src/uartParser.c ****       tmpStr[i] = '\0';
 1110              		.loc 1 211 7 is_stmt 1 view .LVU286
 211:Core/Src/uartParser.c ****       tmpStr[i] = '\0';
 1111              		.loc 1 211 17 is_stmt 0 view .LVU287
 1112 0020 1A4B     		ldr	r3, .L67+8
 1113 0022 0021     		movs	r1, #0
 1114 0024 9954     		strb	r1, [r3, r2]
 212:Core/Src/uartParser.c ****       cmd[0][i] = '\0';
 1115              		.loc 1 212 7 is_stmt 1 view .LVU288
 212:Core/Src/uartParser.c ****       cmd[0][i] = '\0';
 1116              		.loc 1 212 17 is_stmt 0 view .LVU289
 1117 0026 1B4B     		ldr	r3, .L67+16
 1118 0028 9954     		strb	r1, [r3, r2]
 213:Core/Src/uartParser.c ****       cmd[1][i] = '\0';
 1119              		.loc 1 213 7 is_stmt 1 view .LVU290
 213:Core/Src/uartParser.c ****       cmd[1][i] = '\0';
 1120              		.loc 1 213 17 is_stmt 0 view .LVU291
 1121 002a 9B18     		adds	r3, r3, r2
 1122 002c 1975     		strb	r1, [r3, #20]
 214:Core/Src/uartParser.c ****       cmd[2][i] = '\0';
 1123              		.loc 1 214 7 is_stmt 1 view .LVU292
 214:Core/Src/uartParser.c ****       cmd[2][i] = '\0';
 1124              		.loc 1 214 17 is_stmt 0 view .LVU293
 1125 002e 1800     		movs	r0, r3
 1126 0030 2830     		adds	r0, r0, #40
 1127 0032 0170     		strb	r1, [r0]
 215:Core/Src/uartParser.c ****       cmd[3][i] = '\0';
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 31


 1128              		.loc 1 215 7 is_stmt 1 view .LVU294
 215:Core/Src/uartParser.c ****       cmd[3][i] = '\0';
 1129              		.loc 1 215 17 is_stmt 0 view .LVU295
 1130 0034 3C33     		adds	r3, r3, #60
 1131 0036 1970     		strb	r1, [r3]
 210:Core/Src/uartParser.c ****     for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1132              		.loc 1 210 43 is_stmt 1 discriminator 3 view .LVU296
 1133 0038 0132     		adds	r2, r2, #1
 1134              	.LVL89:
 210:Core/Src/uartParser.c ****     for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1135              		.loc 1 210 43 is_stmt 0 discriminator 3 view .LVU297
 1136 003a D2B2     		uxtb	r2, r2
 1137              	.LVL90:
 1138              	.L64:
 210:Core/Src/uartParser.c ****     for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1139              		.loc 1 210 27 is_stmt 1 discriminator 1 view .LVU298
 1140 003c 132A     		cmp	r2, #19
 1141 003e EFD9     		bls	.L65
 1142              	.LBE9:
 219:Core/Src/uartParser.c ****     commandOut = 0;
 1143              		.loc 1 219 5 view .LVU299
 219:Core/Src/uartParser.c ****     commandOut = 0;
 1144              		.loc 1 219 16 is_stmt 0 view .LVU300
 1145 0040 154B     		ldr	r3, .L67+20
 1146 0042 0022     		movs	r2, #0
 1147              	.LVL91:
 219:Core/Src/uartParser.c ****     commandOut = 0;
 1148              		.loc 1 219 16 view .LVU301
 1149 0044 1A80     		strh	r2, [r3]
 1150              	.LBE8:
 187:Core/Src/uartParser.c ****   while (1) {
 1151              		.loc 1 187 9 is_stmt 1 view .LVU302
 1152              	.LVL92:
 1153              	.L66:
 187:Core/Src/uartParser.c ****   while (1) {
 1154              		.loc 1 187 3 view .LVU303
 1155              	.LBB10:
 189:Core/Src/uartParser.c ****     osSemaphoreAcquire(binarySem02UartParserHandle, osWaitForever);
 1156              		.loc 1 189 5 view .LVU304
 1157 0046 0121     		movs	r1, #1
 1158 0048 144B     		ldr	r3, .L67+24
 1159 004a 1868     		ldr	r0, [r3]
 1160 004c 4942     		rsbs	r1, r1, #0
 1161 004e FFF7FEFF 		bl	osSemaphoreAcquire
 1162              	.LVL93:
 192:Core/Src/uartParser.c ****     uint8_t error = parseCmd();
 1163              		.loc 1 192 5 view .LVU305
 192:Core/Src/uartParser.c ****     uint8_t error = parseCmd();
 1164              		.loc 1 192 21 is_stmt 0 view .LVU306
 1165 0052 FFF7FEFF 		bl	parseCmd
 1166              	.LVL94:
 194:Core/Src/uartParser.c ****     if (error == 0) {
 1167              		.loc 1 194 5 is_stmt 1 view .LVU307
 194:Core/Src/uartParser.c ****     if (error == 0) {
 1168              		.loc 1 194 8 is_stmt 0 view .LVU308
 1169 0056 0028     		cmp	r0, #0
 1170 0058 D8D1     		bne	.L61
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 32


 196:Core/Src/uartParser.c ****       if (queuePush(cmdQueue, commandOut) != -1) {
 1171              		.loc 1 196 7 is_stmt 1 view .LVU309
 196:Core/Src/uartParser.c ****       if (queuePush(cmdQueue, commandOut) != -1) {
 1172              		.loc 1 196 11 is_stmt 0 view .LVU310
 1173 005a 0F4B     		ldr	r3, .L67+20
 1174 005c 1988     		ldrh	r1, [r3]
 1175 005e 89B2     		uxth	r1, r1
 1176 0060 0F4B     		ldr	r3, .L67+28
 1177 0062 1868     		ldr	r0, [r3]
 1178              	.LVL95:
 196:Core/Src/uartParser.c ****       if (queuePush(cmdQueue, commandOut) != -1) {
 1179              		.loc 1 196 11 view .LVU311
 1180 0064 FFF7FEFF 		bl	queuePush
 1181              	.LVL96:
 196:Core/Src/uartParser.c ****       if (queuePush(cmdQueue, commandOut) != -1) {
 1182              		.loc 1 196 10 discriminator 1 view .LVU312
 1183 0068 0130     		adds	r0, r0, #1
 1184 006a CBD0     		beq	.L62
 197:Core/Src/uartParser.c ****         transmitCharArray("Push command to queue success.\n");
 1185              		.loc 1 197 9 is_stmt 1 view .LVU313
 1186 006c 0D48     		ldr	r0, .L67+32
 1187 006e FFF7FEFF 		bl	transmitCharArray
 1188              	.LVL97:
 198:Core/Src/uartParser.c ****         transmitCharArray(tmpStr);
 1189              		.loc 1 198 9 view .LVU314
 1190 0072 0648     		ldr	r0, .L67+8
 1191 0074 FFF7FEFF 		bl	transmitCharArray
 1192              	.LVL98:
 199:Core/Src/uartParser.c ****         sendUint16BinToUart(commandOut);
 1193              		.loc 1 199 9 view .LVU315
 1194 0078 074B     		ldr	r3, .L67+20
 1195 007a 1888     		ldrh	r0, [r3]
 1196 007c 80B2     		uxth	r0, r0
 1197 007e FFF7FEFF 		bl	sendUint16BinToUart
 1198              	.LVL99:
 1199 0082 C9E7     		b	.L63
 1200              	.L68:
 1201              		.align	2
 1202              	.L67:
 1203 0084 20000000 		.word	.LC43
 1204 0088 4C000000 		.word	.LC45
 1205 008c 00000000 		.word	tmpStr
 1206 0090 00000000 		.word	strIndex
 1207 0094 00000000 		.word	cmd
 1208 0098 00000000 		.word	commandOut
 1209 009c 00000000 		.word	binarySem02UartParserHandle
 1210 00a0 00000000 		.word	cmdQueue
 1211 00a4 00000000 		.word	.LC40
 1212              	.LBE10:
 1213              		.cfi_endproc
 1214              	.LFE46:
 1216              		.global	__aeabi_uidiv
 1217              		.section	.rodata.initUsart3.str1.4,"aMS",%progbits,1
 1218              		.align	2
 1219              	.LC49:
 1220 0000 55415254 		.ascii	"UART enabled\000"
 1220      20656E61 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 33


 1220      626C6564 
 1220      00
 1221              		.section	.text.initUsart3,"ax",%progbits
 1222              		.align	1
 1223              		.global	initUsart3
 1224              		.syntax unified
 1225              		.code	16
 1226              		.thumb_func
 1228              	initUsart3:
 1229              	.LFB47:
 232:Core/Src/uartParser.c **** void initUsart3(void) {
 1230              		.loc 1 232 23 view -0
 1231              		.cfi_startproc
 1232              		@ args = 0, pretend = 0, frame = 0
 1233              		@ frame_needed = 0, uses_anonymous_args = 0
 1234 0000 10B5     		push	{r4, lr}
 1235              	.LCFI7:
 1236              		.cfi_def_cfa_offset 8
 1237              		.cfi_offset 4, -8
 1238              		.cfi_offset 14, -4
 233:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 1239              		.loc 1 233 3 view .LVU317
 233:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 1240              		.loc 1 233 6 is_stmt 0 view .LVU318
 1241 0002 2F4A     		ldr	r2, .L70
 1242 0004 5169     		ldr	r1, [r2, #20]
 233:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 1243              		.loc 1 233 15 view .LVU319
 1244 0006 8023     		movs	r3, #128
 1245 0008 1B03     		lsls	r3, r3, #12
 1246 000a 0B43     		orrs	r3, r1
 1247 000c 5361     		str	r3, [r2, #20]
 235:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 1248              		.loc 1 235 3 is_stmt 1 view .LVU320
 235:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 1249              		.loc 1 235 8 is_stmt 0 view .LVU321
 1250 000e 2D4B     		ldr	r3, .L70+4
 1251 0010 1868     		ldr	r0, [r3]
 235:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 1252              		.loc 1 235 16 view .LVU322
 1253 0012 8021     		movs	r1, #128
 1254 0014 8900     		lsls	r1, r1, #2
 1255 0016 0143     		orrs	r1, r0
 1256 0018 1960     		str	r1, [r3]
 236:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 1257              		.loc 1 236 3 is_stmt 1 view .LVU323
 236:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 1258              		.loc 1 236 8 is_stmt 0 view .LVU324
 1259 001a 1968     		ldr	r1, [r3]
 236:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 1260              		.loc 1 236 16 view .LVU325
 1261 001c 2A48     		ldr	r0, .L70+8
 1262 001e 0140     		ands	r1, r0
 1263 0020 1960     		str	r1, [r3]
 238:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 1264              		.loc 1 238 3 is_stmt 1 view .LVU326
 238:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 34


 1265              		.loc 1 238 8 is_stmt 0 view .LVU327
 1266 0022 1868     		ldr	r0, [r3]
 238:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 1267              		.loc 1 238 16 view .LVU328
 1268 0024 8021     		movs	r1, #128
 1269 0026 0901     		lsls	r1, r1, #4
 1270 0028 0143     		orrs	r1, r0
 1271 002a 1960     		str	r1, [r3]
 239:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 1272              		.loc 1 239 3 is_stmt 1 view .LVU329
 239:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 1273              		.loc 1 239 8 is_stmt 0 view .LVU330
 1274 002c 1968     		ldr	r1, [r3]
 239:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 1275              		.loc 1 239 16 view .LVU331
 1276 002e 2748     		ldr	r0, .L70+12
 1277 0030 0140     		ands	r1, r0
 1278 0032 1960     		str	r1, [r3]
 242:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 1279              		.loc 1 242 3 is_stmt 1 view .LVU332
 242:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 1280              		.loc 1 242 13 is_stmt 0 view .LVU333
 1281 0034 186A     		ldr	r0, [r3, #32]
 242:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 1282              		.loc 1 242 17 view .LVU334
 1283 0036 8021     		movs	r1, #128
 1284 0038 4902     		lsls	r1, r1, #9
 1285 003a 0143     		orrs	r1, r0
 1286 003c 1962     		str	r1, [r3, #32]
 244:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 1287              		.loc 1 244 3 is_stmt 1 view .LVU335
 244:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 1288              		.loc 1 244 13 is_stmt 0 view .LVU336
 1289 003e 186A     		ldr	r0, [r3, #32]
 244:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 1290              		.loc 1 244 17 view .LVU337
 1291 0040 8021     		movs	r1, #128
 1292 0042 4903     		lsls	r1, r1, #13
 1293 0044 0143     		orrs	r1, r0
 1294 0046 1962     		str	r1, [r3, #32]
 245:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 1295              		.loc 1 245 3 is_stmt 1 view .LVU338
 245:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 1296              		.loc 1 245 6 is_stmt 0 view .LVU339
 1297 0048 D169     		ldr	r1, [r2, #28]
 245:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 1298              		.loc 1 245 16 view .LVU340
 1299 004a 8023     		movs	r3, #128
 1300 004c DB02     		lsls	r3, r3, #11
 1301 004e 0B43     		orrs	r3, r1
 1302 0050 D361     		str	r3, [r2, #28]
 247:Core/Src/uartParser.c ****   uint32_t fClk = HAL_RCC_GetHCLKFreq();
 1303              		.loc 1 247 3 is_stmt 1 view .LVU341
 247:Core/Src/uartParser.c ****   uint32_t fClk = HAL_RCC_GetHCLKFreq();
 1304              		.loc 1 247 19 is_stmt 0 view .LVU342
 1305 0052 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1306              	.LVL100:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 35


 250:Core/Src/uartParser.c ****   uint32_t baudRate = 115200;
 1307              		.loc 1 250 3 is_stmt 1 view .LVU343
 251:Core/Src/uartParser.c ****   uint32_t usartBRR = fClk / baudRate;
 1308              		.loc 1 251 3 view .LVU344
 251:Core/Src/uartParser.c ****   uint32_t usartBRR = fClk / baudRate;
 1309              		.loc 1 251 12 is_stmt 0 view .LVU345
 1310 0056 E121     		movs	r1, #225
 1311 0058 4902     		lsls	r1, r1, #9
 1312 005a FFF7FEFF 		bl	__aeabi_uidiv
 1313              	.LVL101:
 252:Core/Src/uartParser.c ****   USART3->BRR = usartBRR;
 1314              		.loc 1 252 3 is_stmt 1 view .LVU346
 252:Core/Src/uartParser.c ****   USART3->BRR = usartBRR;
 1315              		.loc 1 252 15 is_stmt 0 view .LVU347
 1316 005e 1C4C     		ldr	r4, .L70+16
 1317 0060 E060     		str	r0, [r4, #12]
 255:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 1318              		.loc 1 255 3 is_stmt 1 view .LVU348
 255:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 1319              		.loc 1 255 9 is_stmt 0 view .LVU349
 1320 0062 2368     		ldr	r3, [r4]
 255:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 1321              		.loc 1 255 15 view .LVU350
 1322 0064 0822     		movs	r2, #8
 1323 0066 1343     		orrs	r3, r2
 1324 0068 2360     		str	r3, [r4]
 256:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 1325              		.loc 1 256 3 is_stmt 1 view .LVU351
 256:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 1326              		.loc 1 256 9 is_stmt 0 view .LVU352
 1327 006a 2368     		ldr	r3, [r4]
 256:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 1328              		.loc 1 256 15 view .LVU353
 1329 006c 043A     		subs	r2, r2, #4
 1330 006e 1343     		orrs	r3, r2
 1331 0070 2360     		str	r3, [r4]
 259:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 1332              		.loc 1 259 3 is_stmt 1 view .LVU354
 259:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 1333              		.loc 1 259 9 is_stmt 0 view .LVU355
 1334 0072 2368     		ldr	r3, [r4]
 259:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 1335              		.loc 1 259 15 view .LVU356
 1336 0074 033A     		subs	r2, r2, #3
 1337 0076 1343     		orrs	r3, r2
 1338 0078 2360     		str	r3, [r4]
 260:Core/Src/uartParser.c ****   transmitCharArray("UART enabled");
 1339              		.loc 1 260 3 is_stmt 1 view .LVU357
 1340 007a 1648     		ldr	r0, .L70+20
 1341              	.LVL102:
 260:Core/Src/uartParser.c ****   transmitCharArray("UART enabled");
 1342              		.loc 1 260 3 is_stmt 0 view .LVU358
 1343 007c FFF7FEFF 		bl	transmitCharArray
 1344              	.LVL103:
 263:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 1345              		.loc 1 263 3 is_stmt 1 view .LVU359
 263:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 36


 1346              		.loc 1 263 9 is_stmt 0 view .LVU360
 1347 0080 2368     		ldr	r3, [r4]
 263:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 1348              		.loc 1 263 15 view .LVU361
 1349 0082 2022     		movs	r2, #32
 1350 0084 1343     		orrs	r3, r2
 1351 0086 2360     		str	r3, [r4]
 265:Core/Src/uartParser.c ****   NVIC_EnableIRQ(USART3_4_IRQn);
 1352              		.loc 1 265 3 is_stmt 1 view .LVU362
 1353              	.LVL104:
 1354              	.LBB11:
 1355              	.LBI11:
 1356              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 37


  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 38


 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 39


 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 40


 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 41


 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 42


 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 43


 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 44


 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 45


 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 46


 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 47


 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 1357              		.loc 2 623 22 view .LVU363
 1358              	.LBB12:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1359              		.loc 2 625 3 view .LVU364
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1360              		.loc 2 627 5 view .LVU365
 1361              		.loc 2 627 20 is_stmt 0 view .LVU366
 1362 0088 134B     		ldr	r3, .L70+24
 1363 008a 8022     		movs	r2, #128
 1364 008c 9205     		lsls	r2, r2, #22
 1365 008e 1A60     		str	r2, [r3]
 1366              	.LVL105:
 1367              		.loc 2 627 20 view .LVU367
 1368              	.LBE12:
 1369              	.LBE11:
 266:Core/Src/uartParser.c ****   NVIC_SetPriority(USART3_4_IRQn, 3);
 1370              		.loc 1 266 3 is_stmt 1 view .LVU368
 1371              	.LBB13:
 1372              	.LBI13:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 48


 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 49


 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 1373              		.loc 2 730 22 view .LVU369
 1374              	.LBB14:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1375              		.loc 2 732 3 view .LVU370
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1376              		.loc 2 734 5 view .LVU371
 1377              		.loc 2 734 52 is_stmt 0 view .LVU372
 1378 0090 C720     		movs	r0, #199
 1379 0092 8000     		lsls	r0, r0, #2
 1380 0094 1958     		ldr	r1, [r3, r0]
 1381              		.loc 2 734 33 view .LVU373
 1382 0096 114A     		ldr	r2, .L70+28
 1383 0098 1140     		ands	r1, r2
 1384              		.loc 2 734 102 view .LVU374
 1385 009a C022     		movs	r2, #192
 1386 009c 1202     		lsls	r2, r2, #8
 1387 009e 0A43     		orrs	r2, r1
 1388              		.loc 2 734 30 view .LVU375
 1389 00a0 1A50     		str	r2, [r3, r0]
 1390              	.LVL106:
 1391              		.loc 2 734 30 view .LVU376
 1392              	.LBE14:
 1393              	.LBE13:
 271:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
 1394              		.loc 1 271 3 is_stmt 1 view .LVU377
 271:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
 1395              		.loc 1 271 33 is_stmt 0 view .LVU378
 1396 00a2 0F4A     		ldr	r2, .L70+32
 1397 00a4 0021     		movs	r1, #0
 1398 00a6 0120     		movs	r0, #1
 1399 00a8 FFF7FEFF 		bl	osSemaphoreNew
 1400              	.LVL107:
 271:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
 1401              		.loc 1 271 31 discriminator 1 view .LVU379
 1402 00ac 0D4B     		ldr	r3, .L70+36
 1403 00ae 1860     		str	r0, [r3]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 50


 272:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 1404              		.loc 1 272 3 is_stmt 1 view .LVU380
 272:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 1405              		.loc 1 272 14 is_stmt 0 view .LVU381
 1406 00b0 0221     		movs	r1, #2
 1407 00b2 0520     		movs	r0, #5
 1408 00b4 FFF7FEFF 		bl	createQueue
 1409              	.LVL108:
 272:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 1410              		.loc 1 272 12 discriminator 1 view .LVU382
 1411 00b8 0B4B     		ldr	r3, .L70+40
 1412 00ba 1860     		str	r0, [r3]
 273:Core/Src/uartParser.c **** }
 1413              		.loc 1 273 1 view .LVU383
 1414              		@ sp needed
 1415 00bc 10BD     		pop	{r4, pc}
 1416              	.L71:
 1417 00be C046     		.align	2
 1418              	.L70:
 1419 00c0 00100240 		.word	1073876992
 1420 00c4 00080048 		.word	1207961600
 1421 00c8 FFFEFFFF 		.word	-257
 1422 00cc FFFBFFFF 		.word	-1025
 1423 00d0 00480040 		.word	1073760256
 1424 00d4 00000000 		.word	.LC49
 1425 00d8 00E100E0 		.word	-536813312
 1426 00dc FF00FFFF 		.word	-65281
 1427 00e0 00000000 		.word	semAttr_SEM1
 1428 00e4 00000000 		.word	binarySem02UartParserHandle
 1429 00e8 00000000 		.word	cmdQueue
 1430              		.cfi_endproc
 1431              	.LFE47:
 1433              		.section	.rodata.USART3_4_IRQHandler.str1.4,"aMS",%progbits,1
 1434              		.align	2
 1435              	.LC56:
 1436 0000 0A0D436F 		.ascii	"\012\015Command is too long!\000"
 1436      6D6D616E 
 1436      64206973 
 1436      20746F6F 
 1436      206C6F6E 
 1437              		.section	.text.USART3_4_IRQHandler,"ax",%progbits
 1438              		.align	1
 1439              		.global	USART3_4_IRQHandler
 1440              		.syntax unified
 1441              		.code	16
 1442              		.thumb_func
 1444              	USART3_4_IRQHandler:
 1445              	.LFB48:
 276:Core/Src/uartParser.c **** void USART3_4_IRQHandler(void) {
 1446              		.loc 1 276 32 is_stmt 1 view -0
 1447              		.cfi_startproc
 1448              		@ args = 0, pretend = 0, frame = 8
 1449              		@ frame_needed = 0, uses_anonymous_args = 0
 1450 0000 10B5     		push	{r4, lr}
 1451              	.LCFI8:
 1452              		.cfi_def_cfa_offset 8
 1453              		.cfi_offset 4, -8
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 51


 1454              		.cfi_offset 14, -4
 1455 0002 82B0     		sub	sp, sp, #8
 1456              	.LCFI9:
 1457              		.cfi_def_cfa_offset 16
 1458              	.L73:
 280:Core/Src/uartParser.c **** 	}
 1459              		.loc 1 280 2 view .LVU385
 279:Core/Src/uartParser.c ****   while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1460              		.loc 1 279 40 discriminator 1 view .LVU386
 279:Core/Src/uartParser.c ****   while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1461              		.loc 1 279 16 is_stmt 0 discriminator 1 view .LVU387
 1462 0004 264B     		ldr	r3, .L81
 1463 0006 DB69     		ldr	r3, [r3, #28]
 279:Core/Src/uartParser.c ****   while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1464              		.loc 1 279 40 discriminator 1 view .LVU388
 1465 0008 9B06     		lsls	r3, r3, #26
 1466 000a FBD5     		bpl	.L73
 283:Core/Src/uartParser.c ****   volatile uint8_t usartReceivedData = USART3->RDR;
 1467              		.loc 1 283 3 is_stmt 1 view .LVU389
 283:Core/Src/uartParser.c ****   volatile uint8_t usartReceivedData = USART3->RDR;
 1468              		.loc 1 283 46 is_stmt 0 view .LVU390
 1469 000c 244B     		ldr	r3, .L81
 1470 000e 9B8C     		ldrh	r3, [r3, #36]
 283:Core/Src/uartParser.c ****   volatile uint8_t usartReceivedData = USART3->RDR;
 1471              		.loc 1 283 20 view .LVU391
 1472 0010 DBB2     		uxtb	r3, r3
 1473 0012 6A46     		mov	r2, sp
 1474 0014 D41D     		adds	r4, r2, #7
 1475 0016 D371     		strb	r3, [r2, #7]
 285:Core/Src/uartParser.c ****   transmitOneChar(usartReceivedData);
 1476              		.loc 1 285 3 is_stmt 1 view .LVU392
 1477 0018 D079     		ldrb	r0, [r2, #7]
 1478 001a C0B2     		uxtb	r0, r0
 1479 001c FFF7FEFF 		bl	transmitOneChar
 1480              	.LVL109:
 287:Core/Src/uartParser.c ****   if (usartReceivedData == 8 || usartReceivedData == 127) {
 1481              		.loc 1 287 3 view .LVU393
 287:Core/Src/uartParser.c ****   if (usartReceivedData == 8 || usartReceivedData == 127) {
 1482              		.loc 1 287 25 is_stmt 0 view .LVU394
 1483 0020 2378     		ldrb	r3, [r4]
 287:Core/Src/uartParser.c ****   if (usartReceivedData == 8 || usartReceivedData == 127) {
 1484              		.loc 1 287 6 view .LVU395
 1485 0022 082B     		cmp	r3, #8
 1486 0024 1FD0     		beq	.L74
 287:Core/Src/uartParser.c ****   if (usartReceivedData == 8 || usartReceivedData == 127) {
 1487              		.loc 1 287 51 discriminator 1 view .LVU396
 1488 0026 2378     		ldrb	r3, [r4]
 287:Core/Src/uartParser.c ****   if (usartReceivedData == 8 || usartReceivedData == 127) {
 1489              		.loc 1 287 30 discriminator 1 view .LVU397
 1490 0028 7F2B     		cmp	r3, #127
 1491 002a 1CD0     		beq	.L74
 292:Core/Src/uartParser.c ****   } else if (usartReceivedData != '\r') {
 1492              		.loc 1 292 10 is_stmt 1 view .LVU398
 292:Core/Src/uartParser.c ****   } else if (usartReceivedData != '\r') {
 1493              		.loc 1 292 32 is_stmt 0 view .LVU399
 1494 002c 6B46     		mov	r3, sp
 1495 002e 0733     		adds	r3, r3, #7
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 52


 1496 0030 1B78     		ldrb	r3, [r3]
 292:Core/Src/uartParser.c ****   } else if (usartReceivedData != '\r') {
 1497              		.loc 1 292 13 view .LVU400
 1498 0032 0D2B     		cmp	r3, #13
 1499 0034 2FD0     		beq	.L77
 293:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 1500              		.loc 1 293 5 is_stmt 1 view .LVU401
 293:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 1501              		.loc 1 293 11 is_stmt 0 view .LVU402
 1502 0036 1B4A     		ldr	r2, .L81+4
 1503 0038 1378     		ldrb	r3, [r2]
 1504 003a DBB2     		uxtb	r3, r3
 293:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 1505              		.loc 1 293 22 view .LVU403
 1506 003c 6946     		mov	r1, sp
 1507 003e 0731     		adds	r1, r1, #7
 1508 0040 0978     		ldrb	r1, [r1]
 1509 0042 C9B2     		uxtb	r1, r1
 1510 0044 1848     		ldr	r0, .L81+8
 1511 0046 C154     		strb	r1, [r0, r3]
 294:Core/Src/uartParser.c ****     strIndex += 1;
 1512              		.loc 1 294 5 is_stmt 1 view .LVU404
 294:Core/Src/uartParser.c ****     strIndex += 1;
 1513              		.loc 1 294 14 is_stmt 0 view .LVU405
 1514 0048 1378     		ldrb	r3, [r2]
 1515 004a 0133     		adds	r3, r3, #1
 1516 004c DBB2     		uxtb	r3, r3
 1517 004e 1370     		strb	r3, [r2]
 296:Core/Src/uartParser.c ****     if (strIndex == TMP_STR_LEN) {
 1518              		.loc 1 296 5 is_stmt 1 view .LVU406
 296:Core/Src/uartParser.c ****     if (strIndex == TMP_STR_LEN) {
 1519              		.loc 1 296 18 is_stmt 0 view .LVU407
 1520 0050 1378     		ldrb	r3, [r2]
 296:Core/Src/uartParser.c ****     if (strIndex == TMP_STR_LEN) {
 1521              		.loc 1 296 8 view .LVU408
 1522 0052 142B     		cmp	r3, #20
 1523 0054 15D1     		bne	.L72
 297:Core/Src/uartParser.c ****     	transmitCharArray("\n\rCommand is too long!");
 1524              		.loc 1 297 6 is_stmt 1 view .LVU409
 1525 0056 1548     		ldr	r0, .L81+12
 1526 0058 FFF7FEFF 		bl	transmitCharArray
 1527              	.LVL110:
 298:Core/Src/uartParser.c ****       strIndex = 0;
 1528              		.loc 1 298 7 view .LVU410
 298:Core/Src/uartParser.c ****       strIndex = 0;
 1529              		.loc 1 298 16 is_stmt 0 view .LVU411
 1530 005c 114B     		ldr	r3, .L81+4
 1531 005e 0022     		movs	r2, #0
 1532 0060 1A70     		strb	r2, [r3]
 299:Core/Src/uartParser.c ****       for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1533              		.loc 1 299 7 is_stmt 1 view .LVU412
 1534              	.LBB15:
 299:Core/Src/uartParser.c ****       for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1535              		.loc 1 299 12 view .LVU413
 1536              	.LVL111:
 299:Core/Src/uartParser.c ****       for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1537              		.loc 1 299 20 is_stmt 0 view .LVU414
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 53


 1538 0062 0023     		movs	r3, #0
 299:Core/Src/uartParser.c ****       for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1539              		.loc 1 299 7 view .LVU415
 1540 0064 14E0     		b	.L78
 1541              	.LVL112:
 1542              	.L74:
 299:Core/Src/uartParser.c ****       for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1543              		.loc 1 299 7 view .LVU416
 1544              	.LBE15:
 288:Core/Src/uartParser.c ****     if (strIndex > 0) {
 1545              		.loc 1 288 5 is_stmt 1 view .LVU417
 288:Core/Src/uartParser.c ****     if (strIndex > 0) {
 1546              		.loc 1 288 18 is_stmt 0 view .LVU418
 1547 0066 0F4B     		ldr	r3, .L81+4
 1548 0068 1B78     		ldrb	r3, [r3]
 288:Core/Src/uartParser.c ****     if (strIndex > 0) {
 1549              		.loc 1 288 8 view .LVU419
 1550 006a 002B     		cmp	r3, #0
 1551 006c 09D0     		beq	.L72
 289:Core/Src/uartParser.c ****       strIndex -= 1;
 1552              		.loc 1 289 7 is_stmt 1 view .LVU420
 289:Core/Src/uartParser.c ****       strIndex -= 1;
 1553              		.loc 1 289 16 is_stmt 0 view .LVU421
 1554 006e 0D4A     		ldr	r2, .L81+4
 1555 0070 1378     		ldrb	r3, [r2]
 1556 0072 013B     		subs	r3, r3, #1
 1557 0074 DBB2     		uxtb	r3, r3
 1558 0076 1370     		strb	r3, [r2]
 290:Core/Src/uartParser.c ****       tmpStr[strIndex] = '\0';
 1559              		.loc 1 290 7 is_stmt 1 view .LVU422
 290:Core/Src/uartParser.c ****       tmpStr[strIndex] = '\0';
 1560              		.loc 1 290 13 is_stmt 0 view .LVU423
 1561 0078 1378     		ldrb	r3, [r2]
 1562 007a DBB2     		uxtb	r3, r3
 290:Core/Src/uartParser.c ****       tmpStr[strIndex] = '\0';
 1563              		.loc 1 290 24 view .LVU424
 1564 007c 0A4A     		ldr	r2, .L81+8
 1565 007e 0021     		movs	r1, #0
 1566 0080 D154     		strb	r1, [r2, r3]
 1567              	.L72:
 308:Core/Src/uartParser.c **** }
 1568              		.loc 1 308 1 view .LVU425
 1569 0082 02B0     		add	sp, sp, #8
 1570              		@ sp needed
 1571 0084 10BD     		pop	{r4, pc}
 1572              	.LVL113:
 1573              	.L79:
 1574              	.LBB16:
 300:Core/Src/uartParser.c ****         tmpStr[i] = '\0';
 1575              		.loc 1 300 9 is_stmt 1 view .LVU426
 300:Core/Src/uartParser.c ****         tmpStr[i] = '\0';
 1576              		.loc 1 300 19 is_stmt 0 view .LVU427
 1577 0086 084A     		ldr	r2, .L81+8
 1578 0088 0021     		movs	r1, #0
 1579 008a D154     		strb	r1, [r2, r3]
 299:Core/Src/uartParser.c ****       for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1580              		.loc 1 299 45 is_stmt 1 discriminator 3 view .LVU428
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 54


 1581 008c 0133     		adds	r3, r3, #1
 1582              	.LVL114:
 299:Core/Src/uartParser.c ****       for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1583              		.loc 1 299 45 is_stmt 0 discriminator 3 view .LVU429
 1584 008e DBB2     		uxtb	r3, r3
 1585              	.LVL115:
 1586              	.L78:
 299:Core/Src/uartParser.c ****       for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1587              		.loc 1 299 29 is_stmt 1 discriminator 1 view .LVU430
 1588 0090 132B     		cmp	r3, #19
 1589 0092 F8D9     		bls	.L79
 1590 0094 F5E7     		b	.L72
 1591              	.LVL116:
 1592              	.L77:
 299:Core/Src/uartParser.c ****       for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1593              		.loc 1 299 29 is_stmt 0 discriminator 1 view .LVU431
 1594              	.LBE16:
 304:Core/Src/uartParser.c ****     osSemaphoreRelease(binarySem02UartParserHandle);
 1595              		.loc 1 304 5 is_stmt 1 view .LVU432
 1596 0096 064B     		ldr	r3, .L81+16
 1597 0098 1868     		ldr	r0, [r3]
 1598 009a FFF7FEFF 		bl	osSemaphoreRelease
 1599              	.LVL117:
 308:Core/Src/uartParser.c **** }
 1600              		.loc 1 308 1 is_stmt 0 view .LVU433
 1601 009e F0E7     		b	.L72
 1602              	.L82:
 1603              		.align	2
 1604              	.L81:
 1605 00a0 00480040 		.word	1073760256
 1606 00a4 00000000 		.word	strIndex
 1607 00a8 00000000 		.word	tmpStr
 1608 00ac 00000000 		.word	.LC56
 1609 00b0 00000000 		.word	binarySem02UartParserHandle
 1610              		.cfi_endproc
 1611              	.LFE48:
 1613              		.global	UARTTask_attributes
 1614              		.section	.rodata.str1.4,"aMS",%progbits,1
 1615              		.align	2
 1616              	.LC59:
 1617 0000 55415254 		.ascii	"UARTParseTask\000"
 1617      50617273 
 1617      65546173 
 1617      6B00
 1618              		.section	.rodata.UARTTask_attributes,"a"
 1619              		.align	2
 1622              	UARTTask_attributes:
 1623 0000 00000000 		.word	.LC59
 1624 0004 00000000 		.space	16
 1624      00000000 
 1624      00000000 
 1624      00000000 
 1625 0014 00020000 		.word	512
 1626 0018 19000000 		.word	25
 1627 001c 00000000 		.space	8
 1627      00000000 
 1628              		.global	uartStatus
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 55


 1629              		.section	.bss.uartStatus,"aw",%nobits
 1632              	uartStatus:
 1633 0000 00       		.space	1
 1634              		.global	commandOut
 1635              		.section	.bss.commandOut,"aw",%nobits
 1636              		.align	1
 1639              	commandOut:
 1640 0000 0000     		.space	2
 1641              		.global	cmd
 1642              		.section	.bss.cmd,"aw",%nobits
 1643              		.align	2
 1646              	cmd:
 1647 0000 00000000 		.space	80
 1647      00000000 
 1647      00000000 
 1647      00000000 
 1647      00000000 
 1648              		.global	tmpStr
 1649              		.section	.bss.tmpStr,"aw",%nobits
 1650              		.align	2
 1653              	tmpStr:
 1654 0000 00000000 		.space	20
 1654      00000000 
 1654      00000000 
 1654      00000000 
 1654      00000000 
 1655              		.global	cmdStrIndex
 1656              		.section	.bss.cmdStrIndex,"aw",%nobits
 1659              	cmdStrIndex:
 1660 0000 00       		.space	1
 1661              		.global	cmdIndex
 1662              		.section	.bss.cmdIndex,"aw",%nobits
 1665              	cmdIndex:
 1666 0000 00       		.space	1
 1667              		.global	strIndex
 1668              		.section	.bss.strIndex,"aw",%nobits
 1671              	strIndex:
 1672 0000 00       		.space	1
 1673              		.section	.rodata.str1.4
 1674 000e 0000     		.align	2
 1675              	.LC60:
 1676 0010 53454D30 		.ascii	"SEM02\000"
 1676      3200
 1677              		.section	.rodata.semAttr_SEM1,"a"
 1678              		.align	2
 1681              	semAttr_SEM1:
 1682 0000 10000000 		.word	.LC60
 1683 0004 00000000 		.space	12
 1683      00000000 
 1683      00000000 
 1684              		.global	binarySem02UartParserHandle
 1685              		.section	.bss.binarySem02UartParserHandle,"aw",%nobits
 1686              		.align	2
 1689              	binarySem02UartParserHandle:
 1690 0000 00000000 		.space	4
 1691              		.global	cmdQueue
 1692              		.section	.bss.cmdQueue,"aw",%nobits
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 56


 1693              		.align	2
 1696              	cmdQueue:
 1697 0000 00000000 		.space	4
 1698              		.global	UARTTaskHandle
 1699              		.section	.bss.UARTTaskHandle,"aw",%nobits
 1700              		.align	2
 1703              	UARTTaskHandle:
 1704 0000 00000000 		.space	4
 1705              		.text
 1706              	.Letext0:
 1707              		.file 3 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 1708              		.file 4 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/lib/gcc/arm-none-eabi/13.2.1/includ
 1709              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1710              		.file 6 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 1711              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 1712              		.file 8 "Core/Inc/cmdQueue.h"
 1713              		.file 9 "Core/Inc/uartParser.h"
 1714              		.file 10 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/string.h"
 1715              		.file 11 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/strings.h"
 1716              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 57


DEFINED SYMBOLS
                            *ABS*:00000000 uartParser.c
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:19     .text.convertSpeed:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:25     .text.convertSpeed:00000000 convertSpeed
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:192    .text.transmitOneChar:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:198    .text.transmitOneChar:00000000 transmitOneChar
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:225    .text.transmitOneChar:00000010 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:230    .text.transmitCharArray:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:236    .text.transmitCharArray:00000000 transmitCharArray
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:286    .text.sendUint16BinToUart:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:292    .text.sendUint16BinToUart:00000000 sendUint16BinToUart
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:364    .rodata.parseCmd.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:407    .text.parseCmd:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:413    .text.parseCmd:00000000 parseCmd
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1017   .text.parseCmd:000002cc $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1671   .bss.strIndex:00000000 strIndex
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1659   .bss.cmdStrIndex:00000000 cmdStrIndex
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1665   .bss.cmdIndex:00000000 cmdIndex
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1653   .bss.tmpStr:00000000 tmpStr
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1646   .bss.cmd:00000000 cmd
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1639   .bss.commandOut:00000000 commandOut
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1046   .rodata.StartParseUartTask.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1056   .text.StartParseUartTask:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1062   .text.StartParseUartTask:00000000 StartParseUartTask
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1203   .text.StartParseUartTask:00000084 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1689   .bss.binarySem02UartParserHandle:00000000 binarySem02UartParserHandle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1696   .bss.cmdQueue:00000000 cmdQueue
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1218   .rodata.initUsart3.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1222   .text.initUsart3:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1228   .text.initUsart3:00000000 initUsart3
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1419   .text.initUsart3:000000c0 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1681   .rodata.semAttr_SEM1:00000000 semAttr_SEM1
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1434   .rodata.USART3_4_IRQHandler.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1438   .text.USART3_4_IRQHandler:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1444   .text.USART3_4_IRQHandler:00000000 USART3_4_IRQHandler
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1605   .text.USART3_4_IRQHandler:000000a0 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1622   .rodata.UARTTask_attributes:00000000 UARTTask_attributes
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1615   .rodata.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1619   .rodata.UARTTask_attributes:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1632   .bss.uartStatus:00000000 uartStatus
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1633   .bss.uartStatus:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1636   .bss.commandOut:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1643   .bss.cmd:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1650   .bss.tmpStr:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1660   .bss.cmdStrIndex:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1666   .bss.cmdIndex:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1672   .bss.strIndex:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1678   .rodata.semAttr_SEM1:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1686   .bss.binarySem02UartParserHandle:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1693   .bss.cmdQueue:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1703   .bss.UARTTaskHandle:00000000 UARTTaskHandle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s:1700   .bss.UARTTaskHandle:00000000 $d

UNDEFINED SYMBOLS
strlen
strcasecmp
osSemaphoreAcquire
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQSQyvn.s 			page 58


queuePush
__aeabi_uidiv
HAL_RCC_GetHCLKFreq
osSemaphoreNew
createQueue
osSemaphoreRelease
