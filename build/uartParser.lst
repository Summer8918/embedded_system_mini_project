ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"uartParser.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/uartParser.c"
  18              		.section	.text.transmitOneChar,"ax",%progbits
  19              		.align	1
  20              		.global	transmitOneChar
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	transmitOneChar:
  26              	.LFB45:
   1:Core/Src/uartParser.c **** #include "uartParser.h"
   2:Core/Src/uartParser.c **** 
   3:Core/Src/uartParser.c **** volatile uint8_t strIndex = 0;
   4:Core/Src/uartParser.c **** volatile uint8_t cmdIndex = 0;
   5:Core/Src/uartParser.c **** volatile uint8_t cmdStrIndex = 0;
   6:Core/Src/uartParser.c **** volatile char tmpStr[TMP_STR_LEN];
   7:Core/Src/uartParser.c **** volatile char cmd[4][TMP_STR_LEN];
   8:Core/Src/uartParser.c **** volatile uint16_t commandOut = 0x0000;
   9:Core/Src/uartParser.c **** 
  10:Core/Src/uartParser.c **** //Initialize USART3 - PC4 TX, PC5 RX
  11:Core/Src/uartParser.c **** void initUsart3(void) {
  12:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
  13:Core/Src/uartParser.c ****   // set pc4 to AF mode, 0x10
  14:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
  15:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
  16:Core/Src/uartParser.c ****   // set pc5 to AF mode, 0x10
  17:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
  18:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
  19:Core/Src/uartParser.c **** 
  20:Core/Src/uartParser.c ****   // set PC4 AFRL to 0001: AF1
  21:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
  22:Core/Src/uartParser.c ****   // set PC5 AFRL to 0001: AF1
  23:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
  24:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
  25:Core/Src/uartParser.c **** 
  26:Core/Src/uartParser.c ****   uint32_t fClk = HAL_RCC_GetHCLKFreq();
  27:Core/Src/uartParser.c **** 
  28:Core/Src/uartParser.c ****   // set baud rate
  29:Core/Src/uartParser.c ****   uint32_t baudRate = 115200;
  30:Core/Src/uartParser.c ****   uint32_t usartBRR = fClk / baudRate;
  31:Core/Src/uartParser.c ****   USART3->BRR = usartBRR;
  32:Core/Src/uartParser.c **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 2


  33:Core/Src/uartParser.c ****   // enable the transmitter and receiver hardware of USART3
  34:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
  35:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
  36:Core/Src/uartParser.c **** 
  37:Core/Src/uartParser.c ****   // Enable USART peripheral.
  38:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
  39:Core/Src/uartParser.c **** 
  40:Core/Src/uartParser.c ****   // Enable the receive register not empty interrupt.
  41:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
  42:Core/Src/uartParser.c ****   // Enable and set the USART interrupt priority in the NVIC.
  43:Core/Src/uartParser.c ****   NVIC_EnableIRQ(USART3_4_IRQn);
  44:Core/Src/uartParser.c ****   NVIC_SetPriority(USART3_4_IRQn, 3);
  45:Core/Src/uartParser.c ****   transmitCharArray("UART enabled");
  46:Core/Src/uartParser.c **** }
  47:Core/Src/uartParser.c **** 
  48:Core/Src/uartParser.c **** // Handle uart RX with interrupt
  49:Core/Src/uartParser.c **** void USART3_4_IRQHandler(void) {
  50:Core/Src/uartParser.c **** 	while((USART3->ISR & USART_ISR_RXNE) == 0) {
  51:Core/Src/uartParser.c **** 	}
  52:Core/Src/uartParser.c ****     //Pull character from UART
  53:Core/Src/uartParser.c **** 	  volatile uint8_t usartReceivedData = USART3->RDR;
  54:Core/Src/uartParser.c ****     //Command string terminated with enter key
  55:Core/Src/uartParser.c **** 	  if (usartReceivedData == '\r') {
  56:Core/Src/uartParser.c ****       //Parse words from received command string
  57:Core/Src/uartParser.c ****       volatile uint8_t strLen = strIndex + 1;
  58:Core/Src/uartParser.c ****       strIndex = 0;
  59:Core/Src/uartParser.c ****       //transmitCharArray(tmpStr);
  60:Core/Src/uartParser.c ****       cmdStrIndex = 0;
  61:Core/Src/uartParser.c ****       cmdIndex = 0;
  62:Core/Src/uartParser.c ****       while (strIndex < strLen) {
  63:Core/Src/uartParser.c ****         if (tmpStr[strIndex] == ' ') {
  64:Core/Src/uartParser.c ****           cmdIndex++;
  65:Core/Src/uartParser.c ****           cmdStrIndex = 0;
  66:Core/Src/uartParser.c ****         }
  67:Core/Src/uartParser.c ****         else {
  68:Core/Src/uartParser.c ****           cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
  69:Core/Src/uartParser.c ****           cmdStrIndex++;
  70:Core/Src/uartParser.c ****         }
  71:Core/Src/uartParser.c ****         strIndex++;
  72:Core/Src/uartParser.c ****       }
  73:Core/Src/uartParser.c ****       //Convert words into command format
  74:Core/Src/uartParser.c ****       //First digit
  75:Core/Src/uartParser.c ****       if (strcmp(cmd[0], "led") == 0) {
  76:Core/Src/uartParser.c ****         commandOut |= 0xA000;
  77:Core/Src/uartParser.c ****         //Second digit - LED
  78:Core/Src/uartParser.c ****         if (strcmp(cmd[1], "red") == 0) {
  79:Core/Src/uartParser.c ****           commandOut |= 0x0100;
  80:Core/Src/uartParser.c ****         }
  81:Core/Src/uartParser.c ****         else if (strcmp(cmd[1], "green") == 0) {
  82:Core/Src/uartParser.c ****           commandOut |= 0x0200;
  83:Core/Src/uartParser.c ****         }
  84:Core/Src/uartParser.c ****         else if (strcmp(cmd[1], "blue") == 0) {
  85:Core/Src/uartParser.c ****           commandOut |= 0x0300;
  86:Core/Src/uartParser.c ****         }
  87:Core/Src/uartParser.c ****         else if (strcmp(cmd[1], "orange") == 0) {
  88:Core/Src/uartParser.c ****           commandOut |= 0x0400;
  89:Core/Src/uartParser.c ****         }
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 3


  90:Core/Src/uartParser.c ****         else {
  91:Core/Src/uartParser.c ****           commandError(tmpStr);
  92:Core/Src/uartParser.c ****           return;
  93:Core/Src/uartParser.c ****         }
  94:Core/Src/uartParser.c **** 
  95:Core/Src/uartParser.c ****         //Third digit - LED
  96:Core/Src/uartParser.c ****         if (strcmp(cmd[2], "on") == 0) {
  97:Core/Src/uartParser.c ****           commandOut |= 0x0010;
  98:Core/Src/uartParser.c ****         }
  99:Core/Src/uartParser.c ****         else if (strcmp(cmd[2], "off") == 0) {
 100:Core/Src/uartParser.c ****           commandOut |= 0x0020;
 101:Core/Src/uartParser.c ****         }
 102:Core/Src/uartParser.c ****         else if (strcmp(cmd[2], "toggle") == 0) {
 103:Core/Src/uartParser.c ****           commandOut |= 0x0030;
 104:Core/Src/uartParser.c ****         }
 105:Core/Src/uartParser.c ****         else {
 106:Core/Src/uartParser.c ****           commandError(tmpStr);
 107:Core/Src/uartParser.c ****           return;
 108:Core/Src/uartParser.c ****         }
 109:Core/Src/uartParser.c ****       }    
 110:Core/Src/uartParser.c ****       else if (strcmp(cmd[0], "motor") == 0) {
 111:Core/Src/uartParser.c ****         commandOut |= 0xB000;
 112:Core/Src/uartParser.c ****       }
 113:Core/Src/uartParser.c ****       else {
 114:Core/Src/uartParser.c ****         commandError(tmpStr);
 115:Core/Src/uartParser.c ****         return;
 116:Core/Src/uartParser.c ****       }
 117:Core/Src/uartParser.c **** 
 118:Core/Src/uartParser.c ****       //Echo successful command
 119:Core/Src/uartParser.c ****       transmitCharArray("Command:");
 120:Core/Src/uartParser.c ****       transmitCharArray(tmpStr);
 121:Core/Src/uartParser.c **** 
 122:Core/Src/uartParser.c ****       //Reset command string and index
 123:Core/Src/uartParser.c ****       strIndex = 0;
 124:Core/Src/uartParser.c ****       for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 125:Core/Src/uartParser.c ****         tmpStr[i] = '\0';
 126:Core/Src/uartParser.c ****         cmd[0][i] = '\0';
 127:Core/Src/uartParser.c ****         cmd[1][i] = '\0';
 128:Core/Src/uartParser.c ****         cmd[2][i] = '\0';
 129:Core/Src/uartParser.c ****         cmd[3][i] = '\0';
 130:Core/Src/uartParser.c ****       }
 131:Core/Src/uartParser.c ****       
 132:Core/Src/uartParser.c ****       // Store the commandOut in queue
 133:Core/Src/uartParser.c ****         /*
 134:Core/Src/uartParser.c ****          * TODO:
 135:Core/Src/uartParser.c ****          * if queue not full, push the command to the tail of queue, tell user command is stored su
 136:Core/Src/uartParser.c ****          * else tell the user that queue is full, wait and try again.
 137:Core/Src/uartParser.c ****          * */
 138:Core/Src/uartParser.c **** 
 139:Core/Src/uartParser.c ****         //
 140:Core/Src/uartParser.c **** 
 141:Core/Src/uartParser.c ****       //Dummy queue-router-worker to demonstrate correct uart parsing
 142:Core/Src/uartParser.c ****       //Enables UART commands for green LED
 143:Core/Src/uartParser.c ****       if (commandOut == 0xA210)
 144:Core/Src/uartParser.c ****         GPIOC->ODR |= GPIO_ODR_9;
 145:Core/Src/uartParser.c ****       else if (commandOut == 0xA220)
 146:Core/Src/uartParser.c ****         GPIOC->ODR &= ~GPIO_ODR_9;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 4


 147:Core/Src/uartParser.c ****       else if (commandOut == 0xA230)
 148:Core/Src/uartParser.c ****         GPIOC->ODR ^= GPIO_ODR_9;
 149:Core/Src/uartParser.c **** 
 150:Core/Src/uartParser.c ****       //Reset commandOut before starting next command receive
 151:Core/Src/uartParser.c ****       commandOut = 0;
 152:Core/Src/uartParser.c **** 
 153:Core/Src/uartParser.c **** 	  } else {
 154:Core/Src/uartParser.c ****       //Command too long
 155:Core/Src/uartParser.c ****       if (strIndex == TMP_STR_LEN) {
 156:Core/Src/uartParser.c ****       	transmitCharArray("Command is too long!");
 157:Core/Src/uartParser.c ****         strIndex = 0;
 158:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++)
 159:Core/Src/uartParser.c ****           tmpStr[i] = '\0';
 160:Core/Src/uartParser.c ****       	return;
 161:Core/Src/uartParser.c ****       }
 162:Core/Src/uartParser.c ****       //Move to next character in command
 163:Core/Src/uartParser.c ****       else {
 164:Core/Src/uartParser.c **** 		    tmpStr[strIndex] = usartReceivedData;
 165:Core/Src/uartParser.c **** 		    strIndex++;
 166:Core/Src/uartParser.c **** 	    }
 167:Core/Src/uartParser.c ****     }
 168:Core/Src/uartParser.c **** 	// Transmit the characters sent by the user back to the user.
 169:Core/Src/uartParser.c **** 	//transmitOneChar(usartReceivedData);
 170:Core/Src/uartParser.c **** }
 171:Core/Src/uartParser.c **** 
 172:Core/Src/uartParser.c **** void transmitOneChar(uint8_t ch) {
  27              		.loc 1 172 34 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33              	.L2:
 173:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 174:Core/Src/uartParser.c ****   }
  34              		.loc 1 174 3 view .LVU1
 173:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
  35              		.loc 1 173 40 discriminator 1 view .LVU2
 173:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
  36              		.loc 1 173 17 is_stmt 0 discriminator 1 view .LVU3
  37 0000 034B     		ldr	r3, .L4
  38 0002 DB69     		ldr	r3, [r3, #28]
 173:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
  39              		.loc 1 173 40 discriminator 1 view .LVU4
  40 0004 1B06     		lsls	r3, r3, #24
  41 0006 FBD5     		bpl	.L2
 175:Core/Src/uartParser.c ****   USART3->TDR = ch;
  42              		.loc 1 175 3 is_stmt 1 view .LVU5
  43              		.loc 1 175 15 is_stmt 0 view .LVU6
  44 0008 014B     		ldr	r3, .L4
  45 000a 1885     		strh	r0, [r3, #40]
 176:Core/Src/uartParser.c **** }
  46              		.loc 1 176 1 view .LVU7
  47              		@ sp needed
  48 000c 7047     		bx	lr
  49              	.L5:
  50 000e C046     		.align	2
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 5


  51              	.L4:
  52 0010 00480040 		.word	1073760256
  53              		.cfi_endproc
  54              	.LFE45:
  56              		.section	.text.transmitCharArray,"ax",%progbits
  57              		.align	1
  58              		.global	transmitCharArray
  59              		.syntax unified
  60              		.code	16
  61              		.thumb_func
  63              	transmitCharArray:
  64              	.LVL1:
  65              	.LFB46:
 177:Core/Src/uartParser.c **** 
 178:Core/Src/uartParser.c **** void transmitCharArray (char *arr) {
  66              		.loc 1 178 36 is_stmt 1 view -0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70              		.loc 1 178 36 is_stmt 0 view .LVU9
  71 0000 10B5     		push	{r4, lr}
  72              	.LCFI0:
  73              		.cfi_def_cfa_offset 8
  74              		.cfi_offset 4, -8
  75              		.cfi_offset 14, -4
  76 0002 0400     		movs	r4, r0
 179:Core/Src/uartParser.c ****   while (*arr != '\0') {
  77              		.loc 1 179 3 is_stmt 1 view .LVU10
  78              		.loc 1 179 9 is_stmt 0 view .LVU11
  79 0004 02E0     		b	.L7
  80              	.LVL2:
  81              	.L8:
 180:Core/Src/uartParser.c **** 		transmitOneChar(*arr);
  82              		.loc 1 180 3 is_stmt 1 view .LVU12
  83 0006 FFF7FEFF 		bl	transmitOneChar
  84              	.LVL3:
 181:Core/Src/uartParser.c **** 		arr++;
  85              		.loc 1 181 3 view .LVU13
  86              		.loc 1 181 6 is_stmt 0 view .LVU14
  87 000a 0134     		adds	r4, r4, #1
  88              	.LVL4:
  89              	.L7:
 179:Core/Src/uartParser.c ****   while (*arr != '\0') {
  90              		.loc 1 179 15 is_stmt 1 view .LVU15
 179:Core/Src/uartParser.c ****   while (*arr != '\0') {
  91              		.loc 1 179 10 is_stmt 0 view .LVU16
  92 000c 2078     		ldrb	r0, [r4]
 179:Core/Src/uartParser.c ****   while (*arr != '\0') {
  93              		.loc 1 179 15 view .LVU17
  94 000e 0028     		cmp	r0, #0
  95 0010 F9D1     		bne	.L8
 182:Core/Src/uartParser.c **** 	}
 183:Core/Src/uartParser.c ****   transmitOneChar('\n');
  96              		.loc 1 183 3 is_stmt 1 view .LVU18
  97 0012 0A30     		adds	r0, r0, #10
  98 0014 FFF7FEFF 		bl	transmitOneChar
  99              	.LVL5:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 6


 184:Core/Src/uartParser.c ****   transmitOneChar('\r');
 100              		.loc 1 184 3 view .LVU19
 101 0018 0D20     		movs	r0, #13
 102 001a FFF7FEFF 		bl	transmitOneChar
 103              	.LVL6:
 185:Core/Src/uartParser.c **** }
 104              		.loc 1 185 1 is_stmt 0 view .LVU20
 105              		@ sp needed
 106              	.LVL7:
 107              		.loc 1 185 1 view .LVU21
 108 001e 10BD     		pop	{r4, pc}
 109              		.cfi_endproc
 110              	.LFE46:
 112              		.global	__aeabi_uidiv
 113              		.section	.rodata.initUsart3.str1.4,"aMS",%progbits,1
 114              		.align	2
 115              	.LC0:
 116 0000 55415254 		.ascii	"UART enabled\000"
 116      20656E61 
 116      626C6564 
 116      00
 117              		.section	.text.initUsart3,"ax",%progbits
 118              		.align	1
 119              		.global	initUsart3
 120              		.syntax unified
 121              		.code	16
 122              		.thumb_func
 124              	initUsart3:
 125              	.LFB43:
  11:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 126              		.loc 1 11 23 is_stmt 1 view -0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130 0000 10B5     		push	{r4, lr}
 131              	.LCFI1:
 132              		.cfi_def_cfa_offset 8
 133              		.cfi_offset 4, -8
 134              		.cfi_offset 14, -4
  12:Core/Src/uartParser.c ****   // set pc4 to AF mode, 0x10
 135              		.loc 1 12 3 view .LVU23
  12:Core/Src/uartParser.c ****   // set pc4 to AF mode, 0x10
 136              		.loc 1 12 6 is_stmt 0 view .LVU24
 137 0002 284A     		ldr	r2, .L10
 138 0004 5169     		ldr	r1, [r2, #20]
  12:Core/Src/uartParser.c ****   // set pc4 to AF mode, 0x10
 139              		.loc 1 12 15 view .LVU25
 140 0006 8023     		movs	r3, #128
 141 0008 1B03     		lsls	r3, r3, #12
 142 000a 0B43     		orrs	r3, r1
 143 000c 5361     		str	r3, [r2, #20]
  14:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 144              		.loc 1 14 3 is_stmt 1 view .LVU26
  14:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 145              		.loc 1 14 8 is_stmt 0 view .LVU27
 146 000e 264B     		ldr	r3, .L10+4
 147 0010 1868     		ldr	r0, [r3]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 7


  14:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 148              		.loc 1 14 16 view .LVU28
 149 0012 8021     		movs	r1, #128
 150 0014 8900     		lsls	r1, r1, #2
 151 0016 0143     		orrs	r1, r0
 152 0018 1960     		str	r1, [r3]
  15:Core/Src/uartParser.c ****   // set pc5 to AF mode, 0x10
 153              		.loc 1 15 3 is_stmt 1 view .LVU29
  15:Core/Src/uartParser.c ****   // set pc5 to AF mode, 0x10
 154              		.loc 1 15 8 is_stmt 0 view .LVU30
 155 001a 1968     		ldr	r1, [r3]
  15:Core/Src/uartParser.c ****   // set pc5 to AF mode, 0x10
 156              		.loc 1 15 16 view .LVU31
 157 001c 2348     		ldr	r0, .L10+8
 158 001e 0140     		ands	r1, r0
 159 0020 1960     		str	r1, [r3]
  17:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 160              		.loc 1 17 3 is_stmt 1 view .LVU32
  17:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 161              		.loc 1 17 8 is_stmt 0 view .LVU33
 162 0022 1868     		ldr	r0, [r3]
  17:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 163              		.loc 1 17 16 view .LVU34
 164 0024 8021     		movs	r1, #128
 165 0026 0901     		lsls	r1, r1, #4
 166 0028 0143     		orrs	r1, r0
 167 002a 1960     		str	r1, [r3]
  18:Core/Src/uartParser.c **** 
 168              		.loc 1 18 3 is_stmt 1 view .LVU35
  18:Core/Src/uartParser.c **** 
 169              		.loc 1 18 8 is_stmt 0 view .LVU36
 170 002c 1968     		ldr	r1, [r3]
  18:Core/Src/uartParser.c **** 
 171              		.loc 1 18 16 view .LVU37
 172 002e 2048     		ldr	r0, .L10+12
 173 0030 0140     		ands	r1, r0
 174 0032 1960     		str	r1, [r3]
  21:Core/Src/uartParser.c ****   // set PC5 AFRL to 0001: AF1
 175              		.loc 1 21 3 is_stmt 1 view .LVU38
  21:Core/Src/uartParser.c ****   // set PC5 AFRL to 0001: AF1
 176              		.loc 1 21 13 is_stmt 0 view .LVU39
 177 0034 186A     		ldr	r0, [r3, #32]
  21:Core/Src/uartParser.c ****   // set PC5 AFRL to 0001: AF1
 178              		.loc 1 21 17 view .LVU40
 179 0036 8021     		movs	r1, #128
 180 0038 4902     		lsls	r1, r1, #9
 181 003a 0143     		orrs	r1, r0
 182 003c 1962     		str	r1, [r3, #32]
  23:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 183              		.loc 1 23 3 is_stmt 1 view .LVU41
  23:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 184              		.loc 1 23 13 is_stmt 0 view .LVU42
 185 003e 186A     		ldr	r0, [r3, #32]
  23:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 186              		.loc 1 23 17 view .LVU43
 187 0040 8021     		movs	r1, #128
 188 0042 4903     		lsls	r1, r1, #13
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 8


 189 0044 0143     		orrs	r1, r0
 190 0046 1962     		str	r1, [r3, #32]
  24:Core/Src/uartParser.c **** 
 191              		.loc 1 24 3 is_stmt 1 view .LVU44
  24:Core/Src/uartParser.c **** 
 192              		.loc 1 24 6 is_stmt 0 view .LVU45
 193 0048 D169     		ldr	r1, [r2, #28]
  24:Core/Src/uartParser.c **** 
 194              		.loc 1 24 16 view .LVU46
 195 004a 8023     		movs	r3, #128
 196 004c DB02     		lsls	r3, r3, #11
 197 004e 0B43     		orrs	r3, r1
 198 0050 D361     		str	r3, [r2, #28]
  26:Core/Src/uartParser.c **** 
 199              		.loc 1 26 3 is_stmt 1 view .LVU47
  26:Core/Src/uartParser.c **** 
 200              		.loc 1 26 19 is_stmt 0 view .LVU48
 201 0052 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 202              	.LVL8:
  29:Core/Src/uartParser.c ****   uint32_t usartBRR = fClk / baudRate;
 203              		.loc 1 29 3 is_stmt 1 view .LVU49
  30:Core/Src/uartParser.c ****   USART3->BRR = usartBRR;
 204              		.loc 1 30 3 view .LVU50
  30:Core/Src/uartParser.c ****   USART3->BRR = usartBRR;
 205              		.loc 1 30 12 is_stmt 0 view .LVU51
 206 0056 E121     		movs	r1, #225
 207 0058 4902     		lsls	r1, r1, #9
 208 005a FFF7FEFF 		bl	__aeabi_uidiv
 209              	.LVL9:
  31:Core/Src/uartParser.c **** 
 210              		.loc 1 31 3 is_stmt 1 view .LVU52
  31:Core/Src/uartParser.c **** 
 211              		.loc 1 31 15 is_stmt 0 view .LVU53
 212 005e 154B     		ldr	r3, .L10+16
 213 0060 D860     		str	r0, [r3, #12]
  34:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 214              		.loc 1 34 3 is_stmt 1 view .LVU54
  34:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 215              		.loc 1 34 9 is_stmt 0 view .LVU55
 216 0062 1A68     		ldr	r2, [r3]
  34:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 217              		.loc 1 34 15 view .LVU56
 218 0064 0821     		movs	r1, #8
 219 0066 0A43     		orrs	r2, r1
 220 0068 1A60     		str	r2, [r3]
  35:Core/Src/uartParser.c **** 
 221              		.loc 1 35 3 is_stmt 1 view .LVU57
  35:Core/Src/uartParser.c **** 
 222              		.loc 1 35 9 is_stmt 0 view .LVU58
 223 006a 1A68     		ldr	r2, [r3]
  35:Core/Src/uartParser.c **** 
 224              		.loc 1 35 15 view .LVU59
 225 006c 0439     		subs	r1, r1, #4
 226 006e 0A43     		orrs	r2, r1
 227 0070 1A60     		str	r2, [r3]
  38:Core/Src/uartParser.c **** 
 228              		.loc 1 38 3 is_stmt 1 view .LVU60
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 9


  38:Core/Src/uartParser.c **** 
 229              		.loc 1 38 9 is_stmt 0 view .LVU61
 230 0072 1A68     		ldr	r2, [r3]
  38:Core/Src/uartParser.c **** 
 231              		.loc 1 38 15 view .LVU62
 232 0074 0339     		subs	r1, r1, #3
 233 0076 0A43     		orrs	r2, r1
 234 0078 1A60     		str	r2, [r3]
  41:Core/Src/uartParser.c ****   // Enable and set the USART interrupt priority in the NVIC.
 235              		.loc 1 41 3 is_stmt 1 view .LVU63
  41:Core/Src/uartParser.c ****   // Enable and set the USART interrupt priority in the NVIC.
 236              		.loc 1 41 9 is_stmt 0 view .LVU64
 237 007a 1A68     		ldr	r2, [r3]
  41:Core/Src/uartParser.c ****   // Enable and set the USART interrupt priority in the NVIC.
 238              		.loc 1 41 15 view .LVU65
 239 007c 1F31     		adds	r1, r1, #31
 240 007e 0A43     		orrs	r2, r1
 241 0080 1A60     		str	r2, [r3]
  43:Core/Src/uartParser.c ****   NVIC_SetPriority(USART3_4_IRQn, 3);
 242              		.loc 1 43 3 is_stmt 1 view .LVU66
 243              	.LVL10:
 244              	.LBB6:
 245              	.LBI6:
 246              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 10


  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 11


  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 12


 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 13


 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 14


 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 15


 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 16


 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 17


 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 18


 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 19


 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 20


 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 247              		.loc 2 623 22 view .LVU67
 248              	.LBB7:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 249              		.loc 2 625 3 view .LVU68
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 250              		.loc 2 627 5 view .LVU69
 251              		.loc 2 627 20 is_stmt 0 view .LVU70
 252 0082 0D4B     		ldr	r3, .L10+20
 253 0084 8022     		movs	r2, #128
 254 0086 9205     		lsls	r2, r2, #22
 255 0088 1A60     		str	r2, [r3]
 256              	.LVL11:
 257              		.loc 2 627 20 view .LVU71
 258              	.LBE7:
 259              	.LBE6:
  44:Core/Src/uartParser.c ****   transmitCharArray("UART enabled");
 260              		.loc 1 44 3 is_stmt 1 view .LVU72
 261              	.LBB8:
 262              	.LBI8:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 21


 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 22


 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 263              		.loc 2 730 22 view .LVU73
 264              	.LBB9:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 265              		.loc 2 732 3 view .LVU74
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 266              		.loc 2 734 5 view .LVU75
 267              		.loc 2 734 52 is_stmt 0 view .LVU76
 268 008a C720     		movs	r0, #199
 269              	.LVL12:
 270              		.loc 2 734 52 view .LVU77
 271 008c 8000     		lsls	r0, r0, #2
 272 008e 1958     		ldr	r1, [r3, r0]
 273              		.loc 2 734 33 view .LVU78
 274 0090 0A4A     		ldr	r2, .L10+24
 275 0092 1140     		ands	r1, r2
 276              		.loc 2 734 102 view .LVU79
 277 0094 C022     		movs	r2, #192
 278 0096 1202     		lsls	r2, r2, #8
 279 0098 0A43     		orrs	r2, r1
 280              		.loc 2 734 30 view .LVU80
 281 009a 1A50     		str	r2, [r3, r0]
 282              	.LVL13:
 283              		.loc 2 734 30 view .LVU81
 284              	.LBE9:
 285              	.LBE8:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 23


  45:Core/Src/uartParser.c **** }
 286              		.loc 1 45 3 is_stmt 1 view .LVU82
 287 009c 0848     		ldr	r0, .L10+28
 288 009e FFF7FEFF 		bl	transmitCharArray
 289              	.LVL14:
  46:Core/Src/uartParser.c **** 
 290              		.loc 1 46 1 is_stmt 0 view .LVU83
 291              		@ sp needed
 292 00a2 10BD     		pop	{r4, pc}
 293              	.L11:
 294              		.align	2
 295              	.L10:
 296 00a4 00100240 		.word	1073876992
 297 00a8 00080048 		.word	1207961600
 298 00ac FFFEFFFF 		.word	-257
 299 00b0 FFFBFFFF 		.word	-1025
 300 00b4 00480040 		.word	1073760256
 301 00b8 00E100E0 		.word	-536813312
 302 00bc FF00FFFF 		.word	-65281
 303 00c0 00000000 		.word	.LC0
 304              		.cfi_endproc
 305              	.LFE43:
 307              		.section	.rodata.commandError.str1.4,"aMS",%progbits,1
 308              		.align	2
 309              	.LC2:
 310 0000 436F6D6D 		.ascii	"Command not recognized\000"
 310      616E6420 
 310      6E6F7420 
 310      7265636F 
 310      676E697A 
 311              		.section	.text.commandError,"ax",%progbits
 312              		.align	1
 313              		.global	commandError
 314              		.syntax unified
 315              		.code	16
 316              		.thumb_func
 318              	commandError:
 319              	.LVL15:
 320              	.LFB47:
 186:Core/Src/uartParser.c **** 
 187:Core/Src/uartParser.c **** //Print error message and reset strings when command is bad
 188:Core/Src/uartParser.c **** void commandError(char *arr) {
 321              		.loc 1 188 30 is_stmt 1 view -0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 325              		.loc 1 188 30 is_stmt 0 view .LVU85
 326 0000 10B5     		push	{r4, lr}
 327              	.LCFI2:
 328              		.cfi_def_cfa_offset 8
 329              		.cfi_offset 4, -8
 330              		.cfi_offset 14, -4
 189:Core/Src/uartParser.c ****   transmitCharArray("Command not recognized");
 331              		.loc 1 189 3 is_stmt 1 view .LVU86
 332 0002 0F48     		ldr	r0, .L15
 333              	.LVL16:
 334              		.loc 1 189 3 is_stmt 0 view .LVU87
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 24


 335 0004 FFF7FEFF 		bl	transmitCharArray
 336              	.LVL17:
 190:Core/Src/uartParser.c ****   transmitCharArray(tmpStr);
 337              		.loc 1 190 3 is_stmt 1 view .LVU88
 338 0008 0E48     		ldr	r0, .L15+4
 339 000a FFF7FEFF 		bl	transmitCharArray
 340              	.LVL18:
 191:Core/Src/uartParser.c ****   //Reset command string and index
 192:Core/Src/uartParser.c ****   strIndex = 0;
 341              		.loc 1 192 3 view .LVU89
 342              		.loc 1 192 12 is_stmt 0 view .LVU90
 343 000e 0E4B     		ldr	r3, .L15+8
 344 0010 0022     		movs	r2, #0
 345 0012 1A70     		strb	r2, [r3]
 193:Core/Src/uartParser.c ****   for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 346              		.loc 1 193 3 is_stmt 1 view .LVU91
 347              	.LBB10:
 348              		.loc 1 193 8 view .LVU92
 349              	.LVL19:
 350              		.loc 1 193 3 is_stmt 0 view .LVU93
 351 0014 0DE0     		b	.L13
 352              	.LVL20:
 353              	.L14:
 194:Core/Src/uartParser.c ****     tmpStr[i] = '\0';
 354              		.loc 1 194 5 is_stmt 1 view .LVU94
 355              		.loc 1 194 15 is_stmt 0 view .LVU95
 356 0016 0B4B     		ldr	r3, .L15+4
 357 0018 0021     		movs	r1, #0
 358 001a 9954     		strb	r1, [r3, r2]
 195:Core/Src/uartParser.c ****     cmd[0][i] = '\0';
 359              		.loc 1 195 5 is_stmt 1 view .LVU96
 360              		.loc 1 195 15 is_stmt 0 view .LVU97
 361 001c 0B4B     		ldr	r3, .L15+12
 362 001e 9954     		strb	r1, [r3, r2]
 196:Core/Src/uartParser.c ****     cmd[1][i] = '\0';
 363              		.loc 1 196 5 is_stmt 1 view .LVU98
 364              		.loc 1 196 15 is_stmt 0 view .LVU99
 365 0020 9B18     		adds	r3, r3, r2
 366 0022 1975     		strb	r1, [r3, #20]
 197:Core/Src/uartParser.c ****     cmd[2][i] = '\0';
 367              		.loc 1 197 5 is_stmt 1 view .LVU100
 368              		.loc 1 197 15 is_stmt 0 view .LVU101
 369 0024 1800     		movs	r0, r3
 370 0026 2830     		adds	r0, r0, #40
 371 0028 0170     		strb	r1, [r0]
 198:Core/Src/uartParser.c ****     cmd[3][i] = '\0';
 372              		.loc 1 198 5 is_stmt 1 view .LVU102
 373              		.loc 1 198 15 is_stmt 0 view .LVU103
 374 002a 3C33     		adds	r3, r3, #60
 375 002c 1970     		strb	r1, [r3]
 193:Core/Src/uartParser.c ****     tmpStr[i] = '\0';
 376              		.loc 1 193 41 is_stmt 1 discriminator 3 view .LVU104
 377 002e 0132     		adds	r2, r2, #1
 378              	.LVL21:
 193:Core/Src/uartParser.c ****     tmpStr[i] = '\0';
 379              		.loc 1 193 41 is_stmt 0 discriminator 3 view .LVU105
 380 0030 D2B2     		uxtb	r2, r2
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 25


 381              	.LVL22:
 382              	.L13:
 193:Core/Src/uartParser.c ****     tmpStr[i] = '\0';
 383              		.loc 1 193 25 is_stmt 1 discriminator 1 view .LVU106
 384 0032 132A     		cmp	r2, #19
 385 0034 EFD9     		bls	.L14
 386              	.LBE10:
 199:Core/Src/uartParser.c ****   }
 200:Core/Src/uartParser.c ****   commandOut = 0;
 387              		.loc 1 200 3 view .LVU107
 388              		.loc 1 200 14 is_stmt 0 view .LVU108
 389 0036 064B     		ldr	r3, .L15+16
 390 0038 0022     		movs	r2, #0
 391              	.LVL23:
 392              		.loc 1 200 14 view .LVU109
 393 003a 1A80     		strh	r2, [r3]
 201:Core/Src/uartParser.c **** }    ...
 394              		.loc 1 201 1 view .LVU110
 395              		@ sp needed
 396 003c 10BD     		pop	{r4, pc}
 397              	.L16:
 398 003e C046     		.align	2
 399              	.L15:
 400 0040 00000000 		.word	.LC2
 401 0044 00000000 		.word	tmpStr
 402 0048 00000000 		.word	strIndex
 403 004c 00000000 		.word	cmd
 404 0050 00000000 		.word	commandOut
 405              		.cfi_endproc
 406              	.LFE47:
 408              		.section	.rodata.USART3_4_IRQHandler.str1.4,"aMS",%progbits,1
 409              		.align	2
 410              	.LC13:
 411 0000 6C656400 		.ascii	"led\000"
 412              		.align	2
 413              	.LC16:
 414 0004 72656400 		.ascii	"red\000"
 415              		.align	2
 416              	.LC19:
 417 0008 67726565 		.ascii	"green\000"
 417      6E00
 418 000e 0000     		.align	2
 419              	.LC21:
 420 0010 626C7565 		.ascii	"blue\000"
 420      00
 421 0015 000000   		.align	2
 422              	.LC23:
 423 0018 6F72616E 		.ascii	"orange\000"
 423      676500
 424 001f 00       		.align	2
 425              	.LC25:
 426 0020 6F6E00   		.ascii	"on\000"
 427 0023 00       		.align	2
 428              	.LC28:
 429 0024 6F666600 		.ascii	"off\000"
 430              		.align	2
 431              	.LC30:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 26


 432 0028 746F6767 		.ascii	"toggle\000"
 432      6C6500
 433 002f 00       		.align	2
 434              	.LC32:
 435 0030 6D6F746F 		.ascii	"motor\000"
 435      7200
 436 0036 0000     		.align	2
 437              	.LC34:
 438 0038 436F6D6D 		.ascii	"Command:\000"
 438      616E643A 
 438      00
 439 0041 000000   		.align	2
 440              	.LC36:
 441 0044 436F6D6D 		.ascii	"Command is too long!\000"
 441      616E6420 
 441      69732074 
 441      6F6F206C 
 441      6F6E6721 
 442              		.section	.text.USART3_4_IRQHandler,"ax",%progbits
 443              		.align	1
 444              		.global	USART3_4_IRQHandler
 445              		.syntax unified
 446              		.code	16
 447              		.thumb_func
 449              	USART3_4_IRQHandler:
 450              	.LFB44:
  49:Core/Src/uartParser.c **** void USART3_4_IRQHandler(void) {
 451              		.loc 1 49 32 is_stmt 1 view -0
 452              		.cfi_startproc
 453              		@ args = 0, pretend = 0, frame = 8
 454              		@ frame_needed = 0, uses_anonymous_args = 0
 455 0000 30B5     		push	{r4, r5, lr}
 456              	.LCFI3:
 457              		.cfi_def_cfa_offset 12
 458              		.cfi_offset 4, -12
 459              		.cfi_offset 5, -8
 460              		.cfi_offset 14, -4
 461 0002 83B0     		sub	sp, sp, #12
 462              	.LCFI4:
 463              		.cfi_def_cfa_offset 24
 464              	.L18:
  51:Core/Src/uartParser.c **** 	}
 465              		.loc 1 51 2 view .LVU112
  50:Core/Src/uartParser.c **** 	while((USART3->ISR & USART_ISR_RXNE) == 0) {
 466              		.loc 1 50 39 discriminator 1 view .LVU113
  50:Core/Src/uartParser.c **** 	while((USART3->ISR & USART_ISR_RXNE) == 0) {
 467              		.loc 1 50 15 is_stmt 0 discriminator 1 view .LVU114
 468 0004 984B     		ldr	r3, .L51
 469 0006 DB69     		ldr	r3, [r3, #28]
  50:Core/Src/uartParser.c **** 	while((USART3->ISR & USART_ISR_RXNE) == 0) {
 470              		.loc 1 50 39 discriminator 1 view .LVU115
 471 0008 9B06     		lsls	r3, r3, #26
 472 000a FBD5     		bpl	.L18
  53:Core/Src/uartParser.c **** 	  volatile uint8_t usartReceivedData = USART3->RDR;
 473              		.loc 1 53 4 is_stmt 1 view .LVU116
  53:Core/Src/uartParser.c **** 	  volatile uint8_t usartReceivedData = USART3->RDR;
 474              		.loc 1 53 47 is_stmt 0 view .LVU117
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 27


 475 000c 964B     		ldr	r3, .L51
 476 000e 9B8C     		ldrh	r3, [r3, #36]
  53:Core/Src/uartParser.c **** 	  volatile uint8_t usartReceivedData = USART3->RDR;
 477              		.loc 1 53 21 view .LVU118
 478 0010 DBB2     		uxtb	r3, r3
 479 0012 6A46     		mov	r2, sp
 480 0014 D371     		strb	r3, [r2, #7]
  55:Core/Src/uartParser.c **** 	  if (usartReceivedData == '\r') {
 481              		.loc 1 55 4 is_stmt 1 view .LVU119
  55:Core/Src/uartParser.c **** 	  if (usartReceivedData == '\r') {
 482              		.loc 1 55 26 is_stmt 0 view .LVU120
 483 0016 D379     		ldrb	r3, [r2, #7]
  55:Core/Src/uartParser.c **** 	  if (usartReceivedData == '\r') {
 484              		.loc 1 55 7 view .LVU121
 485 0018 0D2B     		cmp	r3, #13
 486 001a 13D0     		beq	.L45
 155:Core/Src/uartParser.c ****       if (strIndex == TMP_STR_LEN) {
 487              		.loc 1 155 7 is_stmt 1 view .LVU122
 155:Core/Src/uartParser.c ****       if (strIndex == TMP_STR_LEN) {
 488              		.loc 1 155 20 is_stmt 0 view .LVU123
 489 001c 934B     		ldr	r3, .L51+4
 490 001e 1B78     		ldrb	r3, [r3]
 155:Core/Src/uartParser.c ****       if (strIndex == TMP_STR_LEN) {
 491              		.loc 1 155 10 view .LVU124
 492 0020 142B     		cmp	r3, #20
 493 0022 00D1     		bne	.LCB342
 494 0024 0FE1     		b	.L46	@long jump
 495              	.LCB342:
 164:Core/Src/uartParser.c **** 		    tmpStr[strIndex] = usartReceivedData;
 496              		.loc 1 164 7 is_stmt 1 view .LVU125
 164:Core/Src/uartParser.c **** 		    tmpStr[strIndex] = usartReceivedData;
 497              		.loc 1 164 13 is_stmt 0 view .LVU126
 498 0026 914A     		ldr	r2, .L51+4
 499 0028 1378     		ldrb	r3, [r2]
 500 002a DBB2     		uxtb	r3, r3
 164:Core/Src/uartParser.c **** 		    tmpStr[strIndex] = usartReceivedData;
 501              		.loc 1 164 24 view .LVU127
 502 002c 6946     		mov	r1, sp
 503 002e 0731     		adds	r1, r1, #7
 504 0030 0978     		ldrb	r1, [r1]
 505 0032 C9B2     		uxtb	r1, r1
 506 0034 8E48     		ldr	r0, .L51+8
 507 0036 C154     		strb	r1, [r0, r3]
 165:Core/Src/uartParser.c **** 		    strIndex++;
 508              		.loc 1 165 7 is_stmt 1 view .LVU128
 165:Core/Src/uartParser.c **** 		    strIndex++;
 509              		.loc 1 165 15 is_stmt 0 view .LVU129
 510 0038 1378     		ldrb	r3, [r2]
 511 003a 0133     		adds	r3, r3, #1
 512 003c DBB2     		uxtb	r3, r3
 513 003e 1370     		strb	r3, [r2]
 514              	.L17:
 170:Core/Src/uartParser.c **** }
 515              		.loc 1 170 1 view .LVU130
 516 0040 03B0     		add	sp, sp, #12
 517              		@ sp needed
 518 0042 30BD     		pop	{r4, r5, pc}
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 28


 519              	.L45:
 520              	.LBB11:
  57:Core/Src/uartParser.c ****       volatile uint8_t strLen = strIndex + 1;
 521              		.loc 1 57 7 is_stmt 1 view .LVU131
  57:Core/Src/uartParser.c ****       volatile uint8_t strLen = strIndex + 1;
 522              		.loc 1 57 42 is_stmt 0 view .LVU132
 523 0044 894A     		ldr	r2, .L51+4
 524 0046 1378     		ldrb	r3, [r2]
 525 0048 0133     		adds	r3, r3, #1
 526 004a DBB2     		uxtb	r3, r3
  57:Core/Src/uartParser.c ****       volatile uint8_t strLen = strIndex + 1;
 527              		.loc 1 57 24 view .LVU133
 528 004c 6946     		mov	r1, sp
 529 004e 8B71     		strb	r3, [r1, #6]
  58:Core/Src/uartParser.c ****       strIndex = 0;
 530              		.loc 1 58 7 is_stmt 1 view .LVU134
  58:Core/Src/uartParser.c ****       strIndex = 0;
 531              		.loc 1 58 16 is_stmt 0 view .LVU135
 532 0050 0023     		movs	r3, #0
 533 0052 1370     		strb	r3, [r2]
  60:Core/Src/uartParser.c ****       cmdStrIndex = 0;
 534              		.loc 1 60 7 is_stmt 1 view .LVU136
  60:Core/Src/uartParser.c ****       cmdStrIndex = 0;
 535              		.loc 1 60 19 is_stmt 0 view .LVU137
 536 0054 874A     		ldr	r2, .L51+12
 537 0056 1370     		strb	r3, [r2]
  61:Core/Src/uartParser.c ****       cmdIndex = 0;
 538              		.loc 1 61 7 is_stmt 1 view .LVU138
  61:Core/Src/uartParser.c ****       cmdIndex = 0;
 539              		.loc 1 61 16 is_stmt 0 view .LVU139
 540 0058 874A     		ldr	r2, .L51+16
 541 005a 1370     		strb	r3, [r2]
  62:Core/Src/uartParser.c ****       while (strIndex < strLen) {
 542              		.loc 1 62 7 is_stmt 1 view .LVU140
  62:Core/Src/uartParser.c ****       while (strIndex < strLen) {
 543              		.loc 1 62 13 is_stmt 0 view .LVU141
 544 005c 0CE0     		b	.L20
 545              	.L48:
  64:Core/Src/uartParser.c ****           cmdIndex++;
 546              		.loc 1 64 11 is_stmt 1 view .LVU142
  64:Core/Src/uartParser.c ****           cmdIndex++;
 547              		.loc 1 64 19 is_stmt 0 view .LVU143
 548 005e 864A     		ldr	r2, .L51+16
 549 0060 1378     		ldrb	r3, [r2]
 550 0062 0133     		adds	r3, r3, #1
 551 0064 DBB2     		uxtb	r3, r3
 552 0066 1370     		strb	r3, [r2]
  65:Core/Src/uartParser.c ****           cmdStrIndex = 0;
 553              		.loc 1 65 11 is_stmt 1 view .LVU144
  65:Core/Src/uartParser.c ****           cmdStrIndex = 0;
 554              		.loc 1 65 23 is_stmt 0 view .LVU145
 555 0068 824B     		ldr	r3, .L51+12
 556 006a 0022     		movs	r2, #0
 557 006c 1A70     		strb	r2, [r3]
 558              	.L22:
  71:Core/Src/uartParser.c ****         strIndex++;
 559              		.loc 1 71 9 is_stmt 1 view .LVU146
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 29


  71:Core/Src/uartParser.c ****         strIndex++;
 560              		.loc 1 71 17 is_stmt 0 view .LVU147
 561 006e 7F4A     		ldr	r2, .L51+4
 562 0070 1378     		ldrb	r3, [r2]
 563 0072 0133     		adds	r3, r3, #1
 564 0074 DBB2     		uxtb	r3, r3
 565 0076 1370     		strb	r3, [r2]
 566              	.L20:
  62:Core/Src/uartParser.c ****       while (strIndex < strLen) {
 567              		.loc 1 62 23 is_stmt 1 view .LVU148
 568 0078 7C4B     		ldr	r3, .L51+4
 569 007a 1A78     		ldrb	r2, [r3]
 570 007c D2B2     		uxtb	r2, r2
 571 007e 6B46     		mov	r3, sp
 572 0080 0633     		adds	r3, r3, #6
 573 0082 1B78     		ldrb	r3, [r3]
 574 0084 DBB2     		uxtb	r3, r3
 575 0086 9A42     		cmp	r2, r3
 576 0088 1CD2     		bcs	.L47
  63:Core/Src/uartParser.c ****         if (tmpStr[strIndex] == ' ') {
 577              		.loc 1 63 9 view .LVU149
  63:Core/Src/uartParser.c ****         if (tmpStr[strIndex] == ' ') {
 578              		.loc 1 63 19 is_stmt 0 view .LVU150
 579 008a 784B     		ldr	r3, .L51+4
 580 008c 1B78     		ldrb	r3, [r3]
 581 008e DBB2     		uxtb	r3, r3
 582 0090 774A     		ldr	r2, .L51+8
 583 0092 D35C     		ldrb	r3, [r2, r3]
  63:Core/Src/uartParser.c ****         if (tmpStr[strIndex] == ' ') {
 584              		.loc 1 63 12 view .LVU151
 585 0094 202B     		cmp	r3, #32
 586 0096 E2D0     		beq	.L48
  68:Core/Src/uartParser.c ****           cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 587              		.loc 1 68 11 is_stmt 1 view .LVU152
  68:Core/Src/uartParser.c ****           cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 588              		.loc 1 68 46 is_stmt 0 view .LVU153
 589 0098 744B     		ldr	r3, .L51+4
 590 009a 1A78     		ldrb	r2, [r3]
 591 009c D2B2     		uxtb	r2, r2
  68:Core/Src/uartParser.c ****           cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 592              		.loc 1 68 24 view .LVU154
 593 009e 764B     		ldr	r3, .L51+16
 594 00a0 1B78     		ldrb	r3, [r3]
 595 00a2 7449     		ldr	r1, .L51+12
 596 00a4 0878     		ldrb	r0, [r1]
 597 00a6 C0B2     		uxtb	r0, r0
  68:Core/Src/uartParser.c ****           cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 598              		.loc 1 68 46 view .LVU155
 599 00a8 714C     		ldr	r4, .L51+8
 600 00aa A45C     		ldrb	r4, [r4, r2]
 601 00ac E4B2     		uxtb	r4, r4
  68:Core/Src/uartParser.c ****           cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 602              		.loc 1 68 38 view .LVU156
 603 00ae 734A     		ldr	r2, .L51+20
 604 00b0 9D00     		lsls	r5, r3, #2
 605 00b2 5B19     		adds	r3, r3, r5
 606 00b4 9B00     		lsls	r3, r3, #2
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 30


 607 00b6 D218     		adds	r2, r2, r3
 608 00b8 1454     		strb	r4, [r2, r0]
  69:Core/Src/uartParser.c ****           cmdStrIndex++;
 609              		.loc 1 69 11 is_stmt 1 view .LVU157
  69:Core/Src/uartParser.c ****           cmdStrIndex++;
 610              		.loc 1 69 22 is_stmt 0 view .LVU158
 611 00ba 0B78     		ldrb	r3, [r1]
 612 00bc 0133     		adds	r3, r3, #1
 613 00be DBB2     		uxtb	r3, r3
 614 00c0 0B70     		strb	r3, [r1]
 615 00c2 D4E7     		b	.L22
 616              	.L47:
  75:Core/Src/uartParser.c ****       if (strcmp(cmd[0], "led") == 0) {
 617              		.loc 1 75 7 is_stmt 1 view .LVU159
  75:Core/Src/uartParser.c ****       if (strcmp(cmd[0], "led") == 0) {
 618              		.loc 1 75 11 is_stmt 0 view .LVU160
 619 00c4 6E49     		ldr	r1, .L51+24
 620 00c6 6D48     		ldr	r0, .L51+20
 621 00c8 FFF7FEFF 		bl	strcmp
 622              	.LVL24:
  75:Core/Src/uartParser.c ****       if (strcmp(cmd[0], "led") == 0) {
 623              		.loc 1 75 10 discriminator 1 view .LVU161
 624 00cc 0028     		cmp	r0, #0
 625 00ce 67D1     		bne	.L24
  76:Core/Src/uartParser.c ****         commandOut |= 0xA000;
 626              		.loc 1 76 9 is_stmt 1 view .LVU162
  76:Core/Src/uartParser.c ****         commandOut |= 0xA000;
 627              		.loc 1 76 20 is_stmt 0 view .LVU163
 628 00d0 6C4A     		ldr	r2, .L51+28
 629 00d2 1388     		ldrh	r3, [r2]
 630 00d4 6C49     		ldr	r1, .L51+32
 631 00d6 0B43     		orrs	r3, r1
 632 00d8 9BB2     		uxth	r3, r3
 633 00da 1380     		strh	r3, [r2]
  78:Core/Src/uartParser.c ****         if (strcmp(cmd[1], "red") == 0) {
 634              		.loc 1 78 9 is_stmt 1 view .LVU164
  78:Core/Src/uartParser.c ****         if (strcmp(cmd[1], "red") == 0) {
 635              		.loc 1 78 13 is_stmt 0 view .LVU165
 636 00dc 6B49     		ldr	r1, .L51+36
 637 00de 6C48     		ldr	r0, .L51+40
 638 00e0 FFF7FEFF 		bl	strcmp
 639              	.LVL25:
  78:Core/Src/uartParser.c ****         if (strcmp(cmd[1], "red") == 0) {
 640              		.loc 1 78 12 discriminator 1 view .LVU166
 641 00e4 0028     		cmp	r0, #0
 642 00e6 12D1     		bne	.L25
  79:Core/Src/uartParser.c ****           commandOut |= 0x0100;
 643              		.loc 1 79 11 is_stmt 1 view .LVU167
  79:Core/Src/uartParser.c ****           commandOut |= 0x0100;
 644              		.loc 1 79 22 is_stmt 0 view .LVU168
 645 00e8 664A     		ldr	r2, .L51+28
 646 00ea 1388     		ldrh	r3, [r2]
 647 00ec 8021     		movs	r1, #128
 648 00ee 4900     		lsls	r1, r1, #1
 649 00f0 0B43     		orrs	r3, r1
 650 00f2 1380     		strh	r3, [r2]
 651              	.L26:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 31


  96:Core/Src/uartParser.c ****         if (strcmp(cmd[2], "on") == 0) {
 652              		.loc 1 96 9 is_stmt 1 view .LVU169
  96:Core/Src/uartParser.c ****         if (strcmp(cmd[2], "on") == 0) {
 653              		.loc 1 96 13 is_stmt 0 view .LVU170
 654 00f4 6749     		ldr	r1, .L51+44
 655 00f6 6848     		ldr	r0, .L51+48
 656 00f8 FFF7FEFF 		bl	strcmp
 657              	.LVL26:
  96:Core/Src/uartParser.c ****         if (strcmp(cmd[2], "on") == 0) {
 658              		.loc 1 96 12 discriminator 1 view .LVU171
 659 00fc 0028     		cmp	r0, #0
 660 00fe 31D1     		bne	.L31
  97:Core/Src/uartParser.c ****           commandOut |= 0x0010;
 661              		.loc 1 97 11 is_stmt 1 view .LVU172
  97:Core/Src/uartParser.c ****           commandOut |= 0x0010;
 662              		.loc 1 97 22 is_stmt 0 view .LVU173
 663 0100 604A     		ldr	r2, .L51+28
 664 0102 1388     		ldrh	r3, [r2]
 665 0104 1021     		movs	r1, #16
 666 0106 0B43     		orrs	r3, r1
 667 0108 9BB2     		uxth	r3, r3
 668 010a 1380     		strh	r3, [r2]
 669 010c 54E0     		b	.L32
 670              	.L25:
  81:Core/Src/uartParser.c ****         else if (strcmp(cmd[1], "green") == 0) {
 671              		.loc 1 81 14 is_stmt 1 view .LVU174
  81:Core/Src/uartParser.c ****         else if (strcmp(cmd[1], "green") == 0) {
 672              		.loc 1 81 18 is_stmt 0 view .LVU175
 673 010e 6349     		ldr	r1, .L51+52
 674 0110 5F48     		ldr	r0, .L51+40
 675 0112 FFF7FEFF 		bl	strcmp
 676              	.LVL27:
  81:Core/Src/uartParser.c ****         else if (strcmp(cmd[1], "green") == 0) {
 677              		.loc 1 81 17 discriminator 1 view .LVU176
 678 0116 0028     		cmp	r0, #0
 679 0118 06D1     		bne	.L27
  82:Core/Src/uartParser.c ****           commandOut |= 0x0200;
 680              		.loc 1 82 11 is_stmt 1 view .LVU177
  82:Core/Src/uartParser.c ****           commandOut |= 0x0200;
 681              		.loc 1 82 22 is_stmt 0 view .LVU178
 682 011a 5A4A     		ldr	r2, .L51+28
 683 011c 1388     		ldrh	r3, [r2]
 684 011e 8021     		movs	r1, #128
 685 0120 8900     		lsls	r1, r1, #2
 686 0122 0B43     		orrs	r3, r1
 687 0124 1380     		strh	r3, [r2]
 688 0126 E5E7     		b	.L26
 689              	.L27:
  84:Core/Src/uartParser.c ****         else if (strcmp(cmd[1], "blue") == 0) {
 690              		.loc 1 84 14 is_stmt 1 view .LVU179
  84:Core/Src/uartParser.c ****         else if (strcmp(cmd[1], "blue") == 0) {
 691              		.loc 1 84 18 is_stmt 0 view .LVU180
 692 0128 5D49     		ldr	r1, .L51+56
 693 012a 5948     		ldr	r0, .L51+40
 694 012c FFF7FEFF 		bl	strcmp
 695              	.LVL28:
  84:Core/Src/uartParser.c ****         else if (strcmp(cmd[1], "blue") == 0) {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 32


 696              		.loc 1 84 17 discriminator 1 view .LVU181
 697 0130 0028     		cmp	r0, #0
 698 0132 06D1     		bne	.L28
  85:Core/Src/uartParser.c ****           commandOut |= 0x0300;
 699              		.loc 1 85 11 is_stmt 1 view .LVU182
  85:Core/Src/uartParser.c ****           commandOut |= 0x0300;
 700              		.loc 1 85 22 is_stmt 0 view .LVU183
 701 0134 534A     		ldr	r2, .L51+28
 702 0136 1388     		ldrh	r3, [r2]
 703 0138 C021     		movs	r1, #192
 704 013a 8900     		lsls	r1, r1, #2
 705 013c 0B43     		orrs	r3, r1
 706 013e 1380     		strh	r3, [r2]
 707 0140 D8E7     		b	.L26
 708              	.L28:
  87:Core/Src/uartParser.c ****         else if (strcmp(cmd[1], "orange") == 0) {
 709              		.loc 1 87 14 is_stmt 1 view .LVU184
  87:Core/Src/uartParser.c ****         else if (strcmp(cmd[1], "orange") == 0) {
 710              		.loc 1 87 18 is_stmt 0 view .LVU185
 711 0142 5849     		ldr	r1, .L51+60
 712 0144 5248     		ldr	r0, .L51+40
 713 0146 FFF7FEFF 		bl	strcmp
 714              	.LVL29:
  87:Core/Src/uartParser.c ****         else if (strcmp(cmd[1], "orange") == 0) {
 715              		.loc 1 87 17 discriminator 1 view .LVU186
 716 014a 0028     		cmp	r0, #0
 717 014c 06D1     		bne	.L29
  88:Core/Src/uartParser.c ****           commandOut |= 0x0400;
 718              		.loc 1 88 11 is_stmt 1 view .LVU187
  88:Core/Src/uartParser.c ****           commandOut |= 0x0400;
 719              		.loc 1 88 22 is_stmt 0 view .LVU188
 720 014e 4D4A     		ldr	r2, .L51+28
 721 0150 1388     		ldrh	r3, [r2]
 722 0152 8021     		movs	r1, #128
 723 0154 C900     		lsls	r1, r1, #3
 724 0156 0B43     		orrs	r3, r1
 725 0158 1380     		strh	r3, [r2]
 726 015a CBE7     		b	.L26
 727              	.L29:
  91:Core/Src/uartParser.c ****           commandError(tmpStr);
 728              		.loc 1 91 11 is_stmt 1 view .LVU189
 729 015c 4448     		ldr	r0, .L51+8
 730 015e FFF7FEFF 		bl	commandError
 731              	.LVL30:
  92:Core/Src/uartParser.c ****           return;
 732              		.loc 1 92 11 view .LVU190
 733 0162 6DE7     		b	.L17
 734              	.L31:
  99:Core/Src/uartParser.c ****         else if (strcmp(cmd[2], "off") == 0) {
 735              		.loc 1 99 14 view .LVU191
  99:Core/Src/uartParser.c ****         else if (strcmp(cmd[2], "off") == 0) {
 736              		.loc 1 99 18 is_stmt 0 view .LVU192
 737 0164 5049     		ldr	r1, .L51+64
 738 0166 4C48     		ldr	r0, .L51+48
 739 0168 FFF7FEFF 		bl	strcmp
 740              	.LVL31:
  99:Core/Src/uartParser.c ****         else if (strcmp(cmd[2], "off") == 0) {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 33


 741              		.loc 1 99 17 discriminator 1 view .LVU193
 742 016c 0028     		cmp	r0, #0
 743 016e 06D1     		bne	.L33
 100:Core/Src/uartParser.c ****           commandOut |= 0x0020;
 744              		.loc 1 100 11 is_stmt 1 view .LVU194
 100:Core/Src/uartParser.c ****           commandOut |= 0x0020;
 745              		.loc 1 100 22 is_stmt 0 view .LVU195
 746 0170 444A     		ldr	r2, .L51+28
 747 0172 1388     		ldrh	r3, [r2]
 748 0174 2021     		movs	r1, #32
 749 0176 0B43     		orrs	r3, r1
 750 0178 9BB2     		uxth	r3, r3
 751 017a 1380     		strh	r3, [r2]
 752 017c 1CE0     		b	.L32
 753              	.L33:
 102:Core/Src/uartParser.c ****         else if (strcmp(cmd[2], "toggle") == 0) {
 754              		.loc 1 102 14 is_stmt 1 view .LVU196
 102:Core/Src/uartParser.c ****         else if (strcmp(cmd[2], "toggle") == 0) {
 755              		.loc 1 102 18 is_stmt 0 view .LVU197
 756 017e 4B49     		ldr	r1, .L51+68
 757 0180 4548     		ldr	r0, .L51+48
 758 0182 FFF7FEFF 		bl	strcmp
 759              	.LVL32:
 102:Core/Src/uartParser.c ****         else if (strcmp(cmd[2], "toggle") == 0) {
 760              		.loc 1 102 17 discriminator 1 view .LVU198
 761 0186 0028     		cmp	r0, #0
 762 0188 06D1     		bne	.L34
 103:Core/Src/uartParser.c ****           commandOut |= 0x0030;
 763              		.loc 1 103 11 is_stmt 1 view .LVU199
 103:Core/Src/uartParser.c ****           commandOut |= 0x0030;
 764              		.loc 1 103 22 is_stmt 0 view .LVU200
 765 018a 3E4A     		ldr	r2, .L51+28
 766 018c 1388     		ldrh	r3, [r2]
 767 018e 3021     		movs	r1, #48
 768 0190 0B43     		orrs	r3, r1
 769 0192 9BB2     		uxth	r3, r3
 770 0194 1380     		strh	r3, [r2]
 771 0196 0FE0     		b	.L32
 772              	.L34:
 106:Core/Src/uartParser.c ****           commandError(tmpStr);
 773              		.loc 1 106 11 is_stmt 1 view .LVU201
 774 0198 3548     		ldr	r0, .L51+8
 775 019a FFF7FEFF 		bl	commandError
 776              	.LVL33:
 107:Core/Src/uartParser.c ****           return;
 777              		.loc 1 107 11 view .LVU202
 778 019e 4FE7     		b	.L17
 779              	.L24:
 110:Core/Src/uartParser.c ****       else if (strcmp(cmd[0], "motor") == 0) {
 780              		.loc 1 110 12 view .LVU203
 110:Core/Src/uartParser.c ****       else if (strcmp(cmd[0], "motor") == 0) {
 781              		.loc 1 110 16 is_stmt 0 view .LVU204
 782 01a0 4349     		ldr	r1, .L51+72
 783 01a2 3648     		ldr	r0, .L51+20
 784 01a4 FFF7FEFF 		bl	strcmp
 785              	.LVL34:
 110:Core/Src/uartParser.c ****       else if (strcmp(cmd[0], "motor") == 0) {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 34


 786              		.loc 1 110 15 discriminator 1 view .LVU205
 787 01a8 0028     		cmp	r0, #0
 788 01aa 0FD1     		bne	.L35
 111:Core/Src/uartParser.c ****         commandOut |= 0xB000;
 789              		.loc 1 111 9 is_stmt 1 view .LVU206
 111:Core/Src/uartParser.c ****         commandOut |= 0xB000;
 790              		.loc 1 111 20 is_stmt 0 view .LVU207
 791 01ac 354A     		ldr	r2, .L51+28
 792 01ae 1388     		ldrh	r3, [r2]
 793 01b0 4049     		ldr	r1, .L51+76
 794 01b2 0B43     		orrs	r3, r1
 795 01b4 9BB2     		uxth	r3, r3
 796 01b6 1380     		strh	r3, [r2]
 797              	.L32:
 119:Core/Src/uartParser.c ****       transmitCharArray("Command:");
 798              		.loc 1 119 7 is_stmt 1 view .LVU208
 799 01b8 3F48     		ldr	r0, .L51+80
 800 01ba FFF7FEFF 		bl	transmitCharArray
 801              	.LVL35:
 120:Core/Src/uartParser.c ****       transmitCharArray(tmpStr);
 802              		.loc 1 120 7 view .LVU209
 803 01be 2C48     		ldr	r0, .L51+8
 804 01c0 FFF7FEFF 		bl	transmitCharArray
 805              	.LVL36:
 123:Core/Src/uartParser.c ****       strIndex = 0;
 806              		.loc 1 123 7 view .LVU210
 123:Core/Src/uartParser.c ****       strIndex = 0;
 807              		.loc 1 123 16 is_stmt 0 view .LVU211
 808 01c4 294B     		ldr	r3, .L51+4
 809 01c6 0022     		movs	r2, #0
 810 01c8 1A70     		strb	r2, [r3]
 124:Core/Src/uartParser.c ****       for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 811              		.loc 1 124 7 is_stmt 1 view .LVU212
 812              	.LBB12:
 124:Core/Src/uartParser.c ****       for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 813              		.loc 1 124 12 view .LVU213
 814              	.LVL37:
 124:Core/Src/uartParser.c ****       for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 815              		.loc 1 124 7 is_stmt 0 view .LVU214
 816 01ca 11E0     		b	.L36
 817              	.LVL38:
 818              	.L35:
 124:Core/Src/uartParser.c ****       for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 819              		.loc 1 124 7 view .LVU215
 820              	.LBE12:
 114:Core/Src/uartParser.c ****         commandError(tmpStr);
 821              		.loc 1 114 9 is_stmt 1 view .LVU216
 822 01cc 2848     		ldr	r0, .L51+8
 823 01ce FFF7FEFF 		bl	commandError
 824              	.LVL39:
 115:Core/Src/uartParser.c ****         return;
 825              		.loc 1 115 9 view .LVU217
 826 01d2 35E7     		b	.L17
 827              	.LVL40:
 828              	.L37:
 829              	.LBB13:
 125:Core/Src/uartParser.c ****         tmpStr[i] = '\0';
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 35


 830              		.loc 1 125 9 view .LVU218
 125:Core/Src/uartParser.c ****         tmpStr[i] = '\0';
 831              		.loc 1 125 19 is_stmt 0 view .LVU219
 832 01d4 264B     		ldr	r3, .L51+8
 833 01d6 0021     		movs	r1, #0
 834 01d8 9954     		strb	r1, [r3, r2]
 126:Core/Src/uartParser.c ****         cmd[0][i] = '\0';
 835              		.loc 1 126 9 is_stmt 1 view .LVU220
 126:Core/Src/uartParser.c ****         cmd[0][i] = '\0';
 836              		.loc 1 126 19 is_stmt 0 view .LVU221
 837 01da 284B     		ldr	r3, .L51+20
 838 01dc 9954     		strb	r1, [r3, r2]
 127:Core/Src/uartParser.c ****         cmd[1][i] = '\0';
 839              		.loc 1 127 9 is_stmt 1 view .LVU222
 127:Core/Src/uartParser.c ****         cmd[1][i] = '\0';
 840              		.loc 1 127 19 is_stmt 0 view .LVU223
 841 01de 9B18     		adds	r3, r3, r2
 842 01e0 1975     		strb	r1, [r3, #20]
 128:Core/Src/uartParser.c ****         cmd[2][i] = '\0';
 843              		.loc 1 128 9 is_stmt 1 view .LVU224
 128:Core/Src/uartParser.c ****         cmd[2][i] = '\0';
 844              		.loc 1 128 19 is_stmt 0 view .LVU225
 845 01e2 1800     		movs	r0, r3
 846 01e4 2830     		adds	r0, r0, #40
 847 01e6 0170     		strb	r1, [r0]
 129:Core/Src/uartParser.c ****         cmd[3][i] = '\0';
 848              		.loc 1 129 9 is_stmt 1 view .LVU226
 129:Core/Src/uartParser.c ****         cmd[3][i] = '\0';
 849              		.loc 1 129 19 is_stmt 0 view .LVU227
 850 01e8 3C33     		adds	r3, r3, #60
 851 01ea 1970     		strb	r1, [r3]
 124:Core/Src/uartParser.c ****       for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 852              		.loc 1 124 45 is_stmt 1 discriminator 3 view .LVU228
 853 01ec 0132     		adds	r2, r2, #1
 854              	.LVL41:
 124:Core/Src/uartParser.c ****       for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 855              		.loc 1 124 45 is_stmt 0 discriminator 3 view .LVU229
 856 01ee D2B2     		uxtb	r2, r2
 857              	.LVL42:
 858              	.L36:
 124:Core/Src/uartParser.c ****       for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 859              		.loc 1 124 29 is_stmt 1 discriminator 1 view .LVU230
 860 01f0 132A     		cmp	r2, #19
 861 01f2 EFD9     		bls	.L37
 862              	.LBE13:
 143:Core/Src/uartParser.c ****       if (commandOut == 0xA210)
 863              		.loc 1 143 7 view .LVU231
 143:Core/Src/uartParser.c ****       if (commandOut == 0xA210)
 864              		.loc 1 143 22 is_stmt 0 view .LVU232
 865 01f4 234B     		ldr	r3, .L51+28
 866 01f6 1B88     		ldrh	r3, [r3]
 867 01f8 9BB2     		uxth	r3, r3
 143:Core/Src/uartParser.c ****       if (commandOut == 0xA210)
 868              		.loc 1 143 10 view .LVU233
 869 01fa 304A     		ldr	r2, .L51+84
 870              	.LVL43:
 143:Core/Src/uartParser.c ****       if (commandOut == 0xA210)
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 36


 871              		.loc 1 143 10 view .LVU234
 872 01fc 9342     		cmp	r3, r2
 873 01fe 12D0     		beq	.L49
 145:Core/Src/uartParser.c ****       else if (commandOut == 0xA220)
 874              		.loc 1 145 12 is_stmt 1 view .LVU235
 145:Core/Src/uartParser.c ****       else if (commandOut == 0xA220)
 875              		.loc 1 145 27 is_stmt 0 view .LVU236
 876 0200 204B     		ldr	r3, .L51+28
 877 0202 1B88     		ldrh	r3, [r3]
 878 0204 9BB2     		uxth	r3, r3
 145:Core/Src/uartParser.c ****       else if (commandOut == 0xA220)
 879              		.loc 1 145 15 view .LVU237
 880 0206 2E4A     		ldr	r2, .L51+88
 881 0208 9342     		cmp	r3, r2
 882 020a 16D0     		beq	.L50
 147:Core/Src/uartParser.c ****       else if (commandOut == 0xA230)
 883              		.loc 1 147 12 is_stmt 1 view .LVU238
 147:Core/Src/uartParser.c ****       else if (commandOut == 0xA230)
 884              		.loc 1 147 27 is_stmt 0 view .LVU239
 885 020c 1D4B     		ldr	r3, .L51+28
 886 020e 1B88     		ldrh	r3, [r3]
 887 0210 9BB2     		uxth	r3, r3
 147:Core/Src/uartParser.c ****       else if (commandOut == 0xA230)
 888              		.loc 1 147 15 view .LVU240
 889 0212 2C4A     		ldr	r2, .L51+92
 890 0214 9342     		cmp	r3, r2
 891 0216 0CD1     		bne	.L39
 148:Core/Src/uartParser.c ****         GPIOC->ODR ^= GPIO_ODR_9;
 892              		.loc 1 148 9 is_stmt 1 view .LVU241
 148:Core/Src/uartParser.c ****         GPIOC->ODR ^= GPIO_ODR_9;
 893              		.loc 1 148 14 is_stmt 0 view .LVU242
 894 0218 2B4A     		ldr	r2, .L51+96
 895 021a 5169     		ldr	r1, [r2, #20]
 148:Core/Src/uartParser.c ****         GPIOC->ODR ^= GPIO_ODR_9;
 896              		.loc 1 148 20 view .LVU243
 897 021c 8023     		movs	r3, #128
 898 021e 9B00     		lsls	r3, r3, #2
 899 0220 4B40     		eors	r3, r1
 900 0222 5361     		str	r3, [r2, #20]
 901 0224 05E0     		b	.L39
 902              	.L49:
 144:Core/Src/uartParser.c ****         GPIOC->ODR |= GPIO_ODR_9;
 903              		.loc 1 144 9 is_stmt 1 view .LVU244
 144:Core/Src/uartParser.c ****         GPIOC->ODR |= GPIO_ODR_9;
 904              		.loc 1 144 14 is_stmt 0 view .LVU245
 905 0226 284A     		ldr	r2, .L51+96
 906 0228 5169     		ldr	r1, [r2, #20]
 144:Core/Src/uartParser.c ****         GPIOC->ODR |= GPIO_ODR_9;
 907              		.loc 1 144 20 view .LVU246
 908 022a 8023     		movs	r3, #128
 909 022c 9B00     		lsls	r3, r3, #2
 910 022e 0B43     		orrs	r3, r1
 911 0230 5361     		str	r3, [r2, #20]
 912              	.L39:
 151:Core/Src/uartParser.c ****       commandOut = 0;
 913              		.loc 1 151 7 is_stmt 1 view .LVU247
 151:Core/Src/uartParser.c ****       commandOut = 0;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 37


 914              		.loc 1 151 18 is_stmt 0 view .LVU248
 915 0232 144B     		ldr	r3, .L51+28
 916 0234 0022     		movs	r2, #0
 917 0236 1A80     		strh	r2, [r3]
 918              	.LBE11:
 919 0238 02E7     		b	.L17
 920              	.L50:
 921              	.LBB14:
 146:Core/Src/uartParser.c ****         GPIOC->ODR &= ~GPIO_ODR_9;
 922              		.loc 1 146 9 is_stmt 1 view .LVU249
 146:Core/Src/uartParser.c ****         GPIOC->ODR &= ~GPIO_ODR_9;
 923              		.loc 1 146 14 is_stmt 0 view .LVU250
 924 023a 234A     		ldr	r2, .L51+96
 925 023c 5369     		ldr	r3, [r2, #20]
 146:Core/Src/uartParser.c ****         GPIOC->ODR &= ~GPIO_ODR_9;
 926              		.loc 1 146 20 view .LVU251
 927 023e 2349     		ldr	r1, .L51+100
 928 0240 0B40     		ands	r3, r1
 929 0242 5361     		str	r3, [r2, #20]
 930 0244 F5E7     		b	.L39
 931              	.LVL44:
 932              	.L46:
 146:Core/Src/uartParser.c ****         GPIOC->ODR &= ~GPIO_ODR_9;
 933              		.loc 1 146 20 view .LVU252
 934              	.LBE14:
 156:Core/Src/uartParser.c ****       	transmitCharArray("Command is too long!");
 935              		.loc 1 156 8 is_stmt 1 view .LVU253
 936 0246 2248     		ldr	r0, .L51+104
 937 0248 FFF7FEFF 		bl	transmitCharArray
 938              	.LVL45:
 157:Core/Src/uartParser.c ****         strIndex = 0;
 939              		.loc 1 157 9 view .LVU254
 157:Core/Src/uartParser.c ****         strIndex = 0;
 940              		.loc 1 157 18 is_stmt 0 view .LVU255
 941 024c 074B     		ldr	r3, .L51+4
 942 024e 0022     		movs	r2, #0
 943 0250 1A70     		strb	r2, [r3]
 158:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++)
 944              		.loc 1 158 9 is_stmt 1 view .LVU256
 945              	.LBB15:
 158:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++)
 946              		.loc 1 158 14 view .LVU257
 947              	.LVL46:
 158:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++)
 948              		.loc 1 158 22 is_stmt 0 view .LVU258
 949 0252 0023     		movs	r3, #0
 158:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++)
 950              		.loc 1 158 9 view .LVU259
 951 0254 04E0     		b	.L42
 952              	.LVL47:
 953              	.L43:
 159:Core/Src/uartParser.c ****           tmpStr[i] = '\0';
 954              		.loc 1 159 11 is_stmt 1 view .LVU260
 159:Core/Src/uartParser.c ****           tmpStr[i] = '\0';
 955              		.loc 1 159 21 is_stmt 0 view .LVU261
 956 0256 064A     		ldr	r2, .L51+8
 957 0258 0021     		movs	r1, #0
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 38


 958 025a D154     		strb	r1, [r2, r3]
 158:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++)
 959              		.loc 1 158 47 is_stmt 1 discriminator 3 view .LVU262
 960 025c 0133     		adds	r3, r3, #1
 961              	.LVL48:
 158:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++)
 962              		.loc 1 158 47 is_stmt 0 discriminator 3 view .LVU263
 963 025e DBB2     		uxtb	r3, r3
 964              	.LVL49:
 965              	.L42:
 158:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++)
 966              		.loc 1 158 31 is_stmt 1 discriminator 1 view .LVU264
 967 0260 132B     		cmp	r3, #19
 968 0262 F8D9     		bls	.L43
 969 0264 ECE6     		b	.L17
 970              	.L52:
 971 0266 C046     		.align	2
 972              	.L51:
 973 0268 00480040 		.word	1073760256
 974 026c 00000000 		.word	strIndex
 975 0270 00000000 		.word	tmpStr
 976 0274 00000000 		.word	cmdStrIndex
 977 0278 00000000 		.word	cmdIndex
 978 027c 00000000 		.word	cmd
 979 0280 00000000 		.word	.LC13
 980 0284 00000000 		.word	commandOut
 981 0288 00A0FFFF 		.word	-24576
 982 028c 04000000 		.word	.LC16
 983 0290 14000000 		.word	cmd+20
 984 0294 20000000 		.word	.LC25
 985 0298 28000000 		.word	cmd+40
 986 029c 08000000 		.word	.LC19
 987 02a0 10000000 		.word	.LC21
 988 02a4 18000000 		.word	.LC23
 989 02a8 24000000 		.word	.LC28
 990 02ac 28000000 		.word	.LC30
 991 02b0 30000000 		.word	.LC32
 992 02b4 00B0FFFF 		.word	-20480
 993 02b8 38000000 		.word	.LC34
 994 02bc 10A20000 		.word	41488
 995 02c0 20A20000 		.word	41504
 996 02c4 30A20000 		.word	41520
 997 02c8 00080048 		.word	1207961600
 998 02cc FFFDFFFF 		.word	-513
 999 02d0 44000000 		.word	.LC36
 1000              	.LBE15:
 1001              		.cfi_endproc
 1002              	.LFE44:
 1004              		.global	commandOut
 1005              		.section	.bss.commandOut,"aw",%nobits
 1006              		.align	1
 1009              	commandOut:
 1010 0000 0000     		.space	2
 1011              		.global	cmd
 1012              		.section	.bss.cmd,"aw",%nobits
 1013              		.align	2
 1016              	cmd:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 39


 1017 0000 00000000 		.space	80
 1017      00000000 
 1017      00000000 
 1017      00000000 
 1017      00000000 
 1018              		.global	tmpStr
 1019              		.section	.bss.tmpStr,"aw",%nobits
 1020              		.align	2
 1023              	tmpStr:
 1024 0000 00000000 		.space	20
 1024      00000000 
 1024      00000000 
 1024      00000000 
 1024      00000000 
 1025              		.global	cmdStrIndex
 1026              		.section	.bss.cmdStrIndex,"aw",%nobits
 1029              	cmdStrIndex:
 1030 0000 00       		.space	1
 1031              		.global	cmdIndex
 1032              		.section	.bss.cmdIndex,"aw",%nobits
 1035              	cmdIndex:
 1036 0000 00       		.space	1
 1037              		.global	strIndex
 1038              		.section	.bss.strIndex,"aw",%nobits
 1041              	strIndex:
 1042 0000 00       		.space	1
 1043              		.text
 1044              	.Letext0:
 1045              		.file 3 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 1046              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1047              		.file 5 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 1048              		.file 6 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/string.h"
 1049              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s 			page 40


DEFINED SYMBOLS
                            *ABS*:00000000 uartParser.c
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:19     .text.transmitOneChar:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:25     .text.transmitOneChar:00000000 transmitOneChar
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:52     .text.transmitOneChar:00000010 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:57     .text.transmitCharArray:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:63     .text.transmitCharArray:00000000 transmitCharArray
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:114    .rodata.initUsart3.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:118    .text.initUsart3:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:124    .text.initUsart3:00000000 initUsart3
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:296    .text.initUsart3:000000a4 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:308    .rodata.commandError.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:312    .text.commandError:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:318    .text.commandError:00000000 commandError
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:400    .text.commandError:00000040 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:1023   .bss.tmpStr:00000000 tmpStr
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:1041   .bss.strIndex:00000000 strIndex
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:1016   .bss.cmd:00000000 cmd
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:1009   .bss.commandOut:00000000 commandOut
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:409    .rodata.USART3_4_IRQHandler.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:443    .text.USART3_4_IRQHandler:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:449    .text.USART3_4_IRQHandler:00000000 USART3_4_IRQHandler
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:973    .text.USART3_4_IRQHandler:00000268 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:1029   .bss.cmdStrIndex:00000000 cmdStrIndex
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:1035   .bss.cmdIndex:00000000 cmdIndex
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:1006   .bss.commandOut:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:1013   .bss.cmd:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:1020   .bss.tmpStr:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:1030   .bss.cmdStrIndex:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:1036   .bss.cmdIndex:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccSsDui0.s:1042   .bss.strIndex:00000000 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
HAL_RCC_GetHCLKFreq
strcmp
