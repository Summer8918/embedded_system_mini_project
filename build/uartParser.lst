ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"uartParser.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/uartParser.c"
  18              		.section	.text.convertSpeed,"ax",%progbits
  19              		.align	1
  20              		.global	convertSpeed
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	convertSpeed:
  26              	.LVL0:
  27              	.LFB45:
   1:Core/Src/uartParser.c **** #include "uartParser.h"
   2:Core/Src/uartParser.c **** #include "cmsis_os2.h"
   3:Core/Src/uartParser.c **** #include <string.h>
   4:Core/Src/uartParser.c **** 
   5:Core/Src/uartParser.c **** osThreadId_t UARTTaskHandle;
   6:Core/Src/uartParser.c **** Cmd_Queue * cmdQueue = NULL;
   7:Core/Src/uartParser.c **** osSemaphoreId_t binarySem02UartParserHandle;
   8:Core/Src/uartParser.c **** static const osSemaphoreAttr_t semAttr_SEM1 = {
   9:Core/Src/uartParser.c ****   .name = "SEM02",
  10:Core/Src/uartParser.c **** };
  11:Core/Src/uartParser.c **** 
  12:Core/Src/uartParser.c **** volatile uint8_t strIndex = 0;
  13:Core/Src/uartParser.c **** volatile uint8_t cmdIndex = 0;
  14:Core/Src/uartParser.c **** volatile uint8_t cmdStrIndex = 0;
  15:Core/Src/uartParser.c **** volatile char tmpStr[TMP_STR_LEN];
  16:Core/Src/uartParser.c **** volatile char cmd[4][TMP_STR_LEN];
  17:Core/Src/uartParser.c **** volatile uint16_t commandOut = 0x0000;
  18:Core/Src/uartParser.c **** 
  19:Core/Src/uartParser.c **** // 0 not working, 1 working
  20:Core/Src/uartParser.c **** volatile uint8_t uartStatus = 0;
  21:Core/Src/uartParser.c **** 
  22:Core/Src/uartParser.c **** const osThreadAttr_t UARTTask_attributes = {
  23:Core/Src/uartParser.c ****   .name = "UARTParseTask",
  24:Core/Src/uartParser.c ****   .stack_size = 128 * 4,
  25:Core/Src/uartParser.c ****   .priority = (osPriority_t) osPriorityNormal1, // higher priority than osPriorityNormal
  26:Core/Src/uartParser.c **** };
  27:Core/Src/uartParser.c **** 
  28:Core/Src/uartParser.c **** void sendUint16BinToUart(uint16_t x) {
  29:Core/Src/uartParser.c **** 	char str[16];
  30:Core/Src/uartParser.c **** 	uint8_t i = 0;
  31:Core/Src/uartParser.c **** 	while (i < 16) {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 2


  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
  33:Core/Src/uartParser.c **** 	  i++;
  34:Core/Src/uartParser.c **** 	}
  35:Core/Src/uartParser.c **** 	transmitCharArray(str);
  36:Core/Src/uartParser.c **** }
  37:Core/Src/uartParser.c **** 
  38:Core/Src/uartParser.c **** uint8_t parseCmd(void) {
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
  40:Core/Src/uartParser.c ****   uint8_t speed = 0;
  41:Core/Src/uartParser.c ****   //Parse words from received command string
  42:Core/Src/uartParser.c ****   volatile uint8_t strLen = strIndex + 1;
  43:Core/Src/uartParser.c ****   strIndex = 0;
  44:Core/Src/uartParser.c ****   cmdStrIndex = 0;
  45:Core/Src/uartParser.c ****   cmdIndex = 0;
  46:Core/Src/uartParser.c ****   while (strIndex < strLen) {
  47:Core/Src/uartParser.c ****     if (tmpStr[strIndex] == ' ') {
  48:Core/Src/uartParser.c ****       cmdIndex++;
  49:Core/Src/uartParser.c ****       cmdStrIndex = 0;
  50:Core/Src/uartParser.c ****     } else {
  51:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
  52:Core/Src/uartParser.c ****       cmdStrIndex++;
  53:Core/Src/uartParser.c ****     }
  54:Core/Src/uartParser.c ****     strIndex++;
  55:Core/Src/uartParser.c ****   } 
  56:Core/Src/uartParser.c ****   //Convert words into command format
  57:Core/Src/uartParser.c ****   //First digit
  58:Core/Src/uartParser.c ****   if (strcmp(cmd[0], "led") == 0) {
  59:Core/Src/uartParser.c ****     commandOut |= 0xA000;
  60:Core/Src/uartParser.c ****     //Second digit - LED
  61:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "red") == 0) {
  62:Core/Src/uartParser.c ****       commandOut |= 0x0100;
  63:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "green") == 0) {
  64:Core/Src/uartParser.c ****       commandOut |= 0x0200;
  65:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "blue") == 0) {
  66:Core/Src/uartParser.c ****       commandOut |= 0x0300;
  67:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "orange") == 0) {
  68:Core/Src/uartParser.c ****       commandOut |= 0x0400;
  69:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "all") == 0) {
  70:Core/Src/uartParser.c ****       commandOut |= 0x0500;
  71:Core/Src/uartParser.c ****     }else {
  72:Core/Src/uartParser.c ****       error = 1;
  73:Core/Src/uartParser.c ****     }
  74:Core/Src/uartParser.c ****     //Third digit - LED
  75:Core/Src/uartParser.c ****     if (strcmp(cmd[2], "on") == 0) {
  76:Core/Src/uartParser.c ****       commandOut |= 0x0010;
  77:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "off") == 0) {
  78:Core/Src/uartParser.c ****       commandOut |= 0x0020;
  79:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "toggle") == 0) {
  80:Core/Src/uartParser.c ****       commandOut |= 0x0030;
  81:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "blink") == 0) {
  82:Core/Src/uartParser.c ****       commandOut |= 0x0040;
  83:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[3]);
  84:Core/Src/uartParser.c ****     } else {
  85:Core/Src/uartParser.c ****       error = 1;
  86:Core/Src/uartParser.c ****     }
  87:Core/Src/uartParser.c **** 
  88:Core/Src/uartParser.c ****     //LED blink speed
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 3


  89:Core/Src/uartParser.c ****     if (speed == 255)
  90:Core/Src/uartParser.c ****       error = 1;
  91:Core/Src/uartParser.c ****     else 
  92:Core/Src/uartParser.c ****       if (speed > 15) {
  93:Core/Src/uartParser.c ****         transmitCharArray("Blink speed limited to 1500 ms");
  94:Core/Src/uartParser.c ****         commandOut |= 15U;
  95:Core/Src/uartParser.c ****       }
  96:Core/Src/uartParser.c ****       else
  97:Core/Src/uartParser.c ****         commandOut |= speed;
  98:Core/Src/uartParser.c **** 
  99:Core/Src/uartParser.c ****   } else if (strcmp(cmd[0], "motor") == 0) {
 100:Core/Src/uartParser.c ****     commandOut |= 0xB000;
 101:Core/Src/uartParser.c ****     //Second digit - Motor
 102:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "on") == 0) {
 103:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 104:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 105:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "off") == 0) {
 106:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 107:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "speed") == 0) {
 108:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 109:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 110:Core/Src/uartParser.c ****     } else {
 111:Core/Src/uartParser.c ****       error = 1;
 112:Core/Src/uartParser.c ****     }
 113:Core/Src/uartParser.c ****     //Motor speed
 114:Core/Src/uartParser.c ****     if (speed == 255)
 115:Core/Src/uartParser.c ****       error = 1;
 116:Core/Src/uartParser.c ****     else 
 117:Core/Src/uartParser.c ****       if (speed > 100) {
 118:Core/Src/uartParser.c ****         transmitCharArray("Motor speed limited to 100 RPM");
 119:Core/Src/uartParser.c ****         commandOut |= 100U;
 120:Core/Src/uartParser.c ****       }
 121:Core/Src/uartParser.c ****       else
 122:Core/Src/uartParser.c ****         commandOut |= speed;
 123:Core/Src/uartParser.c ****   } else {
 124:Core/Src/uartParser.c ****     error = 1;
 125:Core/Src/uartParser.c ****   }
 126:Core/Src/uartParser.c ****   return error;
 127:Core/Src/uartParser.c **** }
 128:Core/Src/uartParser.c **** 
 129:Core/Src/uartParser.c **** //Convert UART ascii sped into into uint8 to add to command
 130:Core/Src/uartParser.c **** uint8_t convertSpeed(char *ascii) {
  28              		.loc 1 130 35 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 130 35 is_stmt 0 view .LVU1
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
  40 0002 0500     		movs	r5, r0
 131:Core/Src/uartParser.c ****   uint8_t hundreds = 0, tens = 0, ones = 0;
  41              		.loc 1 131 3 is_stmt 1 view .LVU2
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 4


  42              	.LVL1:
 132:Core/Src/uartParser.c ****   //Throw error if speed is not a number
 133:Core/Src/uartParser.c ****   for (int i = 0; i < strlen(ascii); i ++){
  43              		.loc 1 133 3 view .LVU3
  44              	.LBB6:
  45              		.loc 1 133 8 view .LVU4
  46              		.loc 1 133 12 is_stmt 0 view .LVU5
  47 0004 0024     		movs	r4, #0
  48              		.loc 1 133 3 view .LVU6
  49 0006 00E0     		b	.L2
  50              	.LVL2:
  51              	.L12:
  52              		.loc 1 133 40 is_stmt 1 discriminator 2 view .LVU7
  53 0008 0134     		adds	r4, r4, #1
  54              	.LVL3:
  55              	.L2:
  56              		.loc 1 133 21 discriminator 1 view .LVU8
  57              		.loc 1 133 23 is_stmt 0 discriminator 1 view .LVU9
  58 000a 2800     		movs	r0, r5
  59 000c FFF7FEFF 		bl	strlen
  60              	.LVL4:
  61              		.loc 1 133 21 discriminator 1 view .LVU10
  62 0010 A042     		cmp	r0, r4
  63 0012 08D9     		bls	.L11
 134:Core/Src/uartParser.c ****     if ((ascii[i] < 48 && ascii[i] != 0) || ascii[i] > 57) {
  64              		.loc 1 134 5 is_stmt 1 view .LVU11
  65              		.loc 1 134 15 is_stmt 0 view .LVU12
  66 0014 2A5D     		ldrb	r2, [r5, r4]
  67              		.loc 1 134 24 view .LVU13
  68 0016 531E     		subs	r3, r2, #1
  69 0018 DBB2     		uxtb	r3, r3
  70              		.loc 1 134 8 view .LVU14
  71 001a 2E2B     		cmp	r3, #46
  72 001c 2DD9     		bls	.L8
  73              		.loc 1 134 42 discriminator 1 view .LVU15
  74 001e 392A     		cmp	r2, #57
  75 0020 F2D9     		bls	.L12
 135:Core/Src/uartParser.c ****       return 255;
  76              		.loc 1 135 14 view .LVU16
  77 0022 FF20     		movs	r0, #255
  78 0024 13E0     		b	.L3
  79              	.L11:
  80              	.LBE6:
 136:Core/Src/uartParser.c ****     }
 137:Core/Src/uartParser.c ****   }
 138:Core/Src/uartParser.c ****   //3 digit number
 139:Core/Src/uartParser.c ****   if (ascii[2] != 0) {
  81              		.loc 1 139 3 is_stmt 1 view .LVU17
  82              		.loc 1 139 12 is_stmt 0 view .LVU18
  83 0026 A978     		ldrb	r1, [r5, #2]
  84              		.loc 1 139 6 view .LVU19
  85 0028 0029     		cmp	r1, #0
  86 002a 11D0     		beq	.L5
 140:Core/Src/uartParser.c ****     hundreds = ascii[0] - 48;
  87              		.loc 1 140 5 is_stmt 1 view .LVU20
  88              		.loc 1 140 21 is_stmt 0 view .LVU21
  89 002c 2A78     		ldrb	r2, [r5]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 5


  90              		.loc 1 140 14 view .LVU22
  91 002e 303A     		subs	r2, r2, #48
  92 0030 D2B2     		uxtb	r2, r2
  93              	.LVL5:
 141:Core/Src/uartParser.c ****     tens = ascii[1] - 48;
  94              		.loc 1 141 5 is_stmt 1 view .LVU23
  95              		.loc 1 141 17 is_stmt 0 view .LVU24
  96 0032 6B78     		ldrb	r3, [r5, #1]
  97              		.loc 1 141 10 view .LVU25
  98 0034 303B     		subs	r3, r3, #48
  99 0036 DBB2     		uxtb	r3, r3
 100              	.LVL6:
 142:Core/Src/uartParser.c ****     ones = ascii[2] - 48;
 101              		.loc 1 142 5 is_stmt 1 view .LVU26
 102              		.loc 1 142 10 is_stmt 0 view .LVU27
 103 0038 3039     		subs	r1, r1, #48
 104 003a CCB2     		uxtb	r4, r1
 105              	.LVL7:
 106              	.L6:
 143:Core/Src/uartParser.c ****   } else {
 144:Core/Src/uartParser.c ****     hundreds = 0;
 145:Core/Src/uartParser.c ****     //2 digit number
 146:Core/Src/uartParser.c ****     if (ascii[1] != 0) {
 147:Core/Src/uartParser.c ****       tens = ascii[0] - 48;
 148:Core/Src/uartParser.c ****       ones = ascii[1] - 48;
 149:Core/Src/uartParser.c ****     }
 150:Core/Src/uartParser.c ****     else {
 151:Core/Src/uartParser.c ****       tens = 0;
 152:Core/Src/uartParser.c ****       //1 digit number
 153:Core/Src/uartParser.c ****       if (ascii[0] != 0) {
 154:Core/Src/uartParser.c ****         ones = ascii[0] - 48;
 155:Core/Src/uartParser.c ****       }
 156:Core/Src/uartParser.c ****       else {
 157:Core/Src/uartParser.c ****         ones = 0;
 158:Core/Src/uartParser.c ****       }
 159:Core/Src/uartParser.c ****     }
 160:Core/Src/uartParser.c ****   }
 161:Core/Src/uartParser.c ****   return hundreds*100 + tens*10 + ones;
 107              		.loc 1 161 3 is_stmt 1 view .LVU28
 108              		.loc 1 161 23 is_stmt 0 view .LVU29
 109 003c 6420     		movs	r0, #100
 110 003e 5043     		muls	r0, r2
 111 0040 9A00     		lsls	r2, r3, #2
 112              	.LVL8:
 113              		.loc 1 161 23 view .LVU30
 114 0042 9B18     		adds	r3, r3, r2
 115              	.LVL9:
 116              		.loc 1 161 23 view .LVU31
 117 0044 5B00     		lsls	r3, r3, #1
 118 0046 C018     		adds	r0, r0, r3
 119 0048 C0B2     		uxtb	r0, r0
 120              		.loc 1 161 33 view .LVU32
 121 004a 0019     		adds	r0, r0, r4
 122 004c C0B2     		uxtb	r0, r0
 123              	.LVL10:
 124              	.L3:
 162:Core/Src/uartParser.c **** }
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 6


 125              		.loc 1 162 1 view .LVU33
 126              		@ sp needed
 127              	.LVL11:
 128              		.loc 1 162 1 view .LVU34
 129 004e 70BD     		pop	{r4, r5, r6, pc}
 130              	.LVL12:
 131              	.L5:
 144:Core/Src/uartParser.c ****     //2 digit number
 132              		.loc 1 144 5 is_stmt 1 view .LVU35
 146:Core/Src/uartParser.c ****       tens = ascii[0] - 48;
 133              		.loc 1 146 5 view .LVU36
 146:Core/Src/uartParser.c ****       tens = ascii[0] - 48;
 134              		.loc 1 146 14 is_stmt 0 view .LVU37
 135 0050 6878     		ldrb	r0, [r5, #1]
 146:Core/Src/uartParser.c ****       tens = ascii[0] - 48;
 136              		.loc 1 146 8 view .LVU38
 137 0052 0028     		cmp	r0, #0
 138 0054 06D0     		beq	.L7
 147:Core/Src/uartParser.c ****       ones = ascii[1] - 48;
 139              		.loc 1 147 7 is_stmt 1 view .LVU39
 147:Core/Src/uartParser.c ****       ones = ascii[1] - 48;
 140              		.loc 1 147 19 is_stmt 0 view .LVU40
 141 0056 2B78     		ldrb	r3, [r5]
 147:Core/Src/uartParser.c ****       ones = ascii[1] - 48;
 142              		.loc 1 147 12 view .LVU41
 143 0058 303B     		subs	r3, r3, #48
 144 005a DBB2     		uxtb	r3, r3
 145              	.LVL13:
 148:Core/Src/uartParser.c ****     }
 146              		.loc 1 148 7 is_stmt 1 view .LVU42
 148:Core/Src/uartParser.c ****     }
 147              		.loc 1 148 12 is_stmt 0 view .LVU43
 148 005c 3038     		subs	r0, r0, #48
 149 005e C4B2     		uxtb	r4, r0
 150              	.LVL14:
 144:Core/Src/uartParser.c ****     //2 digit number
 151              		.loc 1 144 14 view .LVU44
 152 0060 0A00     		movs	r2, r1
 153 0062 EBE7     		b	.L6
 154              	.LVL15:
 155              	.L7:
 151:Core/Src/uartParser.c ****       //1 digit number
 156              		.loc 1 151 7 is_stmt 1 view .LVU45
 153:Core/Src/uartParser.c ****         ones = ascii[0] - 48;
 157              		.loc 1 153 7 view .LVU46
 153:Core/Src/uartParser.c ****         ones = ascii[0] - 48;
 158              		.loc 1 153 16 is_stmt 0 view .LVU47
 159 0064 2A78     		ldrb	r2, [r5]
 153:Core/Src/uartParser.c ****         ones = ascii[0] - 48;
 160              		.loc 1 153 10 view .LVU48
 161 0066 002A     		cmp	r2, #0
 162 0068 04D0     		beq	.L10
 154:Core/Src/uartParser.c ****       }
 163              		.loc 1 154 9 is_stmt 1 view .LVU49
 154:Core/Src/uartParser.c ****       }
 164              		.loc 1 154 14 is_stmt 0 view .LVU50
 165 006a 303A     		subs	r2, r2, #48
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 7


 166 006c D4B2     		uxtb	r4, r2
 167              	.LVL16:
 151:Core/Src/uartParser.c ****       //1 digit number
 168              		.loc 1 151 12 view .LVU51
 169 006e 0200     		movs	r2, r0
 144:Core/Src/uartParser.c ****     //2 digit number
 170              		.loc 1 144 14 view .LVU52
 171 0070 0300     		movs	r3, r0
 172 0072 E3E7     		b	.L6
 173              	.LVL17:
 174              	.L10:
 157:Core/Src/uartParser.c ****       }
 175              		.loc 1 157 14 view .LVU53
 176 0074 1400     		movs	r4, r2
 177              	.LVL18:
 151:Core/Src/uartParser.c ****       //1 digit number
 178              		.loc 1 151 12 view .LVU54
 179 0076 1300     		movs	r3, r2
 180 0078 E0E7     		b	.L6
 181              	.LVL19:
 182              	.L8:
 183              	.LBB7:
 135:Core/Src/uartParser.c ****     }
 184              		.loc 1 135 14 view .LVU55
 185 007a FF20     		movs	r0, #255
 186 007c E7E7     		b	.L3
 187              	.LBE7:
 188              		.cfi_endproc
 189              	.LFE45:
 191              		.section	.text.transmitOneChar,"ax",%progbits
 192              		.align	1
 193              		.global	transmitOneChar
 194              		.syntax unified
 195              		.code	16
 196              		.thumb_func
 198              	transmitOneChar:
 199              	.LFB49:
 163:Core/Src/uartParser.c **** 
 164:Core/Src/uartParser.c **** /* UART CODE BEGIN Header_StartLEDTask */
 165:Core/Src/uartParser.c **** /**
 166:Core/Src/uartParser.c ****   * @brief  Function implementing the LEDTask thread.
 167:Core/Src/uartParser.c ****   * @param  argument: Not used
 168:Core/Src/uartParser.c ****   * @retval None
 169:Core/Src/uartParser.c ****   */
 170:Core/Src/uartParser.c **** /* USER CODE END Header_StartLEDTask */
 171:Core/Src/uartParser.c **** void StartParseUartTask(void *argument) {
 172:Core/Src/uartParser.c ****   // TODO: add a timer to limit the max execution time
 173:Core/Src/uartParser.c **** 
 174:Core/Src/uartParser.c ****   while (1) {
 175:Core/Src/uartParser.c ****     //transmitCharArray("Waiting to get sem02.\n");
 176:Core/Src/uartParser.c ****     osSemaphoreAcquire(binarySem02UartParserHandle, osWaitForever);
 177:Core/Src/uartParser.c ****     //transmitCharArray("get sem02!\n");
 178:Core/Src/uartParser.c ****     while (1) {
 179:Core/Src/uartParser.c ****       while((USART3->ISR & USART_ISR_RXNE) == 0) {
 180:Core/Src/uartParser.c **** 	    }
 181:Core/Src/uartParser.c ****       //Pull character from UART
 182:Core/Src/uartParser.c **** 	    volatile uint8_t usartReceivedData = USART3->RDR;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 8


 183:Core/Src/uartParser.c ****       transmitOneChar(usartReceivedData);
 184:Core/Src/uartParser.c ****       //Command string terminated with enter key
 185:Core/Src/uartParser.c **** 	    if (usartReceivedData == '\r') {
 186:Core/Src/uartParser.c ****         uint8_t error = parseCmd();
 187:Core/Src/uartParser.c ****         //Command syntax correct
 188:Core/Src/uartParser.c ****         if (error == 0) {
 189:Core/Src/uartParser.c ****           // Store the commandOut in queue
 190:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 191:Core/Src/uartParser.c ****             transmitCharArray("Push command to queue success.\n");
 192:Core/Src/uartParser.c ****             transmitCharArray(tmpStr);
 193:Core/Src/uartParser.c ****             sendUint16BinToUart(commandOut);
 194:Core/Src/uartParser.c ****           } else {
 195:Core/Src/uartParser.c ****             transmitCharArray("Fail to push command to queue, try again.\n");
 196:Core/Src/uartParser.c ****           }
 197:Core/Src/uartParser.c ****         //Command syntax malformed
 198:Core/Src/uartParser.c ****         } else {
 199:Core/Src/uartParser.c ****           transmitCharArray("Command not recognized");
 200:Core/Src/uartParser.c ****           transmitCharArray(tmpStr);
 201:Core/Src/uartParser.c ****           
 202:Core/Src/uartParser.c ****         }
 203:Core/Src/uartParser.c ****         //Reset command string and index
 204:Core/Src/uartParser.c ****         strIndex = 0;
 205:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 206:Core/Src/uartParser.c ****           tmpStr[i] = '\0';
 207:Core/Src/uartParser.c ****           cmd[0][i] = '\0';
 208:Core/Src/uartParser.c ****           cmd[1][i] = '\0';
 209:Core/Src/uartParser.c ****           cmd[2][i] = '\0';
 210:Core/Src/uartParser.c ****           cmd[3][i] = '\0';
 211:Core/Src/uartParser.c ****         }
 212:Core/Src/uartParser.c **** 
 213:Core/Src/uartParser.c ****         //Reset commandOut before starting next command receive
 214:Core/Src/uartParser.c ****         commandOut = 0;
 215:Core/Src/uartParser.c ****         break;
 216:Core/Src/uartParser.c ****       //Allow backspace/delete key to undo last character
 217:Core/Src/uartParser.c **** 	    } else if (usartReceivedData == 8 || usartReceivedData == 127) {
 218:Core/Src/uartParser.c ****           if (strIndex > 0) {
 219:Core/Src/uartParser.c ****             strIndex -= 1;
 220:Core/Src/uartParser.c ****             tmpStr[strIndex] = '\0';
 221:Core/Src/uartParser.c ****           }
 222:Core/Src/uartParser.c ****       } 
 223:Core/Src/uartParser.c ****       else {
 224:Core/Src/uartParser.c ****         tmpStr[strIndex] = usartReceivedData;
 225:Core/Src/uartParser.c ****         strIndex += 1;
 226:Core/Src/uartParser.c ****         //Command too long
 227:Core/Src/uartParser.c ****         if (strIndex == TMP_STR_LEN) {
 228:Core/Src/uartParser.c ****       	  transmitCharArray("Command is too long!");
 229:Core/Src/uartParser.c ****           strIndex = 0;
 230:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 231:Core/Src/uartParser.c ****             tmpStr[i] = '\0';
 232:Core/Src/uartParser.c ****           }
 233:Core/Src/uartParser.c ****           break;
 234:Core/Src/uartParser.c ****         }
 235:Core/Src/uartParser.c ****       }
 236:Core/Src/uartParser.c ****     }
 237:Core/Src/uartParser.c ****     uartStatus = 0;
 238:Core/Src/uartParser.c ****     //transmitCharArray("Enable Uart RX interrupt");
 239:Core/Src/uartParser.c ****     USART3->CR1 |= USART_CR1_RXNEIE;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 9


 240:Core/Src/uartParser.c ****   }
 241:Core/Src/uartParser.c **** /*
 242:Core/Src/uartParser.c ****   // test queue pop
 243:Core/Src/uartParser.c ****   uint16_t item = queuePop(cmdQueue);
 244:Core/Src/uartParser.c ****   transmitCharArray("Pop items from queue\n");
 245:Core/Src/uartParser.c ****   while (item != 0xffff) {
 246:Core/Src/uartParser.c ****     sendUint16BinToUart(item);
 247:Core/Src/uartParser.c ****     item = queuePop(cmdQueue);
 248:Core/Src/uartParser.c ****   }*/
 249:Core/Src/uartParser.c **** }
 250:Core/Src/uartParser.c **** 
 251:Core/Src/uartParser.c **** //Initialize USART3 - PC4 TX, PC5 RX
 252:Core/Src/uartParser.c **** void initUsart3(void) {
 253:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 254:Core/Src/uartParser.c ****   // set pc4 to AF mode, 0x10
 255:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 256:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 257:Core/Src/uartParser.c ****   // set pc5 to AF mode, 0x10
 258:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 259:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 260:Core/Src/uartParser.c **** 
 261:Core/Src/uartParser.c ****   // set PC4 AFRL to 0001: AF1
 262:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 263:Core/Src/uartParser.c ****   // set PC5 AFRL to 0001: AF1
 264:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 265:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 266:Core/Src/uartParser.c **** 
 267:Core/Src/uartParser.c ****   uint32_t fClk = HAL_RCC_GetHCLKFreq();
 268:Core/Src/uartParser.c **** 
 269:Core/Src/uartParser.c ****   // set baud rate
 270:Core/Src/uartParser.c ****   uint32_t baudRate = 115200;
 271:Core/Src/uartParser.c ****   uint32_t usartBRR = fClk / baudRate;
 272:Core/Src/uartParser.c ****   USART3->BRR = usartBRR;
 273:Core/Src/uartParser.c **** 
 274:Core/Src/uartParser.c ****   // enable the transmitter and receiver hardware of USART3
 275:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 276:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 277:Core/Src/uartParser.c **** 
 278:Core/Src/uartParser.c ****   // Enable USART peripheral.
 279:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 280:Core/Src/uartParser.c ****   transmitCharArray("UART enabled");
 281:Core/Src/uartParser.c **** 
 282:Core/Src/uartParser.c ****   // Enable the receive register not empty interrupt.
 283:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 284:Core/Src/uartParser.c ****   // Enable and set the USART interrupt priority in the NVIC.
 285:Core/Src/uartParser.c ****   NVIC_EnableIRQ(USART3_4_IRQn);
 286:Core/Src/uartParser.c ****   NVIC_SetPriority(USART3_4_IRQn, 3);
 287:Core/Src/uartParser.c ****   /* Create the semaphores(s) */
 288:Core/Src/uartParser.c ****   /* definition and creation of myBinarySem02 */
 289:Core/Src/uartParser.c ****   // The semaphore is created with an initial count of 0 
 290:Core/Src/uartParser.c ****   // ,which means it is not available initially. 
 291:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
 292:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 293:Core/Src/uartParser.c **** }
 294:Core/Src/uartParser.c **** 
 295:Core/Src/uartParser.c **** // Handle uart RX with interrupt
 296:Core/Src/uartParser.c **** void USART3_4_IRQHandler(void) {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 10


 297:Core/Src/uartParser.c ****   transmitCharArray("UART RX interrupt.");
 298:Core/Src/uartParser.c ****   if (uartStatus == 0) {
 299:Core/Src/uartParser.c ****     while((USART3->ISR & USART_ISR_RXNE) == 0) {
 300:Core/Src/uartParser.c **** 	  }
 301:Core/Src/uartParser.c ****     //transmitCharArray("Release sem02\n");
 302:Core/Src/uartParser.c ****     osSemaphoreRelease(binarySem02UartParserHandle);
 303:Core/Src/uartParser.c ****     volatile uint8_t usartReceivedData = USART3->RDR;
 304:Core/Src/uartParser.c ****     transmitCharArray("cmd:\n");
 305:Core/Src/uartParser.c ****     transmitOneChar(usartReceivedData);
 306:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 307:Core/Src/uartParser.c **** 		strIndex++;
 308:Core/Src/uartParser.c ****     uartStatus = 1;
 309:Core/Src/uartParser.c ****     // Disable the receive register not empty interrupt.
 310:Core/Src/uartParser.c ****     USART3->CR1 &= ~USART_CR1_RXNEIE;
 311:Core/Src/uartParser.c ****   }
 312:Core/Src/uartParser.c **** }
 313:Core/Src/uartParser.c **** 
 314:Core/Src/uartParser.c **** void transmitOneChar(uint8_t ch) {
 200              		.loc 1 314 34 is_stmt 1 view -0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204              		@ link register save eliminated.
 205              	.LVL20:
 206              	.L14:
 315:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 316:Core/Src/uartParser.c ****   }
 207              		.loc 1 316 3 view .LVU57
 315:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 208              		.loc 1 315 40 discriminator 1 view .LVU58
 315:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 209              		.loc 1 315 17 is_stmt 0 discriminator 1 view .LVU59
 210 0000 034B     		ldr	r3, .L16
 211 0002 DB69     		ldr	r3, [r3, #28]
 315:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 212              		.loc 1 315 40 discriminator 1 view .LVU60
 213 0004 1B06     		lsls	r3, r3, #24
 214 0006 FBD5     		bpl	.L14
 317:Core/Src/uartParser.c ****   USART3->TDR = ch;
 215              		.loc 1 317 3 is_stmt 1 view .LVU61
 216              		.loc 1 317 15 is_stmt 0 view .LVU62
 217 0008 014B     		ldr	r3, .L16
 218 000a 1885     		strh	r0, [r3, #40]
 318:Core/Src/uartParser.c **** }
 219              		.loc 1 318 1 view .LVU63
 220              		@ sp needed
 221 000c 7047     		bx	lr
 222              	.L17:
 223 000e C046     		.align	2
 224              	.L16:
 225 0010 00480040 		.word	1073760256
 226              		.cfi_endproc
 227              	.LFE49:
 229              		.section	.text.transmitCharArray,"ax",%progbits
 230              		.align	1
 231              		.global	transmitCharArray
 232              		.syntax unified
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 11


 233              		.code	16
 234              		.thumb_func
 236              	transmitCharArray:
 237              	.LVL21:
 238              	.LFB50:
 319:Core/Src/uartParser.c **** 
 320:Core/Src/uartParser.c **** void transmitCharArray (char *arr) {
 239              		.loc 1 320 36 is_stmt 1 view -0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 243              		.loc 1 320 36 is_stmt 0 view .LVU65
 244 0000 10B5     		push	{r4, lr}
 245              	.LCFI1:
 246              		.cfi_def_cfa_offset 8
 247              		.cfi_offset 4, -8
 248              		.cfi_offset 14, -4
 249 0002 0400     		movs	r4, r0
 321:Core/Src/uartParser.c ****   while (*arr != '\0') {
 250              		.loc 1 321 3 is_stmt 1 view .LVU66
 251              		.loc 1 321 9 is_stmt 0 view .LVU67
 252 0004 02E0     		b	.L19
 253              	.LVL22:
 254              	.L20:
 322:Core/Src/uartParser.c **** 		transmitOneChar(*arr);
 255              		.loc 1 322 3 is_stmt 1 view .LVU68
 256 0006 FFF7FEFF 		bl	transmitOneChar
 257              	.LVL23:
 323:Core/Src/uartParser.c **** 		arr++;
 258              		.loc 1 323 3 view .LVU69
 259              		.loc 1 323 6 is_stmt 0 view .LVU70
 260 000a 0134     		adds	r4, r4, #1
 261              	.LVL24:
 262              	.L19:
 321:Core/Src/uartParser.c ****   while (*arr != '\0') {
 263              		.loc 1 321 15 is_stmt 1 view .LVU71
 321:Core/Src/uartParser.c ****   while (*arr != '\0') {
 264              		.loc 1 321 10 is_stmt 0 view .LVU72
 265 000c 2078     		ldrb	r0, [r4]
 321:Core/Src/uartParser.c ****   while (*arr != '\0') {
 266              		.loc 1 321 15 view .LVU73
 267 000e 0028     		cmp	r0, #0
 268 0010 F9D1     		bne	.L20
 324:Core/Src/uartParser.c **** 	}
 325:Core/Src/uartParser.c ****   transmitOneChar('\n');
 269              		.loc 1 325 3 is_stmt 1 view .LVU74
 270 0012 0A30     		adds	r0, r0, #10
 271 0014 FFF7FEFF 		bl	transmitOneChar
 272              	.LVL25:
 326:Core/Src/uartParser.c ****   transmitOneChar('\r');
 273              		.loc 1 326 3 view .LVU75
 274 0018 0D20     		movs	r0, #13
 275 001a FFF7FEFF 		bl	transmitOneChar
 276              	.LVL26:
 327:Core/Src/uartParser.c **** }...
 277              		.loc 1 327 1 is_stmt 0 view .LVU76
 278              		@ sp needed
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 12


 279              	.LVL27:
 280              		.loc 1 327 1 view .LVU77
 281 001e 10BD     		pop	{r4, pc}
 282              		.cfi_endproc
 283              	.LFE50:
 285              		.section	.text.sendUint16BinToUart,"ax",%progbits
 286              		.align	1
 287              		.global	sendUint16BinToUart
 288              		.syntax unified
 289              		.code	16
 290              		.thumb_func
 292              	sendUint16BinToUart:
 293              	.LVL28:
 294              	.LFB43:
  28:Core/Src/uartParser.c **** void sendUint16BinToUart(uint16_t x) {
 295              		.loc 1 28 38 is_stmt 1 view -0
 296              		.cfi_startproc
 297              		@ args = 0, pretend = 0, frame = 16
 298              		@ frame_needed = 0, uses_anonymous_args = 0
  28:Core/Src/uartParser.c **** void sendUint16BinToUart(uint16_t x) {
 299              		.loc 1 28 38 is_stmt 0 view .LVU79
 300 0000 10B5     		push	{r4, lr}
 301              	.LCFI2:
 302              		.cfi_def_cfa_offset 8
 303              		.cfi_offset 4, -8
 304              		.cfi_offset 14, -4
 305 0002 84B0     		sub	sp, sp, #16
 306              	.LCFI3:
 307              		.cfi_def_cfa_offset 24
  29:Core/Src/uartParser.c **** 	char str[16];
 308              		.loc 1 29 2 is_stmt 1 view .LVU80
  30:Core/Src/uartParser.c **** 	uint8_t i = 0;
 309              		.loc 1 30 2 view .LVU81
 310              	.LVL29:
  31:Core/Src/uartParser.c **** 	while (i < 16) {
 311              		.loc 1 31 2 view .LVU82
  30:Core/Src/uartParser.c **** 	uint8_t i = 0;
 312              		.loc 1 30 10 is_stmt 0 view .LVU83
 313 0004 0023     		movs	r3, #0
  31:Core/Src/uartParser.c **** 	while (i < 16) {
 314              		.loc 1 31 8 view .LVU84
 315 0006 0AE0     		b	.L22
 316              	.LVL30:
 317              	.L23:
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 318              		.loc 1 32 3 is_stmt 1 view .LVU85
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 319              		.loc 1 32 25 is_stmt 0 view .LVU86
 320 0008 0100     		movs	r1, r0
 321 000a 1941     		asrs	r1, r1, r3
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 322              		.loc 1 32 31 view .LVU87
 323 000c 0122     		movs	r2, #1
 324 000e 0A40     		ands	r2, r1
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 325              		.loc 1 32 9 view .LVU88
 326 0010 0F21     		movs	r1, #15
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 13


 327 0012 C91A     		subs	r1, r1, r3
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 328              		.loc 1 32 19 view .LVU89
 329 0014 3032     		adds	r2, r2, #48
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 330              		.loc 1 32 13 view .LVU90
 331 0016 6C46     		mov	r4, sp
 332 0018 6254     		strb	r2, [r4, r1]
  33:Core/Src/uartParser.c **** 	  i++;
 333              		.loc 1 33 4 is_stmt 1 view .LVU91
  33:Core/Src/uartParser.c **** 	  i++;
 334              		.loc 1 33 5 is_stmt 0 view .LVU92
 335 001a 0133     		adds	r3, r3, #1
 336              	.LVL31:
  33:Core/Src/uartParser.c **** 	  i++;
 337              		.loc 1 33 5 view .LVU93
 338 001c DBB2     		uxtb	r3, r3
 339              	.LVL32:
 340              	.L22:
  31:Core/Src/uartParser.c **** 	while (i < 16) {
 341              		.loc 1 31 11 is_stmt 1 view .LVU94
 342 001e 0F2B     		cmp	r3, #15
 343 0020 F2D9     		bls	.L23
  35:Core/Src/uartParser.c **** 	transmitCharArray(str);
 344              		.loc 1 35 2 view .LVU95
 345 0022 6846     		mov	r0, sp
 346              	.LVL33:
  35:Core/Src/uartParser.c **** 	transmitCharArray(str);
 347              		.loc 1 35 2 is_stmt 0 view .LVU96
 348 0024 FFF7FEFF 		bl	transmitCharArray
 349              	.LVL34:
  36:Core/Src/uartParser.c **** }
 350              		.loc 1 36 1 view .LVU97
 351 0028 04B0     		add	sp, sp, #16
 352              		@ sp needed
 353 002a 10BD     		pop	{r4, pc}
 354              		.cfi_endproc
 355              	.LFE43:
 357              		.section	.rodata.parseCmd.str1.4,"aMS",%progbits,1
 358              		.align	2
 359              	.LC5:
 360 0000 6C656400 		.ascii	"led\000"
 361              		.align	2
 362              	.LC8:
 363 0004 72656400 		.ascii	"red\000"
 364              		.align	2
 365              	.LC11:
 366 0008 67726565 		.ascii	"green\000"
 366      6E00
 367 000e 0000     		.align	2
 368              	.LC13:
 369 0010 626C7565 		.ascii	"blue\000"
 369      00
 370 0015 000000   		.align	2
 371              	.LC15:
 372 0018 6F72616E 		.ascii	"orange\000"
 372      676500
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 14


 373 001f 00       		.align	2
 374              	.LC17:
 375 0020 616C6C00 		.ascii	"all\000"
 376              		.align	2
 377              	.LC19:
 378 0024 6F6E00   		.ascii	"on\000"
 379 0027 00       		.align	2
 380              	.LC22:
 381 0028 6F666600 		.ascii	"off\000"
 382              		.align	2
 383              	.LC24:
 384 002c 746F6767 		.ascii	"toggle\000"
 384      6C6500
 385 0033 00       		.align	2
 386              	.LC26:
 387 0034 626C696E 		.ascii	"blink\000"
 387      6B00
 388 003a 0000     		.align	2
 389              	.LC29:
 390 003c 426C696E 		.ascii	"Blink speed limited to 1500 ms\000"
 390      6B207370 
 390      65656420 
 390      6C696D69 
 390      74656420 
 391 005b 00       		.align	2
 392              	.LC31:
 393 005c 6D6F746F 		.ascii	"motor\000"
 393      7200
 394 0062 0000     		.align	2
 395              	.LC33:
 396 0064 73706565 		.ascii	"speed\000"
 396      6400
 397 006a 0000     		.align	2
 398              	.LC35:
 399 006c 4D6F746F 		.ascii	"Motor speed limited to 100 RPM\000"
 399      72207370 
 399      65656420 
 399      6C696D69 
 399      74656420 
 400              		.section	.text.parseCmd,"ax",%progbits
 401              		.align	1
 402              		.global	parseCmd
 403              		.syntax unified
 404              		.code	16
 405              		.thumb_func
 407              	parseCmd:
 408              	.LFB44:
  38:Core/Src/uartParser.c **** uint8_t parseCmd(void) {
 409              		.loc 1 38 24 is_stmt 1 view -0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 8
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413 0000 30B5     		push	{r4, r5, lr}
 414              	.LCFI4:
 415              		.cfi_def_cfa_offset 12
 416              		.cfi_offset 4, -12
 417              		.cfi_offset 5, -8
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 15


 418              		.cfi_offset 14, -4
 419 0002 83B0     		sub	sp, sp, #12
 420              	.LCFI5:
 421              		.cfi_def_cfa_offset 24
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
 422              		.loc 1 39 3 view .LVU99
 423              	.LVL35:
  40:Core/Src/uartParser.c ****   uint8_t speed = 0;
 424              		.loc 1 40 3 view .LVU100
  42:Core/Src/uartParser.c ****   volatile uint8_t strLen = strIndex + 1;
 425              		.loc 1 42 3 view .LVU101
  42:Core/Src/uartParser.c ****   volatile uint8_t strLen = strIndex + 1;
 426              		.loc 1 42 38 is_stmt 0 view .LVU102
 427 0004 9D4A     		ldr	r2, .L56
 428 0006 1378     		ldrb	r3, [r2]
 429 0008 0133     		adds	r3, r3, #1
 430 000a DBB2     		uxtb	r3, r3
  42:Core/Src/uartParser.c ****   volatile uint8_t strLen = strIndex + 1;
 431              		.loc 1 42 20 view .LVU103
 432 000c 6946     		mov	r1, sp
 433 000e CB71     		strb	r3, [r1, #7]
  43:Core/Src/uartParser.c ****   strIndex = 0;
 434              		.loc 1 43 3 is_stmt 1 view .LVU104
  43:Core/Src/uartParser.c ****   strIndex = 0;
 435              		.loc 1 43 12 is_stmt 0 view .LVU105
 436 0010 0023     		movs	r3, #0
 437 0012 1370     		strb	r3, [r2]
  44:Core/Src/uartParser.c ****   cmdStrIndex = 0;
 438              		.loc 1 44 3 is_stmt 1 view .LVU106
  44:Core/Src/uartParser.c ****   cmdStrIndex = 0;
 439              		.loc 1 44 15 is_stmt 0 view .LVU107
 440 0014 9A4A     		ldr	r2, .L56+4
 441 0016 1370     		strb	r3, [r2]
  45:Core/Src/uartParser.c ****   cmdIndex = 0;
 442              		.loc 1 45 3 is_stmt 1 view .LVU108
  45:Core/Src/uartParser.c ****   cmdIndex = 0;
 443              		.loc 1 45 12 is_stmt 0 view .LVU109
 444 0018 9A4A     		ldr	r2, .L56+8
 445 001a 1370     		strb	r3, [r2]
  46:Core/Src/uartParser.c ****   while (strIndex < strLen) {
 446              		.loc 1 46 3 is_stmt 1 view .LVU110
  46:Core/Src/uartParser.c ****   while (strIndex < strLen) {
 447              		.loc 1 46 9 is_stmt 0 view .LVU111
 448 001c 0CE0     		b	.L25
 449              	.L53:
  48:Core/Src/uartParser.c ****       cmdIndex++;
 450              		.loc 1 48 7 is_stmt 1 view .LVU112
  48:Core/Src/uartParser.c ****       cmdIndex++;
 451              		.loc 1 48 15 is_stmt 0 view .LVU113
 452 001e 994A     		ldr	r2, .L56+8
 453 0020 1378     		ldrb	r3, [r2]
 454 0022 0133     		adds	r3, r3, #1
 455 0024 DBB2     		uxtb	r3, r3
 456 0026 1370     		strb	r3, [r2]
  49:Core/Src/uartParser.c ****       cmdStrIndex = 0;
 457              		.loc 1 49 7 is_stmt 1 view .LVU114
  49:Core/Src/uartParser.c ****       cmdStrIndex = 0;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 16


 458              		.loc 1 49 19 is_stmt 0 view .LVU115
 459 0028 954B     		ldr	r3, .L56+4
 460 002a 0022     		movs	r2, #0
 461 002c 1A70     		strb	r2, [r3]
 462              	.L27:
  54:Core/Src/uartParser.c ****     strIndex++;
 463              		.loc 1 54 5 is_stmt 1 view .LVU116
  54:Core/Src/uartParser.c ****     strIndex++;
 464              		.loc 1 54 13 is_stmt 0 view .LVU117
 465 002e 934A     		ldr	r2, .L56
 466 0030 1378     		ldrb	r3, [r2]
 467 0032 0133     		adds	r3, r3, #1
 468 0034 DBB2     		uxtb	r3, r3
 469 0036 1370     		strb	r3, [r2]
 470              	.L25:
  46:Core/Src/uartParser.c ****   while (strIndex < strLen) {
 471              		.loc 1 46 19 is_stmt 1 view .LVU118
 472 0038 904B     		ldr	r3, .L56
 473 003a 1A78     		ldrb	r2, [r3]
 474 003c D2B2     		uxtb	r2, r2
 475 003e 6B46     		mov	r3, sp
 476 0040 0733     		adds	r3, r3, #7
 477 0042 1B78     		ldrb	r3, [r3]
 478 0044 DBB2     		uxtb	r3, r3
 479 0046 9A42     		cmp	r2, r3
 480 0048 1CD2     		bcs	.L52
  47:Core/Src/uartParser.c ****     if (tmpStr[strIndex] == ' ') {
 481              		.loc 1 47 5 view .LVU119
  47:Core/Src/uartParser.c ****     if (tmpStr[strIndex] == ' ') {
 482              		.loc 1 47 15 is_stmt 0 view .LVU120
 483 004a 8C4B     		ldr	r3, .L56
 484 004c 1B78     		ldrb	r3, [r3]
 485 004e DBB2     		uxtb	r3, r3
 486 0050 8D4A     		ldr	r2, .L56+12
 487 0052 D35C     		ldrb	r3, [r2, r3]
  47:Core/Src/uartParser.c ****     if (tmpStr[strIndex] == ' ') {
 488              		.loc 1 47 8 view .LVU121
 489 0054 202B     		cmp	r3, #32
 490 0056 E2D0     		beq	.L53
  51:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 491              		.loc 1 51 7 is_stmt 1 view .LVU122
  51:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 492              		.loc 1 51 42 is_stmt 0 view .LVU123
 493 0058 884B     		ldr	r3, .L56
 494 005a 1A78     		ldrb	r2, [r3]
 495 005c D2B2     		uxtb	r2, r2
  51:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 496              		.loc 1 51 20 view .LVU124
 497 005e 894B     		ldr	r3, .L56+8
 498 0060 1B78     		ldrb	r3, [r3]
 499 0062 8749     		ldr	r1, .L56+4
 500 0064 0878     		ldrb	r0, [r1]
 501 0066 C0B2     		uxtb	r0, r0
  51:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 502              		.loc 1 51 42 view .LVU125
 503 0068 874C     		ldr	r4, .L56+12
 504 006a A45C     		ldrb	r4, [r4, r2]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 17


 505 006c E4B2     		uxtb	r4, r4
  51:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 506              		.loc 1 51 34 view .LVU126
 507 006e 874A     		ldr	r2, .L56+16
 508 0070 9D00     		lsls	r5, r3, #2
 509 0072 5B19     		adds	r3, r3, r5
 510 0074 9B00     		lsls	r3, r3, #2
 511 0076 D218     		adds	r2, r2, r3
 512 0078 1454     		strb	r4, [r2, r0]
  52:Core/Src/uartParser.c ****       cmdStrIndex++;
 513              		.loc 1 52 7 is_stmt 1 view .LVU127
  52:Core/Src/uartParser.c ****       cmdStrIndex++;
 514              		.loc 1 52 18 is_stmt 0 view .LVU128
 515 007a 0B78     		ldrb	r3, [r1]
 516 007c 0133     		adds	r3, r3, #1
 517 007e DBB2     		uxtb	r3, r3
 518 0080 0B70     		strb	r3, [r1]
 519 0082 D4E7     		b	.L27
 520              	.L52:
  58:Core/Src/uartParser.c ****   if (strcmp(cmd[0], "led") == 0) {
 521              		.loc 1 58 3 is_stmt 1 view .LVU129
  58:Core/Src/uartParser.c ****   if (strcmp(cmd[0], "led") == 0) {
 522              		.loc 1 58 7 is_stmt 0 view .LVU130
 523 0084 8249     		ldr	r1, .L56+20
 524 0086 8148     		ldr	r0, .L56+16
 525 0088 FFF7FEFF 		bl	strcmp
 526              	.LVL36:
  58:Core/Src/uartParser.c ****   if (strcmp(cmd[0], "led") == 0) {
 527              		.loc 1 58 6 discriminator 1 view .LVU131
 528 008c 0028     		cmp	r0, #0
 529 008e 00D0     		beq	.LCB425
 530 0090 9EE0     		b	.L29	@long jump
 531              	.LCB425:
  59:Core/Src/uartParser.c ****     commandOut |= 0xA000;
 532              		.loc 1 59 5 is_stmt 1 view .LVU132
  59:Core/Src/uartParser.c ****     commandOut |= 0xA000;
 533              		.loc 1 59 16 is_stmt 0 view .LVU133
 534 0092 804A     		ldr	r2, .L56+24
 535 0094 1388     		ldrh	r3, [r2]
 536 0096 8049     		ldr	r1, .L56+28
 537 0098 0B43     		orrs	r3, r1
 538 009a 9BB2     		uxth	r3, r3
 539 009c 1380     		strh	r3, [r2]
  61:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "red") == 0) {
 540              		.loc 1 61 5 is_stmt 1 view .LVU134
  61:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "red") == 0) {
 541              		.loc 1 61 9 is_stmt 0 view .LVU135
 542 009e 7F49     		ldr	r1, .L56+32
 543 00a0 7F48     		ldr	r0, .L56+36
 544 00a2 FFF7FEFF 		bl	strcmp
 545              	.LVL37:
  61:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "red") == 0) {
 546              		.loc 1 61 8 discriminator 1 view .LVU136
 547 00a6 0028     		cmp	r0, #0
 548 00a8 1DD1     		bne	.L30
  62:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 549              		.loc 1 62 7 is_stmt 1 view .LVU137
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 18


  62:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 550              		.loc 1 62 18 is_stmt 0 view .LVU138
 551 00aa 7A4A     		ldr	r2, .L56+24
 552 00ac 1388     		ldrh	r3, [r2]
 553 00ae 8021     		movs	r1, #128
 554 00b0 4900     		lsls	r1, r1, #1
 555 00b2 0B43     		orrs	r3, r1
 556 00b4 1380     		strh	r3, [r2]
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
 557              		.loc 1 39 11 view .LVU139
 558 00b6 0024     		movs	r4, #0
 559              	.L31:
 560              	.LVL38:
  75:Core/Src/uartParser.c ****     if (strcmp(cmd[2], "on") == 0) {
 561              		.loc 1 75 5 is_stmt 1 view .LVU140
  75:Core/Src/uartParser.c ****     if (strcmp(cmd[2], "on") == 0) {
 562              		.loc 1 75 9 is_stmt 0 view .LVU141
 563 00b8 7A49     		ldr	r1, .L56+40
 564 00ba 7B48     		ldr	r0, .L56+44
 565 00bc FFF7FEFF 		bl	strcmp
 566              	.LVL39:
  75:Core/Src/uartParser.c ****     if (strcmp(cmd[2], "on") == 0) {
 567              		.loc 1 75 8 discriminator 1 view .LVU142
 568 00c0 0028     		cmp	r0, #0
 569 00c2 4AD1     		bne	.L35
  76:Core/Src/uartParser.c ****       commandOut |= 0x0010;
 570              		.loc 1 76 7 is_stmt 1 view .LVU143
  76:Core/Src/uartParser.c ****       commandOut |= 0x0010;
 571              		.loc 1 76 18 is_stmt 0 view .LVU144
 572 00c4 734A     		ldr	r2, .L56+24
 573 00c6 1388     		ldrh	r3, [r2]
 574 00c8 1021     		movs	r1, #16
 575 00ca 0B43     		orrs	r3, r1
 576 00cc 9BB2     		uxth	r3, r3
 577 00ce 1380     		strh	r3, [r2]
  89:Core/Src/uartParser.c ****     if (speed == 255)
 578              		.loc 1 89 5 is_stmt 1 view .LVU145
 579              	.LVL40:
 580              	.L36:
  92:Core/Src/uartParser.c ****       if (speed > 15) {
 581              		.loc 1 92 7 view .LVU146
  92:Core/Src/uartParser.c ****       if (speed > 15) {
 582              		.loc 1 92 10 is_stmt 0 view .LVU147
 583 00d0 0F28     		cmp	r0, #15
 584 00d2 00D9     		bls	.LCB479
 585 00d4 72E0     		b	.L54	@long jump
 586              	.LCB479:
  97:Core/Src/uartParser.c ****         commandOut |= speed;
 587              		.loc 1 97 9 is_stmt 1 view .LVU148
  97:Core/Src/uartParser.c ****         commandOut |= speed;
 588              		.loc 1 97 20 is_stmt 0 view .LVU149
 589 00d6 6F4A     		ldr	r2, .L56+24
 590 00d8 1388     		ldrh	r3, [r2]
 591 00da 0343     		orrs	r3, r0
 592 00dc 9BB2     		uxth	r3, r3
 593 00de 1380     		strh	r3, [r2]
 594              	.L39:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 19


 595              	.LVL41:
 126:Core/Src/uartParser.c ****   return error;
 596              		.loc 1 126 3 is_stmt 1 view .LVU150
 127:Core/Src/uartParser.c **** }
 597              		.loc 1 127 1 is_stmt 0 view .LVU151
 598 00e0 2000     		movs	r0, r4
 599 00e2 03B0     		add	sp, sp, #12
 600              		@ sp needed
 601              	.LVL42:
 127:Core/Src/uartParser.c **** }
 602              		.loc 1 127 1 view .LVU152
 603 00e4 30BD     		pop	{r4, r5, pc}
 604              	.LVL43:
 605              	.L30:
  63:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "green") == 0) {
 606              		.loc 1 63 12 is_stmt 1 view .LVU153
  63:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "green") == 0) {
 607              		.loc 1 63 16 is_stmt 0 view .LVU154
 608 00e6 7149     		ldr	r1, .L56+48
 609 00e8 6D48     		ldr	r0, .L56+36
 610 00ea FFF7FEFF 		bl	strcmp
 611              	.LVL44:
  63:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "green") == 0) {
 612              		.loc 1 63 15 discriminator 1 view .LVU155
 613 00ee 0028     		cmp	r0, #0
 614 00f0 07D1     		bne	.L32
  64:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 615              		.loc 1 64 7 is_stmt 1 view .LVU156
  64:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 616              		.loc 1 64 18 is_stmt 0 view .LVU157
 617 00f2 684A     		ldr	r2, .L56+24
 618 00f4 1388     		ldrh	r3, [r2]
 619 00f6 8021     		movs	r1, #128
 620 00f8 8900     		lsls	r1, r1, #2
 621 00fa 0B43     		orrs	r3, r1
 622 00fc 1380     		strh	r3, [r2]
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
 623              		.loc 1 39 11 view .LVU158
 624 00fe 0024     		movs	r4, #0
 625 0100 DAE7     		b	.L31
 626              	.L32:
  65:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "blue") == 0) {
 627              		.loc 1 65 12 is_stmt 1 view .LVU159
  65:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "blue") == 0) {
 628              		.loc 1 65 16 is_stmt 0 view .LVU160
 629 0102 6B49     		ldr	r1, .L56+52
 630 0104 6648     		ldr	r0, .L56+36
 631 0106 FFF7FEFF 		bl	strcmp
 632              	.LVL45:
  65:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "blue") == 0) {
 633              		.loc 1 65 15 discriminator 1 view .LVU161
 634 010a 0028     		cmp	r0, #0
 635 010c 07D1     		bne	.L33
  66:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 636              		.loc 1 66 7 is_stmt 1 view .LVU162
  66:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 637              		.loc 1 66 18 is_stmt 0 view .LVU163
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 20


 638 010e 614A     		ldr	r2, .L56+24
 639 0110 1388     		ldrh	r3, [r2]
 640 0112 C021     		movs	r1, #192
 641 0114 8900     		lsls	r1, r1, #2
 642 0116 0B43     		orrs	r3, r1
 643 0118 1380     		strh	r3, [r2]
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
 644              		.loc 1 39 11 view .LVU164
 645 011a 0024     		movs	r4, #0
 646 011c CCE7     		b	.L31
 647              	.L33:
  67:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "orange") == 0) {
 648              		.loc 1 67 12 is_stmt 1 view .LVU165
  67:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "orange") == 0) {
 649              		.loc 1 67 16 is_stmt 0 view .LVU166
 650 011e 6549     		ldr	r1, .L56+56
 651 0120 5F48     		ldr	r0, .L56+36
 652 0122 FFF7FEFF 		bl	strcmp
 653              	.LVL46:
  67:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "orange") == 0) {
 654              		.loc 1 67 15 discriminator 1 view .LVU167
 655 0126 0028     		cmp	r0, #0
 656 0128 07D1     		bne	.L34
  68:Core/Src/uartParser.c ****       commandOut |= 0x0400;
 657              		.loc 1 68 7 is_stmt 1 view .LVU168
  68:Core/Src/uartParser.c ****       commandOut |= 0x0400;
 658              		.loc 1 68 18 is_stmt 0 view .LVU169
 659 012a 5A4A     		ldr	r2, .L56+24
 660 012c 1388     		ldrh	r3, [r2]
 661 012e 8021     		movs	r1, #128
 662 0130 C900     		lsls	r1, r1, #3
 663 0132 0B43     		orrs	r3, r1
 664 0134 1380     		strh	r3, [r2]
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
 665              		.loc 1 39 11 view .LVU170
 666 0136 0024     		movs	r4, #0
 667 0138 BEE7     		b	.L31
 668              	.L34:
  69:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "all") == 0) {
 669              		.loc 1 69 12 is_stmt 1 view .LVU171
  69:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "all") == 0) {
 670              		.loc 1 69 16 is_stmt 0 view .LVU172
 671 013a 5F49     		ldr	r1, .L56+60
 672 013c 5848     		ldr	r0, .L56+36
 673 013e FFF7FEFF 		bl	strcmp
 674              	.LVL47:
  69:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "all") == 0) {
 675              		.loc 1 69 15 discriminator 1 view .LVU173
 676 0142 0028     		cmp	r0, #0
 677 0144 07D1     		bne	.L46
  70:Core/Src/uartParser.c ****       commandOut |= 0x0500;
 678              		.loc 1 70 7 is_stmt 1 view .LVU174
  70:Core/Src/uartParser.c ****       commandOut |= 0x0500;
 679              		.loc 1 70 18 is_stmt 0 view .LVU175
 680 0146 534A     		ldr	r2, .L56+24
 681 0148 1388     		ldrh	r3, [r2]
 682 014a A021     		movs	r1, #160
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 21


 683 014c C900     		lsls	r1, r1, #3
 684 014e 0B43     		orrs	r3, r1
 685 0150 1380     		strh	r3, [r2]
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
 686              		.loc 1 39 11 view .LVU176
 687 0152 0024     		movs	r4, #0
 688 0154 B0E7     		b	.L31
 689              	.L46:
  72:Core/Src/uartParser.c ****       error = 1;
 690              		.loc 1 72 13 view .LVU177
 691 0156 0124     		movs	r4, #1
 692 0158 AEE7     		b	.L31
 693              	.LVL48:
 694              	.L35:
  77:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "off") == 0) {
 695              		.loc 1 77 12 is_stmt 1 view .LVU178
  77:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "off") == 0) {
 696              		.loc 1 77 16 is_stmt 0 view .LVU179
 697 015a 5849     		ldr	r1, .L56+64
 698 015c 5248     		ldr	r0, .L56+44
 699 015e FFF7FEFF 		bl	strcmp
 700              	.LVL49:
  77:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "off") == 0) {
 701              		.loc 1 77 15 discriminator 1 view .LVU180
 702 0162 0028     		cmp	r0, #0
 703 0164 06D1     		bne	.L37
  78:Core/Src/uartParser.c ****       commandOut |= 0x0020;
 704              		.loc 1 78 7 is_stmt 1 view .LVU181
  78:Core/Src/uartParser.c ****       commandOut |= 0x0020;
 705              		.loc 1 78 18 is_stmt 0 view .LVU182
 706 0166 4B4A     		ldr	r2, .L56+24
 707 0168 1388     		ldrh	r3, [r2]
 708 016a 2021     		movs	r1, #32
 709 016c 0B43     		orrs	r3, r1
 710 016e 9BB2     		uxth	r3, r3
 711 0170 1380     		strh	r3, [r2]
  89:Core/Src/uartParser.c ****     if (speed == 255)
 712              		.loc 1 89 5 is_stmt 1 view .LVU183
 713 0172 ADE7     		b	.L36
 714              	.L37:
  79:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "toggle") == 0) {
 715              		.loc 1 79 12 view .LVU184
  79:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "toggle") == 0) {
 716              		.loc 1 79 16 is_stmt 0 view .LVU185
 717 0174 5249     		ldr	r1, .L56+68
 718 0176 4C48     		ldr	r0, .L56+44
 719 0178 FFF7FEFF 		bl	strcmp
 720              	.LVL50:
  79:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "toggle") == 0) {
 721              		.loc 1 79 15 discriminator 1 view .LVU186
 722 017c 0028     		cmp	r0, #0
 723 017e 06D1     		bne	.L38
  80:Core/Src/uartParser.c ****       commandOut |= 0x0030;
 724              		.loc 1 80 7 is_stmt 1 view .LVU187
  80:Core/Src/uartParser.c ****       commandOut |= 0x0030;
 725              		.loc 1 80 18 is_stmt 0 view .LVU188
 726 0180 444A     		ldr	r2, .L56+24
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 22


 727 0182 1388     		ldrh	r3, [r2]
 728 0184 3021     		movs	r1, #48
 729 0186 0B43     		orrs	r3, r1
 730 0188 9BB2     		uxth	r3, r3
 731 018a 1380     		strh	r3, [r2]
  89:Core/Src/uartParser.c ****     if (speed == 255)
 732              		.loc 1 89 5 is_stmt 1 view .LVU189
 733 018c A0E7     		b	.L36
 734              	.L38:
  81:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "blink") == 0) {
 735              		.loc 1 81 12 view .LVU190
  81:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "blink") == 0) {
 736              		.loc 1 81 16 is_stmt 0 view .LVU191
 737 018e 4D49     		ldr	r1, .L56+72
 738 0190 4548     		ldr	r0, .L56+44
 739 0192 FFF7FEFF 		bl	strcmp
 740              	.LVL51:
  81:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "blink") == 0) {
 741              		.loc 1 81 15 discriminator 1 view .LVU192
 742 0196 0028     		cmp	r0, #0
 743 0198 0DD1     		bne	.L47
  82:Core/Src/uartParser.c ****       commandOut |= 0x0040;
 744              		.loc 1 82 7 is_stmt 1 view .LVU193
  82:Core/Src/uartParser.c ****       commandOut |= 0x0040;
 745              		.loc 1 82 18 is_stmt 0 view .LVU194
 746 019a 3E4A     		ldr	r2, .L56+24
 747 019c 1388     		ldrh	r3, [r2]
 748 019e 4021     		movs	r1, #64
 749 01a0 0B43     		orrs	r3, r1
 750 01a2 9BB2     		uxth	r3, r3
 751 01a4 1380     		strh	r3, [r2]
  83:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[3]);
 752              		.loc 1 83 7 is_stmt 1 view .LVU195
  83:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[3]);
 753              		.loc 1 83 15 is_stmt 0 view .LVU196
 754 01a6 4848     		ldr	r0, .L56+76
 755 01a8 FFF7FEFF 		bl	convertSpeed
 756              	.LVL52:
  89:Core/Src/uartParser.c ****     if (speed == 255)
 757              		.loc 1 89 5 is_stmt 1 view .LVU197
  89:Core/Src/uartParser.c ****     if (speed == 255)
 758              		.loc 1 89 8 is_stmt 0 view .LVU198
 759 01ac FF28     		cmp	r0, #255
 760 01ae 00D0     		beq	.LCB665
 761 01b0 8EE7     		b	.L36	@long jump
 762              	.LCB665:
  90:Core/Src/uartParser.c ****       error = 1;
 763              		.loc 1 90 13 view .LVU199
 764 01b2 0124     		movs	r4, #1
 765              	.LVL53:
  90:Core/Src/uartParser.c ****       error = 1;
 766              		.loc 1 90 13 view .LVU200
 767 01b4 94E7     		b	.L39
 768              	.LVL54:
 769              	.L47:
  40:Core/Src/uartParser.c ****   uint8_t speed = 0;
 770              		.loc 1 40 11 view .LVU201
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 23


 771 01b6 0020     		movs	r0, #0
  85:Core/Src/uartParser.c ****       error = 1;
 772              		.loc 1 85 13 view .LVU202
 773 01b8 0124     		movs	r4, #1
 774              	.LVL55:
  85:Core/Src/uartParser.c ****       error = 1;
 775              		.loc 1 85 13 view .LVU203
 776 01ba 89E7     		b	.L36
 777              	.LVL56:
 778              	.L54:
  93:Core/Src/uartParser.c ****         transmitCharArray("Blink speed limited to 1500 ms");
 779              		.loc 1 93 9 is_stmt 1 view .LVU204
 780 01bc 4348     		ldr	r0, .L56+80
 781 01be FFF7FEFF 		bl	transmitCharArray
 782              	.LVL57:
  94:Core/Src/uartParser.c ****         commandOut |= 15U;
 783              		.loc 1 94 9 view .LVU205
  94:Core/Src/uartParser.c ****         commandOut |= 15U;
 784              		.loc 1 94 20 is_stmt 0 view .LVU206
 785 01c2 344A     		ldr	r2, .L56+24
 786 01c4 1388     		ldrh	r3, [r2]
 787 01c6 0F21     		movs	r1, #15
 788 01c8 0B43     		orrs	r3, r1
 789 01ca 9BB2     		uxth	r3, r3
 790 01cc 1380     		strh	r3, [r2]
 791 01ce 87E7     		b	.L39
 792              	.LVL58:
 793              	.L29:
  99:Core/Src/uartParser.c ****   } else if (strcmp(cmd[0], "motor") == 0) {
 794              		.loc 1 99 10 is_stmt 1 view .LVU207
  99:Core/Src/uartParser.c ****   } else if (strcmp(cmd[0], "motor") == 0) {
 795              		.loc 1 99 14 is_stmt 0 view .LVU208
 796 01d0 3F49     		ldr	r1, .L56+84
 797 01d2 2E48     		ldr	r0, .L56+16
 798 01d4 FFF7FEFF 		bl	strcmp
 799              	.LVL59:
  99:Core/Src/uartParser.c ****   } else if (strcmp(cmd[0], "motor") == 0) {
 800              		.loc 1 99 13 discriminator 1 view .LVU209
 801 01d8 0028     		cmp	r0, #0
 802 01da 4AD1     		bne	.L49
 100:Core/Src/uartParser.c ****     commandOut |= 0xB000;
 803              		.loc 1 100 5 is_stmt 1 view .LVU210
 100:Core/Src/uartParser.c ****     commandOut |= 0xB000;
 804              		.loc 1 100 16 is_stmt 0 view .LVU211
 805 01dc 2D4A     		ldr	r2, .L56+24
 806 01de 1388     		ldrh	r3, [r2]
 807 01e0 3C49     		ldr	r1, .L56+88
 808 01e2 0B43     		orrs	r3, r1
 809 01e4 9BB2     		uxth	r3, r3
 810 01e6 1380     		strh	r3, [r2]
 102:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "on") == 0) {
 811              		.loc 1 102 5 is_stmt 1 view .LVU212
 102:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "on") == 0) {
 812              		.loc 1 102 9 is_stmt 0 view .LVU213
 813 01e8 2E49     		ldr	r1, .L56+40
 814 01ea 2D48     		ldr	r0, .L56+36
 815 01ec FFF7FEFF 		bl	strcmp
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 24


 816              	.LVL60:
 102:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "on") == 0) {
 817              		.loc 1 102 8 discriminator 1 view .LVU214
 818 01f0 0028     		cmp	r0, #0
 819 01f2 13D1     		bne	.L41
 103:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 820              		.loc 1 103 7 is_stmt 1 view .LVU215
 103:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 821              		.loc 1 103 18 is_stmt 0 view .LVU216
 822 01f4 274A     		ldr	r2, .L56+24
 823 01f6 1388     		ldrh	r3, [r2]
 824 01f8 8021     		movs	r1, #128
 825 01fa 4900     		lsls	r1, r1, #1
 826 01fc 0B43     		orrs	r3, r1
 827 01fe 1380     		strh	r3, [r2]
 104:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 828              		.loc 1 104 7 is_stmt 1 view .LVU217
 104:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 829              		.loc 1 104 15 is_stmt 0 view .LVU218
 830 0200 2948     		ldr	r0, .L56+44
 831 0202 FFF7FEFF 		bl	convertSpeed
 832              	.LVL61:
 833              	.L42:
 114:Core/Src/uartParser.c ****     if (speed == 255)
 834              		.loc 1 114 5 is_stmt 1 view .LVU219
 114:Core/Src/uartParser.c ****     if (speed == 255)
 835              		.loc 1 114 8 is_stmt 0 view .LVU220
 836 0206 FF28     		cmp	r0, #255
 837 0208 35D0     		beq	.L51
 838 020a 0024     		movs	r4, #0
 839              	.LVL62:
 840              	.L44:
 117:Core/Src/uartParser.c ****       if (speed > 100) {
 841              		.loc 1 117 7 is_stmt 1 view .LVU221
 117:Core/Src/uartParser.c ****       if (speed > 100) {
 842              		.loc 1 117 10 is_stmt 0 view .LVU222
 843 020c 6428     		cmp	r0, #100
 844 020e 26D8     		bhi	.L55
 122:Core/Src/uartParser.c ****         commandOut |= speed;
 845              		.loc 1 122 9 is_stmt 1 view .LVU223
 122:Core/Src/uartParser.c ****         commandOut |= speed;
 846              		.loc 1 122 20 is_stmt 0 view .LVU224
 847 0210 204A     		ldr	r2, .L56+24
 848 0212 1388     		ldrh	r3, [r2]
 849 0214 0343     		orrs	r3, r0
 850 0216 9BB2     		uxth	r3, r3
 851 0218 1380     		strh	r3, [r2]
 852 021a 61E7     		b	.L39
 853              	.LVL63:
 854              	.L41:
 105:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "off") == 0) {
 855              		.loc 1 105 12 is_stmt 1 view .LVU225
 105:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "off") == 0) {
 856              		.loc 1 105 16 is_stmt 0 view .LVU226
 857 021c 2749     		ldr	r1, .L56+64
 858 021e 2048     		ldr	r0, .L56+36
 859 0220 FFF7FEFF 		bl	strcmp
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 25


 860              	.LVL64:
 105:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "off") == 0) {
 861              		.loc 1 105 15 discriminator 1 view .LVU227
 862 0224 0028     		cmp	r0, #0
 863 0226 07D1     		bne	.L43
 106:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 864              		.loc 1 106 7 is_stmt 1 view .LVU228
 106:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 865              		.loc 1 106 18 is_stmt 0 view .LVU229
 866 0228 1A4A     		ldr	r2, .L56+24
 867 022a 1388     		ldrh	r3, [r2]
 868 022c 8021     		movs	r1, #128
 869 022e 8900     		lsls	r1, r1, #2
 870 0230 0B43     		orrs	r3, r1
 871 0232 1380     		strh	r3, [r2]
 114:Core/Src/uartParser.c ****     if (speed == 255)
 872              		.loc 1 114 5 is_stmt 1 view .LVU230
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
 873              		.loc 1 39 11 is_stmt 0 view .LVU231
 874 0234 0024     		movs	r4, #0
 875 0236 E9E7     		b	.L44
 876              	.L43:
 107:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "speed") == 0) {
 877              		.loc 1 107 12 is_stmt 1 view .LVU232
 107:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "speed") == 0) {
 878              		.loc 1 107 16 is_stmt 0 view .LVU233
 879 0238 2749     		ldr	r1, .L56+92
 880 023a 1948     		ldr	r0, .L56+36
 881 023c FFF7FEFF 		bl	strcmp
 882              	.LVL65:
 107:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "speed") == 0) {
 883              		.loc 1 107 15 discriminator 1 view .LVU234
 884 0240 0028     		cmp	r0, #0
 885 0242 09D1     		bne	.L50
 108:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 886              		.loc 1 108 7 is_stmt 1 view .LVU235
 108:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 887              		.loc 1 108 18 is_stmt 0 view .LVU236
 888 0244 134A     		ldr	r2, .L56+24
 889 0246 1388     		ldrh	r3, [r2]
 890 0248 C021     		movs	r1, #192
 891 024a 8900     		lsls	r1, r1, #2
 892 024c 0B43     		orrs	r3, r1
 893 024e 1380     		strh	r3, [r2]
 109:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 894              		.loc 1 109 7 is_stmt 1 view .LVU237
 109:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 895              		.loc 1 109 15 is_stmt 0 view .LVU238
 896 0250 1548     		ldr	r0, .L56+44
 897 0252 FFF7FEFF 		bl	convertSpeed
 898              	.LVL66:
 109:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 899              		.loc 1 109 15 view .LVU239
 900 0256 D6E7     		b	.L42
 901              	.LVL67:
 902              	.L50:
  40:Core/Src/uartParser.c ****   uint8_t speed = 0;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 26


 903              		.loc 1 40 11 view .LVU240
 904 0258 0020     		movs	r0, #0
 111:Core/Src/uartParser.c ****       error = 1;
 905              		.loc 1 111 13 view .LVU241
 906 025a 0124     		movs	r4, #1
 907 025c D6E7     		b	.L44
 908              	.LVL68:
 909              	.L55:
 118:Core/Src/uartParser.c ****         transmitCharArray("Motor speed limited to 100 RPM");
 910              		.loc 1 118 9 is_stmt 1 view .LVU242
 911 025e 1F48     		ldr	r0, .L56+96
 912 0260 FFF7FEFF 		bl	transmitCharArray
 913              	.LVL69:
 119:Core/Src/uartParser.c ****         commandOut |= 100U;
 914              		.loc 1 119 9 view .LVU243
 119:Core/Src/uartParser.c ****         commandOut |= 100U;
 915              		.loc 1 119 20 is_stmt 0 view .LVU244
 916 0264 0B4A     		ldr	r2, .L56+24
 917 0266 1388     		ldrh	r3, [r2]
 918 0268 6421     		movs	r1, #100
 919 026a 0B43     		orrs	r3, r1
 920 026c 9BB2     		uxth	r3, r3
 921 026e 1380     		strh	r3, [r2]
 922 0270 36E7     		b	.L39
 923              	.LVL70:
 924              	.L49:
 124:Core/Src/uartParser.c ****     error = 1;
 925              		.loc 1 124 11 view .LVU245
 926 0272 0124     		movs	r4, #1
 927 0274 34E7     		b	.L39
 928              	.LVL71:
 929              	.L51:
 115:Core/Src/uartParser.c ****       error = 1;
 930              		.loc 1 115 13 view .LVU246
 931 0276 0124     		movs	r4, #1
 932 0278 32E7     		b	.L39
 933              	.L57:
 934 027a C046     		.align	2
 935              	.L56:
 936 027c 00000000 		.word	strIndex
 937 0280 00000000 		.word	cmdStrIndex
 938 0284 00000000 		.word	cmdIndex
 939 0288 00000000 		.word	tmpStr
 940 028c 00000000 		.word	cmd
 941 0290 00000000 		.word	.LC5
 942 0294 00000000 		.word	commandOut
 943 0298 00A0FFFF 		.word	-24576
 944 029c 04000000 		.word	.LC8
 945 02a0 14000000 		.word	cmd+20
 946 02a4 24000000 		.word	.LC19
 947 02a8 28000000 		.word	cmd+40
 948 02ac 08000000 		.word	.LC11
 949 02b0 10000000 		.word	.LC13
 950 02b4 18000000 		.word	.LC15
 951 02b8 20000000 		.word	.LC17
 952 02bc 28000000 		.word	.LC22
 953 02c0 2C000000 		.word	.LC24
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 27


 954 02c4 34000000 		.word	.LC26
 955 02c8 3C000000 		.word	cmd+60
 956 02cc 3C000000 		.word	.LC29
 957 02d0 5C000000 		.word	.LC31
 958 02d4 00B0FFFF 		.word	-20480
 959 02d8 64000000 		.word	.LC33
 960 02dc 6C000000 		.word	.LC35
 961              		.cfi_endproc
 962              	.LFE44:
 964              		.section	.rodata.StartParseUartTask.str1.4,"aMS",%progbits,1
 965              		.align	2
 966              	.LC40:
 967 0000 50757368 		.ascii	"Push command to queue success.\012\000"
 967      20636F6D 
 967      6D616E64 
 967      20746F20 
 967      71756575 
 968              		.align	2
 969              	.LC43:
 970 0020 4661696C 		.ascii	"Fail to push command to queue, try again.\012\000"
 970      20746F20 
 970      70757368 
 970      20636F6D 
 970      6D616E64 
 971 004b 00       		.align	2
 972              	.LC45:
 973 004c 436F6D6D 		.ascii	"Command not recognized\000"
 973      616E6420 
 973      6E6F7420 
 973      7265636F 
 973      676E697A 
 974 0063 00       		.align	2
 975              	.LC49:
 976 0064 436F6D6D 		.ascii	"Command is too long!\000"
 976      616E6420 
 976      69732074 
 976      6F6F206C 
 976      6F6E6721 
 977              		.section	.text.StartParseUartTask,"ax",%progbits
 978              		.align	1
 979              		.global	StartParseUartTask
 980              		.syntax unified
 981              		.code	16
 982              		.thumb_func
 984              	StartParseUartTask:
 985              	.LFB46:
 171:Core/Src/uartParser.c **** void StartParseUartTask(void *argument) {
 986              		.loc 1 171 41 is_stmt 1 view -0
 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 8
 989              		@ frame_needed = 0, uses_anonymous_args = 0
 990              	.LVL72:
 171:Core/Src/uartParser.c **** void StartParseUartTask(void *argument) {
 991              		.loc 1 171 41 is_stmt 0 view .LVU248
 992 0000 10B5     		push	{r4, lr}
 993              	.LCFI6:
 994              		.cfi_def_cfa_offset 8
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 28


 995              		.cfi_offset 4, -8
 996              		.cfi_offset 14, -4
 997 0002 82B0     		sub	sp, sp, #8
 998              	.LCFI7:
 999              		.cfi_def_cfa_offset 16
 1000 0004 41E0     		b	.L73
 1001              	.LVL73:
 1002              	.L75:
 1003              	.LBB8:
 1004              	.LBB9:
 186:Core/Src/uartParser.c ****         uint8_t error = parseCmd();
 1005              		.loc 1 186 9 is_stmt 1 view .LVU249
 186:Core/Src/uartParser.c ****         uint8_t error = parseCmd();
 1006              		.loc 1 186 25 is_stmt 0 view .LVU250
 1007 0006 FFF7FEFF 		bl	parseCmd
 1008              	.LVL74:
 188:Core/Src/uartParser.c ****         if (error == 0) {
 1009              		.loc 1 188 9 is_stmt 1 view .LVU251
 188:Core/Src/uartParser.c ****         if (error == 0) {
 1010              		.loc 1 188 12 is_stmt 0 view .LVU252
 1011 000a 0028     		cmp	r0, #0
 1012 000c 18D1     		bne	.L62
 190:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 1013              		.loc 1 190 11 is_stmt 1 view .LVU253
 190:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 1014              		.loc 1 190 15 is_stmt 0 view .LVU254
 1015 000e 474B     		ldr	r3, .L76
 1016 0010 1988     		ldrh	r1, [r3]
 1017 0012 89B2     		uxth	r1, r1
 1018 0014 464B     		ldr	r3, .L76+4
 1019 0016 1868     		ldr	r0, [r3]
 1020              	.LVL75:
 190:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 1021              		.loc 1 190 15 view .LVU255
 1022 0018 FFF7FEFF 		bl	queuePush
 1023              	.LVL76:
 190:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 1024              		.loc 1 190 14 discriminator 1 view .LVU256
 1025 001c 0130     		adds	r0, r0, #1
 1026 001e 0BD0     		beq	.L63
 191:Core/Src/uartParser.c ****             transmitCharArray("Push command to queue success.\n");
 1027              		.loc 1 191 13 is_stmt 1 view .LVU257
 1028 0020 4448     		ldr	r0, .L76+8
 1029 0022 FFF7FEFF 		bl	transmitCharArray
 1030              	.LVL77:
 192:Core/Src/uartParser.c ****             transmitCharArray(tmpStr);
 1031              		.loc 1 192 13 view .LVU258
 1032 0026 4448     		ldr	r0, .L76+12
 1033 0028 FFF7FEFF 		bl	transmitCharArray
 1034              	.LVL78:
 193:Core/Src/uartParser.c ****             sendUint16BinToUart(commandOut);
 1035              		.loc 1 193 13 view .LVU259
 1036 002c 3F4B     		ldr	r3, .L76
 1037 002e 1888     		ldrh	r0, [r3]
 1038 0030 80B2     		uxth	r0, r0
 1039 0032 FFF7FEFF 		bl	sendUint16BinToUart
 1040              	.LVL79:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 29


 1041 0036 09E0     		b	.L64
 1042              	.L63:
 195:Core/Src/uartParser.c ****             transmitCharArray("Fail to push command to queue, try again.\n");
 1043              		.loc 1 195 13 view .LVU260
 1044 0038 4048     		ldr	r0, .L76+16
 1045 003a FFF7FEFF 		bl	transmitCharArray
 1046              	.LVL80:
 1047 003e 05E0     		b	.L64
 1048              	.LVL81:
 1049              	.L62:
 199:Core/Src/uartParser.c ****           transmitCharArray("Command not recognized");
 1050              		.loc 1 199 11 view .LVU261
 1051 0040 3F48     		ldr	r0, .L76+20
 1052              	.LVL82:
 199:Core/Src/uartParser.c ****           transmitCharArray("Command not recognized");
 1053              		.loc 1 199 11 is_stmt 0 view .LVU262
 1054 0042 FFF7FEFF 		bl	transmitCharArray
 1055              	.LVL83:
 200:Core/Src/uartParser.c ****           transmitCharArray(tmpStr);
 1056              		.loc 1 200 11 is_stmt 1 view .LVU263
 1057 0046 3C48     		ldr	r0, .L76+12
 1058 0048 FFF7FEFF 		bl	transmitCharArray
 1059              	.LVL84:
 1060              	.L64:
 204:Core/Src/uartParser.c ****         strIndex = 0;
 1061              		.loc 1 204 9 view .LVU264
 204:Core/Src/uartParser.c ****         strIndex = 0;
 1062              		.loc 1 204 18 is_stmt 0 view .LVU265
 1063 004c 3D4B     		ldr	r3, .L76+24
 1064 004e 0022     		movs	r2, #0
 1065 0050 1A70     		strb	r2, [r3]
 205:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1066              		.loc 1 205 9 is_stmt 1 view .LVU266
 1067              	.LBB10:
 205:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1068              		.loc 1 205 14 view .LVU267
 1069              	.LVL85:
 205:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1070              		.loc 1 205 9 is_stmt 0 view .LVU268
 1071 0052 0DE0     		b	.L65
 1072              	.LVL86:
 1073              	.L66:
 206:Core/Src/uartParser.c ****           tmpStr[i] = '\0';
 1074              		.loc 1 206 11 is_stmt 1 view .LVU269
 206:Core/Src/uartParser.c ****           tmpStr[i] = '\0';
 1075              		.loc 1 206 21 is_stmt 0 view .LVU270
 1076 0054 384B     		ldr	r3, .L76+12
 1077 0056 0021     		movs	r1, #0
 1078 0058 9954     		strb	r1, [r3, r2]
 207:Core/Src/uartParser.c ****           cmd[0][i] = '\0';
 1079              		.loc 1 207 11 is_stmt 1 view .LVU271
 207:Core/Src/uartParser.c ****           cmd[0][i] = '\0';
 1080              		.loc 1 207 21 is_stmt 0 view .LVU272
 1081 005a 3B4B     		ldr	r3, .L76+28
 1082 005c 9954     		strb	r1, [r3, r2]
 208:Core/Src/uartParser.c ****           cmd[1][i] = '\0';
 1083              		.loc 1 208 11 is_stmt 1 view .LVU273
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 30


 208:Core/Src/uartParser.c ****           cmd[1][i] = '\0';
 1084              		.loc 1 208 21 is_stmt 0 view .LVU274
 1085 005e 9B18     		adds	r3, r3, r2
 1086 0060 1975     		strb	r1, [r3, #20]
 209:Core/Src/uartParser.c ****           cmd[2][i] = '\0';
 1087              		.loc 1 209 11 is_stmt 1 view .LVU275
 209:Core/Src/uartParser.c ****           cmd[2][i] = '\0';
 1088              		.loc 1 209 21 is_stmt 0 view .LVU276
 1089 0062 1800     		movs	r0, r3
 1090 0064 2830     		adds	r0, r0, #40
 1091 0066 0170     		strb	r1, [r0]
 210:Core/Src/uartParser.c ****           cmd[3][i] = '\0';
 1092              		.loc 1 210 11 is_stmt 1 view .LVU277
 210:Core/Src/uartParser.c ****           cmd[3][i] = '\0';
 1093              		.loc 1 210 21 is_stmt 0 view .LVU278
 1094 0068 3C33     		adds	r3, r3, #60
 1095 006a 1970     		strb	r1, [r3]
 205:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1096              		.loc 1 205 47 is_stmt 1 discriminator 3 view .LVU279
 1097 006c 0132     		adds	r2, r2, #1
 1098              	.LVL87:
 205:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1099              		.loc 1 205 47 is_stmt 0 discriminator 3 view .LVU280
 1100 006e D2B2     		uxtb	r2, r2
 1101              	.LVL88:
 1102              	.L65:
 205:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1103              		.loc 1 205 31 is_stmt 1 discriminator 1 view .LVU281
 1104 0070 132A     		cmp	r2, #19
 1105 0072 EFD9     		bls	.L66
 1106              	.LBE10:
 214:Core/Src/uartParser.c ****         commandOut = 0;
 1107              		.loc 1 214 9 view .LVU282
 214:Core/Src/uartParser.c ****         commandOut = 0;
 1108              		.loc 1 214 20 is_stmt 0 view .LVU283
 1109 0074 2D4B     		ldr	r3, .L76
 1110 0076 0022     		movs	r2, #0
 1111              	.LVL89:
 214:Core/Src/uartParser.c ****         commandOut = 0;
 1112              		.loc 1 214 20 view .LVU284
 1113 0078 1A80     		strh	r2, [r3]
 215:Core/Src/uartParser.c ****         break;
 1114              		.loc 1 215 9 is_stmt 1 view .LVU285
 1115              	.LVL90:
 1116              	.L67:
 215:Core/Src/uartParser.c ****         break;
 1117              		.loc 1 215 9 is_stmt 0 view .LVU286
 1118              	.LBE9:
 1119              	.LBE8:
 237:Core/Src/uartParser.c ****     uartStatus = 0;
 1120              		.loc 1 237 5 is_stmt 1 view .LVU287
 237:Core/Src/uartParser.c ****     uartStatus = 0;
 1121              		.loc 1 237 16 is_stmt 0 view .LVU288
 1122 007a 344B     		ldr	r3, .L76+32
 1123 007c 0022     		movs	r2, #0
 1124 007e 1A70     		strb	r2, [r3]
 239:Core/Src/uartParser.c ****     USART3->CR1 |= USART_CR1_RXNEIE;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 31


 1125              		.loc 1 239 5 is_stmt 1 view .LVU289
 239:Core/Src/uartParser.c ****     USART3->CR1 |= USART_CR1_RXNEIE;
 1126              		.loc 1 239 11 is_stmt 0 view .LVU290
 1127 0080 334A     		ldr	r2, .L76+36
 1128 0082 1368     		ldr	r3, [r2]
 239:Core/Src/uartParser.c ****     USART3->CR1 |= USART_CR1_RXNEIE;
 1129              		.loc 1 239 17 view .LVU291
 1130 0084 2021     		movs	r1, #32
 1131 0086 0B43     		orrs	r3, r1
 1132 0088 1360     		str	r3, [r2]
 174:Core/Src/uartParser.c ****   while (1) {
 1133              		.loc 1 174 9 is_stmt 1 view .LVU292
 1134              	.L73:
 174:Core/Src/uartParser.c ****   while (1) {
 1135              		.loc 1 174 3 view .LVU293
 176:Core/Src/uartParser.c ****     osSemaphoreAcquire(binarySem02UartParserHandle, osWaitForever);
 1136              		.loc 1 176 5 view .LVU294
 1137 008a 0121     		movs	r1, #1
 1138 008c 314B     		ldr	r3, .L76+40
 1139 008e 1868     		ldr	r0, [r3]
 1140 0090 4942     		rsbs	r1, r1, #0
 1141 0092 FFF7FEFF 		bl	osSemaphoreAcquire
 1142              	.LVL91:
 1143 0096 0DE0     		b	.L60
 1144              	.L68:
 1145              	.LBB12:
 218:Core/Src/uartParser.c ****           if (strIndex > 0) {
 1146              		.loc 1 218 11 view .LVU295
 218:Core/Src/uartParser.c ****           if (strIndex > 0) {
 1147              		.loc 1 218 24 is_stmt 0 view .LVU296
 1148 0098 2A4B     		ldr	r3, .L76+24
 1149 009a 1B78     		ldrb	r3, [r3]
 218:Core/Src/uartParser.c ****           if (strIndex > 0) {
 1150              		.loc 1 218 14 view .LVU297
 1151 009c 002B     		cmp	r3, #0
 1152 009e 09D0     		beq	.L60
 219:Core/Src/uartParser.c ****             strIndex -= 1;
 1153              		.loc 1 219 13 is_stmt 1 view .LVU298
 219:Core/Src/uartParser.c ****             strIndex -= 1;
 1154              		.loc 1 219 22 is_stmt 0 view .LVU299
 1155 00a0 284A     		ldr	r2, .L76+24
 1156 00a2 1378     		ldrb	r3, [r2]
 1157 00a4 013B     		subs	r3, r3, #1
 1158 00a6 DBB2     		uxtb	r3, r3
 1159 00a8 1370     		strb	r3, [r2]
 220:Core/Src/uartParser.c ****             tmpStr[strIndex] = '\0';
 1160              		.loc 1 220 13 is_stmt 1 view .LVU300
 220:Core/Src/uartParser.c ****             tmpStr[strIndex] = '\0';
 1161              		.loc 1 220 19 is_stmt 0 view .LVU301
 1162 00aa 1378     		ldrb	r3, [r2]
 1163 00ac DBB2     		uxtb	r3, r3
 220:Core/Src/uartParser.c ****             tmpStr[strIndex] = '\0';
 1164              		.loc 1 220 30 view .LVU302
 1165 00ae 224A     		ldr	r2, .L76+12
 1166 00b0 0021     		movs	r1, #0
 1167 00b2 D154     		strb	r1, [r2, r3]
 1168              	.L60:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 32


 180:Core/Src/uartParser.c **** 	    }
 1169              		.loc 1 180 6 is_stmt 1 view .LVU303
 179:Core/Src/uartParser.c ****       while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1170              		.loc 1 179 44 discriminator 1 view .LVU304
 179:Core/Src/uartParser.c ****       while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1171              		.loc 1 179 20 is_stmt 0 discriminator 1 view .LVU305
 1172 00b4 264B     		ldr	r3, .L76+36
 1173 00b6 DB69     		ldr	r3, [r3, #28]
 179:Core/Src/uartParser.c ****       while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1174              		.loc 1 179 44 discriminator 1 view .LVU306
 1175 00b8 9B06     		lsls	r3, r3, #26
 1176 00ba FBD5     		bpl	.L60
 182:Core/Src/uartParser.c **** 	    volatile uint8_t usartReceivedData = USART3->RDR;
 1177              		.loc 1 182 6 is_stmt 1 view .LVU307
 182:Core/Src/uartParser.c **** 	    volatile uint8_t usartReceivedData = USART3->RDR;
 1178              		.loc 1 182 49 is_stmt 0 view .LVU308
 1179 00bc 244B     		ldr	r3, .L76+36
 1180 00be 9B8C     		ldrh	r3, [r3, #36]
 182:Core/Src/uartParser.c **** 	    volatile uint8_t usartReceivedData = USART3->RDR;
 1181              		.loc 1 182 23 view .LVU309
 1182 00c0 DBB2     		uxtb	r3, r3
 1183 00c2 6A46     		mov	r2, sp
 1184 00c4 D41D     		adds	r4, r2, #7
 1185 00c6 D371     		strb	r3, [r2, #7]
 183:Core/Src/uartParser.c ****       transmitOneChar(usartReceivedData);
 1186              		.loc 1 183 7 is_stmt 1 view .LVU310
 1187 00c8 D079     		ldrb	r0, [r2, #7]
 1188 00ca C0B2     		uxtb	r0, r0
 1189 00cc FFF7FEFF 		bl	transmitOneChar
 1190              	.LVL92:
 185:Core/Src/uartParser.c **** 	    if (usartReceivedData == '\r') {
 1191              		.loc 1 185 6 view .LVU311
 185:Core/Src/uartParser.c **** 	    if (usartReceivedData == '\r') {
 1192              		.loc 1 185 28 is_stmt 0 view .LVU312
 1193 00d0 2378     		ldrb	r3, [r4]
 185:Core/Src/uartParser.c **** 	    if (usartReceivedData == '\r') {
 1194              		.loc 1 185 9 view .LVU313
 1195 00d2 0D2B     		cmp	r3, #13
 1196 00d4 97D0     		beq	.L75
 217:Core/Src/uartParser.c **** 	    } else if (usartReceivedData == 8 || usartReceivedData == 127) {
 1197              		.loc 1 217 13 is_stmt 1 view .LVU314
 217:Core/Src/uartParser.c **** 	    } else if (usartReceivedData == 8 || usartReceivedData == 127) {
 1198              		.loc 1 217 35 is_stmt 0 view .LVU315
 1199 00d6 6B46     		mov	r3, sp
 1200 00d8 0733     		adds	r3, r3, #7
 1201 00da 1B78     		ldrb	r3, [r3]
 217:Core/Src/uartParser.c **** 	    } else if (usartReceivedData == 8 || usartReceivedData == 127) {
 1202              		.loc 1 217 16 view .LVU316
 1203 00dc 082B     		cmp	r3, #8
 1204 00de DBD0     		beq	.L68
 217:Core/Src/uartParser.c **** 	    } else if (usartReceivedData == 8 || usartReceivedData == 127) {
 1205              		.loc 1 217 61 discriminator 1 view .LVU317
 1206 00e0 6B46     		mov	r3, sp
 1207 00e2 0733     		adds	r3, r3, #7
 1208 00e4 1B78     		ldrb	r3, [r3]
 217:Core/Src/uartParser.c **** 	    } else if (usartReceivedData == 8 || usartReceivedData == 127) {
 1209              		.loc 1 217 40 discriminator 1 view .LVU318
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 33


 1210 00e6 7F2B     		cmp	r3, #127
 1211 00e8 D6D0     		beq	.L68
 224:Core/Src/uartParser.c ****         tmpStr[strIndex] = usartReceivedData;
 1212              		.loc 1 224 9 is_stmt 1 view .LVU319
 224:Core/Src/uartParser.c ****         tmpStr[strIndex] = usartReceivedData;
 1213              		.loc 1 224 15 is_stmt 0 view .LVU320
 1214 00ea 164A     		ldr	r2, .L76+24
 1215 00ec 1378     		ldrb	r3, [r2]
 1216 00ee DBB2     		uxtb	r3, r3
 224:Core/Src/uartParser.c ****         tmpStr[strIndex] = usartReceivedData;
 1217              		.loc 1 224 26 view .LVU321
 1218 00f0 6946     		mov	r1, sp
 1219 00f2 0731     		adds	r1, r1, #7
 1220 00f4 0978     		ldrb	r1, [r1]
 1221 00f6 C9B2     		uxtb	r1, r1
 1222 00f8 0F48     		ldr	r0, .L76+12
 1223 00fa C154     		strb	r1, [r0, r3]
 225:Core/Src/uartParser.c ****         strIndex += 1;
 1224              		.loc 1 225 9 is_stmt 1 view .LVU322
 225:Core/Src/uartParser.c ****         strIndex += 1;
 1225              		.loc 1 225 18 is_stmt 0 view .LVU323
 1226 00fc 1378     		ldrb	r3, [r2]
 1227 00fe 0133     		adds	r3, r3, #1
 1228 0100 DBB2     		uxtb	r3, r3
 1229 0102 1370     		strb	r3, [r2]
 227:Core/Src/uartParser.c ****         if (strIndex == TMP_STR_LEN) {
 1230              		.loc 1 227 9 is_stmt 1 view .LVU324
 227:Core/Src/uartParser.c ****         if (strIndex == TMP_STR_LEN) {
 1231              		.loc 1 227 22 is_stmt 0 view .LVU325
 1232 0104 1378     		ldrb	r3, [r2]
 227:Core/Src/uartParser.c ****         if (strIndex == TMP_STR_LEN) {
 1233              		.loc 1 227 12 view .LVU326
 1234 0106 142B     		cmp	r3, #20
 1235 0108 D4D1     		bne	.L60
 228:Core/Src/uartParser.c ****       	  transmitCharArray("Command is too long!");
 1236              		.loc 1 228 10 is_stmt 1 view .LVU327
 1237 010a 1348     		ldr	r0, .L76+44
 1238 010c FFF7FEFF 		bl	transmitCharArray
 1239              	.LVL93:
 229:Core/Src/uartParser.c ****           strIndex = 0;
 1240              		.loc 1 229 11 view .LVU328
 229:Core/Src/uartParser.c ****           strIndex = 0;
 1241              		.loc 1 229 20 is_stmt 0 view .LVU329
 1242 0110 0C4B     		ldr	r3, .L76+24
 1243 0112 0022     		movs	r2, #0
 1244 0114 1A70     		strb	r2, [r3]
 230:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1245              		.loc 1 230 11 is_stmt 1 view .LVU330
 1246              	.LBB11:
 230:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1247              		.loc 1 230 16 view .LVU331
 1248              	.LVL94:
 230:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1249              		.loc 1 230 24 is_stmt 0 view .LVU332
 1250 0116 0023     		movs	r3, #0
 230:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1251              		.loc 1 230 11 view .LVU333
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 34


 1252 0118 04E0     		b	.L71
 1253              	.LVL95:
 1254              	.L72:
 231:Core/Src/uartParser.c ****             tmpStr[i] = '\0';
 1255              		.loc 1 231 13 is_stmt 1 view .LVU334
 231:Core/Src/uartParser.c ****             tmpStr[i] = '\0';
 1256              		.loc 1 231 23 is_stmt 0 view .LVU335
 1257 011a 074A     		ldr	r2, .L76+12
 1258 011c 0021     		movs	r1, #0
 1259 011e D154     		strb	r1, [r2, r3]
 230:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1260              		.loc 1 230 49 is_stmt 1 discriminator 3 view .LVU336
 1261 0120 0133     		adds	r3, r3, #1
 1262              	.LVL96:
 230:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1263              		.loc 1 230 49 is_stmt 0 discriminator 3 view .LVU337
 1264 0122 DBB2     		uxtb	r3, r3
 1265              	.LVL97:
 1266              	.L71:
 230:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1267              		.loc 1 230 33 is_stmt 1 discriminator 1 view .LVU338
 1268 0124 132B     		cmp	r3, #19
 1269 0126 F8D9     		bls	.L72
 1270 0128 A7E7     		b	.L67
 1271              	.L77:
 1272 012a C046     		.align	2
 1273              	.L76:
 1274 012c 00000000 		.word	commandOut
 1275 0130 00000000 		.word	cmdQueue
 1276 0134 00000000 		.word	.LC40
 1277 0138 00000000 		.word	tmpStr
 1278 013c 20000000 		.word	.LC43
 1279 0140 4C000000 		.word	.LC45
 1280 0144 00000000 		.word	strIndex
 1281 0148 00000000 		.word	cmd
 1282 014c 00000000 		.word	uartStatus
 1283 0150 00480040 		.word	1073760256
 1284 0154 00000000 		.word	binarySem02UartParserHandle
 1285 0158 64000000 		.word	.LC49
 1286              	.LBE11:
 1287              	.LBE12:
 1288              		.cfi_endproc
 1289              	.LFE46:
 1291              		.global	__aeabi_uidiv
 1292              		.section	.rodata.initUsart3.str1.4,"aMS",%progbits,1
 1293              		.align	2
 1294              	.LC52:
 1295 0000 55415254 		.ascii	"UART enabled\000"
 1295      20656E61 
 1295      626C6564 
 1295      00
 1296              		.section	.text.initUsart3,"ax",%progbits
 1297              		.align	1
 1298              		.global	initUsart3
 1299              		.syntax unified
 1300              		.code	16
 1301              		.thumb_func
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 35


 1303              	initUsart3:
 1304              	.LFB47:
 252:Core/Src/uartParser.c **** void initUsart3(void) {
 1305              		.loc 1 252 23 view -0
 1306              		.cfi_startproc
 1307              		@ args = 0, pretend = 0, frame = 0
 1308              		@ frame_needed = 0, uses_anonymous_args = 0
 1309 0000 10B5     		push	{r4, lr}
 1310              	.LCFI8:
 1311              		.cfi_def_cfa_offset 8
 1312              		.cfi_offset 4, -8
 1313              		.cfi_offset 14, -4
 253:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 1314              		.loc 1 253 3 view .LVU340
 253:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 1315              		.loc 1 253 6 is_stmt 0 view .LVU341
 1316 0002 2F4A     		ldr	r2, .L79
 1317 0004 5169     		ldr	r1, [r2, #20]
 253:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 1318              		.loc 1 253 15 view .LVU342
 1319 0006 8023     		movs	r3, #128
 1320 0008 1B03     		lsls	r3, r3, #12
 1321 000a 0B43     		orrs	r3, r1
 1322 000c 5361     		str	r3, [r2, #20]
 255:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 1323              		.loc 1 255 3 is_stmt 1 view .LVU343
 255:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 1324              		.loc 1 255 8 is_stmt 0 view .LVU344
 1325 000e 2D4B     		ldr	r3, .L79+4
 1326 0010 1868     		ldr	r0, [r3]
 255:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 1327              		.loc 1 255 16 view .LVU345
 1328 0012 8021     		movs	r1, #128
 1329 0014 8900     		lsls	r1, r1, #2
 1330 0016 0143     		orrs	r1, r0
 1331 0018 1960     		str	r1, [r3]
 256:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 1332              		.loc 1 256 3 is_stmt 1 view .LVU346
 256:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 1333              		.loc 1 256 8 is_stmt 0 view .LVU347
 1334 001a 1968     		ldr	r1, [r3]
 256:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 1335              		.loc 1 256 16 view .LVU348
 1336 001c 2A48     		ldr	r0, .L79+8
 1337 001e 0140     		ands	r1, r0
 1338 0020 1960     		str	r1, [r3]
 258:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 1339              		.loc 1 258 3 is_stmt 1 view .LVU349
 258:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 1340              		.loc 1 258 8 is_stmt 0 view .LVU350
 1341 0022 1868     		ldr	r0, [r3]
 258:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 1342              		.loc 1 258 16 view .LVU351
 1343 0024 8021     		movs	r1, #128
 1344 0026 0901     		lsls	r1, r1, #4
 1345 0028 0143     		orrs	r1, r0
 1346 002a 1960     		str	r1, [r3]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 36


 259:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 1347              		.loc 1 259 3 is_stmt 1 view .LVU352
 259:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 1348              		.loc 1 259 8 is_stmt 0 view .LVU353
 1349 002c 1968     		ldr	r1, [r3]
 259:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 1350              		.loc 1 259 16 view .LVU354
 1351 002e 2748     		ldr	r0, .L79+12
 1352 0030 0140     		ands	r1, r0
 1353 0032 1960     		str	r1, [r3]
 262:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 1354              		.loc 1 262 3 is_stmt 1 view .LVU355
 262:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 1355              		.loc 1 262 13 is_stmt 0 view .LVU356
 1356 0034 186A     		ldr	r0, [r3, #32]
 262:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 1357              		.loc 1 262 17 view .LVU357
 1358 0036 8021     		movs	r1, #128
 1359 0038 4902     		lsls	r1, r1, #9
 1360 003a 0143     		orrs	r1, r0
 1361 003c 1962     		str	r1, [r3, #32]
 264:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 1362              		.loc 1 264 3 is_stmt 1 view .LVU358
 264:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 1363              		.loc 1 264 13 is_stmt 0 view .LVU359
 1364 003e 186A     		ldr	r0, [r3, #32]
 264:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 1365              		.loc 1 264 17 view .LVU360
 1366 0040 8021     		movs	r1, #128
 1367 0042 4903     		lsls	r1, r1, #13
 1368 0044 0143     		orrs	r1, r0
 1369 0046 1962     		str	r1, [r3, #32]
 265:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 1370              		.loc 1 265 3 is_stmt 1 view .LVU361
 265:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 1371              		.loc 1 265 6 is_stmt 0 view .LVU362
 1372 0048 D169     		ldr	r1, [r2, #28]
 265:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 1373              		.loc 1 265 16 view .LVU363
 1374 004a 8023     		movs	r3, #128
 1375 004c DB02     		lsls	r3, r3, #11
 1376 004e 0B43     		orrs	r3, r1
 1377 0050 D361     		str	r3, [r2, #28]
 267:Core/Src/uartParser.c ****   uint32_t fClk = HAL_RCC_GetHCLKFreq();
 1378              		.loc 1 267 3 is_stmt 1 view .LVU364
 267:Core/Src/uartParser.c ****   uint32_t fClk = HAL_RCC_GetHCLKFreq();
 1379              		.loc 1 267 19 is_stmt 0 view .LVU365
 1380 0052 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1381              	.LVL98:
 270:Core/Src/uartParser.c ****   uint32_t baudRate = 115200;
 1382              		.loc 1 270 3 is_stmt 1 view .LVU366
 271:Core/Src/uartParser.c ****   uint32_t usartBRR = fClk / baudRate;
 1383              		.loc 1 271 3 view .LVU367
 271:Core/Src/uartParser.c ****   uint32_t usartBRR = fClk / baudRate;
 1384              		.loc 1 271 12 is_stmt 0 view .LVU368
 1385 0056 E121     		movs	r1, #225
 1386 0058 4902     		lsls	r1, r1, #9
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 37


 1387 005a FFF7FEFF 		bl	__aeabi_uidiv
 1388              	.LVL99:
 272:Core/Src/uartParser.c ****   USART3->BRR = usartBRR;
 1389              		.loc 1 272 3 is_stmt 1 view .LVU369
 272:Core/Src/uartParser.c ****   USART3->BRR = usartBRR;
 1390              		.loc 1 272 15 is_stmt 0 view .LVU370
 1391 005e 1C4C     		ldr	r4, .L79+16
 1392 0060 E060     		str	r0, [r4, #12]
 275:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 1393              		.loc 1 275 3 is_stmt 1 view .LVU371
 275:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 1394              		.loc 1 275 9 is_stmt 0 view .LVU372
 1395 0062 2368     		ldr	r3, [r4]
 275:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 1396              		.loc 1 275 15 view .LVU373
 1397 0064 0822     		movs	r2, #8
 1398 0066 1343     		orrs	r3, r2
 1399 0068 2360     		str	r3, [r4]
 276:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 1400              		.loc 1 276 3 is_stmt 1 view .LVU374
 276:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 1401              		.loc 1 276 9 is_stmt 0 view .LVU375
 1402 006a 2368     		ldr	r3, [r4]
 276:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 1403              		.loc 1 276 15 view .LVU376
 1404 006c 043A     		subs	r2, r2, #4
 1405 006e 1343     		orrs	r3, r2
 1406 0070 2360     		str	r3, [r4]
 279:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 1407              		.loc 1 279 3 is_stmt 1 view .LVU377
 279:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 1408              		.loc 1 279 9 is_stmt 0 view .LVU378
 1409 0072 2368     		ldr	r3, [r4]
 279:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 1410              		.loc 1 279 15 view .LVU379
 1411 0074 033A     		subs	r2, r2, #3
 1412 0076 1343     		orrs	r3, r2
 1413 0078 2360     		str	r3, [r4]
 280:Core/Src/uartParser.c ****   transmitCharArray("UART enabled");
 1414              		.loc 1 280 3 is_stmt 1 view .LVU380
 1415 007a 1648     		ldr	r0, .L79+20
 1416              	.LVL100:
 280:Core/Src/uartParser.c ****   transmitCharArray("UART enabled");
 1417              		.loc 1 280 3 is_stmt 0 view .LVU381
 1418 007c FFF7FEFF 		bl	transmitCharArray
 1419              	.LVL101:
 283:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 1420              		.loc 1 283 3 is_stmt 1 view .LVU382
 283:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 1421              		.loc 1 283 9 is_stmt 0 view .LVU383
 1422 0080 2368     		ldr	r3, [r4]
 283:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 1423              		.loc 1 283 15 view .LVU384
 1424 0082 2022     		movs	r2, #32
 1425 0084 1343     		orrs	r3, r2
 1426 0086 2360     		str	r3, [r4]
 285:Core/Src/uartParser.c ****   NVIC_EnableIRQ(USART3_4_IRQn);
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 38


 1427              		.loc 1 285 3 is_stmt 1 view .LVU385
 1428              	.LVL102:
 1429              	.LBB13:
 1430              	.LBI13:
 1431              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 39


  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 40


 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 41


 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 42


 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 43


 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 44


 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 45


 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 46


 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 47


 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 48


 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 49


 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 1432              		.loc 2 623 22 view .LVU386
 1433              	.LBB14:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1434              		.loc 2 625 3 view .LVU387
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1435              		.loc 2 627 5 view .LVU388
 1436              		.loc 2 627 20 is_stmt 0 view .LVU389
 1437 0088 134B     		ldr	r3, .L79+24
 1438 008a 8022     		movs	r2, #128
 1439 008c 9205     		lsls	r2, r2, #22
 1440 008e 1A60     		str	r2, [r3]
 1441              	.LVL103:
 1442              		.loc 2 627 20 view .LVU390
 1443              	.LBE14:
 1444              	.LBE13:
 286:Core/Src/uartParser.c ****   NVIC_SetPriority(USART3_4_IRQn, 3);
 1445              		.loc 1 286 3 is_stmt 1 view .LVU391
 1446              	.LBB15:
 1447              	.LBI15:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 50


 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 51


 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 1448              		.loc 2 730 22 view .LVU392
 1449              	.LBB16:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1450              		.loc 2 732 3 view .LVU393
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1451              		.loc 2 734 5 view .LVU394
 1452              		.loc 2 734 52 is_stmt 0 view .LVU395
 1453 0090 C720     		movs	r0, #199
 1454 0092 8000     		lsls	r0, r0, #2
 1455 0094 1958     		ldr	r1, [r3, r0]
 1456              		.loc 2 734 33 view .LVU396
 1457 0096 114A     		ldr	r2, .L79+28
 1458 0098 1140     		ands	r1, r2
 1459              		.loc 2 734 102 view .LVU397
 1460 009a C022     		movs	r2, #192
 1461 009c 1202     		lsls	r2, r2, #8
 1462 009e 0A43     		orrs	r2, r1
 1463              		.loc 2 734 30 view .LVU398
 1464 00a0 1A50     		str	r2, [r3, r0]
 1465              	.LVL104:
 1466              		.loc 2 734 30 view .LVU399
 1467              	.LBE16:
 1468              	.LBE15:
 291:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
 1469              		.loc 1 291 3 is_stmt 1 view .LVU400
 291:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
 1470              		.loc 1 291 33 is_stmt 0 view .LVU401
 1471 00a2 0F4A     		ldr	r2, .L79+32
 1472 00a4 0021     		movs	r1, #0
 1473 00a6 0120     		movs	r0, #1
 1474 00a8 FFF7FEFF 		bl	osSemaphoreNew
 1475              	.LVL105:
 291:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
 1476              		.loc 1 291 31 discriminator 1 view .LVU402
 1477 00ac 0D4B     		ldr	r3, .L79+36
 1478 00ae 1860     		str	r0, [r3]
 292:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 1479              		.loc 1 292 3 is_stmt 1 view .LVU403
 292:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 1480              		.loc 1 292 14 is_stmt 0 view .LVU404
 1481 00b0 0221     		movs	r1, #2
 1482 00b2 0520     		movs	r0, #5
 1483 00b4 FFF7FEFF 		bl	createQueue
 1484              	.LVL106:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 52


 292:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 1485              		.loc 1 292 12 discriminator 1 view .LVU405
 1486 00b8 0B4B     		ldr	r3, .L79+40
 1487 00ba 1860     		str	r0, [r3]
 293:Core/Src/uartParser.c **** }
 1488              		.loc 1 293 1 view .LVU406
 1489              		@ sp needed
 1490 00bc 10BD     		pop	{r4, pc}
 1491              	.L80:
 1492 00be C046     		.align	2
 1493              	.L79:
 1494 00c0 00100240 		.word	1073876992
 1495 00c4 00080048 		.word	1207961600
 1496 00c8 FFFEFFFF 		.word	-257
 1497 00cc FFFBFFFF 		.word	-1025
 1498 00d0 00480040 		.word	1073760256
 1499 00d4 00000000 		.word	.LC52
 1500 00d8 00E100E0 		.word	-536813312
 1501 00dc FF00FFFF 		.word	-65281
 1502 00e0 00000000 		.word	semAttr_SEM1
 1503 00e4 00000000 		.word	binarySem02UartParserHandle
 1504 00e8 00000000 		.word	cmdQueue
 1505              		.cfi_endproc
 1506              	.LFE47:
 1508              		.section	.rodata.USART3_4_IRQHandler.str1.4,"aMS",%progbits,1
 1509              		.align	2
 1510              	.LC57:
 1511 0000 55415254 		.ascii	"UART RX interrupt.\000"
 1511      20525820 
 1511      696E7465 
 1511      72727570 
 1511      742E00
 1512 0013 00       		.align	2
 1513              	.LC61:
 1514 0014 636D643A 		.ascii	"cmd:\012\000"
 1514      0A00
 1515              		.section	.text.USART3_4_IRQHandler,"ax",%progbits
 1516              		.align	1
 1517              		.global	USART3_4_IRQHandler
 1518              		.syntax unified
 1519              		.code	16
 1520              		.thumb_func
 1522              	USART3_4_IRQHandler:
 1523              	.LFB48:
 296:Core/Src/uartParser.c **** void USART3_4_IRQHandler(void) {
 1524              		.loc 1 296 32 is_stmt 1 view -0
 1525              		.cfi_startproc
 1526              		@ args = 0, pretend = 0, frame = 8
 1527              		@ frame_needed = 0, uses_anonymous_args = 0
 1528 0000 30B5     		push	{r4, r5, lr}
 1529              	.LCFI9:
 1530              		.cfi_def_cfa_offset 12
 1531              		.cfi_offset 4, -12
 1532              		.cfi_offset 5, -8
 1533              		.cfi_offset 14, -4
 1534 0002 83B0     		sub	sp, sp, #12
 1535              	.LCFI10:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 53


 1536              		.cfi_def_cfa_offset 24
 297:Core/Src/uartParser.c ****   transmitCharArray("UART RX interrupt.");
 1537              		.loc 1 297 3 view .LVU408
 1538 0004 1748     		ldr	r0, .L85
 1539 0006 FFF7FEFF 		bl	transmitCharArray
 1540              	.LVL107:
 298:Core/Src/uartParser.c ****   if (uartStatus == 0) {
 1541              		.loc 1 298 3 view .LVU409
 298:Core/Src/uartParser.c ****   if (uartStatus == 0) {
 1542              		.loc 1 298 18 is_stmt 0 view .LVU410
 1543 000a 174B     		ldr	r3, .L85+4
 1544 000c 1B78     		ldrb	r3, [r3]
 298:Core/Src/uartParser.c ****   if (uartStatus == 0) {
 1545              		.loc 1 298 6 view .LVU411
 1546 000e 002B     		cmp	r3, #0
 1547 0010 26D1     		bne	.L81
 1548              	.L83:
 1549              	.LBB17:
 300:Core/Src/uartParser.c **** 	  }
 1550              		.loc 1 300 4 is_stmt 1 view .LVU412
 299:Core/Src/uartParser.c ****     while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1551              		.loc 1 299 42 discriminator 1 view .LVU413
 299:Core/Src/uartParser.c ****     while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1552              		.loc 1 299 18 is_stmt 0 discriminator 1 view .LVU414
 1553 0012 164B     		ldr	r3, .L85+8
 1554 0014 DB69     		ldr	r3, [r3, #28]
 299:Core/Src/uartParser.c ****     while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1555              		.loc 1 299 42 discriminator 1 view .LVU415
 1556 0016 9B06     		lsls	r3, r3, #26
 1557 0018 FBD5     		bpl	.L83
 302:Core/Src/uartParser.c ****     osSemaphoreRelease(binarySem02UartParserHandle);
 1558              		.loc 1 302 5 is_stmt 1 view .LVU416
 1559 001a 154B     		ldr	r3, .L85+12
 1560 001c 1868     		ldr	r0, [r3]
 1561 001e FFF7FEFF 		bl	osSemaphoreRelease
 1562              	.LVL108:
 303:Core/Src/uartParser.c ****     volatile uint8_t usartReceivedData = USART3->RDR;
 1563              		.loc 1 303 5 view .LVU417
 303:Core/Src/uartParser.c ****     volatile uint8_t usartReceivedData = USART3->RDR;
 1564              		.loc 1 303 48 is_stmt 0 view .LVU418
 1565 0022 124C     		ldr	r4, .L85+8
 1566 0024 A38C     		ldrh	r3, [r4, #36]
 303:Core/Src/uartParser.c ****     volatile uint8_t usartReceivedData = USART3->RDR;
 1567              		.loc 1 303 22 view .LVU419
 1568 0026 DBB2     		uxtb	r3, r3
 1569 0028 6A46     		mov	r2, sp
 1570 002a D51D     		adds	r5, r2, #7
 1571 002c D371     		strb	r3, [r2, #7]
 304:Core/Src/uartParser.c ****     transmitCharArray("cmd:\n");
 1572              		.loc 1 304 5 is_stmt 1 view .LVU420
 1573 002e 1148     		ldr	r0, .L85+16
 1574 0030 FFF7FEFF 		bl	transmitCharArray
 1575              	.LVL109:
 305:Core/Src/uartParser.c ****     transmitOneChar(usartReceivedData);
 1576              		.loc 1 305 5 view .LVU421
 1577 0034 2878     		ldrb	r0, [r5]
 1578 0036 C0B2     		uxtb	r0, r0
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 54


 1579 0038 FFF7FEFF 		bl	transmitOneChar
 1580              	.LVL110:
 306:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 1581              		.loc 1 306 5 view .LVU422
 306:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 1582              		.loc 1 306 11 is_stmt 0 view .LVU423
 1583 003c 0E4A     		ldr	r2, .L85+20
 1584 003e 1378     		ldrb	r3, [r2]
 1585 0040 DBB2     		uxtb	r3, r3
 306:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 1586              		.loc 1 306 22 view .LVU424
 1587 0042 2978     		ldrb	r1, [r5]
 1588 0044 C9B2     		uxtb	r1, r1
 1589 0046 0D48     		ldr	r0, .L85+24
 1590 0048 C154     		strb	r1, [r0, r3]
 307:Core/Src/uartParser.c **** 		strIndex++;
 1591              		.loc 1 307 3 is_stmt 1 view .LVU425
 307:Core/Src/uartParser.c **** 		strIndex++;
 1592              		.loc 1 307 11 is_stmt 0 view .LVU426
 1593 004a 1378     		ldrb	r3, [r2]
 1594 004c 0133     		adds	r3, r3, #1
 1595 004e DBB2     		uxtb	r3, r3
 1596 0050 1370     		strb	r3, [r2]
 308:Core/Src/uartParser.c ****     uartStatus = 1;
 1597              		.loc 1 308 5 is_stmt 1 view .LVU427
 308:Core/Src/uartParser.c ****     uartStatus = 1;
 1598              		.loc 1 308 16 is_stmt 0 view .LVU428
 1599 0052 054B     		ldr	r3, .L85+4
 1600 0054 0122     		movs	r2, #1
 1601 0056 1A70     		strb	r2, [r3]
 310:Core/Src/uartParser.c ****     USART3->CR1 &= ~USART_CR1_RXNEIE;
 1602              		.loc 1 310 5 is_stmt 1 view .LVU429
 310:Core/Src/uartParser.c ****     USART3->CR1 &= ~USART_CR1_RXNEIE;
 1603              		.loc 1 310 11 is_stmt 0 view .LVU430
 1604 0058 2368     		ldr	r3, [r4]
 310:Core/Src/uartParser.c ****     USART3->CR1 &= ~USART_CR1_RXNEIE;
 1605              		.loc 1 310 17 view .LVU431
 1606 005a 1F32     		adds	r2, r2, #31
 1607 005c 9343     		bics	r3, r2
 1608 005e 2360     		str	r3, [r4]
 1609              	.L81:
 1610              	.LBE17:
 312:Core/Src/uartParser.c **** }
 1611              		.loc 1 312 1 view .LVU432
 1612 0060 03B0     		add	sp, sp, #12
 1613              		@ sp needed
 1614 0062 30BD     		pop	{r4, r5, pc}
 1615              	.L86:
 1616              		.align	2
 1617              	.L85:
 1618 0064 00000000 		.word	.LC57
 1619 0068 00000000 		.word	uartStatus
 1620 006c 00480040 		.word	1073760256
 1621 0070 00000000 		.word	binarySem02UartParserHandle
 1622 0074 14000000 		.word	.LC61
 1623 0078 00000000 		.word	strIndex
 1624 007c 00000000 		.word	tmpStr
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 55


 1625              		.cfi_endproc
 1626              	.LFE48:
 1628              		.global	UARTTask_attributes
 1629              		.section	.rodata.str1.4,"aMS",%progbits,1
 1630              		.align	2
 1631              	.LC65:
 1632 0000 55415254 		.ascii	"UARTParseTask\000"
 1632      50617273 
 1632      65546173 
 1632      6B00
 1633              		.section	.rodata.UARTTask_attributes,"a"
 1634              		.align	2
 1637              	UARTTask_attributes:
 1638 0000 00000000 		.word	.LC65
 1639 0004 00000000 		.space	16
 1639      00000000 
 1639      00000000 
 1639      00000000 
 1640 0014 00020000 		.word	512
 1641 0018 19000000 		.word	25
 1642 001c 00000000 		.space	8
 1642      00000000 
 1643              		.global	uartStatus
 1644              		.section	.bss.uartStatus,"aw",%nobits
 1647              	uartStatus:
 1648 0000 00       		.space	1
 1649              		.global	commandOut
 1650              		.section	.bss.commandOut,"aw",%nobits
 1651              		.align	1
 1654              	commandOut:
 1655 0000 0000     		.space	2
 1656              		.global	cmd
 1657              		.section	.bss.cmd,"aw",%nobits
 1658              		.align	2
 1661              	cmd:
 1662 0000 00000000 		.space	80
 1662      00000000 
 1662      00000000 
 1662      00000000 
 1662      00000000 
 1663              		.global	tmpStr
 1664              		.section	.bss.tmpStr,"aw",%nobits
 1665              		.align	2
 1668              	tmpStr:
 1669 0000 00000000 		.space	20
 1669      00000000 
 1669      00000000 
 1669      00000000 
 1669      00000000 
 1670              		.global	cmdStrIndex
 1671              		.section	.bss.cmdStrIndex,"aw",%nobits
 1674              	cmdStrIndex:
 1675 0000 00       		.space	1
 1676              		.global	cmdIndex
 1677              		.section	.bss.cmdIndex,"aw",%nobits
 1680              	cmdIndex:
 1681 0000 00       		.space	1
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 56


 1682              		.global	strIndex
 1683              		.section	.bss.strIndex,"aw",%nobits
 1686              	strIndex:
 1687 0000 00       		.space	1
 1688              		.section	.rodata.str1.4
 1689 000e 0000     		.align	2
 1690              	.LC66:
 1691 0010 53454D30 		.ascii	"SEM02\000"
 1691      3200
 1692              		.section	.rodata.semAttr_SEM1,"a"
 1693              		.align	2
 1696              	semAttr_SEM1:
 1697 0000 10000000 		.word	.LC66
 1698 0004 00000000 		.space	12
 1698      00000000 
 1698      00000000 
 1699              		.global	binarySem02UartParserHandle
 1700              		.section	.bss.binarySem02UartParserHandle,"aw",%nobits
 1701              		.align	2
 1704              	binarySem02UartParserHandle:
 1705 0000 00000000 		.space	4
 1706              		.global	cmdQueue
 1707              		.section	.bss.cmdQueue,"aw",%nobits
 1708              		.align	2
 1711              	cmdQueue:
 1712 0000 00000000 		.space	4
 1713              		.global	UARTTaskHandle
 1714              		.section	.bss.UARTTaskHandle,"aw",%nobits
 1715              		.align	2
 1718              	UARTTaskHandle:
 1719 0000 00000000 		.space	4
 1720              		.text
 1721              	.Letext0:
 1722              		.file 3 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 1723              		.file 4 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/lib/gcc/arm-none-eabi/13.2.1/includ
 1724              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1725              		.file 6 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 1726              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 1727              		.file 8 "Core/Inc/cmdQueue.h"
 1728              		.file 9 "Core/Inc/uartParser.h"
 1729              		.file 10 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/string.h"
 1730              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 57


DEFINED SYMBOLS
                            *ABS*:00000000 uartParser.c
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:19     .text.convertSpeed:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:25     .text.convertSpeed:00000000 convertSpeed
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:192    .text.transmitOneChar:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:198    .text.transmitOneChar:00000000 transmitOneChar
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:225    .text.transmitOneChar:00000010 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:230    .text.transmitCharArray:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:236    .text.transmitCharArray:00000000 transmitCharArray
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:286    .text.sendUint16BinToUart:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:292    .text.sendUint16BinToUart:00000000 sendUint16BinToUart
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:358    .rodata.parseCmd.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:401    .text.parseCmd:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:407    .text.parseCmd:00000000 parseCmd
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:936    .text.parseCmd:0000027c $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1686   .bss.strIndex:00000000 strIndex
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1674   .bss.cmdStrIndex:00000000 cmdStrIndex
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1680   .bss.cmdIndex:00000000 cmdIndex
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1668   .bss.tmpStr:00000000 tmpStr
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1661   .bss.cmd:00000000 cmd
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1654   .bss.commandOut:00000000 commandOut
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:965    .rodata.StartParseUartTask.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:978    .text.StartParseUartTask:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:984    .text.StartParseUartTask:00000000 StartParseUartTask
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1274   .text.StartParseUartTask:0000012c $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1711   .bss.cmdQueue:00000000 cmdQueue
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1647   .bss.uartStatus:00000000 uartStatus
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1704   .bss.binarySem02UartParserHandle:00000000 binarySem02UartParserHandle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1293   .rodata.initUsart3.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1297   .text.initUsart3:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1303   .text.initUsart3:00000000 initUsart3
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1494   .text.initUsart3:000000c0 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1696   .rodata.semAttr_SEM1:00000000 semAttr_SEM1
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1509   .rodata.USART3_4_IRQHandler.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1516   .text.USART3_4_IRQHandler:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1522   .text.USART3_4_IRQHandler:00000000 USART3_4_IRQHandler
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1618   .text.USART3_4_IRQHandler:00000064 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1637   .rodata.UARTTask_attributes:00000000 UARTTask_attributes
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1630   .rodata.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1634   .rodata.UARTTask_attributes:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1648   .bss.uartStatus:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1651   .bss.commandOut:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1658   .bss.cmd:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1665   .bss.tmpStr:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1675   .bss.cmdStrIndex:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1681   .bss.cmdIndex:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1687   .bss.strIndex:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1693   .rodata.semAttr_SEM1:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1701   .bss.binarySem02UartParserHandle:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1708   .bss.cmdQueue:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1718   .bss.UARTTaskHandle:00000000 UARTTaskHandle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s:1715   .bss.UARTTaskHandle:00000000 $d

UNDEFINED SYMBOLS
strlen
strcmp
queuePush
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccgy8WoB.s 			page 58


osSemaphoreAcquire
__aeabi_uidiv
HAL_RCC_GetHCLKFreq
osSemaphoreNew
createQueue
osSemaphoreRelease
