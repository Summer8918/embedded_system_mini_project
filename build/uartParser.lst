ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"uartParser.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/uartParser.c"
  18              		.section	.text.convertSpeed,"ax",%progbits
  19              		.align	1
  20              		.global	convertSpeed
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	convertSpeed:
  26              	.LVL0:
  27              	.LFB45:
   1:Core/Src/uartParser.c **** #include "uartParser.h"
   2:Core/Src/uartParser.c **** #include "cmsis_os2.h"
   3:Core/Src/uartParser.c **** #include <string.h>
   4:Core/Src/uartParser.c **** 
   5:Core/Src/uartParser.c **** osThreadId_t UARTTaskHandle;
   6:Core/Src/uartParser.c **** Cmd_Queue * cmdQueue = NULL;
   7:Core/Src/uartParser.c **** osSemaphoreId_t binarySem02UartParserHandle;
   8:Core/Src/uartParser.c **** static const osSemaphoreAttr_t semAttr_SEM1 = {
   9:Core/Src/uartParser.c ****   .name = "SEM02",
  10:Core/Src/uartParser.c **** };
  11:Core/Src/uartParser.c **** 
  12:Core/Src/uartParser.c **** volatile uint8_t strIndex = 0;
  13:Core/Src/uartParser.c **** volatile uint8_t cmdIndex = 0;
  14:Core/Src/uartParser.c **** volatile uint8_t cmdStrIndex = 0;
  15:Core/Src/uartParser.c **** volatile char tmpStr[TMP_STR_LEN];
  16:Core/Src/uartParser.c **** volatile char cmd[4][TMP_STR_LEN];
  17:Core/Src/uartParser.c **** volatile uint16_t commandOut = 0x0000;
  18:Core/Src/uartParser.c **** 
  19:Core/Src/uartParser.c **** // 0 not working, 1 working
  20:Core/Src/uartParser.c **** volatile uint8_t uartStatus = 0;
  21:Core/Src/uartParser.c **** 
  22:Core/Src/uartParser.c **** const osThreadAttr_t UARTTask_attributes = {
  23:Core/Src/uartParser.c ****   .name = "UARTParseTask",
  24:Core/Src/uartParser.c ****   .stack_size = 128 * 4,
  25:Core/Src/uartParser.c ****   .priority = (osPriority_t) osPriorityNormal1, // higher priority than osPriorityNormal
  26:Core/Src/uartParser.c **** };
  27:Core/Src/uartParser.c **** 
  28:Core/Src/uartParser.c **** void sendUint16BinToUart(uint16_t x) {
  29:Core/Src/uartParser.c **** 	char str[16];
  30:Core/Src/uartParser.c **** 	uint8_t i = 0;
  31:Core/Src/uartParser.c **** 	while (i < 16) {
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 2


  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
  33:Core/Src/uartParser.c **** 	  i++;
  34:Core/Src/uartParser.c **** 	}
  35:Core/Src/uartParser.c **** 	transmitCharArray(str);
  36:Core/Src/uartParser.c **** }
  37:Core/Src/uartParser.c **** 
  38:Core/Src/uartParser.c **** uint8_t parseCmd(void) {
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
  40:Core/Src/uartParser.c ****   uint8_t speed = 0;
  41:Core/Src/uartParser.c ****   //Parse words from received command string
  42:Core/Src/uartParser.c ****   volatile uint8_t strLen = strIndex + 1;
  43:Core/Src/uartParser.c ****   strIndex = 0;
  44:Core/Src/uartParser.c ****   cmdStrIndex = 0;
  45:Core/Src/uartParser.c ****   cmdIndex = 0;
  46:Core/Src/uartParser.c ****   while (strIndex < strLen) {
  47:Core/Src/uartParser.c ****     if (tmpStr[strIndex] == ' ') {
  48:Core/Src/uartParser.c ****       cmdIndex++;
  49:Core/Src/uartParser.c ****       cmdStrIndex = 0;
  50:Core/Src/uartParser.c ****     } else {
  51:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
  52:Core/Src/uartParser.c ****       cmdStrIndex++;
  53:Core/Src/uartParser.c ****     }
  54:Core/Src/uartParser.c ****     strIndex++;
  55:Core/Src/uartParser.c ****   } 
  56:Core/Src/uartParser.c ****   //Convert words into command format
  57:Core/Src/uartParser.c ****   //First digit
  58:Core/Src/uartParser.c ****   if (strcasecmp(cmd[0], "led") == 0) {
  59:Core/Src/uartParser.c ****     commandOut |= 0xA000;
  60:Core/Src/uartParser.c ****     //Second digit - LED
  61:Core/Src/uartParser.c ****     if (strcasecmp(cmd[1], "red") == 0) {
  62:Core/Src/uartParser.c ****       commandOut |= 0x0100;
  63:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "green") == 0) {
  64:Core/Src/uartParser.c ****       commandOut |= 0x0200;
  65:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "blue") == 0) {
  66:Core/Src/uartParser.c ****       commandOut |= 0x0300;
  67:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "orange") == 0) {
  68:Core/Src/uartParser.c ****       commandOut |= 0x0400;
  69:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "all") == 0) {
  70:Core/Src/uartParser.c ****       commandOut |= 0x0500;
  71:Core/Src/uartParser.c ****     }else {
  72:Core/Src/uartParser.c ****       error = 1;
  73:Core/Src/uartParser.c ****     }
  74:Core/Src/uartParser.c ****     //Third digit - LED
  75:Core/Src/uartParser.c ****     if (strcasecmp(cmd[2], "on") == 0) {
  76:Core/Src/uartParser.c ****       commandOut |= 0x0010;
  77:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
  78:Core/Src/uartParser.c ****         error = 1;
  79:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "off") == 0) {
  80:Core/Src/uartParser.c ****       commandOut |= 0x0020;
  81:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
  82:Core/Src/uartParser.c ****         error = 1;
  83:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "toggle") == 0) {
  84:Core/Src/uartParser.c ****       commandOut |= 0x0030;
  85:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
  86:Core/Src/uartParser.c ****         error = 1;
  87:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "blink") == 0) {
  88:Core/Src/uartParser.c ****       commandOut |= 0x0040;
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 3


  89:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[3]);
  90:Core/Src/uartParser.c ****     } else {
  91:Core/Src/uartParser.c ****       error = 1;
  92:Core/Src/uartParser.c ****     }
  93:Core/Src/uartParser.c **** 
  94:Core/Src/uartParser.c ****     //LED blink speed
  95:Core/Src/uartParser.c ****     if (speed == 255)
  96:Core/Src/uartParser.c ****       error = 1;
  97:Core/Src/uartParser.c ****     else 
  98:Core/Src/uartParser.c ****       if (speed > 15) {
  99:Core/Src/uartParser.c ****         transmitCharArray("Blink speed limited to 1500 ms");
 100:Core/Src/uartParser.c ****         commandOut |= 15U;
 101:Core/Src/uartParser.c ****       }
 102:Core/Src/uartParser.c ****       else
 103:Core/Src/uartParser.c ****         commandOut |= speed;
 104:Core/Src/uartParser.c **** 
 105:Core/Src/uartParser.c ****   } else if (strcasecmp(cmd[0], "motor") == 0) {
 106:Core/Src/uartParser.c ****     commandOut |= 0xB000;
 107:Core/Src/uartParser.c ****     //Second digit - Motor
 108:Core/Src/uartParser.c ****     if (strcasecmp(cmd[1], "on") == 0) {
 109:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 110:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 111:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "off") == 0) {
 112:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 113:Core/Src/uartParser.c ****       if (cmd[2][0] != '\0')
 114:Core/Src/uartParser.c ****         error = 1;
 115:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "speed") == 0) {
 116:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 117:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 118:Core/Src/uartParser.c ****     } else {
 119:Core/Src/uartParser.c ****       error = 1;
 120:Core/Src/uartParser.c ****     }
 121:Core/Src/uartParser.c **** 
 122:Core/Src/uartParser.c ****     if (cmd[3][0] != '\0')
 123:Core/Src/uartParser.c ****       error = 1;
 124:Core/Src/uartParser.c **** 
 125:Core/Src/uartParser.c ****     //Motor speed
 126:Core/Src/uartParser.c ****     if (speed == 255)
 127:Core/Src/uartParser.c ****       error = 1;
 128:Core/Src/uartParser.c ****     else 
 129:Core/Src/uartParser.c ****       if (speed > 100) {
 130:Core/Src/uartParser.c ****         transmitCharArray("Motor speed limited to 100 RPM");
 131:Core/Src/uartParser.c ****         commandOut |= 100U;
 132:Core/Src/uartParser.c ****       }
 133:Core/Src/uartParser.c ****       else
 134:Core/Src/uartParser.c ****         commandOut |= speed;
 135:Core/Src/uartParser.c ****   } else {
 136:Core/Src/uartParser.c ****     error = 1;
 137:Core/Src/uartParser.c ****   }
 138:Core/Src/uartParser.c ****   return error;
 139:Core/Src/uartParser.c **** }
 140:Core/Src/uartParser.c **** 
 141:Core/Src/uartParser.c **** //Convert UART ascii sped into into uint8 to add to command
 142:Core/Src/uartParser.c **** uint8_t convertSpeed(char *ascii) {
  28              		.loc 1 142 35 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 4


  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 142 35 is_stmt 0 view .LVU1
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
  40 0002 0500     		movs	r5, r0
 143:Core/Src/uartParser.c ****   uint8_t hundreds = 0, tens = 0, ones = 0;
  41              		.loc 1 143 3 is_stmt 1 view .LVU2
  42              	.LVL1:
 144:Core/Src/uartParser.c ****   //Throw error if speed is not a number
 145:Core/Src/uartParser.c ****   for (int i = 0; i < strlen(ascii); i ++){
  43              		.loc 1 145 3 view .LVU3
  44              	.LBB6:
  45              		.loc 1 145 8 view .LVU4
  46              		.loc 1 145 12 is_stmt 0 view .LVU5
  47 0004 0024     		movs	r4, #0
  48              		.loc 1 145 3 view .LVU6
  49 0006 00E0     		b	.L2
  50              	.LVL2:
  51              	.L12:
  52              		.loc 1 145 40 is_stmt 1 discriminator 2 view .LVU7
  53 0008 0134     		adds	r4, r4, #1
  54              	.LVL3:
  55              	.L2:
  56              		.loc 1 145 21 discriminator 1 view .LVU8
  57              		.loc 1 145 23 is_stmt 0 discriminator 1 view .LVU9
  58 000a 2800     		movs	r0, r5
  59 000c FFF7FEFF 		bl	strlen
  60              	.LVL4:
  61              		.loc 1 145 21 discriminator 1 view .LVU10
  62 0010 A042     		cmp	r0, r4
  63 0012 08D9     		bls	.L11
 146:Core/Src/uartParser.c ****     if ((ascii[i] < 48 && ascii[i] != 0) || ascii[i] > 57) {
  64              		.loc 1 146 5 is_stmt 1 view .LVU11
  65              		.loc 1 146 15 is_stmt 0 view .LVU12
  66 0014 2A5D     		ldrb	r2, [r5, r4]
  67              		.loc 1 146 24 view .LVU13
  68 0016 531E     		subs	r3, r2, #1
  69 0018 DBB2     		uxtb	r3, r3
  70              		.loc 1 146 8 view .LVU14
  71 001a 2E2B     		cmp	r3, #46
  72 001c 2DD9     		bls	.L8
  73              		.loc 1 146 42 discriminator 1 view .LVU15
  74 001e 392A     		cmp	r2, #57
  75 0020 F2D9     		bls	.L12
 147:Core/Src/uartParser.c ****       return 255;
  76              		.loc 1 147 14 view .LVU16
  77 0022 FF20     		movs	r0, #255
  78 0024 13E0     		b	.L3
  79              	.L11:
  80              	.LBE6:
 148:Core/Src/uartParser.c ****     }
 149:Core/Src/uartParser.c ****   }
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 5


 150:Core/Src/uartParser.c ****   //3 digit number
 151:Core/Src/uartParser.c ****   if (ascii[2] != 0) {
  81              		.loc 1 151 3 is_stmt 1 view .LVU17
  82              		.loc 1 151 12 is_stmt 0 view .LVU18
  83 0026 A978     		ldrb	r1, [r5, #2]
  84              		.loc 1 151 6 view .LVU19
  85 0028 0029     		cmp	r1, #0
  86 002a 11D0     		beq	.L5
 152:Core/Src/uartParser.c ****     hundreds = ascii[0] - 48;
  87              		.loc 1 152 5 is_stmt 1 view .LVU20
  88              		.loc 1 152 21 is_stmt 0 view .LVU21
  89 002c 2A78     		ldrb	r2, [r5]
  90              		.loc 1 152 14 view .LVU22
  91 002e 303A     		subs	r2, r2, #48
  92 0030 D2B2     		uxtb	r2, r2
  93              	.LVL5:
 153:Core/Src/uartParser.c ****     tens = ascii[1] - 48;
  94              		.loc 1 153 5 is_stmt 1 view .LVU23
  95              		.loc 1 153 17 is_stmt 0 view .LVU24
  96 0032 6B78     		ldrb	r3, [r5, #1]
  97              		.loc 1 153 10 view .LVU25
  98 0034 303B     		subs	r3, r3, #48
  99 0036 DBB2     		uxtb	r3, r3
 100              	.LVL6:
 154:Core/Src/uartParser.c ****     ones = ascii[2] - 48;
 101              		.loc 1 154 5 is_stmt 1 view .LVU26
 102              		.loc 1 154 10 is_stmt 0 view .LVU27
 103 0038 3039     		subs	r1, r1, #48
 104 003a CCB2     		uxtb	r4, r1
 105              	.LVL7:
 106              	.L6:
 155:Core/Src/uartParser.c ****   } else {
 156:Core/Src/uartParser.c ****     hundreds = 0;
 157:Core/Src/uartParser.c ****     //2 digit number
 158:Core/Src/uartParser.c ****     if (ascii[1] != 0) {
 159:Core/Src/uartParser.c ****       tens = ascii[0] - 48;
 160:Core/Src/uartParser.c ****       ones = ascii[1] - 48;
 161:Core/Src/uartParser.c ****     }
 162:Core/Src/uartParser.c ****     else {
 163:Core/Src/uartParser.c ****       tens = 0;
 164:Core/Src/uartParser.c ****       //1 digit number
 165:Core/Src/uartParser.c ****       if (ascii[0] != 0) {
 166:Core/Src/uartParser.c ****         ones = ascii[0] - 48;
 167:Core/Src/uartParser.c ****       }
 168:Core/Src/uartParser.c ****       else {
 169:Core/Src/uartParser.c ****         ones = 0;
 170:Core/Src/uartParser.c ****       }
 171:Core/Src/uartParser.c ****     }
 172:Core/Src/uartParser.c ****   }
 173:Core/Src/uartParser.c ****   return hundreds*100 + tens*10 + ones;
 107              		.loc 1 173 3 is_stmt 1 view .LVU28
 108              		.loc 1 173 23 is_stmt 0 view .LVU29
 109 003c 6420     		movs	r0, #100
 110 003e 5043     		muls	r0, r2
 111 0040 9A00     		lsls	r2, r3, #2
 112              	.LVL8:
 113              		.loc 1 173 23 view .LVU30
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 6


 114 0042 9B18     		adds	r3, r3, r2
 115              	.LVL9:
 116              		.loc 1 173 23 view .LVU31
 117 0044 5B00     		lsls	r3, r3, #1
 118 0046 C018     		adds	r0, r0, r3
 119 0048 C0B2     		uxtb	r0, r0
 120              		.loc 1 173 33 view .LVU32
 121 004a 0019     		adds	r0, r0, r4
 122 004c C0B2     		uxtb	r0, r0
 123              	.LVL10:
 124              	.L3:
 174:Core/Src/uartParser.c **** }
 125              		.loc 1 174 1 view .LVU33
 126              		@ sp needed
 127              	.LVL11:
 128              		.loc 1 174 1 view .LVU34
 129 004e 70BD     		pop	{r4, r5, r6, pc}
 130              	.LVL12:
 131              	.L5:
 156:Core/Src/uartParser.c ****     //2 digit number
 132              		.loc 1 156 5 is_stmt 1 view .LVU35
 158:Core/Src/uartParser.c ****       tens = ascii[0] - 48;
 133              		.loc 1 158 5 view .LVU36
 158:Core/Src/uartParser.c ****       tens = ascii[0] - 48;
 134              		.loc 1 158 14 is_stmt 0 view .LVU37
 135 0050 6878     		ldrb	r0, [r5, #1]
 158:Core/Src/uartParser.c ****       tens = ascii[0] - 48;
 136              		.loc 1 158 8 view .LVU38
 137 0052 0028     		cmp	r0, #0
 138 0054 06D0     		beq	.L7
 159:Core/Src/uartParser.c ****       ones = ascii[1] - 48;
 139              		.loc 1 159 7 is_stmt 1 view .LVU39
 159:Core/Src/uartParser.c ****       ones = ascii[1] - 48;
 140              		.loc 1 159 19 is_stmt 0 view .LVU40
 141 0056 2B78     		ldrb	r3, [r5]
 159:Core/Src/uartParser.c ****       ones = ascii[1] - 48;
 142              		.loc 1 159 12 view .LVU41
 143 0058 303B     		subs	r3, r3, #48
 144 005a DBB2     		uxtb	r3, r3
 145              	.LVL13:
 160:Core/Src/uartParser.c ****     }
 146              		.loc 1 160 7 is_stmt 1 view .LVU42
 160:Core/Src/uartParser.c ****     }
 147              		.loc 1 160 12 is_stmt 0 view .LVU43
 148 005c 3038     		subs	r0, r0, #48
 149 005e C4B2     		uxtb	r4, r0
 150              	.LVL14:
 156:Core/Src/uartParser.c ****     //2 digit number
 151              		.loc 1 156 14 view .LVU44
 152 0060 0A00     		movs	r2, r1
 153 0062 EBE7     		b	.L6
 154              	.LVL15:
 155              	.L7:
 163:Core/Src/uartParser.c ****       //1 digit number
 156              		.loc 1 163 7 is_stmt 1 view .LVU45
 165:Core/Src/uartParser.c ****         ones = ascii[0] - 48;
 157              		.loc 1 165 7 view .LVU46
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 7


 165:Core/Src/uartParser.c ****         ones = ascii[0] - 48;
 158              		.loc 1 165 16 is_stmt 0 view .LVU47
 159 0064 2A78     		ldrb	r2, [r5]
 165:Core/Src/uartParser.c ****         ones = ascii[0] - 48;
 160              		.loc 1 165 10 view .LVU48
 161 0066 002A     		cmp	r2, #0
 162 0068 04D0     		beq	.L10
 166:Core/Src/uartParser.c ****       }
 163              		.loc 1 166 9 is_stmt 1 view .LVU49
 166:Core/Src/uartParser.c ****       }
 164              		.loc 1 166 14 is_stmt 0 view .LVU50
 165 006a 303A     		subs	r2, r2, #48
 166 006c D4B2     		uxtb	r4, r2
 167              	.LVL16:
 163:Core/Src/uartParser.c ****       //1 digit number
 168              		.loc 1 163 12 view .LVU51
 169 006e 0200     		movs	r2, r0
 156:Core/Src/uartParser.c ****     //2 digit number
 170              		.loc 1 156 14 view .LVU52
 171 0070 0300     		movs	r3, r0
 172 0072 E3E7     		b	.L6
 173              	.LVL17:
 174              	.L10:
 169:Core/Src/uartParser.c ****       }
 175              		.loc 1 169 14 view .LVU53
 176 0074 1400     		movs	r4, r2
 177              	.LVL18:
 163:Core/Src/uartParser.c ****       //1 digit number
 178              		.loc 1 163 12 view .LVU54
 179 0076 1300     		movs	r3, r2
 180 0078 E0E7     		b	.L6
 181              	.LVL19:
 182              	.L8:
 183              	.LBB7:
 147:Core/Src/uartParser.c ****     }
 184              		.loc 1 147 14 view .LVU55
 185 007a FF20     		movs	r0, #255
 186 007c E7E7     		b	.L3
 187              	.LBE7:
 188              		.cfi_endproc
 189              	.LFE45:
 191              		.section	.text.transmitOneChar,"ax",%progbits
 192              		.align	1
 193              		.global	transmitOneChar
 194              		.syntax unified
 195              		.code	16
 196              		.thumb_func
 198              	transmitOneChar:
 199              	.LFB49:
 175:Core/Src/uartParser.c **** 
 176:Core/Src/uartParser.c **** /* UART CODE BEGIN Header_StartLEDTask */
 177:Core/Src/uartParser.c **** /**
 178:Core/Src/uartParser.c ****   * @brief  Function implementing the LEDTask thread.
 179:Core/Src/uartParser.c ****   * @param  argument: Not used
 180:Core/Src/uartParser.c ****   * @retval None
 181:Core/Src/uartParser.c ****   */
 182:Core/Src/uartParser.c **** /* USER CODE END Header_StartLEDTask */
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 8


 183:Core/Src/uartParser.c **** void StartParseUartTask(void *argument) {
 184:Core/Src/uartParser.c ****   // TODO: add a timer to limit the max execution time
 185:Core/Src/uartParser.c **** 
 186:Core/Src/uartParser.c ****   while (1) {
 187:Core/Src/uartParser.c ****     //transmitCharArray("Waiting to get sem02.\n");
 188:Core/Src/uartParser.c ****     osSemaphoreAcquire(binarySem02UartParserHandle, osWaitForever);
 189:Core/Src/uartParser.c ****     //transmitCharArray("get sem02!\n");
 190:Core/Src/uartParser.c ****     while (1) {
 191:Core/Src/uartParser.c ****       while((USART3->ISR & USART_ISR_RXNE) == 0) {
 192:Core/Src/uartParser.c **** 	    }
 193:Core/Src/uartParser.c ****       //Pull character from UART
 194:Core/Src/uartParser.c **** 	    volatile uint8_t usartReceivedData = USART3->RDR;
 195:Core/Src/uartParser.c ****       transmitOneChar(usartReceivedData);
 196:Core/Src/uartParser.c ****       //Command string terminated with enter key
 197:Core/Src/uartParser.c **** 	    if (usartReceivedData == '\r') {
 198:Core/Src/uartParser.c ****         uint8_t error = parseCmd();
 199:Core/Src/uartParser.c ****         //Command syntax correct
 200:Core/Src/uartParser.c ****         if (error == 0) {
 201:Core/Src/uartParser.c ****           // Store the commandOut in queue
 202:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 203:Core/Src/uartParser.c ****             transmitCharArray("Push command to queue success.\n");
 204:Core/Src/uartParser.c ****             transmitCharArray(tmpStr);
 205:Core/Src/uartParser.c ****             sendUint16BinToUart(commandOut);
 206:Core/Src/uartParser.c ****           } else {
 207:Core/Src/uartParser.c ****             transmitCharArray("Fail to push command to queue, try again.\n");
 208:Core/Src/uartParser.c ****           }
 209:Core/Src/uartParser.c ****         //Command syntax malformed
 210:Core/Src/uartParser.c ****         } else {
 211:Core/Src/uartParser.c ****           transmitCharArray("Command not recognized");
 212:Core/Src/uartParser.c ****           transmitCharArray(tmpStr);
 213:Core/Src/uartParser.c ****           
 214:Core/Src/uartParser.c ****         }
 215:Core/Src/uartParser.c ****         //Reset command string and index
 216:Core/Src/uartParser.c ****         strIndex = 0;
 217:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 218:Core/Src/uartParser.c ****           tmpStr[i] = '\0';
 219:Core/Src/uartParser.c ****           cmd[0][i] = '\0';
 220:Core/Src/uartParser.c ****           cmd[1][i] = '\0';
 221:Core/Src/uartParser.c ****           cmd[2][i] = '\0';
 222:Core/Src/uartParser.c ****           cmd[3][i] = '\0';
 223:Core/Src/uartParser.c ****         }
 224:Core/Src/uartParser.c **** 
 225:Core/Src/uartParser.c ****         //Reset commandOut before starting next command receive
 226:Core/Src/uartParser.c ****         commandOut = 0;
 227:Core/Src/uartParser.c ****         break;
 228:Core/Src/uartParser.c ****       //Allow backspace/delete key to undo last character
 229:Core/Src/uartParser.c **** 	    } else if (usartReceivedData == 8 || usartReceivedData == 127) {
 230:Core/Src/uartParser.c ****           if (strIndex > 0) {
 231:Core/Src/uartParser.c ****             strIndex -= 1;
 232:Core/Src/uartParser.c ****             tmpStr[strIndex] = '\0';
 233:Core/Src/uartParser.c ****           }
 234:Core/Src/uartParser.c ****       } 
 235:Core/Src/uartParser.c ****       else {
 236:Core/Src/uartParser.c ****         tmpStr[strIndex] = usartReceivedData;
 237:Core/Src/uartParser.c ****         strIndex += 1;
 238:Core/Src/uartParser.c ****         //Command too long
 239:Core/Src/uartParser.c ****         if (strIndex == TMP_STR_LEN) {
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 9


 240:Core/Src/uartParser.c ****       	  transmitCharArray("\n\rCommand is too long!");
 241:Core/Src/uartParser.c ****           strIndex = 0;
 242:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 243:Core/Src/uartParser.c ****             tmpStr[i] = '\0';
 244:Core/Src/uartParser.c ****           }
 245:Core/Src/uartParser.c ****           break;
 246:Core/Src/uartParser.c ****         }
 247:Core/Src/uartParser.c ****       }
 248:Core/Src/uartParser.c ****     }
 249:Core/Src/uartParser.c ****     uartStatus = 0;
 250:Core/Src/uartParser.c ****     //transmitCharArray("Enable Uart RX interrupt");
 251:Core/Src/uartParser.c ****     USART3->CR1 |= USART_CR1_RXNEIE;
 252:Core/Src/uartParser.c ****   }
 253:Core/Src/uartParser.c **** /*
 254:Core/Src/uartParser.c ****   // test queue pop
 255:Core/Src/uartParser.c ****   uint16_t item = queuePop(cmdQueue);
 256:Core/Src/uartParser.c ****   transmitCharArray("Pop items from queue\n");
 257:Core/Src/uartParser.c ****   while (item != 0xffff) {
 258:Core/Src/uartParser.c ****     sendUint16BinToUart(item);
 259:Core/Src/uartParser.c ****     item = queuePop(cmdQueue);
 260:Core/Src/uartParser.c ****   }*/
 261:Core/Src/uartParser.c **** }
 262:Core/Src/uartParser.c **** 
 263:Core/Src/uartParser.c **** //Initialize USART3 - PC4 TX, PC5 RX
 264:Core/Src/uartParser.c **** void initUsart3(void) {
 265:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 266:Core/Src/uartParser.c ****   // set pc4 to AF mode, 0x10
 267:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 268:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 269:Core/Src/uartParser.c ****   // set pc5 to AF mode, 0x10
 270:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 271:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 272:Core/Src/uartParser.c **** 
 273:Core/Src/uartParser.c ****   // set PC4 AFRL to 0001: AF1
 274:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 275:Core/Src/uartParser.c ****   // set PC5 AFRL to 0001: AF1
 276:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 277:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 278:Core/Src/uartParser.c **** 
 279:Core/Src/uartParser.c ****   uint32_t fClk = HAL_RCC_GetHCLKFreq();
 280:Core/Src/uartParser.c **** 
 281:Core/Src/uartParser.c ****   // set baud rate
 282:Core/Src/uartParser.c ****   uint32_t baudRate = 115200;
 283:Core/Src/uartParser.c ****   uint32_t usartBRR = fClk / baudRate;
 284:Core/Src/uartParser.c ****   USART3->BRR = usartBRR;
 285:Core/Src/uartParser.c **** 
 286:Core/Src/uartParser.c ****   // enable the transmitter and receiver hardware of USART3
 287:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 288:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 289:Core/Src/uartParser.c **** 
 290:Core/Src/uartParser.c ****   // Enable USART peripheral.
 291:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 292:Core/Src/uartParser.c ****   transmitCharArray("UART enabled");
 293:Core/Src/uartParser.c **** 
 294:Core/Src/uartParser.c ****   // Enable the receive register not empty interrupt.
 295:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 296:Core/Src/uartParser.c ****   // Enable and set the USART interrupt priority in the NVIC.
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 10


 297:Core/Src/uartParser.c ****   NVIC_EnableIRQ(USART3_4_IRQn);
 298:Core/Src/uartParser.c ****   NVIC_SetPriority(USART3_4_IRQn, 3);
 299:Core/Src/uartParser.c ****   /* Create the semaphores(s) */
 300:Core/Src/uartParser.c ****   /* definition and creation of myBinarySem02 */
 301:Core/Src/uartParser.c ****   // The semaphore is created with an initial count of 0 
 302:Core/Src/uartParser.c ****   // ,which means it is not available initially. 
 303:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
 304:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 305:Core/Src/uartParser.c **** }
 306:Core/Src/uartParser.c **** 
 307:Core/Src/uartParser.c **** // Handle uart RX with interrupt
 308:Core/Src/uartParser.c **** void USART3_4_IRQHandler(void) {
 309:Core/Src/uartParser.c ****   transmitCharArray("UART RX interrupt.");
 310:Core/Src/uartParser.c ****   if (uartStatus == 0) {
 311:Core/Src/uartParser.c ****     while((USART3->ISR & USART_ISR_RXNE) == 0) {
 312:Core/Src/uartParser.c **** 	  }
 313:Core/Src/uartParser.c ****     //transmitCharArray("Release sem02\n");
 314:Core/Src/uartParser.c ****     osSemaphoreRelease(binarySem02UartParserHandle);
 315:Core/Src/uartParser.c ****     volatile uint8_t usartReceivedData = USART3->RDR;
 316:Core/Src/uartParser.c ****     transmitCharArray("cmd:\n");
 317:Core/Src/uartParser.c ****     transmitOneChar(usartReceivedData);
 318:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 319:Core/Src/uartParser.c **** 		strIndex++;
 320:Core/Src/uartParser.c ****     uartStatus = 1;
 321:Core/Src/uartParser.c ****     // Disable the receive register not empty interrupt.
 322:Core/Src/uartParser.c ****     USART3->CR1 &= ~USART_CR1_RXNEIE;
 323:Core/Src/uartParser.c ****   }
 324:Core/Src/uartParser.c **** }
 325:Core/Src/uartParser.c **** 
 326:Core/Src/uartParser.c **** void transmitOneChar(uint8_t ch) {
 200              		.loc 1 326 34 is_stmt 1 view -0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204              		@ link register save eliminated.
 205              	.LVL20:
 206              	.L14:
 327:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 328:Core/Src/uartParser.c ****   }
 207              		.loc 1 328 3 view .LVU57
 327:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 208              		.loc 1 327 40 discriminator 1 view .LVU58
 327:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 209              		.loc 1 327 17 is_stmt 0 discriminator 1 view .LVU59
 210 0000 034B     		ldr	r3, .L16
 211 0002 DB69     		ldr	r3, [r3, #28]
 327:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 212              		.loc 1 327 40 discriminator 1 view .LVU60
 213 0004 1B06     		lsls	r3, r3, #24
 214 0006 FBD5     		bpl	.L14
 329:Core/Src/uartParser.c ****   USART3->TDR = ch;
 215              		.loc 1 329 3 is_stmt 1 view .LVU61
 216              		.loc 1 329 15 is_stmt 0 view .LVU62
 217 0008 014B     		ldr	r3, .L16
 218 000a 1885     		strh	r0, [r3, #40]
 330:Core/Src/uartParser.c **** }
 219              		.loc 1 330 1 view .LVU63
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 11


 220              		@ sp needed
 221 000c 7047     		bx	lr
 222              	.L17:
 223 000e C046     		.align	2
 224              	.L16:
 225 0010 00480040 		.word	1073760256
 226              		.cfi_endproc
 227              	.LFE49:
 229              		.section	.text.transmitCharArray,"ax",%progbits
 230              		.align	1
 231              		.global	transmitCharArray
 232              		.syntax unified
 233              		.code	16
 234              		.thumb_func
 236              	transmitCharArray:
 237              	.LVL21:
 238              	.LFB50:
 331:Core/Src/uartParser.c **** 
 332:Core/Src/uartParser.c **** void transmitCharArray (char *arr) {
 239              		.loc 1 332 36 is_stmt 1 view -0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 243              		.loc 1 332 36 is_stmt 0 view .LVU65
 244 0000 10B5     		push	{r4, lr}
 245              	.LCFI1:
 246              		.cfi_def_cfa_offset 8
 247              		.cfi_offset 4, -8
 248              		.cfi_offset 14, -4
 249 0002 0400     		movs	r4, r0
 333:Core/Src/uartParser.c ****   while (*arr != '\0') {
 250              		.loc 1 333 3 is_stmt 1 view .LVU66
 251              		.loc 1 333 9 is_stmt 0 view .LVU67
 252 0004 02E0     		b	.L19
 253              	.LVL22:
 254              	.L20:
 334:Core/Src/uartParser.c **** 		transmitOneChar(*arr);
 255              		.loc 1 334 3 is_stmt 1 view .LVU68
 256 0006 FFF7FEFF 		bl	transmitOneChar
 257              	.LVL23:
 335:Core/Src/uartParser.c **** 		arr++;
 258              		.loc 1 335 3 view .LVU69
 259              		.loc 1 335 6 is_stmt 0 view .LVU70
 260 000a 0134     		adds	r4, r4, #1
 261              	.LVL24:
 262              	.L19:
 333:Core/Src/uartParser.c ****   while (*arr != '\0') {
 263              		.loc 1 333 15 is_stmt 1 view .LVU71
 333:Core/Src/uartParser.c ****   while (*arr != '\0') {
 264              		.loc 1 333 10 is_stmt 0 view .LVU72
 265 000c 2078     		ldrb	r0, [r4]
 333:Core/Src/uartParser.c ****   while (*arr != '\0') {
 266              		.loc 1 333 15 view .LVU73
 267 000e 0028     		cmp	r0, #0
 268 0010 F9D1     		bne	.L20
 336:Core/Src/uartParser.c **** 	}
 337:Core/Src/uartParser.c ****   transmitOneChar('\n');
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 12


 269              		.loc 1 337 3 is_stmt 1 view .LVU74
 270 0012 0A30     		adds	r0, r0, #10
 271 0014 FFF7FEFF 		bl	transmitOneChar
 272              	.LVL25:
 338:Core/Src/uartParser.c ****   transmitOneChar('\r');
 273              		.loc 1 338 3 view .LVU75
 274 0018 0D20     		movs	r0, #13
 275 001a FFF7FEFF 		bl	transmitOneChar
 276              	.LVL26:
 339:Core/Src/uartParser.c **** }...
 277              		.loc 1 339 1 is_stmt 0 view .LVU76
 278              		@ sp needed
 279              	.LVL27:
 280              		.loc 1 339 1 view .LVU77
 281 001e 10BD     		pop	{r4, pc}
 282              		.cfi_endproc
 283              	.LFE50:
 285              		.section	.text.sendUint16BinToUart,"ax",%progbits
 286              		.align	1
 287              		.global	sendUint16BinToUart
 288              		.syntax unified
 289              		.code	16
 290              		.thumb_func
 292              	sendUint16BinToUart:
 293              	.LVL28:
 294              	.LFB43:
  28:Core/Src/uartParser.c **** void sendUint16BinToUart(uint16_t x) {
 295              		.loc 1 28 38 is_stmt 1 view -0
 296              		.cfi_startproc
 297              		@ args = 0, pretend = 0, frame = 16
 298              		@ frame_needed = 0, uses_anonymous_args = 0
  28:Core/Src/uartParser.c **** void sendUint16BinToUart(uint16_t x) {
 299              		.loc 1 28 38 is_stmt 0 view .LVU79
 300 0000 10B5     		push	{r4, lr}
 301              	.LCFI2:
 302              		.cfi_def_cfa_offset 8
 303              		.cfi_offset 4, -8
 304              		.cfi_offset 14, -4
 305 0002 84B0     		sub	sp, sp, #16
 306              	.LCFI3:
 307              		.cfi_def_cfa_offset 24
  29:Core/Src/uartParser.c **** 	char str[16];
 308              		.loc 1 29 2 is_stmt 1 view .LVU80
  30:Core/Src/uartParser.c **** 	uint8_t i = 0;
 309              		.loc 1 30 2 view .LVU81
 310              	.LVL29:
  31:Core/Src/uartParser.c **** 	while (i < 16) {
 311              		.loc 1 31 2 view .LVU82
  30:Core/Src/uartParser.c **** 	uint8_t i = 0;
 312              		.loc 1 30 10 is_stmt 0 view .LVU83
 313 0004 0023     		movs	r3, #0
  31:Core/Src/uartParser.c **** 	while (i < 16) {
 314              		.loc 1 31 8 view .LVU84
 315 0006 0AE0     		b	.L22
 316              	.LVL30:
 317              	.L23:
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 13


 318              		.loc 1 32 3 is_stmt 1 view .LVU85
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 319              		.loc 1 32 25 is_stmt 0 view .LVU86
 320 0008 0100     		movs	r1, r0
 321 000a 1941     		asrs	r1, r1, r3
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 322              		.loc 1 32 31 view .LVU87
 323 000c 0122     		movs	r2, #1
 324 000e 0A40     		ands	r2, r1
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 325              		.loc 1 32 9 view .LVU88
 326 0010 0F21     		movs	r1, #15
 327 0012 C91A     		subs	r1, r1, r3
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 328              		.loc 1 32 19 view .LVU89
 329 0014 3032     		adds	r2, r2, #48
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 330              		.loc 1 32 13 view .LVU90
 331 0016 6C46     		mov	r4, sp
 332 0018 6254     		strb	r2, [r4, r1]
  33:Core/Src/uartParser.c **** 	  i++;
 333              		.loc 1 33 4 is_stmt 1 view .LVU91
  33:Core/Src/uartParser.c **** 	  i++;
 334              		.loc 1 33 5 is_stmt 0 view .LVU92
 335 001a 0133     		adds	r3, r3, #1
 336              	.LVL31:
  33:Core/Src/uartParser.c **** 	  i++;
 337              		.loc 1 33 5 view .LVU93
 338 001c DBB2     		uxtb	r3, r3
 339              	.LVL32:
 340              	.L22:
  31:Core/Src/uartParser.c **** 	while (i < 16) {
 341              		.loc 1 31 11 is_stmt 1 view .LVU94
 342 001e 0F2B     		cmp	r3, #15
 343 0020 F2D9     		bls	.L23
  35:Core/Src/uartParser.c **** 	transmitCharArray(str);
 344              		.loc 1 35 2 view .LVU95
 345 0022 6846     		mov	r0, sp
 346              	.LVL33:
  35:Core/Src/uartParser.c **** 	transmitCharArray(str);
 347              		.loc 1 35 2 is_stmt 0 view .LVU96
 348 0024 FFF7FEFF 		bl	transmitCharArray
 349              	.LVL34:
  36:Core/Src/uartParser.c **** }
 350              		.loc 1 36 1 view .LVU97
 351 0028 04B0     		add	sp, sp, #16
 352              		@ sp needed
 353 002a 10BD     		pop	{r4, pc}
 354              		.cfi_endproc
 355              	.LFE43:
 357              		.section	.rodata.parseCmd.str1.4,"aMS",%progbits,1
 358              		.align	2
 359              	.LC5:
 360 0000 6C656400 		.ascii	"led\000"
 361              		.align	2
 362              	.LC8:
 363 0004 72656400 		.ascii	"red\000"
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 14


 364              		.align	2
 365              	.LC11:
 366 0008 67726565 		.ascii	"green\000"
 366      6E00
 367 000e 0000     		.align	2
 368              	.LC13:
 369 0010 626C7565 		.ascii	"blue\000"
 369      00
 370 0015 000000   		.align	2
 371              	.LC15:
 372 0018 6F72616E 		.ascii	"orange\000"
 372      676500
 373 001f 00       		.align	2
 374              	.LC17:
 375 0020 616C6C00 		.ascii	"all\000"
 376              		.align	2
 377              	.LC19:
 378 0024 6F6E00   		.ascii	"on\000"
 379 0027 00       		.align	2
 380              	.LC22:
 381 0028 6F666600 		.ascii	"off\000"
 382              		.align	2
 383              	.LC24:
 384 002c 746F6767 		.ascii	"toggle\000"
 384      6C6500
 385 0033 00       		.align	2
 386              	.LC26:
 387 0034 626C696E 		.ascii	"blink\000"
 387      6B00
 388 003a 0000     		.align	2
 389              	.LC29:
 390 003c 426C696E 		.ascii	"Blink speed limited to 1500 ms\000"
 390      6B207370 
 390      65656420 
 390      6C696D69 
 390      74656420 
 391 005b 00       		.align	2
 392              	.LC31:
 393 005c 6D6F746F 		.ascii	"motor\000"
 393      7200
 394 0062 0000     		.align	2
 395              	.LC33:
 396 0064 73706565 		.ascii	"speed\000"
 396      6400
 397 006a 0000     		.align	2
 398              	.LC35:
 399 006c 4D6F746F 		.ascii	"Motor speed limited to 100 RPM\000"
 399      72207370 
 399      65656420 
 399      6C696D69 
 399      74656420 
 400              		.section	.text.parseCmd,"ax",%progbits
 401              		.align	1
 402              		.global	parseCmd
 403              		.syntax unified
 404              		.code	16
 405              		.thumb_func
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 15


 407              	parseCmd:
 408              	.LFB44:
  38:Core/Src/uartParser.c **** uint8_t parseCmd(void) {
 409              		.loc 1 38 24 is_stmt 1 view -0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 8
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413 0000 30B5     		push	{r4, r5, lr}
 414              	.LCFI4:
 415              		.cfi_def_cfa_offset 12
 416              		.cfi_offset 4, -12
 417              		.cfi_offset 5, -8
 418              		.cfi_offset 14, -4
 419 0002 83B0     		sub	sp, sp, #12
 420              	.LCFI5:
 421              		.cfi_def_cfa_offset 24
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
 422              		.loc 1 39 3 view .LVU99
 423              	.LVL35:
  40:Core/Src/uartParser.c ****   uint8_t speed = 0;
 424              		.loc 1 40 3 view .LVU100
  42:Core/Src/uartParser.c ****   volatile uint8_t strLen = strIndex + 1;
 425              		.loc 1 42 3 view .LVU101
  42:Core/Src/uartParser.c ****   volatile uint8_t strLen = strIndex + 1;
 426              		.loc 1 42 38 is_stmt 0 view .LVU102
 427 0004 B14A     		ldr	r2, .L58
 428 0006 1378     		ldrb	r3, [r2]
 429 0008 0133     		adds	r3, r3, #1
 430 000a DBB2     		uxtb	r3, r3
  42:Core/Src/uartParser.c ****   volatile uint8_t strLen = strIndex + 1;
 431              		.loc 1 42 20 view .LVU103
 432 000c 6946     		mov	r1, sp
 433 000e CB71     		strb	r3, [r1, #7]
  43:Core/Src/uartParser.c ****   strIndex = 0;
 434              		.loc 1 43 3 is_stmt 1 view .LVU104
  43:Core/Src/uartParser.c ****   strIndex = 0;
 435              		.loc 1 43 12 is_stmt 0 view .LVU105
 436 0010 0023     		movs	r3, #0
 437 0012 1370     		strb	r3, [r2]
  44:Core/Src/uartParser.c ****   cmdStrIndex = 0;
 438              		.loc 1 44 3 is_stmt 1 view .LVU106
  44:Core/Src/uartParser.c ****   cmdStrIndex = 0;
 439              		.loc 1 44 15 is_stmt 0 view .LVU107
 440 0014 AE4A     		ldr	r2, .L58+4
 441 0016 1370     		strb	r3, [r2]
  45:Core/Src/uartParser.c ****   cmdIndex = 0;
 442              		.loc 1 45 3 is_stmt 1 view .LVU108
  45:Core/Src/uartParser.c ****   cmdIndex = 0;
 443              		.loc 1 45 12 is_stmt 0 view .LVU109
 444 0018 AE4A     		ldr	r2, .L58+8
 445 001a 1370     		strb	r3, [r2]
  46:Core/Src/uartParser.c ****   while (strIndex < strLen) {
 446              		.loc 1 46 3 is_stmt 1 view .LVU110
  46:Core/Src/uartParser.c ****   while (strIndex < strLen) {
 447              		.loc 1 46 9 is_stmt 0 view .LVU111
 448 001c 0CE0     		b	.L25
 449              	.L55:
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 16


  48:Core/Src/uartParser.c ****       cmdIndex++;
 450              		.loc 1 48 7 is_stmt 1 view .LVU112
  48:Core/Src/uartParser.c ****       cmdIndex++;
 451              		.loc 1 48 15 is_stmt 0 view .LVU113
 452 001e AD4A     		ldr	r2, .L58+8
 453 0020 1378     		ldrb	r3, [r2]
 454 0022 0133     		adds	r3, r3, #1
 455 0024 DBB2     		uxtb	r3, r3
 456 0026 1370     		strb	r3, [r2]
  49:Core/Src/uartParser.c ****       cmdStrIndex = 0;
 457              		.loc 1 49 7 is_stmt 1 view .LVU114
  49:Core/Src/uartParser.c ****       cmdStrIndex = 0;
 458              		.loc 1 49 19 is_stmt 0 view .LVU115
 459 0028 A94B     		ldr	r3, .L58+4
 460 002a 0022     		movs	r2, #0
 461 002c 1A70     		strb	r2, [r3]
 462              	.L27:
  54:Core/Src/uartParser.c ****     strIndex++;
 463              		.loc 1 54 5 is_stmt 1 view .LVU116
  54:Core/Src/uartParser.c ****     strIndex++;
 464              		.loc 1 54 13 is_stmt 0 view .LVU117
 465 002e A74A     		ldr	r2, .L58
 466 0030 1378     		ldrb	r3, [r2]
 467 0032 0133     		adds	r3, r3, #1
 468 0034 DBB2     		uxtb	r3, r3
 469 0036 1370     		strb	r3, [r2]
 470              	.L25:
  46:Core/Src/uartParser.c ****   while (strIndex < strLen) {
 471              		.loc 1 46 19 is_stmt 1 view .LVU118
 472 0038 A44B     		ldr	r3, .L58
 473 003a 1A78     		ldrb	r2, [r3]
 474 003c D2B2     		uxtb	r2, r2
 475 003e 6B46     		mov	r3, sp
 476 0040 0733     		adds	r3, r3, #7
 477 0042 1B78     		ldrb	r3, [r3]
 478 0044 DBB2     		uxtb	r3, r3
 479 0046 9A42     		cmp	r2, r3
 480 0048 1CD2     		bcs	.L54
  47:Core/Src/uartParser.c ****     if (tmpStr[strIndex] == ' ') {
 481              		.loc 1 47 5 view .LVU119
  47:Core/Src/uartParser.c ****     if (tmpStr[strIndex] == ' ') {
 482              		.loc 1 47 15 is_stmt 0 view .LVU120
 483 004a A04B     		ldr	r3, .L58
 484 004c 1B78     		ldrb	r3, [r3]
 485 004e DBB2     		uxtb	r3, r3
 486 0050 A14A     		ldr	r2, .L58+12
 487 0052 D35C     		ldrb	r3, [r2, r3]
  47:Core/Src/uartParser.c ****     if (tmpStr[strIndex] == ' ') {
 488              		.loc 1 47 8 view .LVU121
 489 0054 202B     		cmp	r3, #32
 490 0056 E2D0     		beq	.L55
  51:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 491              		.loc 1 51 7 is_stmt 1 view .LVU122
  51:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 492              		.loc 1 51 42 is_stmt 0 view .LVU123
 493 0058 9C4B     		ldr	r3, .L58
 494 005a 1A78     		ldrb	r2, [r3]
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 17


 495 005c D2B2     		uxtb	r2, r2
  51:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 496              		.loc 1 51 20 view .LVU124
 497 005e 9D4B     		ldr	r3, .L58+8
 498 0060 1B78     		ldrb	r3, [r3]
 499 0062 9B49     		ldr	r1, .L58+4
 500 0064 0878     		ldrb	r0, [r1]
 501 0066 C0B2     		uxtb	r0, r0
  51:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 502              		.loc 1 51 42 view .LVU125
 503 0068 9B4C     		ldr	r4, .L58+12
 504 006a A45C     		ldrb	r4, [r4, r2]
 505 006c E4B2     		uxtb	r4, r4
  51:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 506              		.loc 1 51 34 view .LVU126
 507 006e 9B4A     		ldr	r2, .L58+16
 508 0070 9D00     		lsls	r5, r3, #2
 509 0072 5B19     		adds	r3, r3, r5
 510 0074 9B00     		lsls	r3, r3, #2
 511 0076 D218     		adds	r2, r2, r3
 512 0078 1454     		strb	r4, [r2, r0]
  52:Core/Src/uartParser.c ****       cmdStrIndex++;
 513              		.loc 1 52 7 is_stmt 1 view .LVU127
  52:Core/Src/uartParser.c ****       cmdStrIndex++;
 514              		.loc 1 52 18 is_stmt 0 view .LVU128
 515 007a 0B78     		ldrb	r3, [r1]
 516 007c 0133     		adds	r3, r3, #1
 517 007e DBB2     		uxtb	r3, r3
 518 0080 0B70     		strb	r3, [r1]
 519 0082 D4E7     		b	.L27
 520              	.L54:
  58:Core/Src/uartParser.c ****   if (strcasecmp(cmd[0], "led") == 0) {
 521              		.loc 1 58 3 is_stmt 1 view .LVU129
  58:Core/Src/uartParser.c ****   if (strcasecmp(cmd[0], "led") == 0) {
 522              		.loc 1 58 7 is_stmt 0 view .LVU130
 523 0084 9649     		ldr	r1, .L58+20
 524 0086 9548     		ldr	r0, .L58+16
 525 0088 FFF7FEFF 		bl	strcasecmp
 526              	.LVL36:
  58:Core/Src/uartParser.c ****   if (strcasecmp(cmd[0], "led") == 0) {
 527              		.loc 1 58 6 discriminator 1 view .LVU131
 528 008c 0028     		cmp	r0, #0
 529 008e 00D0     		beq	.LCB425
 530 0090 B7E0     		b	.L29	@long jump
 531              	.LCB425:
  59:Core/Src/uartParser.c ****     commandOut |= 0xA000;
 532              		.loc 1 59 5 is_stmt 1 view .LVU132
  59:Core/Src/uartParser.c ****     commandOut |= 0xA000;
 533              		.loc 1 59 16 is_stmt 0 view .LVU133
 534 0092 944A     		ldr	r2, .L58+24
 535 0094 1388     		ldrh	r3, [r2]
 536 0096 9449     		ldr	r1, .L58+28
 537 0098 0B43     		orrs	r3, r1
 538 009a 9BB2     		uxth	r3, r3
 539 009c 1380     		strh	r3, [r2]
  61:Core/Src/uartParser.c ****     if (strcasecmp(cmd[1], "red") == 0) {
 540              		.loc 1 61 5 is_stmt 1 view .LVU134
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 18


  61:Core/Src/uartParser.c ****     if (strcasecmp(cmd[1], "red") == 0) {
 541              		.loc 1 61 9 is_stmt 0 view .LVU135
 542 009e 9349     		ldr	r1, .L58+32
 543 00a0 9348     		ldr	r0, .L58+36
 544 00a2 FFF7FEFF 		bl	strcasecmp
 545              	.LVL37:
  61:Core/Src/uartParser.c ****     if (strcasecmp(cmd[1], "red") == 0) {
 546              		.loc 1 61 8 discriminator 1 view .LVU136
 547 00a6 0028     		cmp	r0, #0
 548 00a8 25D1     		bne	.L30
  62:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 549              		.loc 1 62 7 is_stmt 1 view .LVU137
  62:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 550              		.loc 1 62 18 is_stmt 0 view .LVU138
 551 00aa 8E4A     		ldr	r2, .L58+24
 552 00ac 1388     		ldrh	r3, [r2]
 553 00ae 8021     		movs	r1, #128
 554 00b0 4900     		lsls	r1, r1, #1
 555 00b2 0B43     		orrs	r3, r1
 556 00b4 1380     		strh	r3, [r2]
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
 557              		.loc 1 39 11 view .LVU139
 558 00b6 0024     		movs	r4, #0
 559              	.L31:
 560              	.LVL38:
  75:Core/Src/uartParser.c ****     if (strcasecmp(cmd[2], "on") == 0) {
 561              		.loc 1 75 5 is_stmt 1 view .LVU140
  75:Core/Src/uartParser.c ****     if (strcasecmp(cmd[2], "on") == 0) {
 562              		.loc 1 75 9 is_stmt 0 view .LVU141
 563 00b8 8E49     		ldr	r1, .L58+40
 564 00ba 8F48     		ldr	r0, .L58+44
 565 00bc FFF7FEFF 		bl	strcasecmp
 566              	.LVL39:
  75:Core/Src/uartParser.c ****     if (strcasecmp(cmd[2], "on") == 0) {
 567              		.loc 1 75 8 discriminator 1 view .LVU142
 568 00c0 0028     		cmp	r0, #0
 569 00c2 52D1     		bne	.L35
  76:Core/Src/uartParser.c ****       commandOut |= 0x0010;
 570              		.loc 1 76 7 is_stmt 1 view .LVU143
  76:Core/Src/uartParser.c ****       commandOut |= 0x0010;
 571              		.loc 1 76 18 is_stmt 0 view .LVU144
 572 00c4 874A     		ldr	r2, .L58+24
 573 00c6 1388     		ldrh	r3, [r2]
 574 00c8 1021     		movs	r1, #16
 575 00ca 0B43     		orrs	r3, r1
 576 00cc 9BB2     		uxth	r3, r3
 577 00ce 1380     		strh	r3, [r2]
  77:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
 578              		.loc 1 77 7 is_stmt 1 view .LVU145
  77:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
 579              		.loc 1 77 17 is_stmt 0 view .LVU146
 580 00d0 824B     		ldr	r3, .L58+16
 581 00d2 3C22     		movs	r2, #60
 582 00d4 9B5C     		ldrb	r3, [r3, r2]
 583 00d6 D8B2     		uxtb	r0, r3
  77:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
 584              		.loc 1 77 10 view .LVU147
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 19


 585 00d8 002B     		cmp	r3, #0
 586 00da 01D0     		beq	.L36
  40:Core/Src/uartParser.c ****   uint8_t speed = 0;
 587              		.loc 1 40 11 view .LVU148
 588 00dc 0020     		movs	r0, #0
  78:Core/Src/uartParser.c ****         error = 1;
 589              		.loc 1 78 15 view .LVU149
 590 00de 0124     		movs	r4, #1
 591              	.LVL40:
 592              	.L36:
  98:Core/Src/uartParser.c ****       if (speed > 15) {
 593              		.loc 1 98 7 is_stmt 1 view .LVU150
  98:Core/Src/uartParser.c ****       if (speed > 15) {
 594              		.loc 1 98 10 is_stmt 0 view .LVU151
 595 00e0 0F28     		cmp	r0, #15
 596 00e2 00D9     		bls	.LCB485
 597 00e4 83E0     		b	.L56	@long jump
 598              	.LCB485:
 103:Core/Src/uartParser.c ****         commandOut |= speed;
 599              		.loc 1 103 9 is_stmt 1 view .LVU152
 103:Core/Src/uartParser.c ****         commandOut |= speed;
 600              		.loc 1 103 20 is_stmt 0 view .LVU153
 601 00e6 7F4A     		ldr	r2, .L58+24
 602 00e8 1388     		ldrh	r3, [r2]
 603 00ea 0343     		orrs	r3, r0
 604 00ec 9BB2     		uxth	r3, r3
 605 00ee 1380     		strh	r3, [r2]
 606              	.L39:
 607              	.LVL41:
 138:Core/Src/uartParser.c ****   return error;
 608              		.loc 1 138 3 is_stmt 1 view .LVU154
 139:Core/Src/uartParser.c **** }
 609              		.loc 1 139 1 is_stmt 0 view .LVU155
 610 00f0 2000     		movs	r0, r4
 611 00f2 03B0     		add	sp, sp, #12
 612              		@ sp needed
 613              	.LVL42:
 139:Core/Src/uartParser.c **** }
 614              		.loc 1 139 1 view .LVU156
 615 00f4 30BD     		pop	{r4, r5, pc}
 616              	.LVL43:
 617              	.L30:
  63:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "green") == 0) {
 618              		.loc 1 63 12 is_stmt 1 view .LVU157
  63:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "green") == 0) {
 619              		.loc 1 63 16 is_stmt 0 view .LVU158
 620 00f6 8149     		ldr	r1, .L58+48
 621 00f8 7D48     		ldr	r0, .L58+36
 622 00fa FFF7FEFF 		bl	strcasecmp
 623              	.LVL44:
  63:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "green") == 0) {
 624              		.loc 1 63 15 discriminator 1 view .LVU159
 625 00fe 0028     		cmp	r0, #0
 626 0100 07D1     		bne	.L32
  64:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 627              		.loc 1 64 7 is_stmt 1 view .LVU160
  64:Core/Src/uartParser.c ****       commandOut |= 0x0200;
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 20


 628              		.loc 1 64 18 is_stmt 0 view .LVU161
 629 0102 784A     		ldr	r2, .L58+24
 630 0104 1388     		ldrh	r3, [r2]
 631 0106 8021     		movs	r1, #128
 632 0108 8900     		lsls	r1, r1, #2
 633 010a 0B43     		orrs	r3, r1
 634 010c 1380     		strh	r3, [r2]
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
 635              		.loc 1 39 11 view .LVU162
 636 010e 0024     		movs	r4, #0
 637 0110 D2E7     		b	.L31
 638              	.L32:
  65:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "blue") == 0) {
 639              		.loc 1 65 12 is_stmt 1 view .LVU163
  65:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "blue") == 0) {
 640              		.loc 1 65 16 is_stmt 0 view .LVU164
 641 0112 7B49     		ldr	r1, .L58+52
 642 0114 7648     		ldr	r0, .L58+36
 643 0116 FFF7FEFF 		bl	strcasecmp
 644              	.LVL45:
  65:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "blue") == 0) {
 645              		.loc 1 65 15 discriminator 1 view .LVU165
 646 011a 0028     		cmp	r0, #0
 647 011c 07D1     		bne	.L33
  66:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 648              		.loc 1 66 7 is_stmt 1 view .LVU166
  66:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 649              		.loc 1 66 18 is_stmt 0 view .LVU167
 650 011e 714A     		ldr	r2, .L58+24
 651 0120 1388     		ldrh	r3, [r2]
 652 0122 C021     		movs	r1, #192
 653 0124 8900     		lsls	r1, r1, #2
 654 0126 0B43     		orrs	r3, r1
 655 0128 1380     		strh	r3, [r2]
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
 656              		.loc 1 39 11 view .LVU168
 657 012a 0024     		movs	r4, #0
 658 012c C4E7     		b	.L31
 659              	.L33:
  67:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "orange") == 0) {
 660              		.loc 1 67 12 is_stmt 1 view .LVU169
  67:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "orange") == 0) {
 661              		.loc 1 67 16 is_stmt 0 view .LVU170
 662 012e 7549     		ldr	r1, .L58+56
 663 0130 6F48     		ldr	r0, .L58+36
 664 0132 FFF7FEFF 		bl	strcasecmp
 665              	.LVL46:
  67:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "orange") == 0) {
 666              		.loc 1 67 15 discriminator 1 view .LVU171
 667 0136 0028     		cmp	r0, #0
 668 0138 07D1     		bne	.L34
  68:Core/Src/uartParser.c ****       commandOut |= 0x0400;
 669              		.loc 1 68 7 is_stmt 1 view .LVU172
  68:Core/Src/uartParser.c ****       commandOut |= 0x0400;
 670              		.loc 1 68 18 is_stmt 0 view .LVU173
 671 013a 6A4A     		ldr	r2, .L58+24
 672 013c 1388     		ldrh	r3, [r2]
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 21


 673 013e 8021     		movs	r1, #128
 674 0140 C900     		lsls	r1, r1, #3
 675 0142 0B43     		orrs	r3, r1
 676 0144 1380     		strh	r3, [r2]
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
 677              		.loc 1 39 11 view .LVU174
 678 0146 0024     		movs	r4, #0
 679 0148 B6E7     		b	.L31
 680              	.L34:
  69:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "all") == 0) {
 681              		.loc 1 69 12 is_stmt 1 view .LVU175
  69:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "all") == 0) {
 682              		.loc 1 69 16 is_stmt 0 view .LVU176
 683 014a 6F49     		ldr	r1, .L58+60
 684 014c 6848     		ldr	r0, .L58+36
 685 014e FFF7FEFF 		bl	strcasecmp
 686              	.LVL47:
  69:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "all") == 0) {
 687              		.loc 1 69 15 discriminator 1 view .LVU177
 688 0152 0028     		cmp	r0, #0
 689 0154 07D1     		bne	.L46
  70:Core/Src/uartParser.c ****       commandOut |= 0x0500;
 690              		.loc 1 70 7 is_stmt 1 view .LVU178
  70:Core/Src/uartParser.c ****       commandOut |= 0x0500;
 691              		.loc 1 70 18 is_stmt 0 view .LVU179
 692 0156 634A     		ldr	r2, .L58+24
 693 0158 1388     		ldrh	r3, [r2]
 694 015a A021     		movs	r1, #160
 695 015c C900     		lsls	r1, r1, #3
 696 015e 0B43     		orrs	r3, r1
 697 0160 1380     		strh	r3, [r2]
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
 698              		.loc 1 39 11 view .LVU180
 699 0162 0024     		movs	r4, #0
 700 0164 A8E7     		b	.L31
 701              	.L46:
  72:Core/Src/uartParser.c ****       error = 1;
 702              		.loc 1 72 13 view .LVU181
 703 0166 0124     		movs	r4, #1
 704 0168 A6E7     		b	.L31
 705              	.LVL48:
 706              	.L35:
  79:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "off") == 0) {
 707              		.loc 1 79 12 is_stmt 1 view .LVU182
  79:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "off") == 0) {
 708              		.loc 1 79 16 is_stmt 0 view .LVU183
 709 016a 6849     		ldr	r1, .L58+64
 710 016c 6248     		ldr	r0, .L58+44
 711 016e FFF7FEFF 		bl	strcasecmp
 712              	.LVL49:
  79:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "off") == 0) {
 713              		.loc 1 79 15 discriminator 1 view .LVU184
 714 0172 0028     		cmp	r0, #0
 715 0174 0ED1     		bne	.L37
  80:Core/Src/uartParser.c ****       commandOut |= 0x0020;
 716              		.loc 1 80 7 is_stmt 1 view .LVU185
  80:Core/Src/uartParser.c ****       commandOut |= 0x0020;
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 22


 717              		.loc 1 80 18 is_stmt 0 view .LVU186
 718 0176 5B4A     		ldr	r2, .L58+24
 719 0178 1388     		ldrh	r3, [r2]
 720 017a 2021     		movs	r1, #32
 721 017c 0B43     		orrs	r3, r1
 722 017e 9BB2     		uxth	r3, r3
 723 0180 1380     		strh	r3, [r2]
  81:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
 724              		.loc 1 81 7 is_stmt 1 view .LVU187
  81:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
 725              		.loc 1 81 17 is_stmt 0 view .LVU188
 726 0182 564B     		ldr	r3, .L58+16
 727 0184 3C22     		movs	r2, #60
 728 0186 9B5C     		ldrb	r3, [r3, r2]
 729 0188 D8B2     		uxtb	r0, r3
  81:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
 730              		.loc 1 81 10 view .LVU189
 731 018a 002B     		cmp	r3, #0
 732 018c A8D0     		beq	.L36
  40:Core/Src/uartParser.c ****   uint8_t speed = 0;
 733              		.loc 1 40 11 view .LVU190
 734 018e 0020     		movs	r0, #0
  82:Core/Src/uartParser.c ****         error = 1;
 735              		.loc 1 82 15 view .LVU191
 736 0190 0124     		movs	r4, #1
 737              	.LVL50:
  82:Core/Src/uartParser.c ****         error = 1;
 738              		.loc 1 82 15 view .LVU192
 739 0192 A5E7     		b	.L36
 740              	.LVL51:
 741              	.L37:
  83:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "toggle") == 0) {
 742              		.loc 1 83 12 is_stmt 1 view .LVU193
  83:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "toggle") == 0) {
 743              		.loc 1 83 16 is_stmt 0 view .LVU194
 744 0194 5E49     		ldr	r1, .L58+68
 745 0196 5848     		ldr	r0, .L58+44
 746 0198 FFF7FEFF 		bl	strcasecmp
 747              	.LVL52:
  83:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "toggle") == 0) {
 748              		.loc 1 83 15 discriminator 1 view .LVU195
 749 019c 0028     		cmp	r0, #0
 750 019e 0FD1     		bne	.L38
  84:Core/Src/uartParser.c ****       commandOut |= 0x0030;
 751              		.loc 1 84 7 is_stmt 1 view .LVU196
  84:Core/Src/uartParser.c ****       commandOut |= 0x0030;
 752              		.loc 1 84 18 is_stmt 0 view .LVU197
 753 01a0 504A     		ldr	r2, .L58+24
 754 01a2 1388     		ldrh	r3, [r2]
 755 01a4 3021     		movs	r1, #48
 756 01a6 0B43     		orrs	r3, r1
 757 01a8 9BB2     		uxth	r3, r3
 758 01aa 1380     		strh	r3, [r2]
  85:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
 759              		.loc 1 85 7 is_stmt 1 view .LVU198
  85:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
 760              		.loc 1 85 17 is_stmt 0 view .LVU199
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 23


 761 01ac 4B4B     		ldr	r3, .L58+16
 762 01ae 3C22     		movs	r2, #60
 763 01b0 9B5C     		ldrb	r3, [r3, r2]
 764 01b2 D8B2     		uxtb	r0, r3
  85:Core/Src/uartParser.c ****       if (cmd[3][0] != '\0')
 765              		.loc 1 85 10 view .LVU200
 766 01b4 002B     		cmp	r3, #0
 767 01b6 00D1     		bne	.LCB653
 768 01b8 92E7     		b	.L36	@long jump
 769              	.LCB653:
  40:Core/Src/uartParser.c ****   uint8_t speed = 0;
 770              		.loc 1 40 11 view .LVU201
 771 01ba 0020     		movs	r0, #0
  86:Core/Src/uartParser.c ****         error = 1;
 772              		.loc 1 86 15 view .LVU202
 773 01bc 0124     		movs	r4, #1
 774              	.LVL53:
  86:Core/Src/uartParser.c ****         error = 1;
 775              		.loc 1 86 15 view .LVU203
 776 01be 8FE7     		b	.L36
 777              	.LVL54:
 778              	.L38:
  87:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "blink") == 0) {
 779              		.loc 1 87 12 is_stmt 1 view .LVU204
  87:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "blink") == 0) {
 780              		.loc 1 87 16 is_stmt 0 view .LVU205
 781 01c0 5449     		ldr	r1, .L58+72
 782 01c2 4D48     		ldr	r0, .L58+44
 783 01c4 FFF7FEFF 		bl	strcasecmp
 784              	.LVL55:
  87:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[2], "blink") == 0) {
 785              		.loc 1 87 15 discriminator 1 view .LVU206
 786 01c8 0028     		cmp	r0, #0
 787 01ca 0DD1     		bne	.L47
  88:Core/Src/uartParser.c ****       commandOut |= 0x0040;
 788              		.loc 1 88 7 is_stmt 1 view .LVU207
  88:Core/Src/uartParser.c ****       commandOut |= 0x0040;
 789              		.loc 1 88 18 is_stmt 0 view .LVU208
 790 01cc 454A     		ldr	r2, .L58+24
 791 01ce 1388     		ldrh	r3, [r2]
 792 01d0 4021     		movs	r1, #64
 793 01d2 0B43     		orrs	r3, r1
 794 01d4 9BB2     		uxth	r3, r3
 795 01d6 1380     		strh	r3, [r2]
  89:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[3]);
 796              		.loc 1 89 7 is_stmt 1 view .LVU209
  89:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[3]);
 797              		.loc 1 89 15 is_stmt 0 view .LVU210
 798 01d8 4F48     		ldr	r0, .L58+76
 799 01da FFF7FEFF 		bl	convertSpeed
 800              	.LVL56:
  95:Core/Src/uartParser.c ****     if (speed == 255)
 801              		.loc 1 95 5 is_stmt 1 view .LVU211
  95:Core/Src/uartParser.c ****     if (speed == 255)
 802              		.loc 1 95 8 is_stmt 0 view .LVU212
 803 01de FF28     		cmp	r0, #255
 804 01e0 00D0     		beq	.LCB685
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 24


 805 01e2 7DE7     		b	.L36	@long jump
 806              	.LCB685:
  96:Core/Src/uartParser.c ****       error = 1;
 807              		.loc 1 96 13 view .LVU213
 808 01e4 0124     		movs	r4, #1
 809              	.LVL57:
  96:Core/Src/uartParser.c ****       error = 1;
 810              		.loc 1 96 13 view .LVU214
 811 01e6 83E7     		b	.L39
 812              	.LVL58:
 813              	.L47:
  40:Core/Src/uartParser.c ****   uint8_t speed = 0;
 814              		.loc 1 40 11 view .LVU215
 815 01e8 0020     		movs	r0, #0
  91:Core/Src/uartParser.c ****       error = 1;
 816              		.loc 1 91 13 view .LVU216
 817 01ea 0124     		movs	r4, #1
 818              	.LVL59:
  91:Core/Src/uartParser.c ****       error = 1;
 819              		.loc 1 91 13 view .LVU217
 820 01ec 78E7     		b	.L36
 821              	.LVL60:
 822              	.L56:
  99:Core/Src/uartParser.c ****         transmitCharArray("Blink speed limited to 1500 ms");
 823              		.loc 1 99 9 is_stmt 1 view .LVU218
 824 01ee 4B48     		ldr	r0, .L58+80
 825 01f0 FFF7FEFF 		bl	transmitCharArray
 826              	.LVL61:
 100:Core/Src/uartParser.c ****         commandOut |= 15U;
 827              		.loc 1 100 9 view .LVU219
 100:Core/Src/uartParser.c ****         commandOut |= 15U;
 828              		.loc 1 100 20 is_stmt 0 view .LVU220
 829 01f4 3B4A     		ldr	r2, .L58+24
 830 01f6 1388     		ldrh	r3, [r2]
 831 01f8 0F21     		movs	r1, #15
 832 01fa 0B43     		orrs	r3, r1
 833 01fc 9BB2     		uxth	r3, r3
 834 01fe 1380     		strh	r3, [r2]
 835 0200 76E7     		b	.L39
 836              	.LVL62:
 837              	.L29:
 105:Core/Src/uartParser.c ****   } else if (strcasecmp(cmd[0], "motor") == 0) {
 838              		.loc 1 105 10 is_stmt 1 view .LVU221
 105:Core/Src/uartParser.c ****   } else if (strcasecmp(cmd[0], "motor") == 0) {
 839              		.loc 1 105 14 is_stmt 0 view .LVU222
 840 0202 4749     		ldr	r1, .L58+84
 841 0204 3548     		ldr	r0, .L58+16
 842 0206 FFF7FEFF 		bl	strcasecmp
 843              	.LVL63:
 105:Core/Src/uartParser.c ****   } else if (strcasecmp(cmd[0], "motor") == 0) {
 844              		.loc 1 105 13 discriminator 1 view .LVU223
 845 020a 0028     		cmp	r0, #0
 846 020c 5AD1     		bne	.L49
 106:Core/Src/uartParser.c ****     commandOut |= 0xB000;
 847              		.loc 1 106 5 is_stmt 1 view .LVU224
 106:Core/Src/uartParser.c ****     commandOut |= 0xB000;
 848              		.loc 1 106 16 is_stmt 0 view .LVU225
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 25


 849 020e 354A     		ldr	r2, .L58+24
 850 0210 1388     		ldrh	r3, [r2]
 851 0212 4449     		ldr	r1, .L58+88
 852 0214 0B43     		orrs	r3, r1
 853 0216 9BB2     		uxth	r3, r3
 854 0218 1380     		strh	r3, [r2]
 108:Core/Src/uartParser.c ****     if (strcasecmp(cmd[1], "on") == 0) {
 855              		.loc 1 108 5 is_stmt 1 view .LVU226
 108:Core/Src/uartParser.c ****     if (strcasecmp(cmd[1], "on") == 0) {
 856              		.loc 1 108 9 is_stmt 0 view .LVU227
 857 021a 3649     		ldr	r1, .L58+40
 858 021c 3448     		ldr	r0, .L58+36
 859 021e FFF7FEFF 		bl	strcasecmp
 860              	.LVL64:
 108:Core/Src/uartParser.c ****     if (strcasecmp(cmd[1], "on") == 0) {
 861              		.loc 1 108 8 discriminator 1 view .LVU228
 862 0222 0028     		cmp	r0, #0
 863 0224 19D1     		bne	.L41
 109:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 864              		.loc 1 109 7 is_stmt 1 view .LVU229
 109:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 865              		.loc 1 109 18 is_stmt 0 view .LVU230
 866 0226 2F4A     		ldr	r2, .L58+24
 867 0228 1388     		ldrh	r3, [r2]
 868 022a 8021     		movs	r1, #128
 869 022c 4900     		lsls	r1, r1, #1
 870 022e 0B43     		orrs	r3, r1
 871 0230 1380     		strh	r3, [r2]
 110:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 872              		.loc 1 110 7 is_stmt 1 view .LVU231
 110:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 873              		.loc 1 110 15 is_stmt 0 view .LVU232
 874 0232 3148     		ldr	r0, .L58+44
 875 0234 FFF7FEFF 		bl	convertSpeed
 876              	.LVL65:
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
 877              		.loc 1 39 11 view .LVU233
 878 0238 0024     		movs	r4, #0
 879              	.LVL66:
 880              	.L42:
 122:Core/Src/uartParser.c ****     if (cmd[3][0] != '\0')
 881              		.loc 1 122 5 is_stmt 1 view .LVU234
 122:Core/Src/uartParser.c ****     if (cmd[3][0] != '\0')
 882              		.loc 1 122 15 is_stmt 0 view .LVU235
 883 023a 284B     		ldr	r3, .L58+16
 884 023c 3C22     		movs	r2, #60
 885 023e 9B5C     		ldrb	r3, [r3, r2]
 122:Core/Src/uartParser.c ****     if (cmd[3][0] != '\0')
 886              		.loc 1 122 8 view .LVU236
 887 0240 002B     		cmp	r3, #0
 888 0242 00D0     		beq	.L44
 123:Core/Src/uartParser.c ****       error = 1;
 889              		.loc 1 123 13 view .LVU237
 890 0244 0124     		movs	r4, #1
 891              	.LVL67:
 892              	.L44:
 126:Core/Src/uartParser.c ****     if (speed == 255)
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 26


 893              		.loc 1 126 5 is_stmt 1 view .LVU238
 126:Core/Src/uartParser.c ****     if (speed == 255)
 894              		.loc 1 126 8 is_stmt 0 view .LVU239
 895 0246 FF28     		cmp	r0, #255
 896 0248 3ED0     		beq	.L53
 129:Core/Src/uartParser.c ****       if (speed > 100) {
 897              		.loc 1 129 7 is_stmt 1 view .LVU240
 129:Core/Src/uartParser.c ****       if (speed > 100) {
 898              		.loc 1 129 10 is_stmt 0 view .LVU241
 899 024a 6428     		cmp	r0, #100
 900 024c 30D8     		bhi	.L57
 134:Core/Src/uartParser.c ****         commandOut |= speed;
 901              		.loc 1 134 9 is_stmt 1 view .LVU242
 134:Core/Src/uartParser.c ****         commandOut |= speed;
 902              		.loc 1 134 20 is_stmt 0 view .LVU243
 903 024e 254A     		ldr	r2, .L58+24
 904 0250 1388     		ldrh	r3, [r2]
 905 0252 0343     		orrs	r3, r0
 906 0254 9BB2     		uxth	r3, r3
 907 0256 1380     		strh	r3, [r2]
 908 0258 4AE7     		b	.L39
 909              	.LVL68:
 910              	.L41:
 111:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "off") == 0) {
 911              		.loc 1 111 12 is_stmt 1 view .LVU244
 111:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "off") == 0) {
 912              		.loc 1 111 16 is_stmt 0 view .LVU245
 913 025a 2C49     		ldr	r1, .L58+64
 914 025c 2448     		ldr	r0, .L58+36
 915 025e FFF7FEFF 		bl	strcasecmp
 916              	.LVL69:
 111:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "off") == 0) {
 917              		.loc 1 111 15 discriminator 1 view .LVU246
 918 0262 0028     		cmp	r0, #0
 919 0264 0DD1     		bne	.L43
 112:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 920              		.loc 1 112 7 is_stmt 1 view .LVU247
 112:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 921              		.loc 1 112 18 is_stmt 0 view .LVU248
 922 0266 1F4A     		ldr	r2, .L58+24
 923 0268 1388     		ldrh	r3, [r2]
 924 026a 8021     		movs	r1, #128
 925 026c 8900     		lsls	r1, r1, #2
 926 026e 0B43     		orrs	r3, r1
 927 0270 1380     		strh	r3, [r2]
 113:Core/Src/uartParser.c ****       if (cmd[2][0] != '\0')
 928              		.loc 1 113 7 is_stmt 1 view .LVU249
 113:Core/Src/uartParser.c ****       if (cmd[2][0] != '\0')
 929              		.loc 1 113 17 is_stmt 0 view .LVU250
 930 0272 1A4B     		ldr	r3, .L58+16
 931 0274 2822     		movs	r2, #40
 932 0276 9B5C     		ldrb	r3, [r3, r2]
 933 0278 DCB2     		uxtb	r4, r3
 113:Core/Src/uartParser.c ****       if (cmd[2][0] != '\0')
 934              		.loc 1 113 10 view .LVU251
 935 027a 002B     		cmp	r3, #0
 936 027c 12D1     		bne	.L50
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 27


  40:Core/Src/uartParser.c ****   uint8_t speed = 0;
 937              		.loc 1 40 11 view .LVU252
 938 027e 2000     		movs	r0, r4
 939 0280 DBE7     		b	.L42
 940              	.L43:
 115:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "speed") == 0) {
 941              		.loc 1 115 12 is_stmt 1 view .LVU253
 115:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "speed") == 0) {
 942              		.loc 1 115 16 is_stmt 0 view .LVU254
 943 0282 2949     		ldr	r1, .L58+92
 944 0284 1A48     		ldr	r0, .L58+36
 945 0286 FFF7FEFF 		bl	strcasecmp
 946              	.LVL70:
 115:Core/Src/uartParser.c ****     } else if (strcasecmp(cmd[1], "speed") == 0) {
 947              		.loc 1 115 15 discriminator 1 view .LVU255
 948 028a 0028     		cmp	r0, #0
 949 028c 0DD1     		bne	.L51
 116:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 950              		.loc 1 116 7 is_stmt 1 view .LVU256
 116:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 951              		.loc 1 116 18 is_stmt 0 view .LVU257
 952 028e 154A     		ldr	r2, .L58+24
 953 0290 1388     		ldrh	r3, [r2]
 954 0292 C021     		movs	r1, #192
 955 0294 8900     		lsls	r1, r1, #2
 956 0296 0B43     		orrs	r3, r1
 957 0298 1380     		strh	r3, [r2]
 117:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 958              		.loc 1 117 7 is_stmt 1 view .LVU258
 117:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 959              		.loc 1 117 15 is_stmt 0 view .LVU259
 960 029a 1748     		ldr	r0, .L58+44
 961 029c FFF7FEFF 		bl	convertSpeed
 962              	.LVL71:
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
 963              		.loc 1 39 11 view .LVU260
 964 02a0 0024     		movs	r4, #0
 965 02a2 CAE7     		b	.L42
 966              	.LVL72:
 967              	.L50:
  40:Core/Src/uartParser.c ****   uint8_t speed = 0;
 968              		.loc 1 40 11 view .LVU261
 969 02a4 0020     		movs	r0, #0
 114:Core/Src/uartParser.c ****         error = 1;
 970              		.loc 1 114 15 view .LVU262
 971 02a6 0124     		movs	r4, #1
 972 02a8 C7E7     		b	.L42
 973              	.L51:
  40:Core/Src/uartParser.c ****   uint8_t speed = 0;
 974              		.loc 1 40 11 view .LVU263
 975 02aa 0020     		movs	r0, #0
 119:Core/Src/uartParser.c ****       error = 1;
 976              		.loc 1 119 13 view .LVU264
 977 02ac 0124     		movs	r4, #1
 978 02ae C4E7     		b	.L42
 979              	.LVL73:
 980              	.L57:
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 28


 130:Core/Src/uartParser.c ****         transmitCharArray("Motor speed limited to 100 RPM");
 981              		.loc 1 130 9 is_stmt 1 view .LVU265
 982 02b0 1E48     		ldr	r0, .L58+96
 983              	.LVL74:
 130:Core/Src/uartParser.c ****         transmitCharArray("Motor speed limited to 100 RPM");
 984              		.loc 1 130 9 is_stmt 0 view .LVU266
 985 02b2 FFF7FEFF 		bl	transmitCharArray
 986              	.LVL75:
 131:Core/Src/uartParser.c ****         commandOut |= 100U;
 987              		.loc 1 131 9 is_stmt 1 view .LVU267
 131:Core/Src/uartParser.c ****         commandOut |= 100U;
 988              		.loc 1 131 20 is_stmt 0 view .LVU268
 989 02b6 0B4A     		ldr	r2, .L58+24
 990 02b8 1388     		ldrh	r3, [r2]
 991 02ba 6421     		movs	r1, #100
 992 02bc 0B43     		orrs	r3, r1
 993 02be 9BB2     		uxth	r3, r3
 994 02c0 1380     		strh	r3, [r2]
 995 02c2 15E7     		b	.L39
 996              	.LVL76:
 997              	.L49:
 136:Core/Src/uartParser.c ****     error = 1;
 998              		.loc 1 136 11 view .LVU269
 999 02c4 0124     		movs	r4, #1
 1000 02c6 13E7     		b	.L39
 1001              	.LVL77:
 1002              	.L53:
 127:Core/Src/uartParser.c ****       error = 1;
 1003              		.loc 1 127 13 view .LVU270
 1004 02c8 0124     		movs	r4, #1
 1005              	.LVL78:
 127:Core/Src/uartParser.c ****       error = 1;
 1006              		.loc 1 127 13 view .LVU271
 1007 02ca 11E7     		b	.L39
 1008              	.L59:
 1009              		.align	2
 1010              	.L58:
 1011 02cc 00000000 		.word	strIndex
 1012 02d0 00000000 		.word	cmdStrIndex
 1013 02d4 00000000 		.word	cmdIndex
 1014 02d8 00000000 		.word	tmpStr
 1015 02dc 00000000 		.word	cmd
 1016 02e0 00000000 		.word	.LC5
 1017 02e4 00000000 		.word	commandOut
 1018 02e8 00A0FFFF 		.word	-24576
 1019 02ec 04000000 		.word	.LC8
 1020 02f0 14000000 		.word	cmd+20
 1021 02f4 24000000 		.word	.LC19
 1022 02f8 28000000 		.word	cmd+40
 1023 02fc 08000000 		.word	.LC11
 1024 0300 10000000 		.word	.LC13
 1025 0304 18000000 		.word	.LC15
 1026 0308 20000000 		.word	.LC17
 1027 030c 28000000 		.word	.LC22
 1028 0310 2C000000 		.word	.LC24
 1029 0314 34000000 		.word	.LC26
 1030 0318 3C000000 		.word	cmd+60
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 29


 1031 031c 3C000000 		.word	.LC29
 1032 0320 5C000000 		.word	.LC31
 1033 0324 00B0FFFF 		.word	-20480
 1034 0328 64000000 		.word	.LC33
 1035 032c 6C000000 		.word	.LC35
 1036              		.cfi_endproc
 1037              	.LFE44:
 1039              		.section	.rodata.StartParseUartTask.str1.4,"aMS",%progbits,1
 1040              		.align	2
 1041              	.LC40:
 1042 0000 50757368 		.ascii	"Push command to queue success.\012\000"
 1042      20636F6D 
 1042      6D616E64 
 1042      20746F20 
 1042      71756575 
 1043              		.align	2
 1044              	.LC43:
 1045 0020 4661696C 		.ascii	"Fail to push command to queue, try again.\012\000"
 1045      20746F20 
 1045      70757368 
 1045      20636F6D 
 1045      6D616E64 
 1046 004b 00       		.align	2
 1047              	.LC45:
 1048 004c 436F6D6D 		.ascii	"Command not recognized\000"
 1048      616E6420 
 1048      6E6F7420 
 1048      7265636F 
 1048      676E697A 
 1049 0063 00       		.align	2
 1050              	.LC49:
 1051 0064 0A0D436F 		.ascii	"\012\015Command is too long!\000"
 1051      6D6D616E 
 1051      64206973 
 1051      20746F6F 
 1051      206C6F6E 
 1052              		.section	.text.StartParseUartTask,"ax",%progbits
 1053              		.align	1
 1054              		.global	StartParseUartTask
 1055              		.syntax unified
 1056              		.code	16
 1057              		.thumb_func
 1059              	StartParseUartTask:
 1060              	.LFB46:
 183:Core/Src/uartParser.c **** void StartParseUartTask(void *argument) {
 1061              		.loc 1 183 41 is_stmt 1 view -0
 1062              		.cfi_startproc
 1063              		@ args = 0, pretend = 0, frame = 8
 1064              		@ frame_needed = 0, uses_anonymous_args = 0
 1065              	.LVL79:
 183:Core/Src/uartParser.c **** void StartParseUartTask(void *argument) {
 1066              		.loc 1 183 41 is_stmt 0 view .LVU273
 1067 0000 10B5     		push	{r4, lr}
 1068              	.LCFI6:
 1069              		.cfi_def_cfa_offset 8
 1070              		.cfi_offset 4, -8
 1071              		.cfi_offset 14, -4
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 30


 1072 0002 82B0     		sub	sp, sp, #8
 1073              	.LCFI7:
 1074              		.cfi_def_cfa_offset 16
 1075 0004 41E0     		b	.L75
 1076              	.LVL80:
 1077              	.L77:
 1078              	.LBB8:
 1079              	.LBB9:
 198:Core/Src/uartParser.c ****         uint8_t error = parseCmd();
 1080              		.loc 1 198 9 is_stmt 1 view .LVU274
 198:Core/Src/uartParser.c ****         uint8_t error = parseCmd();
 1081              		.loc 1 198 25 is_stmt 0 view .LVU275
 1082 0006 FFF7FEFF 		bl	parseCmd
 1083              	.LVL81:
 200:Core/Src/uartParser.c ****         if (error == 0) {
 1084              		.loc 1 200 9 is_stmt 1 view .LVU276
 200:Core/Src/uartParser.c ****         if (error == 0) {
 1085              		.loc 1 200 12 is_stmt 0 view .LVU277
 1086 000a 0028     		cmp	r0, #0
 1087 000c 18D1     		bne	.L64
 202:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 1088              		.loc 1 202 11 is_stmt 1 view .LVU278
 202:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 1089              		.loc 1 202 15 is_stmt 0 view .LVU279
 1090 000e 474B     		ldr	r3, .L78
 1091 0010 1988     		ldrh	r1, [r3]
 1092 0012 89B2     		uxth	r1, r1
 1093 0014 464B     		ldr	r3, .L78+4
 1094 0016 1868     		ldr	r0, [r3]
 1095              	.LVL82:
 202:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 1096              		.loc 1 202 15 view .LVU280
 1097 0018 FFF7FEFF 		bl	queuePush
 1098              	.LVL83:
 202:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 1099              		.loc 1 202 14 discriminator 1 view .LVU281
 1100 001c 0130     		adds	r0, r0, #1
 1101 001e 0BD0     		beq	.L65
 203:Core/Src/uartParser.c ****             transmitCharArray("Push command to queue success.\n");
 1102              		.loc 1 203 13 is_stmt 1 view .LVU282
 1103 0020 4448     		ldr	r0, .L78+8
 1104 0022 FFF7FEFF 		bl	transmitCharArray
 1105              	.LVL84:
 204:Core/Src/uartParser.c ****             transmitCharArray(tmpStr);
 1106              		.loc 1 204 13 view .LVU283
 1107 0026 4448     		ldr	r0, .L78+12
 1108 0028 FFF7FEFF 		bl	transmitCharArray
 1109              	.LVL85:
 205:Core/Src/uartParser.c ****             sendUint16BinToUart(commandOut);
 1110              		.loc 1 205 13 view .LVU284
 1111 002c 3F4B     		ldr	r3, .L78
 1112 002e 1888     		ldrh	r0, [r3]
 1113 0030 80B2     		uxth	r0, r0
 1114 0032 FFF7FEFF 		bl	sendUint16BinToUart
 1115              	.LVL86:
 1116 0036 09E0     		b	.L66
 1117              	.L65:
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 31


 207:Core/Src/uartParser.c ****             transmitCharArray("Fail to push command to queue, try again.\n");
 1118              		.loc 1 207 13 view .LVU285
 1119 0038 4048     		ldr	r0, .L78+16
 1120 003a FFF7FEFF 		bl	transmitCharArray
 1121              	.LVL87:
 1122 003e 05E0     		b	.L66
 1123              	.LVL88:
 1124              	.L64:
 211:Core/Src/uartParser.c ****           transmitCharArray("Command not recognized");
 1125              		.loc 1 211 11 view .LVU286
 1126 0040 3F48     		ldr	r0, .L78+20
 1127              	.LVL89:
 211:Core/Src/uartParser.c ****           transmitCharArray("Command not recognized");
 1128              		.loc 1 211 11 is_stmt 0 view .LVU287
 1129 0042 FFF7FEFF 		bl	transmitCharArray
 1130              	.LVL90:
 212:Core/Src/uartParser.c ****           transmitCharArray(tmpStr);
 1131              		.loc 1 212 11 is_stmt 1 view .LVU288
 1132 0046 3C48     		ldr	r0, .L78+12
 1133 0048 FFF7FEFF 		bl	transmitCharArray
 1134              	.LVL91:
 1135              	.L66:
 216:Core/Src/uartParser.c ****         strIndex = 0;
 1136              		.loc 1 216 9 view .LVU289
 216:Core/Src/uartParser.c ****         strIndex = 0;
 1137              		.loc 1 216 18 is_stmt 0 view .LVU290
 1138 004c 3D4B     		ldr	r3, .L78+24
 1139 004e 0022     		movs	r2, #0
 1140 0050 1A70     		strb	r2, [r3]
 217:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1141              		.loc 1 217 9 is_stmt 1 view .LVU291
 1142              	.LBB10:
 217:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1143              		.loc 1 217 14 view .LVU292
 1144              	.LVL92:
 217:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1145              		.loc 1 217 9 is_stmt 0 view .LVU293
 1146 0052 0DE0     		b	.L67
 1147              	.LVL93:
 1148              	.L68:
 218:Core/Src/uartParser.c ****           tmpStr[i] = '\0';
 1149              		.loc 1 218 11 is_stmt 1 view .LVU294
 218:Core/Src/uartParser.c ****           tmpStr[i] = '\0';
 1150              		.loc 1 218 21 is_stmt 0 view .LVU295
 1151 0054 384B     		ldr	r3, .L78+12
 1152 0056 0021     		movs	r1, #0
 1153 0058 9954     		strb	r1, [r3, r2]
 219:Core/Src/uartParser.c ****           cmd[0][i] = '\0';
 1154              		.loc 1 219 11 is_stmt 1 view .LVU296
 219:Core/Src/uartParser.c ****           cmd[0][i] = '\0';
 1155              		.loc 1 219 21 is_stmt 0 view .LVU297
 1156 005a 3B4B     		ldr	r3, .L78+28
 1157 005c 9954     		strb	r1, [r3, r2]
 220:Core/Src/uartParser.c ****           cmd[1][i] = '\0';
 1158              		.loc 1 220 11 is_stmt 1 view .LVU298
 220:Core/Src/uartParser.c ****           cmd[1][i] = '\0';
 1159              		.loc 1 220 21 is_stmt 0 view .LVU299
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 32


 1160 005e 9B18     		adds	r3, r3, r2
 1161 0060 1975     		strb	r1, [r3, #20]
 221:Core/Src/uartParser.c ****           cmd[2][i] = '\0';
 1162              		.loc 1 221 11 is_stmt 1 view .LVU300
 221:Core/Src/uartParser.c ****           cmd[2][i] = '\0';
 1163              		.loc 1 221 21 is_stmt 0 view .LVU301
 1164 0062 1800     		movs	r0, r3
 1165 0064 2830     		adds	r0, r0, #40
 1166 0066 0170     		strb	r1, [r0]
 222:Core/Src/uartParser.c ****           cmd[3][i] = '\0';
 1167              		.loc 1 222 11 is_stmt 1 view .LVU302
 222:Core/Src/uartParser.c ****           cmd[3][i] = '\0';
 1168              		.loc 1 222 21 is_stmt 0 view .LVU303
 1169 0068 3C33     		adds	r3, r3, #60
 1170 006a 1970     		strb	r1, [r3]
 217:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1171              		.loc 1 217 47 is_stmt 1 discriminator 3 view .LVU304
 1172 006c 0132     		adds	r2, r2, #1
 1173              	.LVL94:
 217:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1174              		.loc 1 217 47 is_stmt 0 discriminator 3 view .LVU305
 1175 006e D2B2     		uxtb	r2, r2
 1176              	.LVL95:
 1177              	.L67:
 217:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1178              		.loc 1 217 31 is_stmt 1 discriminator 1 view .LVU306
 1179 0070 132A     		cmp	r2, #19
 1180 0072 EFD9     		bls	.L68
 1181              	.LBE10:
 226:Core/Src/uartParser.c ****         commandOut = 0;
 1182              		.loc 1 226 9 view .LVU307
 226:Core/Src/uartParser.c ****         commandOut = 0;
 1183              		.loc 1 226 20 is_stmt 0 view .LVU308
 1184 0074 2D4B     		ldr	r3, .L78
 1185 0076 0022     		movs	r2, #0
 1186              	.LVL96:
 226:Core/Src/uartParser.c ****         commandOut = 0;
 1187              		.loc 1 226 20 view .LVU309
 1188 0078 1A80     		strh	r2, [r3]
 227:Core/Src/uartParser.c ****         break;
 1189              		.loc 1 227 9 is_stmt 1 view .LVU310
 1190              	.LVL97:
 1191              	.L69:
 227:Core/Src/uartParser.c ****         break;
 1192              		.loc 1 227 9 is_stmt 0 view .LVU311
 1193              	.LBE9:
 1194              	.LBE8:
 249:Core/Src/uartParser.c ****     uartStatus = 0;
 1195              		.loc 1 249 5 is_stmt 1 view .LVU312
 249:Core/Src/uartParser.c ****     uartStatus = 0;
 1196              		.loc 1 249 16 is_stmt 0 view .LVU313
 1197 007a 344B     		ldr	r3, .L78+32
 1198 007c 0022     		movs	r2, #0
 1199 007e 1A70     		strb	r2, [r3]
 251:Core/Src/uartParser.c ****     USART3->CR1 |= USART_CR1_RXNEIE;
 1200              		.loc 1 251 5 is_stmt 1 view .LVU314
 251:Core/Src/uartParser.c ****     USART3->CR1 |= USART_CR1_RXNEIE;
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 33


 1201              		.loc 1 251 11 is_stmt 0 view .LVU315
 1202 0080 334A     		ldr	r2, .L78+36
 1203 0082 1368     		ldr	r3, [r2]
 251:Core/Src/uartParser.c ****     USART3->CR1 |= USART_CR1_RXNEIE;
 1204              		.loc 1 251 17 view .LVU316
 1205 0084 2021     		movs	r1, #32
 1206 0086 0B43     		orrs	r3, r1
 1207 0088 1360     		str	r3, [r2]
 186:Core/Src/uartParser.c ****   while (1) {
 1208              		.loc 1 186 9 is_stmt 1 view .LVU317
 1209              	.L75:
 186:Core/Src/uartParser.c ****   while (1) {
 1210              		.loc 1 186 3 view .LVU318
 188:Core/Src/uartParser.c ****     osSemaphoreAcquire(binarySem02UartParserHandle, osWaitForever);
 1211              		.loc 1 188 5 view .LVU319
 1212 008a 0121     		movs	r1, #1
 1213 008c 314B     		ldr	r3, .L78+40
 1214 008e 1868     		ldr	r0, [r3]
 1215 0090 4942     		rsbs	r1, r1, #0
 1216 0092 FFF7FEFF 		bl	osSemaphoreAcquire
 1217              	.LVL98:
 1218 0096 0DE0     		b	.L62
 1219              	.L70:
 1220              	.LBB12:
 230:Core/Src/uartParser.c ****           if (strIndex > 0) {
 1221              		.loc 1 230 11 view .LVU320
 230:Core/Src/uartParser.c ****           if (strIndex > 0) {
 1222              		.loc 1 230 24 is_stmt 0 view .LVU321
 1223 0098 2A4B     		ldr	r3, .L78+24
 1224 009a 1B78     		ldrb	r3, [r3]
 230:Core/Src/uartParser.c ****           if (strIndex > 0) {
 1225              		.loc 1 230 14 view .LVU322
 1226 009c 002B     		cmp	r3, #0
 1227 009e 09D0     		beq	.L62
 231:Core/Src/uartParser.c ****             strIndex -= 1;
 1228              		.loc 1 231 13 is_stmt 1 view .LVU323
 231:Core/Src/uartParser.c ****             strIndex -= 1;
 1229              		.loc 1 231 22 is_stmt 0 view .LVU324
 1230 00a0 284A     		ldr	r2, .L78+24
 1231 00a2 1378     		ldrb	r3, [r2]
 1232 00a4 013B     		subs	r3, r3, #1
 1233 00a6 DBB2     		uxtb	r3, r3
 1234 00a8 1370     		strb	r3, [r2]
 232:Core/Src/uartParser.c ****             tmpStr[strIndex] = '\0';
 1235              		.loc 1 232 13 is_stmt 1 view .LVU325
 232:Core/Src/uartParser.c ****             tmpStr[strIndex] = '\0';
 1236              		.loc 1 232 19 is_stmt 0 view .LVU326
 1237 00aa 1378     		ldrb	r3, [r2]
 1238 00ac DBB2     		uxtb	r3, r3
 232:Core/Src/uartParser.c ****             tmpStr[strIndex] = '\0';
 1239              		.loc 1 232 30 view .LVU327
 1240 00ae 224A     		ldr	r2, .L78+12
 1241 00b0 0021     		movs	r1, #0
 1242 00b2 D154     		strb	r1, [r2, r3]
 1243              	.L62:
 192:Core/Src/uartParser.c **** 	    }
 1244              		.loc 1 192 6 is_stmt 1 view .LVU328
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 34


 191:Core/Src/uartParser.c ****       while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1245              		.loc 1 191 44 discriminator 1 view .LVU329
 191:Core/Src/uartParser.c ****       while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1246              		.loc 1 191 20 is_stmt 0 discriminator 1 view .LVU330
 1247 00b4 264B     		ldr	r3, .L78+36
 1248 00b6 DB69     		ldr	r3, [r3, #28]
 191:Core/Src/uartParser.c ****       while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1249              		.loc 1 191 44 discriminator 1 view .LVU331
 1250 00b8 9B06     		lsls	r3, r3, #26
 1251 00ba FBD5     		bpl	.L62
 194:Core/Src/uartParser.c **** 	    volatile uint8_t usartReceivedData = USART3->RDR;
 1252              		.loc 1 194 6 is_stmt 1 view .LVU332
 194:Core/Src/uartParser.c **** 	    volatile uint8_t usartReceivedData = USART3->RDR;
 1253              		.loc 1 194 49 is_stmt 0 view .LVU333
 1254 00bc 244B     		ldr	r3, .L78+36
 1255 00be 9B8C     		ldrh	r3, [r3, #36]
 194:Core/Src/uartParser.c **** 	    volatile uint8_t usartReceivedData = USART3->RDR;
 1256              		.loc 1 194 23 view .LVU334
 1257 00c0 DBB2     		uxtb	r3, r3
 1258 00c2 6A46     		mov	r2, sp
 1259 00c4 D41D     		adds	r4, r2, #7
 1260 00c6 D371     		strb	r3, [r2, #7]
 195:Core/Src/uartParser.c ****       transmitOneChar(usartReceivedData);
 1261              		.loc 1 195 7 is_stmt 1 view .LVU335
 1262 00c8 D079     		ldrb	r0, [r2, #7]
 1263 00ca C0B2     		uxtb	r0, r0
 1264 00cc FFF7FEFF 		bl	transmitOneChar
 1265              	.LVL99:
 197:Core/Src/uartParser.c **** 	    if (usartReceivedData == '\r') {
 1266              		.loc 1 197 6 view .LVU336
 197:Core/Src/uartParser.c **** 	    if (usartReceivedData == '\r') {
 1267              		.loc 1 197 28 is_stmt 0 view .LVU337
 1268 00d0 2378     		ldrb	r3, [r4]
 197:Core/Src/uartParser.c **** 	    if (usartReceivedData == '\r') {
 1269              		.loc 1 197 9 view .LVU338
 1270 00d2 0D2B     		cmp	r3, #13
 1271 00d4 97D0     		beq	.L77
 229:Core/Src/uartParser.c **** 	    } else if (usartReceivedData == 8 || usartReceivedData == 127) {
 1272              		.loc 1 229 13 is_stmt 1 view .LVU339
 229:Core/Src/uartParser.c **** 	    } else if (usartReceivedData == 8 || usartReceivedData == 127) {
 1273              		.loc 1 229 35 is_stmt 0 view .LVU340
 1274 00d6 6B46     		mov	r3, sp
 1275 00d8 0733     		adds	r3, r3, #7
 1276 00da 1B78     		ldrb	r3, [r3]
 229:Core/Src/uartParser.c **** 	    } else if (usartReceivedData == 8 || usartReceivedData == 127) {
 1277              		.loc 1 229 16 view .LVU341
 1278 00dc 082B     		cmp	r3, #8
 1279 00de DBD0     		beq	.L70
 229:Core/Src/uartParser.c **** 	    } else if (usartReceivedData == 8 || usartReceivedData == 127) {
 1280              		.loc 1 229 61 discriminator 1 view .LVU342
 1281 00e0 6B46     		mov	r3, sp
 1282 00e2 0733     		adds	r3, r3, #7
 1283 00e4 1B78     		ldrb	r3, [r3]
 229:Core/Src/uartParser.c **** 	    } else if (usartReceivedData == 8 || usartReceivedData == 127) {
 1284              		.loc 1 229 40 discriminator 1 view .LVU343
 1285 00e6 7F2B     		cmp	r3, #127
 1286 00e8 D6D0     		beq	.L70
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 35


 236:Core/Src/uartParser.c ****         tmpStr[strIndex] = usartReceivedData;
 1287              		.loc 1 236 9 is_stmt 1 view .LVU344
 236:Core/Src/uartParser.c ****         tmpStr[strIndex] = usartReceivedData;
 1288              		.loc 1 236 15 is_stmt 0 view .LVU345
 1289 00ea 164A     		ldr	r2, .L78+24
 1290 00ec 1378     		ldrb	r3, [r2]
 1291 00ee DBB2     		uxtb	r3, r3
 236:Core/Src/uartParser.c ****         tmpStr[strIndex] = usartReceivedData;
 1292              		.loc 1 236 26 view .LVU346
 1293 00f0 6946     		mov	r1, sp
 1294 00f2 0731     		adds	r1, r1, #7
 1295 00f4 0978     		ldrb	r1, [r1]
 1296 00f6 C9B2     		uxtb	r1, r1
 1297 00f8 0F48     		ldr	r0, .L78+12
 1298 00fa C154     		strb	r1, [r0, r3]
 237:Core/Src/uartParser.c ****         strIndex += 1;
 1299              		.loc 1 237 9 is_stmt 1 view .LVU347
 237:Core/Src/uartParser.c ****         strIndex += 1;
 1300              		.loc 1 237 18 is_stmt 0 view .LVU348
 1301 00fc 1378     		ldrb	r3, [r2]
 1302 00fe 0133     		adds	r3, r3, #1
 1303 0100 DBB2     		uxtb	r3, r3
 1304 0102 1370     		strb	r3, [r2]
 239:Core/Src/uartParser.c ****         if (strIndex == TMP_STR_LEN) {
 1305              		.loc 1 239 9 is_stmt 1 view .LVU349
 239:Core/Src/uartParser.c ****         if (strIndex == TMP_STR_LEN) {
 1306              		.loc 1 239 22 is_stmt 0 view .LVU350
 1307 0104 1378     		ldrb	r3, [r2]
 239:Core/Src/uartParser.c ****         if (strIndex == TMP_STR_LEN) {
 1308              		.loc 1 239 12 view .LVU351
 1309 0106 142B     		cmp	r3, #20
 1310 0108 D4D1     		bne	.L62
 240:Core/Src/uartParser.c ****       	  transmitCharArray("\n\rCommand is too long!");
 1311              		.loc 1 240 10 is_stmt 1 view .LVU352
 1312 010a 1348     		ldr	r0, .L78+44
 1313 010c FFF7FEFF 		bl	transmitCharArray
 1314              	.LVL100:
 241:Core/Src/uartParser.c ****           strIndex = 0;
 1315              		.loc 1 241 11 view .LVU353
 241:Core/Src/uartParser.c ****           strIndex = 0;
 1316              		.loc 1 241 20 is_stmt 0 view .LVU354
 1317 0110 0C4B     		ldr	r3, .L78+24
 1318 0112 0022     		movs	r2, #0
 1319 0114 1A70     		strb	r2, [r3]
 242:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1320              		.loc 1 242 11 is_stmt 1 view .LVU355
 1321              	.LBB11:
 242:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1322              		.loc 1 242 16 view .LVU356
 1323              	.LVL101:
 242:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1324              		.loc 1 242 24 is_stmt 0 view .LVU357
 1325 0116 0023     		movs	r3, #0
 242:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1326              		.loc 1 242 11 view .LVU358
 1327 0118 04E0     		b	.L73
 1328              	.LVL102:
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 36


 1329              	.L74:
 243:Core/Src/uartParser.c ****             tmpStr[i] = '\0';
 1330              		.loc 1 243 13 is_stmt 1 view .LVU359
 243:Core/Src/uartParser.c ****             tmpStr[i] = '\0';
 1331              		.loc 1 243 23 is_stmt 0 view .LVU360
 1332 011a 074A     		ldr	r2, .L78+12
 1333 011c 0021     		movs	r1, #0
 1334 011e D154     		strb	r1, [r2, r3]
 242:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1335              		.loc 1 242 49 is_stmt 1 discriminator 3 view .LVU361
 1336 0120 0133     		adds	r3, r3, #1
 1337              	.LVL103:
 242:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1338              		.loc 1 242 49 is_stmt 0 discriminator 3 view .LVU362
 1339 0122 DBB2     		uxtb	r3, r3
 1340              	.LVL104:
 1341              	.L73:
 242:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1342              		.loc 1 242 33 is_stmt 1 discriminator 1 view .LVU363
 1343 0124 132B     		cmp	r3, #19
 1344 0126 F8D9     		bls	.L74
 1345 0128 A7E7     		b	.L69
 1346              	.L79:
 1347 012a C046     		.align	2
 1348              	.L78:
 1349 012c 00000000 		.word	commandOut
 1350 0130 00000000 		.word	cmdQueue
 1351 0134 00000000 		.word	.LC40
 1352 0138 00000000 		.word	tmpStr
 1353 013c 20000000 		.word	.LC43
 1354 0140 4C000000 		.word	.LC45
 1355 0144 00000000 		.word	strIndex
 1356 0148 00000000 		.word	cmd
 1357 014c 00000000 		.word	uartStatus
 1358 0150 00480040 		.word	1073760256
 1359 0154 00000000 		.word	binarySem02UartParserHandle
 1360 0158 64000000 		.word	.LC49
 1361              	.LBE11:
 1362              	.LBE12:
 1363              		.cfi_endproc
 1364              	.LFE46:
 1366              		.global	__aeabi_uidiv
 1367              		.section	.rodata.initUsart3.str1.4,"aMS",%progbits,1
 1368              		.align	2
 1369              	.LC52:
 1370 0000 55415254 		.ascii	"UART enabled\000"
 1370      20656E61 
 1370      626C6564 
 1370      00
 1371              		.section	.text.initUsart3,"ax",%progbits
 1372              		.align	1
 1373              		.global	initUsart3
 1374              		.syntax unified
 1375              		.code	16
 1376              		.thumb_func
 1378              	initUsart3:
 1379              	.LFB47:
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 37


 264:Core/Src/uartParser.c **** void initUsart3(void) {
 1380              		.loc 1 264 23 view -0
 1381              		.cfi_startproc
 1382              		@ args = 0, pretend = 0, frame = 0
 1383              		@ frame_needed = 0, uses_anonymous_args = 0
 1384 0000 10B5     		push	{r4, lr}
 1385              	.LCFI8:
 1386              		.cfi_def_cfa_offset 8
 1387              		.cfi_offset 4, -8
 1388              		.cfi_offset 14, -4
 265:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 1389              		.loc 1 265 3 view .LVU365
 265:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 1390              		.loc 1 265 6 is_stmt 0 view .LVU366
 1391 0002 2F4A     		ldr	r2, .L81
 1392 0004 5169     		ldr	r1, [r2, #20]
 265:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 1393              		.loc 1 265 15 view .LVU367
 1394 0006 8023     		movs	r3, #128
 1395 0008 1B03     		lsls	r3, r3, #12
 1396 000a 0B43     		orrs	r3, r1
 1397 000c 5361     		str	r3, [r2, #20]
 267:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 1398              		.loc 1 267 3 is_stmt 1 view .LVU368
 267:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 1399              		.loc 1 267 8 is_stmt 0 view .LVU369
 1400 000e 2D4B     		ldr	r3, .L81+4
 1401 0010 1868     		ldr	r0, [r3]
 267:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 1402              		.loc 1 267 16 view .LVU370
 1403 0012 8021     		movs	r1, #128
 1404 0014 8900     		lsls	r1, r1, #2
 1405 0016 0143     		orrs	r1, r0
 1406 0018 1960     		str	r1, [r3]
 268:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 1407              		.loc 1 268 3 is_stmt 1 view .LVU371
 268:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 1408              		.loc 1 268 8 is_stmt 0 view .LVU372
 1409 001a 1968     		ldr	r1, [r3]
 268:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 1410              		.loc 1 268 16 view .LVU373
 1411 001c 2A48     		ldr	r0, .L81+8
 1412 001e 0140     		ands	r1, r0
 1413 0020 1960     		str	r1, [r3]
 270:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 1414              		.loc 1 270 3 is_stmt 1 view .LVU374
 270:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 1415              		.loc 1 270 8 is_stmt 0 view .LVU375
 1416 0022 1868     		ldr	r0, [r3]
 270:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 1417              		.loc 1 270 16 view .LVU376
 1418 0024 8021     		movs	r1, #128
 1419 0026 0901     		lsls	r1, r1, #4
 1420 0028 0143     		orrs	r1, r0
 1421 002a 1960     		str	r1, [r3]
 271:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 1422              		.loc 1 271 3 is_stmt 1 view .LVU377
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 38


 271:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 1423              		.loc 1 271 8 is_stmt 0 view .LVU378
 1424 002c 1968     		ldr	r1, [r3]
 271:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 1425              		.loc 1 271 16 view .LVU379
 1426 002e 2748     		ldr	r0, .L81+12
 1427 0030 0140     		ands	r1, r0
 1428 0032 1960     		str	r1, [r3]
 274:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 1429              		.loc 1 274 3 is_stmt 1 view .LVU380
 274:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 1430              		.loc 1 274 13 is_stmt 0 view .LVU381
 1431 0034 186A     		ldr	r0, [r3, #32]
 274:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 1432              		.loc 1 274 17 view .LVU382
 1433 0036 8021     		movs	r1, #128
 1434 0038 4902     		lsls	r1, r1, #9
 1435 003a 0143     		orrs	r1, r0
 1436 003c 1962     		str	r1, [r3, #32]
 276:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 1437              		.loc 1 276 3 is_stmt 1 view .LVU383
 276:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 1438              		.loc 1 276 13 is_stmt 0 view .LVU384
 1439 003e 186A     		ldr	r0, [r3, #32]
 276:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 1440              		.loc 1 276 17 view .LVU385
 1441 0040 8021     		movs	r1, #128
 1442 0042 4903     		lsls	r1, r1, #13
 1443 0044 0143     		orrs	r1, r0
 1444 0046 1962     		str	r1, [r3, #32]
 277:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 1445              		.loc 1 277 3 is_stmt 1 view .LVU386
 277:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 1446              		.loc 1 277 6 is_stmt 0 view .LVU387
 1447 0048 D169     		ldr	r1, [r2, #28]
 277:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 1448              		.loc 1 277 16 view .LVU388
 1449 004a 8023     		movs	r3, #128
 1450 004c DB02     		lsls	r3, r3, #11
 1451 004e 0B43     		orrs	r3, r1
 1452 0050 D361     		str	r3, [r2, #28]
 279:Core/Src/uartParser.c ****   uint32_t fClk = HAL_RCC_GetHCLKFreq();
 1453              		.loc 1 279 3 is_stmt 1 view .LVU389
 279:Core/Src/uartParser.c ****   uint32_t fClk = HAL_RCC_GetHCLKFreq();
 1454              		.loc 1 279 19 is_stmt 0 view .LVU390
 1455 0052 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1456              	.LVL105:
 282:Core/Src/uartParser.c ****   uint32_t baudRate = 115200;
 1457              		.loc 1 282 3 is_stmt 1 view .LVU391
 283:Core/Src/uartParser.c ****   uint32_t usartBRR = fClk / baudRate;
 1458              		.loc 1 283 3 view .LVU392
 283:Core/Src/uartParser.c ****   uint32_t usartBRR = fClk / baudRate;
 1459              		.loc 1 283 12 is_stmt 0 view .LVU393
 1460 0056 E121     		movs	r1, #225
 1461 0058 4902     		lsls	r1, r1, #9
 1462 005a FFF7FEFF 		bl	__aeabi_uidiv
 1463              	.LVL106:
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 39


 284:Core/Src/uartParser.c ****   USART3->BRR = usartBRR;
 1464              		.loc 1 284 3 is_stmt 1 view .LVU394
 284:Core/Src/uartParser.c ****   USART3->BRR = usartBRR;
 1465              		.loc 1 284 15 is_stmt 0 view .LVU395
 1466 005e 1C4C     		ldr	r4, .L81+16
 1467 0060 E060     		str	r0, [r4, #12]
 287:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 1468              		.loc 1 287 3 is_stmt 1 view .LVU396
 287:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 1469              		.loc 1 287 9 is_stmt 0 view .LVU397
 1470 0062 2368     		ldr	r3, [r4]
 287:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 1471              		.loc 1 287 15 view .LVU398
 1472 0064 0822     		movs	r2, #8
 1473 0066 1343     		orrs	r3, r2
 1474 0068 2360     		str	r3, [r4]
 288:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 1475              		.loc 1 288 3 is_stmt 1 view .LVU399
 288:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 1476              		.loc 1 288 9 is_stmt 0 view .LVU400
 1477 006a 2368     		ldr	r3, [r4]
 288:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 1478              		.loc 1 288 15 view .LVU401
 1479 006c 043A     		subs	r2, r2, #4
 1480 006e 1343     		orrs	r3, r2
 1481 0070 2360     		str	r3, [r4]
 291:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 1482              		.loc 1 291 3 is_stmt 1 view .LVU402
 291:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 1483              		.loc 1 291 9 is_stmt 0 view .LVU403
 1484 0072 2368     		ldr	r3, [r4]
 291:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 1485              		.loc 1 291 15 view .LVU404
 1486 0074 033A     		subs	r2, r2, #3
 1487 0076 1343     		orrs	r3, r2
 1488 0078 2360     		str	r3, [r4]
 292:Core/Src/uartParser.c ****   transmitCharArray("UART enabled");
 1489              		.loc 1 292 3 is_stmt 1 view .LVU405
 1490 007a 1648     		ldr	r0, .L81+20
 1491              	.LVL107:
 292:Core/Src/uartParser.c ****   transmitCharArray("UART enabled");
 1492              		.loc 1 292 3 is_stmt 0 view .LVU406
 1493 007c FFF7FEFF 		bl	transmitCharArray
 1494              	.LVL108:
 295:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 1495              		.loc 1 295 3 is_stmt 1 view .LVU407
 295:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 1496              		.loc 1 295 9 is_stmt 0 view .LVU408
 1497 0080 2368     		ldr	r3, [r4]
 295:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 1498              		.loc 1 295 15 view .LVU409
 1499 0082 2022     		movs	r2, #32
 1500 0084 1343     		orrs	r3, r2
 1501 0086 2360     		str	r3, [r4]
 297:Core/Src/uartParser.c ****   NVIC_EnableIRQ(USART3_4_IRQn);
 1502              		.loc 1 297 3 is_stmt 1 view .LVU410
 1503              	.LVL109:
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 40


 1504              	.LBB13:
 1505              	.LBI13:
 1506              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 41


  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 42


 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 43


 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 44


 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 45


 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 46


 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 47


 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 48


 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 49


 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 50


 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 1507              		.loc 2 623 22 view .LVU411
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 51


 1508              	.LBB14:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1509              		.loc 2 625 3 view .LVU412
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1510              		.loc 2 627 5 view .LVU413
 1511              		.loc 2 627 20 is_stmt 0 view .LVU414
 1512 0088 134B     		ldr	r3, .L81+24
 1513 008a 8022     		movs	r2, #128
 1514 008c 9205     		lsls	r2, r2, #22
 1515 008e 1A60     		str	r2, [r3]
 1516              	.LVL110:
 1517              		.loc 2 627 20 view .LVU415
 1518              	.LBE14:
 1519              	.LBE13:
 298:Core/Src/uartParser.c ****   NVIC_SetPriority(USART3_4_IRQn, 3);
 1520              		.loc 1 298 3 is_stmt 1 view .LVU416
 1521              	.LBB15:
 1522              	.LBI15:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 52


 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 53


 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 1523              		.loc 2 730 22 view .LVU417
 1524              	.LBB16:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1525              		.loc 2 732 3 view .LVU418
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1526              		.loc 2 734 5 view .LVU419
 1527              		.loc 2 734 52 is_stmt 0 view .LVU420
 1528 0090 C720     		movs	r0, #199
 1529 0092 8000     		lsls	r0, r0, #2
 1530 0094 1958     		ldr	r1, [r3, r0]
 1531              		.loc 2 734 33 view .LVU421
 1532 0096 114A     		ldr	r2, .L81+28
 1533 0098 1140     		ands	r1, r2
 1534              		.loc 2 734 102 view .LVU422
 1535 009a C022     		movs	r2, #192
 1536 009c 1202     		lsls	r2, r2, #8
 1537 009e 0A43     		orrs	r2, r1
 1538              		.loc 2 734 30 view .LVU423
 1539 00a0 1A50     		str	r2, [r3, r0]
 1540              	.LVL111:
 1541              		.loc 2 734 30 view .LVU424
 1542              	.LBE16:
 1543              	.LBE15:
 303:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
 1544              		.loc 1 303 3 is_stmt 1 view .LVU425
 303:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
 1545              		.loc 1 303 33 is_stmt 0 view .LVU426
 1546 00a2 0F4A     		ldr	r2, .L81+32
 1547 00a4 0021     		movs	r1, #0
 1548 00a6 0120     		movs	r0, #1
 1549 00a8 FFF7FEFF 		bl	osSemaphoreNew
 1550              	.LVL112:
 303:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
 1551              		.loc 1 303 31 discriminator 1 view .LVU427
 1552 00ac 0D4B     		ldr	r3, .L81+36
 1553 00ae 1860     		str	r0, [r3]
 304:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 1554              		.loc 1 304 3 is_stmt 1 view .LVU428
 304:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 1555              		.loc 1 304 14 is_stmt 0 view .LVU429
 1556 00b0 0221     		movs	r1, #2
 1557 00b2 0520     		movs	r0, #5
 1558 00b4 FFF7FEFF 		bl	createQueue
 1559              	.LVL113:
 304:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 1560              		.loc 1 304 12 discriminator 1 view .LVU430
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 54


 1561 00b8 0B4B     		ldr	r3, .L81+40
 1562 00ba 1860     		str	r0, [r3]
 305:Core/Src/uartParser.c **** }
 1563              		.loc 1 305 1 view .LVU431
 1564              		@ sp needed
 1565 00bc 10BD     		pop	{r4, pc}
 1566              	.L82:
 1567 00be C046     		.align	2
 1568              	.L81:
 1569 00c0 00100240 		.word	1073876992
 1570 00c4 00080048 		.word	1207961600
 1571 00c8 FFFEFFFF 		.word	-257
 1572 00cc FFFBFFFF 		.word	-1025
 1573 00d0 00480040 		.word	1073760256
 1574 00d4 00000000 		.word	.LC52
 1575 00d8 00E100E0 		.word	-536813312
 1576 00dc FF00FFFF 		.word	-65281
 1577 00e0 00000000 		.word	semAttr_SEM1
 1578 00e4 00000000 		.word	binarySem02UartParserHandle
 1579 00e8 00000000 		.word	cmdQueue
 1580              		.cfi_endproc
 1581              	.LFE47:
 1583              		.section	.rodata.USART3_4_IRQHandler.str1.4,"aMS",%progbits,1
 1584              		.align	2
 1585              	.LC57:
 1586 0000 55415254 		.ascii	"UART RX interrupt.\000"
 1586      20525820 
 1586      696E7465 
 1586      72727570 
 1586      742E00
 1587 0013 00       		.align	2
 1588              	.LC61:
 1589 0014 636D643A 		.ascii	"cmd:\012\000"
 1589      0A00
 1590              		.section	.text.USART3_4_IRQHandler,"ax",%progbits
 1591              		.align	1
 1592              		.global	USART3_4_IRQHandler
 1593              		.syntax unified
 1594              		.code	16
 1595              		.thumb_func
 1597              	USART3_4_IRQHandler:
 1598              	.LFB48:
 308:Core/Src/uartParser.c **** void USART3_4_IRQHandler(void) {
 1599              		.loc 1 308 32 is_stmt 1 view -0
 1600              		.cfi_startproc
 1601              		@ args = 0, pretend = 0, frame = 8
 1602              		@ frame_needed = 0, uses_anonymous_args = 0
 1603 0000 30B5     		push	{r4, r5, lr}
 1604              	.LCFI9:
 1605              		.cfi_def_cfa_offset 12
 1606              		.cfi_offset 4, -12
 1607              		.cfi_offset 5, -8
 1608              		.cfi_offset 14, -4
 1609 0002 83B0     		sub	sp, sp, #12
 1610              	.LCFI10:
 1611              		.cfi_def_cfa_offset 24
 309:Core/Src/uartParser.c ****   transmitCharArray("UART RX interrupt.");
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 55


 1612              		.loc 1 309 3 view .LVU433
 1613 0004 1748     		ldr	r0, .L87
 1614 0006 FFF7FEFF 		bl	transmitCharArray
 1615              	.LVL114:
 310:Core/Src/uartParser.c ****   if (uartStatus == 0) {
 1616              		.loc 1 310 3 view .LVU434
 310:Core/Src/uartParser.c ****   if (uartStatus == 0) {
 1617              		.loc 1 310 18 is_stmt 0 view .LVU435
 1618 000a 174B     		ldr	r3, .L87+4
 1619 000c 1B78     		ldrb	r3, [r3]
 310:Core/Src/uartParser.c ****   if (uartStatus == 0) {
 1620              		.loc 1 310 6 view .LVU436
 1621 000e 002B     		cmp	r3, #0
 1622 0010 26D1     		bne	.L83
 1623              	.L85:
 1624              	.LBB17:
 312:Core/Src/uartParser.c **** 	  }
 1625              		.loc 1 312 4 is_stmt 1 view .LVU437
 311:Core/Src/uartParser.c ****     while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1626              		.loc 1 311 42 discriminator 1 view .LVU438
 311:Core/Src/uartParser.c ****     while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1627              		.loc 1 311 18 is_stmt 0 discriminator 1 view .LVU439
 1628 0012 164B     		ldr	r3, .L87+8
 1629 0014 DB69     		ldr	r3, [r3, #28]
 311:Core/Src/uartParser.c ****     while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1630              		.loc 1 311 42 discriminator 1 view .LVU440
 1631 0016 9B06     		lsls	r3, r3, #26
 1632 0018 FBD5     		bpl	.L85
 314:Core/Src/uartParser.c ****     osSemaphoreRelease(binarySem02UartParserHandle);
 1633              		.loc 1 314 5 is_stmt 1 view .LVU441
 1634 001a 154B     		ldr	r3, .L87+12
 1635 001c 1868     		ldr	r0, [r3]
 1636 001e FFF7FEFF 		bl	osSemaphoreRelease
 1637              	.LVL115:
 315:Core/Src/uartParser.c ****     volatile uint8_t usartReceivedData = USART3->RDR;
 1638              		.loc 1 315 5 view .LVU442
 315:Core/Src/uartParser.c ****     volatile uint8_t usartReceivedData = USART3->RDR;
 1639              		.loc 1 315 48 is_stmt 0 view .LVU443
 1640 0022 124C     		ldr	r4, .L87+8
 1641 0024 A38C     		ldrh	r3, [r4, #36]
 315:Core/Src/uartParser.c ****     volatile uint8_t usartReceivedData = USART3->RDR;
 1642              		.loc 1 315 22 view .LVU444
 1643 0026 DBB2     		uxtb	r3, r3
 1644 0028 6A46     		mov	r2, sp
 1645 002a D51D     		adds	r5, r2, #7
 1646 002c D371     		strb	r3, [r2, #7]
 316:Core/Src/uartParser.c ****     transmitCharArray("cmd:\n");
 1647              		.loc 1 316 5 is_stmt 1 view .LVU445
 1648 002e 1148     		ldr	r0, .L87+16
 1649 0030 FFF7FEFF 		bl	transmitCharArray
 1650              	.LVL116:
 317:Core/Src/uartParser.c ****     transmitOneChar(usartReceivedData);
 1651              		.loc 1 317 5 view .LVU446
 1652 0034 2878     		ldrb	r0, [r5]
 1653 0036 C0B2     		uxtb	r0, r0
 1654 0038 FFF7FEFF 		bl	transmitOneChar
 1655              	.LVL117:
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 56


 318:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 1656              		.loc 1 318 5 view .LVU447
 318:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 1657              		.loc 1 318 11 is_stmt 0 view .LVU448
 1658 003c 0E4A     		ldr	r2, .L87+20
 1659 003e 1378     		ldrb	r3, [r2]
 1660 0040 DBB2     		uxtb	r3, r3
 318:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 1661              		.loc 1 318 22 view .LVU449
 1662 0042 2978     		ldrb	r1, [r5]
 1663 0044 C9B2     		uxtb	r1, r1
 1664 0046 0D48     		ldr	r0, .L87+24
 1665 0048 C154     		strb	r1, [r0, r3]
 319:Core/Src/uartParser.c **** 		strIndex++;
 1666              		.loc 1 319 3 is_stmt 1 view .LVU450
 319:Core/Src/uartParser.c **** 		strIndex++;
 1667              		.loc 1 319 11 is_stmt 0 view .LVU451
 1668 004a 1378     		ldrb	r3, [r2]
 1669 004c 0133     		adds	r3, r3, #1
 1670 004e DBB2     		uxtb	r3, r3
 1671 0050 1370     		strb	r3, [r2]
 320:Core/Src/uartParser.c ****     uartStatus = 1;
 1672              		.loc 1 320 5 is_stmt 1 view .LVU452
 320:Core/Src/uartParser.c ****     uartStatus = 1;
 1673              		.loc 1 320 16 is_stmt 0 view .LVU453
 1674 0052 054B     		ldr	r3, .L87+4
 1675 0054 0122     		movs	r2, #1
 1676 0056 1A70     		strb	r2, [r3]
 322:Core/Src/uartParser.c ****     USART3->CR1 &= ~USART_CR1_RXNEIE;
 1677              		.loc 1 322 5 is_stmt 1 view .LVU454
 322:Core/Src/uartParser.c ****     USART3->CR1 &= ~USART_CR1_RXNEIE;
 1678              		.loc 1 322 11 is_stmt 0 view .LVU455
 1679 0058 2368     		ldr	r3, [r4]
 322:Core/Src/uartParser.c ****     USART3->CR1 &= ~USART_CR1_RXNEIE;
 1680              		.loc 1 322 17 view .LVU456
 1681 005a 1F32     		adds	r2, r2, #31
 1682 005c 9343     		bics	r3, r2
 1683 005e 2360     		str	r3, [r4]
 1684              	.L83:
 1685              	.LBE17:
 324:Core/Src/uartParser.c **** }
 1686              		.loc 1 324 1 view .LVU457
 1687 0060 03B0     		add	sp, sp, #12
 1688              		@ sp needed
 1689 0062 30BD     		pop	{r4, r5, pc}
 1690              	.L88:
 1691              		.align	2
 1692              	.L87:
 1693 0064 00000000 		.word	.LC57
 1694 0068 00000000 		.word	uartStatus
 1695 006c 00480040 		.word	1073760256
 1696 0070 00000000 		.word	binarySem02UartParserHandle
 1697 0074 14000000 		.word	.LC61
 1698 0078 00000000 		.word	strIndex
 1699 007c 00000000 		.word	tmpStr
 1700              		.cfi_endproc
 1701              	.LFE48:
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 57


 1703              		.global	UARTTask_attributes
 1704              		.section	.rodata.str1.4,"aMS",%progbits,1
 1705              		.align	2
 1706              	.LC65:
 1707 0000 55415254 		.ascii	"UARTParseTask\000"
 1707      50617273 
 1707      65546173 
 1707      6B00
 1708              		.section	.rodata.UARTTask_attributes,"a"
 1709              		.align	2
 1712              	UARTTask_attributes:
 1713 0000 00000000 		.word	.LC65
 1714 0004 00000000 		.space	16
 1714      00000000 
 1714      00000000 
 1714      00000000 
 1715 0014 00020000 		.word	512
 1716 0018 19000000 		.word	25
 1717 001c 00000000 		.space	8
 1717      00000000 
 1718              		.global	uartStatus
 1719              		.section	.bss.uartStatus,"aw",%nobits
 1722              	uartStatus:
 1723 0000 00       		.space	1
 1724              		.global	commandOut
 1725              		.section	.bss.commandOut,"aw",%nobits
 1726              		.align	1
 1729              	commandOut:
 1730 0000 0000     		.space	2
 1731              		.global	cmd
 1732              		.section	.bss.cmd,"aw",%nobits
 1733              		.align	2
 1736              	cmd:
 1737 0000 00000000 		.space	80
 1737      00000000 
 1737      00000000 
 1737      00000000 
 1737      00000000 
 1738              		.global	tmpStr
 1739              		.section	.bss.tmpStr,"aw",%nobits
 1740              		.align	2
 1743              	tmpStr:
 1744 0000 00000000 		.space	20
 1744      00000000 
 1744      00000000 
 1744      00000000 
 1744      00000000 
 1745              		.global	cmdStrIndex
 1746              		.section	.bss.cmdStrIndex,"aw",%nobits
 1749              	cmdStrIndex:
 1750 0000 00       		.space	1
 1751              		.global	cmdIndex
 1752              		.section	.bss.cmdIndex,"aw",%nobits
 1755              	cmdIndex:
 1756 0000 00       		.space	1
 1757              		.global	strIndex
 1758              		.section	.bss.strIndex,"aw",%nobits
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 58


 1761              	strIndex:
 1762 0000 00       		.space	1
 1763              		.section	.rodata.str1.4
 1764 000e 0000     		.align	2
 1765              	.LC66:
 1766 0010 53454D30 		.ascii	"SEM02\000"
 1766      3200
 1767              		.section	.rodata.semAttr_SEM1,"a"
 1768              		.align	2
 1771              	semAttr_SEM1:
 1772 0000 10000000 		.word	.LC66
 1773 0004 00000000 		.space	12
 1773      00000000 
 1773      00000000 
 1774              		.global	binarySem02UartParserHandle
 1775              		.section	.bss.binarySem02UartParserHandle,"aw",%nobits
 1776              		.align	2
 1779              	binarySem02UartParserHandle:
 1780 0000 00000000 		.space	4
 1781              		.global	cmdQueue
 1782              		.section	.bss.cmdQueue,"aw",%nobits
 1783              		.align	2
 1786              	cmdQueue:
 1787 0000 00000000 		.space	4
 1788              		.global	UARTTaskHandle
 1789              		.section	.bss.UARTTaskHandle,"aw",%nobits
 1790              		.align	2
 1793              	UARTTaskHandle:
 1794 0000 00000000 		.space	4
 1795              		.text
 1796              	.Letext0:
 1797              		.file 3 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 1798              		.file 4 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/lib/gcc/arm-none-eabi/13.2.1/includ
 1799              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1800              		.file 6 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 1801              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 1802              		.file 8 "Core/Inc/cmdQueue.h"
 1803              		.file 9 "Core/Inc/uartParser.h"
 1804              		.file 10 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/string.h"
 1805              		.file 11 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/strings.h"
 1806              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 59


DEFINED SYMBOLS
                            *ABS*:00000000 uartParser.c
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:19     .text.convertSpeed:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:25     .text.convertSpeed:00000000 convertSpeed
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:192    .text.transmitOneChar:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:198    .text.transmitOneChar:00000000 transmitOneChar
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:225    .text.transmitOneChar:00000010 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:230    .text.transmitCharArray:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:236    .text.transmitCharArray:00000000 transmitCharArray
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:286    .text.sendUint16BinToUart:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:292    .text.sendUint16BinToUart:00000000 sendUint16BinToUart
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:358    .rodata.parseCmd.str1.4:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:401    .text.parseCmd:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:407    .text.parseCmd:00000000 parseCmd
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1011   .text.parseCmd:000002cc $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1761   .bss.strIndex:00000000 strIndex
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1749   .bss.cmdStrIndex:00000000 cmdStrIndex
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1755   .bss.cmdIndex:00000000 cmdIndex
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1743   .bss.tmpStr:00000000 tmpStr
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1736   .bss.cmd:00000000 cmd
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1729   .bss.commandOut:00000000 commandOut
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1040   .rodata.StartParseUartTask.str1.4:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1053   .text.StartParseUartTask:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1059   .text.StartParseUartTask:00000000 StartParseUartTask
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1349   .text.StartParseUartTask:0000012c $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1786   .bss.cmdQueue:00000000 cmdQueue
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1722   .bss.uartStatus:00000000 uartStatus
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1779   .bss.binarySem02UartParserHandle:00000000 binarySem02UartParserHandle
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1368   .rodata.initUsart3.str1.4:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1372   .text.initUsart3:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1378   .text.initUsart3:00000000 initUsart3
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1569   .text.initUsart3:000000c0 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1771   .rodata.semAttr_SEM1:00000000 semAttr_SEM1
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1584   .rodata.USART3_4_IRQHandler.str1.4:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1591   .text.USART3_4_IRQHandler:00000000 $t
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1597   .text.USART3_4_IRQHandler:00000000 USART3_4_IRQHandler
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1693   .text.USART3_4_IRQHandler:00000064 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1712   .rodata.UARTTask_attributes:00000000 UARTTask_attributes
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1705   .rodata.str1.4:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1709   .rodata.UARTTask_attributes:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1723   .bss.uartStatus:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1726   .bss.commandOut:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1733   .bss.cmd:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1740   .bss.tmpStr:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1750   .bss.cmdStrIndex:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1756   .bss.cmdIndex:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1762   .bss.strIndex:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1768   .rodata.semAttr_SEM1:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1776   .bss.binarySem02UartParserHandle:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1783   .bss.cmdQueue:00000000 $d
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1793   .bss.UARTTaskHandle:00000000 UARTTaskHandle
/var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s:1790   .bss.UARTTaskHandle:00000000 $d

UNDEFINED SYMBOLS
strlen
strcasecmp
queuePush
ARM GAS  /var/folders/5r/xb8hq6p128d37tsfvtb6dnd00000gn/T//ccNZ7TS2.s 			page 60


osSemaphoreAcquire
__aeabi_uidiv
HAL_RCC_GetHCLKFreq
osSemaphoreNew
createQueue
osSemaphoreRelease
