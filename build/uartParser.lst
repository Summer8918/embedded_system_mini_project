ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"uartParser.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/uartParser.c"
  18              		.section	.rodata.parseCmd.str1.4,"aMS",%progbits,1
  19              		.align	2
  20              	.LC5:
  21 0000 6C656400 		.ascii	"led\000"
  22              		.align	2
  23              	.LC8:
  24 0004 72656400 		.ascii	"red\000"
  25              		.align	2
  26              	.LC11:
  27 0008 67726565 		.ascii	"green\000"
  27      6E00
  28 000e 0000     		.align	2
  29              	.LC13:
  30 0010 626C7565 		.ascii	"blue\000"
  30      00
  31 0015 000000   		.align	2
  32              	.LC15:
  33 0018 6F72616E 		.ascii	"orange\000"
  33      676500
  34 001f 00       		.align	2
  35              	.LC17:
  36 0020 6F6E00   		.ascii	"on\000"
  37 0023 00       		.align	2
  38              	.LC20:
  39 0024 6F666600 		.ascii	"off\000"
  40              		.align	2
  41              	.LC22:
  42 0028 746F6767 		.ascii	"toggle\000"
  42      6C6500
  43 002f 00       		.align	2
  44              	.LC24:
  45 0030 6D6F746F 		.ascii	"motor\000"
  45      7200
  46              		.section	.text.parseCmd,"ax",%progbits
  47              		.align	1
  48              		.global	parseCmd
  49              		.syntax unified
  50              		.code	16
  51              		.thumb_func
  53              	parseCmd:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 2


  54              	.LFB44:
   1:Core/Src/uartParser.c **** #include "uartParser.h"
   2:Core/Src/uartParser.c **** #include "cmsis_os2.h"
   3:Core/Src/uartParser.c **** #include <string.h>
   4:Core/Src/uartParser.c **** 
   5:Core/Src/uartParser.c **** osThreadId_t UARTTaskHandle;
   6:Core/Src/uartParser.c **** Cmd_Queue * cmdQueue = NULL;
   7:Core/Src/uartParser.c **** osSemaphoreId_t binarySem02UartParserHandle;
   8:Core/Src/uartParser.c **** static const osSemaphoreAttr_t semAttr_SEM1 = {
   9:Core/Src/uartParser.c ****   .name = "SEM02",
  10:Core/Src/uartParser.c **** };
  11:Core/Src/uartParser.c **** 
  12:Core/Src/uartParser.c **** volatile uint8_t strIndex = 0;
  13:Core/Src/uartParser.c **** volatile uint8_t cmdIndex = 0;
  14:Core/Src/uartParser.c **** volatile uint8_t cmdStrIndex = 0;
  15:Core/Src/uartParser.c **** volatile char tmpStr[TMP_STR_LEN];
  16:Core/Src/uartParser.c **** volatile char cmd[4][TMP_STR_LEN];
  17:Core/Src/uartParser.c **** volatile uint16_t commandOut = 0x0000;
  18:Core/Src/uartParser.c **** 
  19:Core/Src/uartParser.c **** volatile uint16_t commandLED = 0;
  20:Core/Src/uartParser.c **** 
  21:Core/Src/uartParser.c **** // 0 not working, 1 working
  22:Core/Src/uartParser.c **** volatile uint8_t uartStatus = 0;
  23:Core/Src/uartParser.c **** 
  24:Core/Src/uartParser.c **** const osThreadAttr_t UARTTask_attributes = {
  25:Core/Src/uartParser.c ****   .name = "UARTParseTask",
  26:Core/Src/uartParser.c ****   .stack_size = 128 * 4,
  27:Core/Src/uartParser.c ****   .priority = (osPriority_t) osPriorityNormal1, // higher priority than osPriorityNormal
  28:Core/Src/uartParser.c **** };
  29:Core/Src/uartParser.c **** 
  30:Core/Src/uartParser.c **** void sendUint16BinToUart(uint16_t x) {
  31:Core/Src/uartParser.c **** 	char str[16];
  32:Core/Src/uartParser.c **** 	uint8_t i = 0;
  33:Core/Src/uartParser.c **** 	while (i < 16) {
  34:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
  35:Core/Src/uartParser.c **** 	  i++;
  36:Core/Src/uartParser.c **** 	}
  37:Core/Src/uartParser.c **** 	transmitCharArray(str);
  38:Core/Src/uartParser.c **** }
  39:Core/Src/uartParser.c **** 
  40:Core/Src/uartParser.c **** uint8_t parseCmd(void) {
  55              		.loc 1 40 24 view -0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 8
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59 0000 30B5     		push	{r4, r5, lr}
  60              	.LCFI0:
  61              		.cfi_def_cfa_offset 12
  62              		.cfi_offset 4, -12
  63              		.cfi_offset 5, -8
  64              		.cfi_offset 14, -4
  65 0002 83B0     		sub	sp, sp, #12
  66              	.LCFI1:
  67              		.cfi_def_cfa_offset 24
  41:Core/Src/uartParser.c ****   //Parse words from received command string
  42:Core/Src/uartParser.c ****   volatile uint8_t strLen = strIndex + 1;
  68              		.loc 1 42 3 view .LVU1
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 3


  69              		.loc 1 42 38 is_stmt 0 view .LVU2
  70 0004 604A     		ldr	r2, .L19
  71 0006 1378     		ldrb	r3, [r2]
  72 0008 0133     		adds	r3, r3, #1
  73 000a DBB2     		uxtb	r3, r3
  74              		.loc 1 42 20 view .LVU3
  75 000c 6946     		mov	r1, sp
  76 000e CB71     		strb	r3, [r1, #7]
  43:Core/Src/uartParser.c ****   strIndex = 0;
  77              		.loc 1 43 3 is_stmt 1 view .LVU4
  78              		.loc 1 43 12 is_stmt 0 view .LVU5
  79 0010 0023     		movs	r3, #0
  80 0012 1370     		strb	r3, [r2]
  44:Core/Src/uartParser.c ****   uint8_t error = 0;
  81              		.loc 1 44 3 is_stmt 1 view .LVU6
  82              	.LVL0:
  45:Core/Src/uartParser.c ****   cmdStrIndex = 0;
  83              		.loc 1 45 3 view .LVU7
  84              		.loc 1 45 15 is_stmt 0 view .LVU8
  85 0014 5D4A     		ldr	r2, .L19+4
  86 0016 1370     		strb	r3, [r2]
  46:Core/Src/uartParser.c ****   cmdIndex = 0;
  87              		.loc 1 46 3 is_stmt 1 view .LVU9
  88              		.loc 1 46 12 is_stmt 0 view .LVU10
  89 0018 5D4A     		ldr	r2, .L19+8
  90 001a 1370     		strb	r3, [r2]
  47:Core/Src/uartParser.c ****   while (strIndex < strLen) {
  91              		.loc 1 47 3 is_stmt 1 view .LVU11
  92              		.loc 1 47 9 is_stmt 0 view .LVU12
  93 001c 0CE0     		b	.L2
  94              	.L18:
  48:Core/Src/uartParser.c ****     if (tmpStr[strIndex] == ' ') {
  49:Core/Src/uartParser.c ****       cmdIndex++;
  95              		.loc 1 49 7 is_stmt 1 view .LVU13
  96              		.loc 1 49 15 is_stmt 0 view .LVU14
  97 001e 5C4A     		ldr	r2, .L19+8
  98 0020 1378     		ldrb	r3, [r2]
  99 0022 0133     		adds	r3, r3, #1
 100 0024 DBB2     		uxtb	r3, r3
 101 0026 1370     		strb	r3, [r2]
  50:Core/Src/uartParser.c ****       cmdStrIndex = 0;
 102              		.loc 1 50 7 is_stmt 1 view .LVU15
 103              		.loc 1 50 19 is_stmt 0 view .LVU16
 104 0028 584B     		ldr	r3, .L19+4
 105 002a 0022     		movs	r2, #0
 106 002c 1A70     		strb	r2, [r3]
 107              	.L4:
  51:Core/Src/uartParser.c ****     } else {
  52:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
  53:Core/Src/uartParser.c ****       cmdStrIndex++;
  54:Core/Src/uartParser.c ****     }
  55:Core/Src/uartParser.c ****     strIndex++;
 108              		.loc 1 55 5 is_stmt 1 view .LVU17
 109              		.loc 1 55 13 is_stmt 0 view .LVU18
 110 002e 564A     		ldr	r2, .L19
 111 0030 1378     		ldrb	r3, [r2]
 112 0032 0133     		adds	r3, r3, #1
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 4


 113 0034 DBB2     		uxtb	r3, r3
 114 0036 1370     		strb	r3, [r2]
 115              	.L2:
  47:Core/Src/uartParser.c ****     if (tmpStr[strIndex] == ' ') {
 116              		.loc 1 47 19 is_stmt 1 view .LVU19
 117 0038 534B     		ldr	r3, .L19
 118 003a 1A78     		ldrb	r2, [r3]
 119 003c D2B2     		uxtb	r2, r2
 120 003e 6B46     		mov	r3, sp
 121 0040 0733     		adds	r3, r3, #7
 122 0042 1B78     		ldrb	r3, [r3]
 123 0044 DBB2     		uxtb	r3, r3
 124 0046 9A42     		cmp	r2, r3
 125 0048 1CD2     		bcs	.L17
  48:Core/Src/uartParser.c ****       cmdIndex++;
 126              		.loc 1 48 5 view .LVU20
  48:Core/Src/uartParser.c ****       cmdIndex++;
 127              		.loc 1 48 15 is_stmt 0 view .LVU21
 128 004a 4F4B     		ldr	r3, .L19
 129 004c 1B78     		ldrb	r3, [r3]
 130 004e DBB2     		uxtb	r3, r3
 131 0050 504A     		ldr	r2, .L19+12
 132 0052 D35C     		ldrb	r3, [r2, r3]
  48:Core/Src/uartParser.c ****       cmdIndex++;
 133              		.loc 1 48 8 view .LVU22
 134 0054 202B     		cmp	r3, #32
 135 0056 E2D0     		beq	.L18
  52:Core/Src/uartParser.c ****       cmdStrIndex++;
 136              		.loc 1 52 7 is_stmt 1 view .LVU23
  52:Core/Src/uartParser.c ****       cmdStrIndex++;
 137              		.loc 1 52 42 is_stmt 0 view .LVU24
 138 0058 4B4B     		ldr	r3, .L19
 139 005a 1A78     		ldrb	r2, [r3]
 140 005c D2B2     		uxtb	r2, r2
  52:Core/Src/uartParser.c ****       cmdStrIndex++;
 141              		.loc 1 52 20 view .LVU25
 142 005e 4C4B     		ldr	r3, .L19+8
 143 0060 1B78     		ldrb	r3, [r3]
 144 0062 4A49     		ldr	r1, .L19+4
 145 0064 0878     		ldrb	r0, [r1]
 146 0066 C0B2     		uxtb	r0, r0
  52:Core/Src/uartParser.c ****       cmdStrIndex++;
 147              		.loc 1 52 42 view .LVU26
 148 0068 4A4C     		ldr	r4, .L19+12
 149 006a A45C     		ldrb	r4, [r4, r2]
 150 006c E4B2     		uxtb	r4, r4
  52:Core/Src/uartParser.c ****       cmdStrIndex++;
 151              		.loc 1 52 34 view .LVU27
 152 006e 4A4A     		ldr	r2, .L19+16
 153 0070 9D00     		lsls	r5, r3, #2
 154 0072 5B19     		adds	r3, r3, r5
 155 0074 9B00     		lsls	r3, r3, #2
 156 0076 D218     		adds	r2, r2, r3
 157 0078 1454     		strb	r4, [r2, r0]
  53:Core/Src/uartParser.c ****     }
 158              		.loc 1 53 7 is_stmt 1 view .LVU28
  53:Core/Src/uartParser.c ****     }
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 5


 159              		.loc 1 53 18 is_stmt 0 view .LVU29
 160 007a 0B78     		ldrb	r3, [r1]
 161 007c 0133     		adds	r3, r3, #1
 162 007e DBB2     		uxtb	r3, r3
 163 0080 0B70     		strb	r3, [r1]
 164 0082 D4E7     		b	.L4
 165              	.L17:
  56:Core/Src/uartParser.c ****   } 
  57:Core/Src/uartParser.c ****   //Convert words into command format
  58:Core/Src/uartParser.c ****   //First digit
  59:Core/Src/uartParser.c ****   if (strcmp(cmd[0], "led") == 0) {
 166              		.loc 1 59 3 is_stmt 1 view .LVU30
 167              		.loc 1 59 7 is_stmt 0 view .LVU31
 168 0084 4549     		ldr	r1, .L19+20
 169 0086 4448     		ldr	r0, .L19+16
 170 0088 FFF7FEFF 		bl	strcmp
 171              	.LVL1:
 172              		.loc 1 59 6 discriminator 1 view .LVU32
 173 008c 0028     		cmp	r0, #0
 174 008e 00D0     		beq	.LCB113
 175 0090 67E0     		b	.L6	@long jump
 176              	.LCB113:
  60:Core/Src/uartParser.c ****     commandOut |= 0xA000;
 177              		.loc 1 60 5 is_stmt 1 view .LVU33
 178              		.loc 1 60 16 is_stmt 0 view .LVU34
 179 0092 434A     		ldr	r2, .L19+24
 180 0094 1388     		ldrh	r3, [r2]
 181 0096 4349     		ldr	r1, .L19+28
 182 0098 0B43     		orrs	r3, r1
 183 009a 9BB2     		uxth	r3, r3
 184 009c 1380     		strh	r3, [r2]
  61:Core/Src/uartParser.c ****     //Second digit - LED
  62:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "red") == 0) {
 185              		.loc 1 62 5 is_stmt 1 view .LVU35
 186              		.loc 1 62 9 is_stmt 0 view .LVU36
 187 009e 4249     		ldr	r1, .L19+32
 188 00a0 4248     		ldr	r0, .L19+36
 189 00a2 FFF7FEFF 		bl	strcmp
 190              	.LVL2:
 191              		.loc 1 62 8 discriminator 1 view .LVU37
 192 00a6 0028     		cmp	r0, #0
 193 00a8 15D1     		bne	.L7
  63:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 194              		.loc 1 63 7 is_stmt 1 view .LVU38
 195              		.loc 1 63 18 is_stmt 0 view .LVU39
 196 00aa 3D4A     		ldr	r2, .L19+24
 197 00ac 1388     		ldrh	r3, [r2]
 198 00ae 8021     		movs	r1, #128
 199 00b0 4900     		lsls	r1, r1, #1
 200 00b2 0B43     		orrs	r3, r1
 201 00b4 1380     		strh	r3, [r2]
  44:Core/Src/uartParser.c ****   cmdStrIndex = 0;
 202              		.loc 1 44 11 view .LVU40
 203 00b6 0024     		movs	r4, #0
 204              	.L8:
 205              	.LVL3:
  64:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "green") == 0) {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 6


  65:Core/Src/uartParser.c ****       commandOut |= 0x0200;
  66:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "blue") == 0) {
  67:Core/Src/uartParser.c ****       commandOut |= 0x0300;
  68:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "orange") == 0) {
  69:Core/Src/uartParser.c ****       commandOut |= 0x0400;
  70:Core/Src/uartParser.c ****     } else {
  71:Core/Src/uartParser.c ****       error = 1;
  72:Core/Src/uartParser.c ****     }
  73:Core/Src/uartParser.c ****     //Third digit - LED
  74:Core/Src/uartParser.c ****     if (strcmp(cmd[2], "on") == 0) {
 206              		.loc 1 74 5 is_stmt 1 view .LVU41
 207              		.loc 1 74 9 is_stmt 0 view .LVU42
 208 00b8 3D49     		ldr	r1, .L19+40
 209 00ba 3E48     		ldr	r0, .L19+44
 210 00bc FFF7FEFF 		bl	strcmp
 211              	.LVL4:
 212              		.loc 1 74 8 discriminator 1 view .LVU43
 213 00c0 0028     		cmp	r0, #0
 214 00c2 34D1     		bne	.L11
  75:Core/Src/uartParser.c ****       commandOut |= 0x0010;
 215              		.loc 1 75 7 is_stmt 1 view .LVU44
 216              		.loc 1 75 18 is_stmt 0 view .LVU45
 217 00c4 364A     		ldr	r2, .L19+24
 218 00c6 1388     		ldrh	r3, [r2]
 219 00c8 1021     		movs	r1, #16
 220 00ca 0B43     		orrs	r3, r1
 221 00cc 9BB2     		uxth	r3, r3
 222 00ce 1380     		strh	r3, [r2]
 223              	.LVL5:
 224              	.L12:
  76:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "off") == 0) {
  77:Core/Src/uartParser.c ****       commandOut |= 0x0020;
  78:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "toggle") == 0) {
  79:Core/Src/uartParser.c ****       commandOut |= 0x0030;
  80:Core/Src/uartParser.c ****     } else {
  81:Core/Src/uartParser.c ****       error = 1;
  82:Core/Src/uartParser.c ****     }
  83:Core/Src/uartParser.c ****   } else if (strcmp(cmd[0], "motor") == 0) {
  84:Core/Src/uartParser.c ****     commandOut |= 0xB000;
  85:Core/Src/uartParser.c ****   } else {
  86:Core/Src/uartParser.c ****     error = 1;
  87:Core/Src/uartParser.c ****   }
  88:Core/Src/uartParser.c ****   return error;
 225              		.loc 1 88 3 is_stmt 1 view .LVU46
  89:Core/Src/uartParser.c **** }
 226              		.loc 1 89 1 is_stmt 0 view .LVU47
 227 00d0 2000     		movs	r0, r4
 228 00d2 03B0     		add	sp, sp, #12
 229              		@ sp needed
 230              	.LVL6:
 231              		.loc 1 89 1 view .LVU48
 232 00d4 30BD     		pop	{r4, r5, pc}
 233              	.LVL7:
 234              	.L7:
  64:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 235              		.loc 1 64 12 is_stmt 1 view .LVU49
  64:Core/Src/uartParser.c ****       commandOut |= 0x0200;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 7


 236              		.loc 1 64 16 is_stmt 0 view .LVU50
 237 00d6 3849     		ldr	r1, .L19+48
 238 00d8 3448     		ldr	r0, .L19+36
 239 00da FFF7FEFF 		bl	strcmp
 240              	.LVL8:
  64:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 241              		.loc 1 64 15 discriminator 1 view .LVU51
 242 00de 0028     		cmp	r0, #0
 243 00e0 07D1     		bne	.L9
  65:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "blue") == 0) {
 244              		.loc 1 65 7 is_stmt 1 view .LVU52
  65:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "blue") == 0) {
 245              		.loc 1 65 18 is_stmt 0 view .LVU53
 246 00e2 2F4A     		ldr	r2, .L19+24
 247 00e4 1388     		ldrh	r3, [r2]
 248 00e6 8021     		movs	r1, #128
 249 00e8 8900     		lsls	r1, r1, #2
 250 00ea 0B43     		orrs	r3, r1
 251 00ec 1380     		strh	r3, [r2]
  44:Core/Src/uartParser.c ****   cmdStrIndex = 0;
 252              		.loc 1 44 11 view .LVU54
 253 00ee 0024     		movs	r4, #0
 254 00f0 E2E7     		b	.L8
 255              	.L9:
  66:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 256              		.loc 1 66 12 is_stmt 1 view .LVU55
  66:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 257              		.loc 1 66 16 is_stmt 0 view .LVU56
 258 00f2 3249     		ldr	r1, .L19+52
 259 00f4 2D48     		ldr	r0, .L19+36
 260 00f6 FFF7FEFF 		bl	strcmp
 261              	.LVL9:
  66:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 262              		.loc 1 66 15 discriminator 1 view .LVU57
 263 00fa 0028     		cmp	r0, #0
 264 00fc 07D1     		bne	.L10
  67:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "orange") == 0) {
 265              		.loc 1 67 7 is_stmt 1 view .LVU58
  67:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "orange") == 0) {
 266              		.loc 1 67 18 is_stmt 0 view .LVU59
 267 00fe 284A     		ldr	r2, .L19+24
 268 0100 1388     		ldrh	r3, [r2]
 269 0102 C021     		movs	r1, #192
 270 0104 8900     		lsls	r1, r1, #2
 271 0106 0B43     		orrs	r3, r1
 272 0108 1380     		strh	r3, [r2]
  44:Core/Src/uartParser.c ****   cmdStrIndex = 0;
 273              		.loc 1 44 11 view .LVU60
 274 010a 0024     		movs	r4, #0
 275 010c D4E7     		b	.L8
 276              	.L10:
  68:Core/Src/uartParser.c ****       commandOut |= 0x0400;
 277              		.loc 1 68 12 is_stmt 1 view .LVU61
  68:Core/Src/uartParser.c ****       commandOut |= 0x0400;
 278              		.loc 1 68 16 is_stmt 0 view .LVU62
 279 010e 2C49     		ldr	r1, .L19+56
 280 0110 2648     		ldr	r0, .L19+36
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 8


 281 0112 FFF7FEFF 		bl	strcmp
 282              	.LVL10:
  68:Core/Src/uartParser.c ****       commandOut |= 0x0400;
 283              		.loc 1 68 15 discriminator 1 view .LVU63
 284 0116 0028     		cmp	r0, #0
 285 0118 07D1     		bne	.L14
  69:Core/Src/uartParser.c ****     } else {
 286              		.loc 1 69 7 is_stmt 1 view .LVU64
  69:Core/Src/uartParser.c ****     } else {
 287              		.loc 1 69 18 is_stmt 0 view .LVU65
 288 011a 214A     		ldr	r2, .L19+24
 289 011c 1388     		ldrh	r3, [r2]
 290 011e 8021     		movs	r1, #128
 291 0120 C900     		lsls	r1, r1, #3
 292 0122 0B43     		orrs	r3, r1
 293 0124 1380     		strh	r3, [r2]
  44:Core/Src/uartParser.c ****   cmdStrIndex = 0;
 294              		.loc 1 44 11 view .LVU66
 295 0126 0024     		movs	r4, #0
 296 0128 C6E7     		b	.L8
 297              	.L14:
  71:Core/Src/uartParser.c ****     }
 298              		.loc 1 71 13 view .LVU67
 299 012a 0124     		movs	r4, #1
 300 012c C4E7     		b	.L8
 301              	.LVL11:
 302              	.L11:
  76:Core/Src/uartParser.c ****       commandOut |= 0x0020;
 303              		.loc 1 76 12 is_stmt 1 view .LVU68
  76:Core/Src/uartParser.c ****       commandOut |= 0x0020;
 304              		.loc 1 76 16 is_stmt 0 view .LVU69
 305 012e 2549     		ldr	r1, .L19+60
 306 0130 2048     		ldr	r0, .L19+44
 307 0132 FFF7FEFF 		bl	strcmp
 308              	.LVL12:
  76:Core/Src/uartParser.c ****       commandOut |= 0x0020;
 309              		.loc 1 76 15 discriminator 1 view .LVU70
 310 0136 0028     		cmp	r0, #0
 311 0138 06D1     		bne	.L13
  77:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "toggle") == 0) {
 312              		.loc 1 77 7 is_stmt 1 view .LVU71
  77:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "toggle") == 0) {
 313              		.loc 1 77 18 is_stmt 0 view .LVU72
 314 013a 194A     		ldr	r2, .L19+24
 315 013c 1388     		ldrh	r3, [r2]
 316 013e 2021     		movs	r1, #32
 317 0140 0B43     		orrs	r3, r1
 318 0142 9BB2     		uxth	r3, r3
 319 0144 1380     		strh	r3, [r2]
 320 0146 C3E7     		b	.L12
 321              	.L13:
  78:Core/Src/uartParser.c ****       commandOut |= 0x0030;
 322              		.loc 1 78 12 is_stmt 1 view .LVU73
  78:Core/Src/uartParser.c ****       commandOut |= 0x0030;
 323              		.loc 1 78 16 is_stmt 0 view .LVU74
 324 0148 1F49     		ldr	r1, .L19+64
 325 014a 1A48     		ldr	r0, .L19+44
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 9


 326 014c FFF7FEFF 		bl	strcmp
 327              	.LVL13:
  78:Core/Src/uartParser.c ****       commandOut |= 0x0030;
 328              		.loc 1 78 15 discriminator 1 view .LVU75
 329 0150 0028     		cmp	r0, #0
 330 0152 14D1     		bne	.L15
  79:Core/Src/uartParser.c ****     } else {
 331              		.loc 1 79 7 is_stmt 1 view .LVU76
  79:Core/Src/uartParser.c ****     } else {
 332              		.loc 1 79 18 is_stmt 0 view .LVU77
 333 0154 124A     		ldr	r2, .L19+24
 334 0156 1388     		ldrh	r3, [r2]
 335 0158 3021     		movs	r1, #48
 336 015a 0B43     		orrs	r3, r1
 337 015c 9BB2     		uxth	r3, r3
 338 015e 1380     		strh	r3, [r2]
 339 0160 B6E7     		b	.L12
 340              	.LVL14:
 341              	.L6:
  83:Core/Src/uartParser.c ****     commandOut |= 0xB000;
 342              		.loc 1 83 10 is_stmt 1 view .LVU78
  83:Core/Src/uartParser.c ****     commandOut |= 0xB000;
 343              		.loc 1 83 14 is_stmt 0 view .LVU79
 344 0162 1A49     		ldr	r1, .L19+68
 345 0164 0C48     		ldr	r0, .L19+16
 346 0166 FFF7FEFF 		bl	strcmp
 347              	.LVL15:
  83:Core/Src/uartParser.c ****     commandOut |= 0xB000;
 348              		.loc 1 83 13 discriminator 1 view .LVU80
 349 016a 0028     		cmp	r0, #0
 350 016c 09D1     		bne	.L16
  84:Core/Src/uartParser.c ****   } else {
 351              		.loc 1 84 5 is_stmt 1 view .LVU81
  84:Core/Src/uartParser.c ****   } else {
 352              		.loc 1 84 16 is_stmt 0 view .LVU82
 353 016e 0C4A     		ldr	r2, .L19+24
 354 0170 1388     		ldrh	r3, [r2]
 355 0172 1749     		ldr	r1, .L19+72
 356 0174 0B43     		orrs	r3, r1
 357 0176 9BB2     		uxth	r3, r3
 358 0178 1380     		strh	r3, [r2]
  44:Core/Src/uartParser.c ****   cmdStrIndex = 0;
 359              		.loc 1 44 11 view .LVU83
 360 017a 0024     		movs	r4, #0
 361 017c A8E7     		b	.L12
 362              	.LVL16:
 363              	.L15:
  81:Core/Src/uartParser.c ****     }
 364              		.loc 1 81 13 view .LVU84
 365 017e 0124     		movs	r4, #1
 366              	.LVL17:
  81:Core/Src/uartParser.c ****     }
 367              		.loc 1 81 13 view .LVU85
 368 0180 A6E7     		b	.L12
 369              	.LVL18:
 370              	.L16:
  86:Core/Src/uartParser.c ****   }
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 10


 371              		.loc 1 86 11 view .LVU86
 372 0182 0124     		movs	r4, #1
 373 0184 A4E7     		b	.L12
 374              	.L20:
 375 0186 C046     		.align	2
 376              	.L19:
 377 0188 00000000 		.word	strIndex
 378 018c 00000000 		.word	cmdStrIndex
 379 0190 00000000 		.word	cmdIndex
 380 0194 00000000 		.word	tmpStr
 381 0198 00000000 		.word	cmd
 382 019c 00000000 		.word	.LC5
 383 01a0 00000000 		.word	commandOut
 384 01a4 00A0FFFF 		.word	-24576
 385 01a8 04000000 		.word	.LC8
 386 01ac 14000000 		.word	cmd+20
 387 01b0 20000000 		.word	.LC17
 388 01b4 28000000 		.word	cmd+40
 389 01b8 08000000 		.word	.LC11
 390 01bc 10000000 		.word	.LC13
 391 01c0 18000000 		.word	.LC15
 392 01c4 24000000 		.word	.LC20
 393 01c8 28000000 		.word	.LC22
 394 01cc 30000000 		.word	.LC24
 395 01d0 00B0FFFF 		.word	-20480
 396              		.cfi_endproc
 397              	.LFE44:
 399              		.section	.text.transmitOneChar,"ax",%progbits
 400              		.align	1
 401              		.global	transmitOneChar
 402              		.syntax unified
 403              		.code	16
 404              		.thumb_func
 406              	transmitOneChar:
 407              	.LFB48:
  90:Core/Src/uartParser.c **** 
  91:Core/Src/uartParser.c **** /* UART CODE BEGIN Header_StartLEDTask */
  92:Core/Src/uartParser.c **** /**
  93:Core/Src/uartParser.c ****   * @brief  Function implementing the LEDTask thread.
  94:Core/Src/uartParser.c ****   * @param  argument: Not used
  95:Core/Src/uartParser.c ****   * @retval None
  96:Core/Src/uartParser.c ****   */
  97:Core/Src/uartParser.c **** /* USER CODE END Header_StartLEDTask */
  98:Core/Src/uartParser.c **** void StartParseUartTask(void *argument) {
  99:Core/Src/uartParser.c ****   // TODO: add a timer to limit the max execution time
 100:Core/Src/uartParser.c ****   //uint8_t cnt = 0;
 101:Core/Src/uartParser.c **** 
 102:Core/Src/uartParser.c ****   while (1) { // for test, after test, change it back to while (1)
 103:Core/Src/uartParser.c ****     //transmitCharArray("cnt\n");
 104:Core/Src/uartParser.c ****     //cnt += 1;
 105:Core/Src/uartParser.c ****     //transmitCharArray("Waiting to get sem02.\n");
 106:Core/Src/uartParser.c ****     osSemaphoreAcquire(binarySem02UartParserHandle, osWaitForever);
 107:Core/Src/uartParser.c ****     //transmitCharArray("get sem02!\n");
 108:Core/Src/uartParser.c ****     while (1) {
 109:Core/Src/uartParser.c ****       while((USART3->ISR & USART_ISR_RXNE) == 0) {
 110:Core/Src/uartParser.c **** 	    }
 111:Core/Src/uartParser.c ****       //Pull character from UART
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 11


 112:Core/Src/uartParser.c **** 	    volatile uint8_t usartReceivedData = USART3->RDR;
 113:Core/Src/uartParser.c ****       transmitOneChar(usartReceivedData);
 114:Core/Src/uartParser.c ****       //Command string terminated with enter key
 115:Core/Src/uartParser.c **** 	    if (usartReceivedData == '\r') {
 116:Core/Src/uartParser.c ****         uint8_t error = parseCmd();
 117:Core/Src/uartParser.c ****         //Command syntax correct
 118:Core/Src/uartParser.c ****         if (error == 0) {
 119:Core/Src/uartParser.c ****           // Store the commandOut in queue
 120:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 121:Core/Src/uartParser.c ****             transmitCharArray("Push command to queue success.\n");
 122:Core/Src/uartParser.c ****             sendUint16BinToUart(commandOut);
 123:Core/Src/uartParser.c ****           } else {
 124:Core/Src/uartParser.c ****             transmitCharArray("Fail to push command to queue, try again.\n");
 125:Core/Src/uartParser.c ****           }
 126:Core/Src/uartParser.c ****         //Command syntax malformed
 127:Core/Src/uartParser.c ****         } else {
 128:Core/Src/uartParser.c ****           transmitCharArray("Command not recognized");
 129:Core/Src/uartParser.c ****           transmitCharArray(tmpStr);
 130:Core/Src/uartParser.c ****           
 131:Core/Src/uartParser.c ****         }
 132:Core/Src/uartParser.c ****         //Reset command string and index
 133:Core/Src/uartParser.c ****         strIndex = 0;
 134:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 135:Core/Src/uartParser.c ****           tmpStr[i] = '\0';
 136:Core/Src/uartParser.c ****           cmd[0][i] = '\0';
 137:Core/Src/uartParser.c ****           cmd[1][i] = '\0';
 138:Core/Src/uartParser.c ****           cmd[2][i] = '\0';
 139:Core/Src/uartParser.c ****           cmd[3][i] = '\0';
 140:Core/Src/uartParser.c ****         }
 141:Core/Src/uartParser.c **** 
 142:Core/Src/uartParser.c ****         //Reset commandOut before starting next command receive
 143:Core/Src/uartParser.c ****         commandOut = 0;
 144:Core/Src/uartParser.c ****         //transmitCharArray("break\n");
 145:Core/Src/uartParser.c ****         break;
 146:Core/Src/uartParser.c **** 	    } else {
 147:Core/Src/uartParser.c ****         tmpStr[strIndex] = usartReceivedData;
 148:Core/Src/uartParser.c ****         strIndex += 1;
 149:Core/Src/uartParser.c ****         //Command too long
 150:Core/Src/uartParser.c ****         if (strIndex == TMP_STR_LEN) {
 151:Core/Src/uartParser.c ****       	  transmitCharArray("Command is too long!");
 152:Core/Src/uartParser.c ****           strIndex = 0;
 153:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 154:Core/Src/uartParser.c ****             tmpStr[i] = '\0';
 155:Core/Src/uartParser.c ****           }
 156:Core/Src/uartParser.c ****           break;
 157:Core/Src/uartParser.c ****         }
 158:Core/Src/uartParser.c ****       }
 159:Core/Src/uartParser.c ****     }
 160:Core/Src/uartParser.c ****     uartStatus = 0;
 161:Core/Src/uartParser.c ****     //transmitCharArray("Enable Uart RX interrupt");
 162:Core/Src/uartParser.c ****     USART3->CR1 |= USART_CR1_RXNEIE;
 163:Core/Src/uartParser.c ****   }
 164:Core/Src/uartParser.c **** /*
 165:Core/Src/uartParser.c ****   // test queue pop
 166:Core/Src/uartParser.c ****   uint16_t item = queuePop(cmdQueue);
 167:Core/Src/uartParser.c ****   transmitCharArray("Pop items from queue\n");
 168:Core/Src/uartParser.c ****   while (item != 0xffff) {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 12


 169:Core/Src/uartParser.c ****     sendUint16BinToUart(item);
 170:Core/Src/uartParser.c ****     item = queuePop(cmdQueue);
 171:Core/Src/uartParser.c ****   }*/
 172:Core/Src/uartParser.c **** }
 173:Core/Src/uartParser.c **** 
 174:Core/Src/uartParser.c **** //Initialize USART3 - PC4 TX, PC5 RX
 175:Core/Src/uartParser.c **** void initUsart3(void) {
 176:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 177:Core/Src/uartParser.c ****   // set pc4 to AF mode, 0x10
 178:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 179:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 180:Core/Src/uartParser.c ****   // set pc5 to AF mode, 0x10
 181:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 182:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 183:Core/Src/uartParser.c **** 
 184:Core/Src/uartParser.c ****   // set PC4 AFRL to 0001: AF1
 185:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 186:Core/Src/uartParser.c ****   // set PC5 AFRL to 0001: AF1
 187:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 188:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 189:Core/Src/uartParser.c **** 
 190:Core/Src/uartParser.c ****   uint32_t fClk = HAL_RCC_GetHCLKFreq();
 191:Core/Src/uartParser.c **** 
 192:Core/Src/uartParser.c ****   // set baud rate
 193:Core/Src/uartParser.c ****   uint32_t baudRate = 115200;
 194:Core/Src/uartParser.c ****   uint32_t usartBRR = fClk / baudRate;
 195:Core/Src/uartParser.c ****   USART3->BRR = usartBRR;
 196:Core/Src/uartParser.c **** 
 197:Core/Src/uartParser.c ****   // enable the transmitter and receiver hardware of USART3
 198:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 199:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 200:Core/Src/uartParser.c **** 
 201:Core/Src/uartParser.c ****   // Enable USART peripheral.
 202:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 203:Core/Src/uartParser.c ****   transmitCharArray("UART enabled");
 204:Core/Src/uartParser.c **** 
 205:Core/Src/uartParser.c ****   // Enable the receive register not empty interrupt.
 206:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 207:Core/Src/uartParser.c ****   // Enable and set the USART interrupt priority in the NVIC.
 208:Core/Src/uartParser.c ****   NVIC_EnableIRQ(USART3_4_IRQn);
 209:Core/Src/uartParser.c ****   NVIC_SetPriority(USART3_4_IRQn, 3);
 210:Core/Src/uartParser.c ****   /* Create the semaphores(s) */
 211:Core/Src/uartParser.c ****   /* definition and creation of myBinarySem02 */
 212:Core/Src/uartParser.c ****   // The semaphore is created with an initial count of 0 
 213:Core/Src/uartParser.c ****   // ,which means it is not available initially. 
 214:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
 215:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 216:Core/Src/uartParser.c **** }
 217:Core/Src/uartParser.c **** 
 218:Core/Src/uartParser.c **** // Handle uart RX with interrupt
 219:Core/Src/uartParser.c **** void USART3_4_IRQHandler(void) {
 220:Core/Src/uartParser.c ****   transmitCharArray("UART RX interrupt.");
 221:Core/Src/uartParser.c ****   if (uartStatus == 0) {
 222:Core/Src/uartParser.c ****     while((USART3->ISR & USART_ISR_RXNE) == 0) {
 223:Core/Src/uartParser.c **** 	  }
 224:Core/Src/uartParser.c ****     //transmitCharArray("Release sem02\n");
 225:Core/Src/uartParser.c ****     osSemaphoreRelease(binarySem02UartParserHandle);
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 13


 226:Core/Src/uartParser.c ****     volatile uint8_t usartReceivedData = USART3->RDR;
 227:Core/Src/uartParser.c ****     transmitCharArray("cmd:\n");
 228:Core/Src/uartParser.c ****     transmitOneChar(usartReceivedData);
 229:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 230:Core/Src/uartParser.c **** 		strIndex++;
 231:Core/Src/uartParser.c ****     uartStatus = 1;
 232:Core/Src/uartParser.c ****     // Disable the receive register not empty interrupt.
 233:Core/Src/uartParser.c ****     USART3->CR1 &= ~USART_CR1_RXNEIE;
 234:Core/Src/uartParser.c ****   }
 235:Core/Src/uartParser.c **** }
 236:Core/Src/uartParser.c **** 
 237:Core/Src/uartParser.c **** void transmitOneChar(uint8_t ch) {
 408              		.loc 1 237 34 is_stmt 1 view -0
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 0
 411              		@ frame_needed = 0, uses_anonymous_args = 0
 412              		@ link register save eliminated.
 413              	.LVL19:
 414              	.L22:
 238:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 239:Core/Src/uartParser.c ****   }
 415              		.loc 1 239 3 view .LVU88
 238:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 416              		.loc 1 238 40 discriminator 1 view .LVU89
 238:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 417              		.loc 1 238 17 is_stmt 0 discriminator 1 view .LVU90
 418 0000 034B     		ldr	r3, .L24
 419 0002 DB69     		ldr	r3, [r3, #28]
 238:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 420              		.loc 1 238 40 discriminator 1 view .LVU91
 421 0004 1B06     		lsls	r3, r3, #24
 422 0006 FBD5     		bpl	.L22
 240:Core/Src/uartParser.c ****   USART3->TDR = ch;
 423              		.loc 1 240 3 is_stmt 1 view .LVU92
 424              		.loc 1 240 15 is_stmt 0 view .LVU93
 425 0008 014B     		ldr	r3, .L24
 426 000a 1885     		strh	r0, [r3, #40]
 241:Core/Src/uartParser.c **** }
 427              		.loc 1 241 1 view .LVU94
 428              		@ sp needed
 429 000c 7047     		bx	lr
 430              	.L25:
 431 000e C046     		.align	2
 432              	.L24:
 433 0010 00480040 		.word	1073760256
 434              		.cfi_endproc
 435              	.LFE48:
 437              		.section	.text.transmitCharArray,"ax",%progbits
 438              		.align	1
 439              		.global	transmitCharArray
 440              		.syntax unified
 441              		.code	16
 442              		.thumb_func
 444              	transmitCharArray:
 445              	.LVL20:
 446              	.LFB49:
 242:Core/Src/uartParser.c **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 14


 243:Core/Src/uartParser.c **** void transmitCharArray (char *arr) {
 447              		.loc 1 243 36 is_stmt 1 view -0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 0
 450              		@ frame_needed = 0, uses_anonymous_args = 0
 451              		.loc 1 243 36 is_stmt 0 view .LVU96
 452 0000 10B5     		push	{r4, lr}
 453              	.LCFI2:
 454              		.cfi_def_cfa_offset 8
 455              		.cfi_offset 4, -8
 456              		.cfi_offset 14, -4
 457 0002 0400     		movs	r4, r0
 244:Core/Src/uartParser.c ****   while (*arr != '\0') {
 458              		.loc 1 244 3 is_stmt 1 view .LVU97
 459              		.loc 1 244 9 is_stmt 0 view .LVU98
 460 0004 02E0     		b	.L27
 461              	.LVL21:
 462              	.L28:
 245:Core/Src/uartParser.c **** 		transmitOneChar(*arr);
 463              		.loc 1 245 3 is_stmt 1 view .LVU99
 464 0006 FFF7FEFF 		bl	transmitOneChar
 465              	.LVL22:
 246:Core/Src/uartParser.c **** 		arr++;
 466              		.loc 1 246 3 view .LVU100
 467              		.loc 1 246 6 is_stmt 0 view .LVU101
 468 000a 0134     		adds	r4, r4, #1
 469              	.LVL23:
 470              	.L27:
 244:Core/Src/uartParser.c ****   while (*arr != '\0') {
 471              		.loc 1 244 15 is_stmt 1 view .LVU102
 244:Core/Src/uartParser.c ****   while (*arr != '\0') {
 472              		.loc 1 244 10 is_stmt 0 view .LVU103
 473 000c 2078     		ldrb	r0, [r4]
 244:Core/Src/uartParser.c ****   while (*arr != '\0') {
 474              		.loc 1 244 15 view .LVU104
 475 000e 0028     		cmp	r0, #0
 476 0010 F9D1     		bne	.L28
 247:Core/Src/uartParser.c **** 	}
 248:Core/Src/uartParser.c ****   transmitOneChar('\n');
 477              		.loc 1 248 3 is_stmt 1 view .LVU105
 478 0012 0A30     		adds	r0, r0, #10
 479 0014 FFF7FEFF 		bl	transmitOneChar
 480              	.LVL24:
 249:Core/Src/uartParser.c ****   transmitOneChar('\r');
 481              		.loc 1 249 3 view .LVU106
 482 0018 0D20     		movs	r0, #13
 483 001a FFF7FEFF 		bl	transmitOneChar
 484              	.LVL25:
 250:Core/Src/uartParser.c **** }...
 485              		.loc 1 250 1 is_stmt 0 view .LVU107
 486              		@ sp needed
 487              	.LVL26:
 488              		.loc 1 250 1 view .LVU108
 489 001e 10BD     		pop	{r4, pc}
 490              		.cfi_endproc
 491              	.LFE49:
 493              		.section	.text.sendUint16BinToUart,"ax",%progbits
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 15


 494              		.align	1
 495              		.global	sendUint16BinToUart
 496              		.syntax unified
 497              		.code	16
 498              		.thumb_func
 500              	sendUint16BinToUart:
 501              	.LVL27:
 502              	.LFB43:
  30:Core/Src/uartParser.c **** void sendUint16BinToUart(uint16_t x) {
 503              		.loc 1 30 38 is_stmt 1 view -0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 16
 506              		@ frame_needed = 0, uses_anonymous_args = 0
  30:Core/Src/uartParser.c **** void sendUint16BinToUart(uint16_t x) {
 507              		.loc 1 30 38 is_stmt 0 view .LVU110
 508 0000 10B5     		push	{r4, lr}
 509              	.LCFI3:
 510              		.cfi_def_cfa_offset 8
 511              		.cfi_offset 4, -8
 512              		.cfi_offset 14, -4
 513 0002 84B0     		sub	sp, sp, #16
 514              	.LCFI4:
 515              		.cfi_def_cfa_offset 24
  31:Core/Src/uartParser.c **** 	char str[16];
 516              		.loc 1 31 2 is_stmt 1 view .LVU111
  32:Core/Src/uartParser.c **** 	uint8_t i = 0;
 517              		.loc 1 32 2 view .LVU112
 518              	.LVL28:
  33:Core/Src/uartParser.c **** 	while (i < 16) {
 519              		.loc 1 33 2 view .LVU113
  32:Core/Src/uartParser.c **** 	uint8_t i = 0;
 520              		.loc 1 32 10 is_stmt 0 view .LVU114
 521 0004 0023     		movs	r3, #0
  33:Core/Src/uartParser.c **** 	while (i < 16) {
 522              		.loc 1 33 8 view .LVU115
 523 0006 0AE0     		b	.L30
 524              	.LVL29:
 525              	.L31:
  34:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 526              		.loc 1 34 3 is_stmt 1 view .LVU116
  34:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 527              		.loc 1 34 25 is_stmt 0 view .LVU117
 528 0008 0100     		movs	r1, r0
 529 000a 1941     		asrs	r1, r1, r3
  34:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 530              		.loc 1 34 31 view .LVU118
 531 000c 0122     		movs	r2, #1
 532 000e 0A40     		ands	r2, r1
  34:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 533              		.loc 1 34 9 view .LVU119
 534 0010 0F21     		movs	r1, #15
 535 0012 C91A     		subs	r1, r1, r3
  34:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 536              		.loc 1 34 19 view .LVU120
 537 0014 3032     		adds	r2, r2, #48
  34:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 538              		.loc 1 34 13 view .LVU121
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 16


 539 0016 6C46     		mov	r4, sp
 540 0018 6254     		strb	r2, [r4, r1]
  35:Core/Src/uartParser.c **** 	  i++;
 541              		.loc 1 35 4 is_stmt 1 view .LVU122
  35:Core/Src/uartParser.c **** 	  i++;
 542              		.loc 1 35 5 is_stmt 0 view .LVU123
 543 001a 0133     		adds	r3, r3, #1
 544              	.LVL30:
  35:Core/Src/uartParser.c **** 	  i++;
 545              		.loc 1 35 5 view .LVU124
 546 001c DBB2     		uxtb	r3, r3
 547              	.LVL31:
 548              	.L30:
  33:Core/Src/uartParser.c **** 	while (i < 16) {
 549              		.loc 1 33 11 is_stmt 1 view .LVU125
 550 001e 0F2B     		cmp	r3, #15
 551 0020 F2D9     		bls	.L31
  37:Core/Src/uartParser.c **** 	transmitCharArray(str);
 552              		.loc 1 37 2 view .LVU126
 553 0022 6846     		mov	r0, sp
 554              	.LVL32:
  37:Core/Src/uartParser.c **** 	transmitCharArray(str);
 555              		.loc 1 37 2 is_stmt 0 view .LVU127
 556 0024 FFF7FEFF 		bl	transmitCharArray
 557              	.LVL33:
  38:Core/Src/uartParser.c **** }
 558              		.loc 1 38 1 view .LVU128
 559 0028 04B0     		add	sp, sp, #16
 560              		@ sp needed
 561 002a 10BD     		pop	{r4, pc}
 562              		.cfi_endproc
 563              	.LFE43:
 565              		.section	.rodata.StartParseUartTask.str1.4,"aMS",%progbits,1
 566              		.align	2
 567              	.LC29:
 568 0000 50757368 		.ascii	"Push command to queue success.\012\000"
 568      20636F6D 
 568      6D616E64 
 568      20746F20 
 568      71756575 
 569              		.align	2
 570              	.LC31:
 571 0020 4661696C 		.ascii	"Fail to push command to queue, try again.\012\000"
 571      20746F20 
 571      70757368 
 571      20636F6D 
 571      6D616E64 
 572 004b 00       		.align	2
 573              	.LC33:
 574 004c 436F6D6D 		.ascii	"Command not recognized\000"
 574      616E6420 
 574      6E6F7420 
 574      7265636F 
 574      676E697A 
 575 0063 00       		.align	2
 576              	.LC38:
 577 0064 436F6D6D 		.ascii	"Command is too long!\000"
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 17


 577      616E6420 
 577      69732074 
 577      6F6F206C 
 577      6F6E6721 
 578              		.section	.text.StartParseUartTask,"ax",%progbits
 579              		.align	1
 580              		.global	StartParseUartTask
 581              		.syntax unified
 582              		.code	16
 583              		.thumb_func
 585              	StartParseUartTask:
 586              	.LFB45:
  98:Core/Src/uartParser.c **** void StartParseUartTask(void *argument) {
 587              		.loc 1 98 41 is_stmt 1 view -0
 588              		.cfi_startproc
 589              		@ args = 0, pretend = 0, frame = 8
 590              		@ frame_needed = 0, uses_anonymous_args = 0
 591              	.LVL34:
  98:Core/Src/uartParser.c **** void StartParseUartTask(void *argument) {
 592              		.loc 1 98 41 is_stmt 0 view .LVU130
 593 0000 10B5     		push	{r4, lr}
 594              	.LCFI5:
 595              		.cfi_def_cfa_offset 8
 596              		.cfi_offset 4, -8
 597              		.cfi_offset 14, -4
 598 0002 82B0     		sub	sp, sp, #8
 599              	.LCFI6:
 600              		.cfi_def_cfa_offset 16
 601 0004 3EE0     		b	.L44
 602              	.LVL35:
 603              	.L46:
 604              	.LBB6:
 605              	.LBB7:
 116:Core/Src/uartParser.c ****         uint8_t error = parseCmd();
 606              		.loc 1 116 9 is_stmt 1 view .LVU131
 116:Core/Src/uartParser.c ****         uint8_t error = parseCmd();
 607              		.loc 1 116 25 is_stmt 0 view .LVU132
 608 0006 FFF7FEFF 		bl	parseCmd
 609              	.LVL36:
 118:Core/Src/uartParser.c ****         if (error == 0) {
 610              		.loc 1 118 9 is_stmt 1 view .LVU133
 118:Core/Src/uartParser.c ****         if (error == 0) {
 611              		.loc 1 118 12 is_stmt 0 view .LVU134
 612 000a 0028     		cmp	r0, #0
 613 000c 15D1     		bne	.L35
 120:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 614              		.loc 1 120 11 is_stmt 1 view .LVU135
 120:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 615              		.loc 1 120 15 is_stmt 0 view .LVU136
 616 000e 394B     		ldr	r3, .L47
 617 0010 1988     		ldrh	r1, [r3]
 618 0012 89B2     		uxth	r1, r1
 619 0014 384B     		ldr	r3, .L47+4
 620 0016 1868     		ldr	r0, [r3]
 621              	.LVL37:
 120:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 622              		.loc 1 120 15 view .LVU137
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 18


 623 0018 FFF7FEFF 		bl	queuePush
 624              	.LVL38:
 120:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 625              		.loc 1 120 14 discriminator 1 view .LVU138
 626 001c 0130     		adds	r0, r0, #1
 627 001e 08D0     		beq	.L36
 121:Core/Src/uartParser.c ****             transmitCharArray("Push command to queue success.\n");
 628              		.loc 1 121 13 is_stmt 1 view .LVU139
 629 0020 3648     		ldr	r0, .L47+8
 630 0022 FFF7FEFF 		bl	transmitCharArray
 631              	.LVL39:
 122:Core/Src/uartParser.c ****             sendUint16BinToUart(commandOut);
 632              		.loc 1 122 13 view .LVU140
 633 0026 334B     		ldr	r3, .L47
 634 0028 1888     		ldrh	r0, [r3]
 635 002a 80B2     		uxth	r0, r0
 636 002c FFF7FEFF 		bl	sendUint16BinToUart
 637              	.LVL40:
 638 0030 09E0     		b	.L37
 639              	.L36:
 124:Core/Src/uartParser.c ****             transmitCharArray("Fail to push command to queue, try again.\n");
 640              		.loc 1 124 13 view .LVU141
 641 0032 3348     		ldr	r0, .L47+12
 642 0034 FFF7FEFF 		bl	transmitCharArray
 643              	.LVL41:
 644 0038 05E0     		b	.L37
 645              	.LVL42:
 646              	.L35:
 128:Core/Src/uartParser.c ****           transmitCharArray("Command not recognized");
 647              		.loc 1 128 11 view .LVU142
 648 003a 3248     		ldr	r0, .L47+16
 649              	.LVL43:
 128:Core/Src/uartParser.c ****           transmitCharArray("Command not recognized");
 650              		.loc 1 128 11 is_stmt 0 view .LVU143
 651 003c FFF7FEFF 		bl	transmitCharArray
 652              	.LVL44:
 129:Core/Src/uartParser.c ****           transmitCharArray(tmpStr);
 653              		.loc 1 129 11 is_stmt 1 view .LVU144
 654 0040 3148     		ldr	r0, .L47+20
 655 0042 FFF7FEFF 		bl	transmitCharArray
 656              	.LVL45:
 657              	.L37:
 133:Core/Src/uartParser.c ****         strIndex = 0;
 658              		.loc 1 133 9 view .LVU145
 133:Core/Src/uartParser.c ****         strIndex = 0;
 659              		.loc 1 133 18 is_stmt 0 view .LVU146
 660 0046 314B     		ldr	r3, .L47+24
 661 0048 0022     		movs	r2, #0
 662 004a 1A70     		strb	r2, [r3]
 134:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 663              		.loc 1 134 9 is_stmt 1 view .LVU147
 664              	.LBB8:
 134:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 665              		.loc 1 134 14 view .LVU148
 666              	.LVL46:
 134:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 667              		.loc 1 134 9 is_stmt 0 view .LVU149
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 19


 668 004c 0DE0     		b	.L38
 669              	.LVL47:
 670              	.L39:
 135:Core/Src/uartParser.c ****           tmpStr[i] = '\0';
 671              		.loc 1 135 11 is_stmt 1 view .LVU150
 135:Core/Src/uartParser.c ****           tmpStr[i] = '\0';
 672              		.loc 1 135 21 is_stmt 0 view .LVU151
 673 004e 2E4B     		ldr	r3, .L47+20
 674 0050 0021     		movs	r1, #0
 675 0052 9954     		strb	r1, [r3, r2]
 136:Core/Src/uartParser.c ****           cmd[0][i] = '\0';
 676              		.loc 1 136 11 is_stmt 1 view .LVU152
 136:Core/Src/uartParser.c ****           cmd[0][i] = '\0';
 677              		.loc 1 136 21 is_stmt 0 view .LVU153
 678 0054 2E4B     		ldr	r3, .L47+28
 679 0056 9954     		strb	r1, [r3, r2]
 137:Core/Src/uartParser.c ****           cmd[1][i] = '\0';
 680              		.loc 1 137 11 is_stmt 1 view .LVU154
 137:Core/Src/uartParser.c ****           cmd[1][i] = '\0';
 681              		.loc 1 137 21 is_stmt 0 view .LVU155
 682 0058 9B18     		adds	r3, r3, r2
 683 005a 1975     		strb	r1, [r3, #20]
 138:Core/Src/uartParser.c ****           cmd[2][i] = '\0';
 684              		.loc 1 138 11 is_stmt 1 view .LVU156
 138:Core/Src/uartParser.c ****           cmd[2][i] = '\0';
 685              		.loc 1 138 21 is_stmt 0 view .LVU157
 686 005c 1800     		movs	r0, r3
 687 005e 2830     		adds	r0, r0, #40
 688 0060 0170     		strb	r1, [r0]
 139:Core/Src/uartParser.c ****           cmd[3][i] = '\0';
 689              		.loc 1 139 11 is_stmt 1 view .LVU158
 139:Core/Src/uartParser.c ****           cmd[3][i] = '\0';
 690              		.loc 1 139 21 is_stmt 0 view .LVU159
 691 0062 3C33     		adds	r3, r3, #60
 692 0064 1970     		strb	r1, [r3]
 134:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 693              		.loc 1 134 47 is_stmt 1 discriminator 3 view .LVU160
 694 0066 0132     		adds	r2, r2, #1
 695              	.LVL48:
 134:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 696              		.loc 1 134 47 is_stmt 0 discriminator 3 view .LVU161
 697 0068 D2B2     		uxtb	r2, r2
 698              	.LVL49:
 699              	.L38:
 134:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 700              		.loc 1 134 31 is_stmt 1 discriminator 1 view .LVU162
 701 006a 132A     		cmp	r2, #19
 702 006c EFD9     		bls	.L39
 703              	.LBE8:
 143:Core/Src/uartParser.c ****         commandOut = 0;
 704              		.loc 1 143 9 view .LVU163
 143:Core/Src/uartParser.c ****         commandOut = 0;
 705              		.loc 1 143 20 is_stmt 0 view .LVU164
 706 006e 214B     		ldr	r3, .L47
 707 0070 0022     		movs	r2, #0
 708              	.LVL50:
 143:Core/Src/uartParser.c ****         commandOut = 0;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 20


 709              		.loc 1 143 20 view .LVU165
 710 0072 1A80     		strh	r2, [r3]
 145:Core/Src/uartParser.c ****         break;
 711              		.loc 1 145 9 is_stmt 1 view .LVU166
 712              	.LVL51:
 713              	.L40:
 145:Core/Src/uartParser.c ****         break;
 714              		.loc 1 145 9 is_stmt 0 view .LVU167
 715              	.LBE7:
 716              	.LBE6:
 160:Core/Src/uartParser.c ****     uartStatus = 0;
 717              		.loc 1 160 5 is_stmt 1 view .LVU168
 160:Core/Src/uartParser.c ****     uartStatus = 0;
 718              		.loc 1 160 16 is_stmt 0 view .LVU169
 719 0074 274B     		ldr	r3, .L47+32
 720 0076 0022     		movs	r2, #0
 721 0078 1A70     		strb	r2, [r3]
 162:Core/Src/uartParser.c ****     USART3->CR1 |= USART_CR1_RXNEIE;
 722              		.loc 1 162 5 is_stmt 1 view .LVU170
 162:Core/Src/uartParser.c ****     USART3->CR1 |= USART_CR1_RXNEIE;
 723              		.loc 1 162 11 is_stmt 0 view .LVU171
 724 007a 274A     		ldr	r2, .L47+36
 725 007c 1368     		ldr	r3, [r2]
 162:Core/Src/uartParser.c ****     USART3->CR1 |= USART_CR1_RXNEIE;
 726              		.loc 1 162 17 view .LVU172
 727 007e 2021     		movs	r1, #32
 728 0080 0B43     		orrs	r3, r1
 729 0082 1360     		str	r3, [r2]
 102:Core/Src/uartParser.c ****   while (1) { // for test, after test, change it back to while (1)
 730              		.loc 1 102 9 is_stmt 1 view .LVU173
 731              	.L44:
 102:Core/Src/uartParser.c ****   while (1) { // for test, after test, change it back to while (1)
 732              		.loc 1 102 3 view .LVU174
 106:Core/Src/uartParser.c ****     osSemaphoreAcquire(binarySem02UartParserHandle, osWaitForever);
 733              		.loc 1 106 5 view .LVU175
 734 0084 0121     		movs	r1, #1
 735 0086 254B     		ldr	r3, .L47+40
 736 0088 1868     		ldr	r0, [r3]
 737 008a 4942     		rsbs	r1, r1, #0
 738 008c FFF7FEFF 		bl	osSemaphoreAcquire
 739              	.LVL52:
 740              	.L33:
 741              	.LBB10:
 110:Core/Src/uartParser.c **** 	    }
 742              		.loc 1 110 6 view .LVU176
 109:Core/Src/uartParser.c ****       while((USART3->ISR & USART_ISR_RXNE) == 0) {
 743              		.loc 1 109 44 discriminator 1 view .LVU177
 109:Core/Src/uartParser.c ****       while((USART3->ISR & USART_ISR_RXNE) == 0) {
 744              		.loc 1 109 20 is_stmt 0 discriminator 1 view .LVU178
 745 0090 214B     		ldr	r3, .L47+36
 746 0092 DB69     		ldr	r3, [r3, #28]
 109:Core/Src/uartParser.c ****       while((USART3->ISR & USART_ISR_RXNE) == 0) {
 747              		.loc 1 109 44 discriminator 1 view .LVU179
 748 0094 9B06     		lsls	r3, r3, #26
 749 0096 FBD5     		bpl	.L33
 112:Core/Src/uartParser.c **** 	    volatile uint8_t usartReceivedData = USART3->RDR;
 750              		.loc 1 112 6 is_stmt 1 view .LVU180
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 21


 112:Core/Src/uartParser.c **** 	    volatile uint8_t usartReceivedData = USART3->RDR;
 751              		.loc 1 112 49 is_stmt 0 view .LVU181
 752 0098 1F4B     		ldr	r3, .L47+36
 753 009a 9B8C     		ldrh	r3, [r3, #36]
 112:Core/Src/uartParser.c **** 	    volatile uint8_t usartReceivedData = USART3->RDR;
 754              		.loc 1 112 23 view .LVU182
 755 009c DBB2     		uxtb	r3, r3
 756 009e 6A46     		mov	r2, sp
 757 00a0 D41D     		adds	r4, r2, #7
 758 00a2 D371     		strb	r3, [r2, #7]
 113:Core/Src/uartParser.c ****       transmitOneChar(usartReceivedData);
 759              		.loc 1 113 7 is_stmt 1 view .LVU183
 760 00a4 D079     		ldrb	r0, [r2, #7]
 761 00a6 C0B2     		uxtb	r0, r0
 762 00a8 FFF7FEFF 		bl	transmitOneChar
 763              	.LVL53:
 115:Core/Src/uartParser.c **** 	    if (usartReceivedData == '\r') {
 764              		.loc 1 115 6 view .LVU184
 115:Core/Src/uartParser.c **** 	    if (usartReceivedData == '\r') {
 765              		.loc 1 115 28 is_stmt 0 view .LVU185
 766 00ac 2378     		ldrb	r3, [r4]
 115:Core/Src/uartParser.c **** 	    if (usartReceivedData == '\r') {
 767              		.loc 1 115 9 view .LVU186
 768 00ae 0D2B     		cmp	r3, #13
 769 00b0 A9D0     		beq	.L46
 147:Core/Src/uartParser.c ****         tmpStr[strIndex] = usartReceivedData;
 770              		.loc 1 147 9 is_stmt 1 view .LVU187
 147:Core/Src/uartParser.c ****         tmpStr[strIndex] = usartReceivedData;
 771              		.loc 1 147 15 is_stmt 0 view .LVU188
 772 00b2 164A     		ldr	r2, .L47+24
 773 00b4 1378     		ldrb	r3, [r2]
 774 00b6 DBB2     		uxtb	r3, r3
 147:Core/Src/uartParser.c ****         tmpStr[strIndex] = usartReceivedData;
 775              		.loc 1 147 26 view .LVU189
 776 00b8 6946     		mov	r1, sp
 777 00ba 0731     		adds	r1, r1, #7
 778 00bc 0978     		ldrb	r1, [r1]
 779 00be C9B2     		uxtb	r1, r1
 780 00c0 1148     		ldr	r0, .L47+20
 781 00c2 C154     		strb	r1, [r0, r3]
 148:Core/Src/uartParser.c ****         strIndex += 1;
 782              		.loc 1 148 9 is_stmt 1 view .LVU190
 148:Core/Src/uartParser.c ****         strIndex += 1;
 783              		.loc 1 148 18 is_stmt 0 view .LVU191
 784 00c4 1378     		ldrb	r3, [r2]
 785 00c6 0133     		adds	r3, r3, #1
 786 00c8 DBB2     		uxtb	r3, r3
 787 00ca 1370     		strb	r3, [r2]
 150:Core/Src/uartParser.c ****         if (strIndex == TMP_STR_LEN) {
 788              		.loc 1 150 9 is_stmt 1 view .LVU192
 150:Core/Src/uartParser.c ****         if (strIndex == TMP_STR_LEN) {
 789              		.loc 1 150 22 is_stmt 0 view .LVU193
 790 00cc 1378     		ldrb	r3, [r2]
 150:Core/Src/uartParser.c ****         if (strIndex == TMP_STR_LEN) {
 791              		.loc 1 150 12 view .LVU194
 792 00ce 142B     		cmp	r3, #20
 793 00d0 DED1     		bne	.L33
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 22


 151:Core/Src/uartParser.c ****       	  transmitCharArray("Command is too long!");
 794              		.loc 1 151 10 is_stmt 1 view .LVU195
 795 00d2 1348     		ldr	r0, .L47+44
 796 00d4 FFF7FEFF 		bl	transmitCharArray
 797              	.LVL54:
 152:Core/Src/uartParser.c ****           strIndex = 0;
 798              		.loc 1 152 11 view .LVU196
 152:Core/Src/uartParser.c ****           strIndex = 0;
 799              		.loc 1 152 20 is_stmt 0 view .LVU197
 800 00d8 0C4B     		ldr	r3, .L47+24
 801 00da 0022     		movs	r2, #0
 802 00dc 1A70     		strb	r2, [r3]
 153:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 803              		.loc 1 153 11 is_stmt 1 view .LVU198
 804              	.LBB9:
 153:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 805              		.loc 1 153 16 view .LVU199
 806              	.LVL55:
 153:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 807              		.loc 1 153 24 is_stmt 0 view .LVU200
 808 00de 0023     		movs	r3, #0
 153:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 809              		.loc 1 153 11 view .LVU201
 810 00e0 04E0     		b	.L42
 811              	.LVL56:
 812              	.L43:
 154:Core/Src/uartParser.c ****             tmpStr[i] = '\0';
 813              		.loc 1 154 13 is_stmt 1 view .LVU202
 154:Core/Src/uartParser.c ****             tmpStr[i] = '\0';
 814              		.loc 1 154 23 is_stmt 0 view .LVU203
 815 00e2 094A     		ldr	r2, .L47+20
 816 00e4 0021     		movs	r1, #0
 817 00e6 D154     		strb	r1, [r2, r3]
 153:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 818              		.loc 1 153 49 is_stmt 1 discriminator 3 view .LVU204
 819 00e8 0133     		adds	r3, r3, #1
 820              	.LVL57:
 153:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 821              		.loc 1 153 49 is_stmt 0 discriminator 3 view .LVU205
 822 00ea DBB2     		uxtb	r3, r3
 823              	.LVL58:
 824              	.L42:
 153:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 825              		.loc 1 153 33 is_stmt 1 discriminator 1 view .LVU206
 826 00ec 132B     		cmp	r3, #19
 827 00ee F8D9     		bls	.L43
 828 00f0 C0E7     		b	.L40
 829              	.L48:
 830 00f2 C046     		.align	2
 831              	.L47:
 832 00f4 00000000 		.word	commandOut
 833 00f8 00000000 		.word	cmdQueue
 834 00fc 00000000 		.word	.LC29
 835 0100 20000000 		.word	.LC31
 836 0104 4C000000 		.word	.LC33
 837 0108 00000000 		.word	tmpStr
 838 010c 00000000 		.word	strIndex
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 23


 839 0110 00000000 		.word	cmd
 840 0114 00000000 		.word	uartStatus
 841 0118 00480040 		.word	1073760256
 842 011c 00000000 		.word	binarySem02UartParserHandle
 843 0120 64000000 		.word	.LC38
 844              	.LBE9:
 845              	.LBE10:
 846              		.cfi_endproc
 847              	.LFE45:
 849              		.global	__aeabi_uidiv
 850              		.section	.rodata.initUsart3.str1.4,"aMS",%progbits,1
 851              		.align	2
 852              	.LC41:
 853 0000 55415254 		.ascii	"UART enabled\000"
 853      20656E61 
 853      626C6564 
 853      00
 854              		.section	.text.initUsart3,"ax",%progbits
 855              		.align	1
 856              		.global	initUsart3
 857              		.syntax unified
 858              		.code	16
 859              		.thumb_func
 861              	initUsart3:
 862              	.LFB46:
 175:Core/Src/uartParser.c **** void initUsart3(void) {
 863              		.loc 1 175 23 view -0
 864              		.cfi_startproc
 865              		@ args = 0, pretend = 0, frame = 0
 866              		@ frame_needed = 0, uses_anonymous_args = 0
 867 0000 10B5     		push	{r4, lr}
 868              	.LCFI7:
 869              		.cfi_def_cfa_offset 8
 870              		.cfi_offset 4, -8
 871              		.cfi_offset 14, -4
 176:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 872              		.loc 1 176 3 view .LVU208
 176:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 873              		.loc 1 176 6 is_stmt 0 view .LVU209
 874 0002 2F4A     		ldr	r2, .L50
 875 0004 5169     		ldr	r1, [r2, #20]
 176:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 876              		.loc 1 176 15 view .LVU210
 877 0006 8023     		movs	r3, #128
 878 0008 1B03     		lsls	r3, r3, #12
 879 000a 0B43     		orrs	r3, r1
 880 000c 5361     		str	r3, [r2, #20]
 178:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 881              		.loc 1 178 3 is_stmt 1 view .LVU211
 178:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 882              		.loc 1 178 8 is_stmt 0 view .LVU212
 883 000e 2D4B     		ldr	r3, .L50+4
 884 0010 1868     		ldr	r0, [r3]
 178:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 885              		.loc 1 178 16 view .LVU213
 886 0012 8021     		movs	r1, #128
 887 0014 8900     		lsls	r1, r1, #2
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 24


 888 0016 0143     		orrs	r1, r0
 889 0018 1960     		str	r1, [r3]
 179:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 890              		.loc 1 179 3 is_stmt 1 view .LVU214
 179:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 891              		.loc 1 179 8 is_stmt 0 view .LVU215
 892 001a 1968     		ldr	r1, [r3]
 179:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 893              		.loc 1 179 16 view .LVU216
 894 001c 2A48     		ldr	r0, .L50+8
 895 001e 0140     		ands	r1, r0
 896 0020 1960     		str	r1, [r3]
 181:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 897              		.loc 1 181 3 is_stmt 1 view .LVU217
 181:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 898              		.loc 1 181 8 is_stmt 0 view .LVU218
 899 0022 1868     		ldr	r0, [r3]
 181:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 900              		.loc 1 181 16 view .LVU219
 901 0024 8021     		movs	r1, #128
 902 0026 0901     		lsls	r1, r1, #4
 903 0028 0143     		orrs	r1, r0
 904 002a 1960     		str	r1, [r3]
 182:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 905              		.loc 1 182 3 is_stmt 1 view .LVU220
 182:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 906              		.loc 1 182 8 is_stmt 0 view .LVU221
 907 002c 1968     		ldr	r1, [r3]
 182:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 908              		.loc 1 182 16 view .LVU222
 909 002e 2748     		ldr	r0, .L50+12
 910 0030 0140     		ands	r1, r0
 911 0032 1960     		str	r1, [r3]
 185:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 912              		.loc 1 185 3 is_stmt 1 view .LVU223
 185:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 913              		.loc 1 185 13 is_stmt 0 view .LVU224
 914 0034 186A     		ldr	r0, [r3, #32]
 185:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 915              		.loc 1 185 17 view .LVU225
 916 0036 8021     		movs	r1, #128
 917 0038 4902     		lsls	r1, r1, #9
 918 003a 0143     		orrs	r1, r0
 919 003c 1962     		str	r1, [r3, #32]
 187:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 920              		.loc 1 187 3 is_stmt 1 view .LVU226
 187:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 921              		.loc 1 187 13 is_stmt 0 view .LVU227
 922 003e 186A     		ldr	r0, [r3, #32]
 187:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 923              		.loc 1 187 17 view .LVU228
 924 0040 8021     		movs	r1, #128
 925 0042 4903     		lsls	r1, r1, #13
 926 0044 0143     		orrs	r1, r0
 927 0046 1962     		str	r1, [r3, #32]
 188:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 928              		.loc 1 188 3 is_stmt 1 view .LVU229
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 25


 188:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 929              		.loc 1 188 6 is_stmt 0 view .LVU230
 930 0048 D169     		ldr	r1, [r2, #28]
 188:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 931              		.loc 1 188 16 view .LVU231
 932 004a 8023     		movs	r3, #128
 933 004c DB02     		lsls	r3, r3, #11
 934 004e 0B43     		orrs	r3, r1
 935 0050 D361     		str	r3, [r2, #28]
 190:Core/Src/uartParser.c ****   uint32_t fClk = HAL_RCC_GetHCLKFreq();
 936              		.loc 1 190 3 is_stmt 1 view .LVU232
 190:Core/Src/uartParser.c ****   uint32_t fClk = HAL_RCC_GetHCLKFreq();
 937              		.loc 1 190 19 is_stmt 0 view .LVU233
 938 0052 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 939              	.LVL59:
 193:Core/Src/uartParser.c ****   uint32_t baudRate = 115200;
 940              		.loc 1 193 3 is_stmt 1 view .LVU234
 194:Core/Src/uartParser.c ****   uint32_t usartBRR = fClk / baudRate;
 941              		.loc 1 194 3 view .LVU235
 194:Core/Src/uartParser.c ****   uint32_t usartBRR = fClk / baudRate;
 942              		.loc 1 194 12 is_stmt 0 view .LVU236
 943 0056 E121     		movs	r1, #225
 944 0058 4902     		lsls	r1, r1, #9
 945 005a FFF7FEFF 		bl	__aeabi_uidiv
 946              	.LVL60:
 195:Core/Src/uartParser.c ****   USART3->BRR = usartBRR;
 947              		.loc 1 195 3 is_stmt 1 view .LVU237
 195:Core/Src/uartParser.c ****   USART3->BRR = usartBRR;
 948              		.loc 1 195 15 is_stmt 0 view .LVU238
 949 005e 1C4C     		ldr	r4, .L50+16
 950 0060 E060     		str	r0, [r4, #12]
 198:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 951              		.loc 1 198 3 is_stmt 1 view .LVU239
 198:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 952              		.loc 1 198 9 is_stmt 0 view .LVU240
 953 0062 2368     		ldr	r3, [r4]
 198:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 954              		.loc 1 198 15 view .LVU241
 955 0064 0822     		movs	r2, #8
 956 0066 1343     		orrs	r3, r2
 957 0068 2360     		str	r3, [r4]
 199:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 958              		.loc 1 199 3 is_stmt 1 view .LVU242
 199:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 959              		.loc 1 199 9 is_stmt 0 view .LVU243
 960 006a 2368     		ldr	r3, [r4]
 199:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 961              		.loc 1 199 15 view .LVU244
 962 006c 043A     		subs	r2, r2, #4
 963 006e 1343     		orrs	r3, r2
 964 0070 2360     		str	r3, [r4]
 202:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 965              		.loc 1 202 3 is_stmt 1 view .LVU245
 202:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 966              		.loc 1 202 9 is_stmt 0 view .LVU246
 967 0072 2368     		ldr	r3, [r4]
 202:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 26


 968              		.loc 1 202 15 view .LVU247
 969 0074 033A     		subs	r2, r2, #3
 970 0076 1343     		orrs	r3, r2
 971 0078 2360     		str	r3, [r4]
 203:Core/Src/uartParser.c ****   transmitCharArray("UART enabled");
 972              		.loc 1 203 3 is_stmt 1 view .LVU248
 973 007a 1648     		ldr	r0, .L50+20
 974              	.LVL61:
 203:Core/Src/uartParser.c ****   transmitCharArray("UART enabled");
 975              		.loc 1 203 3 is_stmt 0 view .LVU249
 976 007c FFF7FEFF 		bl	transmitCharArray
 977              	.LVL62:
 206:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 978              		.loc 1 206 3 is_stmt 1 view .LVU250
 206:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 979              		.loc 1 206 9 is_stmt 0 view .LVU251
 980 0080 2368     		ldr	r3, [r4]
 206:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 981              		.loc 1 206 15 view .LVU252
 982 0082 2022     		movs	r2, #32
 983 0084 1343     		orrs	r3, r2
 984 0086 2360     		str	r3, [r4]
 208:Core/Src/uartParser.c ****   NVIC_EnableIRQ(USART3_4_IRQn);
 985              		.loc 1 208 3 is_stmt 1 view .LVU253
 986              	.LVL63:
 987              	.LBB11:
 988              	.LBI11:
 989              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 27


  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 28


  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 29


 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 30


 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 31


 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 32


 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 33


 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 34


 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 35


 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 36


 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 37


 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 990              		.loc 2 623 22 view .LVU254
 991              	.LBB12:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 992              		.loc 2 625 3 view .LVU255
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 993              		.loc 2 627 5 view .LVU256
 994              		.loc 2 627 20 is_stmt 0 view .LVU257
 995 0088 134B     		ldr	r3, .L50+24
 996 008a 8022     		movs	r2, #128
 997 008c 9205     		lsls	r2, r2, #22
 998 008e 1A60     		str	r2, [r3]
 999              	.LVL64:
 1000              		.loc 2 627 20 view .LVU258
 1001              	.LBE12:
 1002              	.LBE11:
 209:Core/Src/uartParser.c ****   NVIC_SetPriority(USART3_4_IRQn, 3);
 1003              		.loc 1 209 3 is_stmt 1 view .LVU259
 1004              	.LBB13:
 1005              	.LBI13:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 38


 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 39


 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 1006              		.loc 2 730 22 view .LVU260
 1007              	.LBB14:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1008              		.loc 2 732 3 view .LVU261
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1009              		.loc 2 734 5 view .LVU262
 1010              		.loc 2 734 52 is_stmt 0 view .LVU263
 1011 0090 C720     		movs	r0, #199
 1012 0092 8000     		lsls	r0, r0, #2
 1013 0094 1958     		ldr	r1, [r3, r0]
 1014              		.loc 2 734 33 view .LVU264
 1015 0096 114A     		ldr	r2, .L50+28
 1016 0098 1140     		ands	r1, r2
 1017              		.loc 2 734 102 view .LVU265
 1018 009a C022     		movs	r2, #192
 1019 009c 1202     		lsls	r2, r2, #8
 1020 009e 0A43     		orrs	r2, r1
 1021              		.loc 2 734 30 view .LVU266
 1022 00a0 1A50     		str	r2, [r3, r0]
 1023              	.LVL65:
 1024              		.loc 2 734 30 view .LVU267
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 40


 1025              	.LBE14:
 1026              	.LBE13:
 214:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
 1027              		.loc 1 214 3 is_stmt 1 view .LVU268
 214:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
 1028              		.loc 1 214 33 is_stmt 0 view .LVU269
 1029 00a2 0F4A     		ldr	r2, .L50+32
 1030 00a4 0021     		movs	r1, #0
 1031 00a6 0120     		movs	r0, #1
 1032 00a8 FFF7FEFF 		bl	osSemaphoreNew
 1033              	.LVL66:
 214:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
 1034              		.loc 1 214 31 discriminator 1 view .LVU270
 1035 00ac 0D4B     		ldr	r3, .L50+36
 1036 00ae 1860     		str	r0, [r3]
 215:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 1037              		.loc 1 215 3 is_stmt 1 view .LVU271
 215:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 1038              		.loc 1 215 14 is_stmt 0 view .LVU272
 1039 00b0 0221     		movs	r1, #2
 1040 00b2 1420     		movs	r0, #20
 1041 00b4 FFF7FEFF 		bl	createQueue
 1042              	.LVL67:
 215:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 1043              		.loc 1 215 12 discriminator 1 view .LVU273
 1044 00b8 0B4B     		ldr	r3, .L50+40
 1045 00ba 1860     		str	r0, [r3]
 216:Core/Src/uartParser.c **** }
 1046              		.loc 1 216 1 view .LVU274
 1047              		@ sp needed
 1048 00bc 10BD     		pop	{r4, pc}
 1049              	.L51:
 1050 00be C046     		.align	2
 1051              	.L50:
 1052 00c0 00100240 		.word	1073876992
 1053 00c4 00080048 		.word	1207961600
 1054 00c8 FFFEFFFF 		.word	-257
 1055 00cc FFFBFFFF 		.word	-1025
 1056 00d0 00480040 		.word	1073760256
 1057 00d4 00000000 		.word	.LC41
 1058 00d8 00E100E0 		.word	-536813312
 1059 00dc FF00FFFF 		.word	-65281
 1060 00e0 00000000 		.word	semAttr_SEM1
 1061 00e4 00000000 		.word	binarySem02UartParserHandle
 1062 00e8 00000000 		.word	cmdQueue
 1063              		.cfi_endproc
 1064              	.LFE46:
 1066              		.section	.rodata.USART3_4_IRQHandler.str1.4,"aMS",%progbits,1
 1067              		.align	2
 1068              	.LC46:
 1069 0000 55415254 		.ascii	"UART RX interrupt.\000"
 1069      20525820 
 1069      696E7465 
 1069      72727570 
 1069      742E00
 1070 0013 00       		.align	2
 1071              	.LC50:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 41


 1072 0014 636D643A 		.ascii	"cmd:\012\000"
 1072      0A00
 1073              		.section	.text.USART3_4_IRQHandler,"ax",%progbits
 1074              		.align	1
 1075              		.global	USART3_4_IRQHandler
 1076              		.syntax unified
 1077              		.code	16
 1078              		.thumb_func
 1080              	USART3_4_IRQHandler:
 1081              	.LFB47:
 219:Core/Src/uartParser.c **** void USART3_4_IRQHandler(void) {
 1082              		.loc 1 219 32 is_stmt 1 view -0
 1083              		.cfi_startproc
 1084              		@ args = 0, pretend = 0, frame = 8
 1085              		@ frame_needed = 0, uses_anonymous_args = 0
 1086 0000 30B5     		push	{r4, r5, lr}
 1087              	.LCFI8:
 1088              		.cfi_def_cfa_offset 12
 1089              		.cfi_offset 4, -12
 1090              		.cfi_offset 5, -8
 1091              		.cfi_offset 14, -4
 1092 0002 83B0     		sub	sp, sp, #12
 1093              	.LCFI9:
 1094              		.cfi_def_cfa_offset 24
 220:Core/Src/uartParser.c ****   transmitCharArray("UART RX interrupt.");
 1095              		.loc 1 220 3 view .LVU276
 1096 0004 1748     		ldr	r0, .L56
 1097 0006 FFF7FEFF 		bl	transmitCharArray
 1098              	.LVL68:
 221:Core/Src/uartParser.c ****   if (uartStatus == 0) {
 1099              		.loc 1 221 3 view .LVU277
 221:Core/Src/uartParser.c ****   if (uartStatus == 0) {
 1100              		.loc 1 221 18 is_stmt 0 view .LVU278
 1101 000a 174B     		ldr	r3, .L56+4
 1102 000c 1B78     		ldrb	r3, [r3]
 221:Core/Src/uartParser.c ****   if (uartStatus == 0) {
 1103              		.loc 1 221 6 view .LVU279
 1104 000e 002B     		cmp	r3, #0
 1105 0010 26D1     		bne	.L52
 1106              	.L54:
 1107              	.LBB15:
 223:Core/Src/uartParser.c **** 	  }
 1108              		.loc 1 223 4 is_stmt 1 view .LVU280
 222:Core/Src/uartParser.c ****     while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1109              		.loc 1 222 42 discriminator 1 view .LVU281
 222:Core/Src/uartParser.c ****     while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1110              		.loc 1 222 18 is_stmt 0 discriminator 1 view .LVU282
 1111 0012 164B     		ldr	r3, .L56+8
 1112 0014 DB69     		ldr	r3, [r3, #28]
 222:Core/Src/uartParser.c ****     while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1113              		.loc 1 222 42 discriminator 1 view .LVU283
 1114 0016 9B06     		lsls	r3, r3, #26
 1115 0018 FBD5     		bpl	.L54
 225:Core/Src/uartParser.c ****     osSemaphoreRelease(binarySem02UartParserHandle);
 1116              		.loc 1 225 5 is_stmt 1 view .LVU284
 1117 001a 154B     		ldr	r3, .L56+12
 1118 001c 1868     		ldr	r0, [r3]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 42


 1119 001e FFF7FEFF 		bl	osSemaphoreRelease
 1120              	.LVL69:
 226:Core/Src/uartParser.c ****     volatile uint8_t usartReceivedData = USART3->RDR;
 1121              		.loc 1 226 5 view .LVU285
 226:Core/Src/uartParser.c ****     volatile uint8_t usartReceivedData = USART3->RDR;
 1122              		.loc 1 226 48 is_stmt 0 view .LVU286
 1123 0022 124C     		ldr	r4, .L56+8
 1124 0024 A38C     		ldrh	r3, [r4, #36]
 226:Core/Src/uartParser.c ****     volatile uint8_t usartReceivedData = USART3->RDR;
 1125              		.loc 1 226 22 view .LVU287
 1126 0026 DBB2     		uxtb	r3, r3
 1127 0028 6A46     		mov	r2, sp
 1128 002a D51D     		adds	r5, r2, #7
 1129 002c D371     		strb	r3, [r2, #7]
 227:Core/Src/uartParser.c ****     transmitCharArray("cmd:\n");
 1130              		.loc 1 227 5 is_stmt 1 view .LVU288
 1131 002e 1148     		ldr	r0, .L56+16
 1132 0030 FFF7FEFF 		bl	transmitCharArray
 1133              	.LVL70:
 228:Core/Src/uartParser.c ****     transmitOneChar(usartReceivedData);
 1134              		.loc 1 228 5 view .LVU289
 1135 0034 2878     		ldrb	r0, [r5]
 1136 0036 C0B2     		uxtb	r0, r0
 1137 0038 FFF7FEFF 		bl	transmitOneChar
 1138              	.LVL71:
 229:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 1139              		.loc 1 229 5 view .LVU290
 229:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 1140              		.loc 1 229 11 is_stmt 0 view .LVU291
 1141 003c 0E4A     		ldr	r2, .L56+20
 1142 003e 1378     		ldrb	r3, [r2]
 1143 0040 DBB2     		uxtb	r3, r3
 229:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 1144              		.loc 1 229 22 view .LVU292
 1145 0042 2978     		ldrb	r1, [r5]
 1146 0044 C9B2     		uxtb	r1, r1
 1147 0046 0D48     		ldr	r0, .L56+24
 1148 0048 C154     		strb	r1, [r0, r3]
 230:Core/Src/uartParser.c **** 		strIndex++;
 1149              		.loc 1 230 3 is_stmt 1 view .LVU293
 230:Core/Src/uartParser.c **** 		strIndex++;
 1150              		.loc 1 230 11 is_stmt 0 view .LVU294
 1151 004a 1378     		ldrb	r3, [r2]
 1152 004c 0133     		adds	r3, r3, #1
 1153 004e DBB2     		uxtb	r3, r3
 1154 0050 1370     		strb	r3, [r2]
 231:Core/Src/uartParser.c ****     uartStatus = 1;
 1155              		.loc 1 231 5 is_stmt 1 view .LVU295
 231:Core/Src/uartParser.c ****     uartStatus = 1;
 1156              		.loc 1 231 16 is_stmt 0 view .LVU296
 1157 0052 054B     		ldr	r3, .L56+4
 1158 0054 0122     		movs	r2, #1
 1159 0056 1A70     		strb	r2, [r3]
 233:Core/Src/uartParser.c ****     USART3->CR1 &= ~USART_CR1_RXNEIE;
 1160              		.loc 1 233 5 is_stmt 1 view .LVU297
 233:Core/Src/uartParser.c ****     USART3->CR1 &= ~USART_CR1_RXNEIE;
 1161              		.loc 1 233 11 is_stmt 0 view .LVU298
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 43


 1162 0058 2368     		ldr	r3, [r4]
 233:Core/Src/uartParser.c ****     USART3->CR1 &= ~USART_CR1_RXNEIE;
 1163              		.loc 1 233 17 view .LVU299
 1164 005a 1F32     		adds	r2, r2, #31
 1165 005c 9343     		bics	r3, r2
 1166 005e 2360     		str	r3, [r4]
 1167              	.L52:
 1168              	.LBE15:
 235:Core/Src/uartParser.c **** }
 1169              		.loc 1 235 1 view .LVU300
 1170 0060 03B0     		add	sp, sp, #12
 1171              		@ sp needed
 1172 0062 30BD     		pop	{r4, r5, pc}
 1173              	.L57:
 1174              		.align	2
 1175              	.L56:
 1176 0064 00000000 		.word	.LC46
 1177 0068 00000000 		.word	uartStatus
 1178 006c 00480040 		.word	1073760256
 1179 0070 00000000 		.word	binarySem02UartParserHandle
 1180 0074 14000000 		.word	.LC50
 1181 0078 00000000 		.word	strIndex
 1182 007c 00000000 		.word	tmpStr
 1183              		.cfi_endproc
 1184              	.LFE47:
 1186              		.global	UARTTask_attributes
 1187              		.section	.rodata.str1.4,"aMS",%progbits,1
 1188              		.align	2
 1189              	.LC54:
 1190 0000 55415254 		.ascii	"UARTParseTask\000"
 1190      50617273 
 1190      65546173 
 1190      6B00
 1191              		.section	.rodata.UARTTask_attributes,"a"
 1192              		.align	2
 1195              	UARTTask_attributes:
 1196 0000 00000000 		.word	.LC54
 1197 0004 00000000 		.space	16
 1197      00000000 
 1197      00000000 
 1197      00000000 
 1198 0014 00020000 		.word	512
 1199 0018 19000000 		.word	25
 1200 001c 00000000 		.space	8
 1200      00000000 
 1201              		.global	uartStatus
 1202              		.section	.bss.uartStatus,"aw",%nobits
 1205              	uartStatus:
 1206 0000 00       		.space	1
 1207              		.global	commandLED
 1208              		.section	.bss.commandLED,"aw",%nobits
 1209              		.align	1
 1212              	commandLED:
 1213 0000 0000     		.space	2
 1214              		.global	commandOut
 1215              		.section	.bss.commandOut,"aw",%nobits
 1216              		.align	1
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 44


 1219              	commandOut:
 1220 0000 0000     		.space	2
 1221              		.global	cmd
 1222              		.section	.bss.cmd,"aw",%nobits
 1223              		.align	2
 1226              	cmd:
 1227 0000 00000000 		.space	80
 1227      00000000 
 1227      00000000 
 1227      00000000 
 1227      00000000 
 1228              		.global	tmpStr
 1229              		.section	.bss.tmpStr,"aw",%nobits
 1230              		.align	2
 1233              	tmpStr:
 1234 0000 00000000 		.space	20
 1234      00000000 
 1234      00000000 
 1234      00000000 
 1234      00000000 
 1235              		.global	cmdStrIndex
 1236              		.section	.bss.cmdStrIndex,"aw",%nobits
 1239              	cmdStrIndex:
 1240 0000 00       		.space	1
 1241              		.global	cmdIndex
 1242              		.section	.bss.cmdIndex,"aw",%nobits
 1245              	cmdIndex:
 1246 0000 00       		.space	1
 1247              		.global	strIndex
 1248              		.section	.bss.strIndex,"aw",%nobits
 1251              	strIndex:
 1252 0000 00       		.space	1
 1253              		.section	.rodata.str1.4
 1254 000e 0000     		.align	2
 1255              	.LC55:
 1256 0010 53454D30 		.ascii	"SEM02\000"
 1256      3200
 1257              		.section	.rodata.semAttr_SEM1,"a"
 1258              		.align	2
 1261              	semAttr_SEM1:
 1262 0000 10000000 		.word	.LC55
 1263 0004 00000000 		.space	12
 1263      00000000 
 1263      00000000 
 1264              		.global	binarySem02UartParserHandle
 1265              		.section	.bss.binarySem02UartParserHandle,"aw",%nobits
 1266              		.align	2
 1269              	binarySem02UartParserHandle:
 1270 0000 00000000 		.space	4
 1271              		.global	cmdQueue
 1272              		.section	.bss.cmdQueue,"aw",%nobits
 1273              		.align	2
 1276              	cmdQueue:
 1277 0000 00000000 		.space	4
 1278              		.global	UARTTaskHandle
 1279              		.section	.bss.UARTTaskHandle,"aw",%nobits
 1280              		.align	2
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 45


 1283              	UARTTaskHandle:
 1284 0000 00000000 		.space	4
 1285              		.text
 1286              	.Letext0:
 1287              		.file 3 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 1288              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1289              		.file 5 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 1290              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 1291              		.file 7 "Core/Inc/cmdQueue.h"
 1292              		.file 8 "Core/Inc/uartParser.h"
 1293              		.file 9 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/string.h"
 1294              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 46


DEFINED SYMBOLS
                            *ABS*:00000000 uartParser.c
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:19     .rodata.parseCmd.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:47     .text.parseCmd:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:53     .text.parseCmd:00000000 parseCmd
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:377    .text.parseCmd:00000188 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1251   .bss.strIndex:00000000 strIndex
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1239   .bss.cmdStrIndex:00000000 cmdStrIndex
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1245   .bss.cmdIndex:00000000 cmdIndex
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1233   .bss.tmpStr:00000000 tmpStr
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1226   .bss.cmd:00000000 cmd
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1219   .bss.commandOut:00000000 commandOut
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:400    .text.transmitOneChar:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:406    .text.transmitOneChar:00000000 transmitOneChar
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:433    .text.transmitOneChar:00000010 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:438    .text.transmitCharArray:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:444    .text.transmitCharArray:00000000 transmitCharArray
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:494    .text.sendUint16BinToUart:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:500    .text.sendUint16BinToUart:00000000 sendUint16BinToUart
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:566    .rodata.StartParseUartTask.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:579    .text.StartParseUartTask:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:585    .text.StartParseUartTask:00000000 StartParseUartTask
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:832    .text.StartParseUartTask:000000f4 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1276   .bss.cmdQueue:00000000 cmdQueue
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1205   .bss.uartStatus:00000000 uartStatus
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1269   .bss.binarySem02UartParserHandle:00000000 binarySem02UartParserHandle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:851    .rodata.initUsart3.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:855    .text.initUsart3:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:861    .text.initUsart3:00000000 initUsart3
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1052   .text.initUsart3:000000c0 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1261   .rodata.semAttr_SEM1:00000000 semAttr_SEM1
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1067   .rodata.USART3_4_IRQHandler.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1074   .text.USART3_4_IRQHandler:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1080   .text.USART3_4_IRQHandler:00000000 USART3_4_IRQHandler
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1176   .text.USART3_4_IRQHandler:00000064 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1195   .rodata.UARTTask_attributes:00000000 UARTTask_attributes
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1188   .rodata.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1192   .rodata.UARTTask_attributes:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1206   .bss.uartStatus:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1212   .bss.commandLED:00000000 commandLED
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1209   .bss.commandLED:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1216   .bss.commandOut:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1223   .bss.cmd:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1230   .bss.tmpStr:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1240   .bss.cmdStrIndex:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1246   .bss.cmdIndex:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1252   .bss.strIndex:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1258   .rodata.semAttr_SEM1:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1266   .bss.binarySem02UartParserHandle:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1273   .bss.cmdQueue:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1283   .bss.UARTTaskHandle:00000000 UARTTaskHandle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s:1280   .bss.UARTTaskHandle:00000000 $d

UNDEFINED SYMBOLS
strcmp
queuePush
osSemaphoreAcquire
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccQNJT81.s 			page 47


__aeabi_uidiv
HAL_RCC_GetHCLKFreq
osSemaphoreNew
createQueue
osSemaphoreRelease
