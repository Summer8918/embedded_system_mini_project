ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"uartParser.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/uartParser.c"
  18              		.section	.text.convertSpeed,"ax",%progbits
  19              		.align	1
  20              		.global	convertSpeed
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	convertSpeed:
  26              	.LVL0:
  27              	.LFB45:
   1:Core/Src/uartParser.c **** #include "uartParser.h"
   2:Core/Src/uartParser.c **** #include "cmsis_os2.h"
   3:Core/Src/uartParser.c **** #include <string.h>
   4:Core/Src/uartParser.c **** 
   5:Core/Src/uartParser.c **** osThreadId_t UARTTaskHandle;
   6:Core/Src/uartParser.c **** Cmd_Queue * cmdQueue = NULL;
   7:Core/Src/uartParser.c **** osSemaphoreId_t binarySem02UartParserHandle;
   8:Core/Src/uartParser.c **** static const osSemaphoreAttr_t semAttr_SEM1 = {
   9:Core/Src/uartParser.c ****   .name = "SEM02",
  10:Core/Src/uartParser.c **** };
  11:Core/Src/uartParser.c **** 
  12:Core/Src/uartParser.c **** volatile uint8_t strIndex = 0;
  13:Core/Src/uartParser.c **** volatile uint8_t cmdIndex = 0;
  14:Core/Src/uartParser.c **** volatile uint8_t cmdStrIndex = 0;
  15:Core/Src/uartParser.c **** volatile char tmpStr[TMP_STR_LEN];
  16:Core/Src/uartParser.c **** volatile char cmd[4][TMP_STR_LEN];
  17:Core/Src/uartParser.c **** volatile uint16_t commandOut = 0x0000;
  18:Core/Src/uartParser.c **** 
  19:Core/Src/uartParser.c **** // 0 not working, 1 working
  20:Core/Src/uartParser.c **** volatile uint8_t uartStatus = 0;
  21:Core/Src/uartParser.c **** 
  22:Core/Src/uartParser.c **** const osThreadAttr_t UARTTask_attributes = {
  23:Core/Src/uartParser.c ****   .name = "UARTParseTask",
  24:Core/Src/uartParser.c ****   .stack_size = 128 * 4,
  25:Core/Src/uartParser.c ****   .priority = (osPriority_t) osPriorityNormal1, // higher priority than osPriorityNormal
  26:Core/Src/uartParser.c **** };
  27:Core/Src/uartParser.c **** 
  28:Core/Src/uartParser.c **** void sendUint16BinToUart(uint16_t x) {
  29:Core/Src/uartParser.c **** 	char str[16];
  30:Core/Src/uartParser.c **** 	uint8_t i = 0;
  31:Core/Src/uartParser.c **** 	while (i < 16) {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 2


  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
  33:Core/Src/uartParser.c **** 	  i++;
  34:Core/Src/uartParser.c **** 	}
  35:Core/Src/uartParser.c **** 	transmitCharArray(str);
  36:Core/Src/uartParser.c **** }
  37:Core/Src/uartParser.c **** 
  38:Core/Src/uartParser.c **** uint8_t parseCmd(void) {
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
  40:Core/Src/uartParser.c ****   uint8_t speed = 0;
  41:Core/Src/uartParser.c ****   //Parse words from received command string
  42:Core/Src/uartParser.c ****   volatile uint8_t strLen = strIndex + 1;
  43:Core/Src/uartParser.c ****   strIndex = 0;
  44:Core/Src/uartParser.c ****   cmdStrIndex = 0;
  45:Core/Src/uartParser.c ****   cmdIndex = 0;
  46:Core/Src/uartParser.c ****   while (strIndex < strLen) {
  47:Core/Src/uartParser.c ****     if (tmpStr[strIndex] == ' ') {
  48:Core/Src/uartParser.c ****       cmdIndex++;
  49:Core/Src/uartParser.c ****       cmdStrIndex = 0;
  50:Core/Src/uartParser.c ****     } else {
  51:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
  52:Core/Src/uartParser.c ****       cmdStrIndex++;
  53:Core/Src/uartParser.c ****     }
  54:Core/Src/uartParser.c ****     strIndex++;
  55:Core/Src/uartParser.c ****   } 
  56:Core/Src/uartParser.c ****   //Convert words into command format
  57:Core/Src/uartParser.c ****   //First digit
  58:Core/Src/uartParser.c ****   if (strcmp(cmd[0], "led") == 0) {
  59:Core/Src/uartParser.c ****     commandOut |= 0xA000;
  60:Core/Src/uartParser.c ****     //Second digit - LED
  61:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "red") == 0) {
  62:Core/Src/uartParser.c ****       commandOut |= 0x0100;
  63:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "green") == 0) {
  64:Core/Src/uartParser.c ****       commandOut |= 0x0200;
  65:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "blue") == 0) {
  66:Core/Src/uartParser.c ****       commandOut |= 0x0300;
  67:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "orange") == 0) {
  68:Core/Src/uartParser.c ****       commandOut |= 0x0400;
  69:Core/Src/uartParser.c ****     } else {
  70:Core/Src/uartParser.c ****       error = 1;
  71:Core/Src/uartParser.c ****     }
  72:Core/Src/uartParser.c ****     //Third digit - LED
  73:Core/Src/uartParser.c ****     if (strcmp(cmd[2], "on") == 0) {
  74:Core/Src/uartParser.c ****       commandOut |= 0x0010;
  75:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "off") == 0) {
  76:Core/Src/uartParser.c ****       commandOut |= 0x0020;
  77:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "toggle") == 0) {
  78:Core/Src/uartParser.c ****       commandOut |= 0x0030;
  79:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "blink") == 0) {
  80:Core/Src/uartParser.c ****       commandOut |= 0x0040;
  81:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[3]);
  82:Core/Src/uartParser.c ****     } else {
  83:Core/Src/uartParser.c ****       error = 1;
  84:Core/Src/uartParser.c ****     }
  85:Core/Src/uartParser.c **** 
  86:Core/Src/uartParser.c ****     //LED blink speed
  87:Core/Src/uartParser.c ****     if (speed == 255)
  88:Core/Src/uartParser.c ****       error = 1;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 3


  89:Core/Src/uartParser.c ****     else 
  90:Core/Src/uartParser.c ****       if (speed > 15) {
  91:Core/Src/uartParser.c ****         transmitCharArray("Blink speed limited to 1500 ms");
  92:Core/Src/uartParser.c ****         commandOut |= 15U;
  93:Core/Src/uartParser.c ****       }
  94:Core/Src/uartParser.c ****       else
  95:Core/Src/uartParser.c ****         commandOut |= speed;
  96:Core/Src/uartParser.c **** 
  97:Core/Src/uartParser.c ****   } else if (strcmp(cmd[0], "motor") == 0) {
  98:Core/Src/uartParser.c ****     commandOut |= 0xB000;
  99:Core/Src/uartParser.c ****     //Second digit - Motor
 100:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "on") == 0) {
 101:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 102:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 103:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "off") == 0) {
 104:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 105:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "speed") == 0) {
 106:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 107:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 108:Core/Src/uartParser.c ****     } else {
 109:Core/Src/uartParser.c ****       error = 1;
 110:Core/Src/uartParser.c ****     }
 111:Core/Src/uartParser.c ****     //Motor speed
 112:Core/Src/uartParser.c ****     if (speed == 255)
 113:Core/Src/uartParser.c ****       error = 1;
 114:Core/Src/uartParser.c ****     else 
 115:Core/Src/uartParser.c ****       if (speed > 100) {
 116:Core/Src/uartParser.c ****         transmitCharArray("Motor speed limited to 100 RPM");
 117:Core/Src/uartParser.c ****         commandOut |= 100U;
 118:Core/Src/uartParser.c ****       }
 119:Core/Src/uartParser.c ****       else
 120:Core/Src/uartParser.c ****         commandOut |= speed;
 121:Core/Src/uartParser.c ****   } else {
 122:Core/Src/uartParser.c ****     error = 1;
 123:Core/Src/uartParser.c ****   }
 124:Core/Src/uartParser.c ****   return error;
 125:Core/Src/uartParser.c **** }
 126:Core/Src/uartParser.c **** 
 127:Core/Src/uartParser.c **** //Convert UART ascii sped into into uint8 to add to command
 128:Core/Src/uartParser.c **** uint8_t convertSpeed(char *ascii) {
  28              		.loc 1 128 35 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 128 35 is_stmt 0 view .LVU1
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
  40 0002 0500     		movs	r5, r0
 129:Core/Src/uartParser.c ****   uint8_t hundreds = 0, tens = 0, ones = 0;
  41              		.loc 1 129 3 is_stmt 1 view .LVU2
  42              	.LVL1:
 130:Core/Src/uartParser.c ****   //Throw error if speed is not a number
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 4


 131:Core/Src/uartParser.c ****   for (int i = 0; i < strlen(ascii); i ++){
  43              		.loc 1 131 3 view .LVU3
  44              	.LBB6:
  45              		.loc 1 131 8 view .LVU4
  46              		.loc 1 131 12 is_stmt 0 view .LVU5
  47 0004 0024     		movs	r4, #0
  48              		.loc 1 131 3 view .LVU6
  49 0006 00E0     		b	.L2
  50              	.LVL2:
  51              	.L12:
  52              		.loc 1 131 40 is_stmt 1 discriminator 2 view .LVU7
  53 0008 0134     		adds	r4, r4, #1
  54              	.LVL3:
  55              	.L2:
  56              		.loc 1 131 21 discriminator 1 view .LVU8
  57              		.loc 1 131 23 is_stmt 0 discriminator 1 view .LVU9
  58 000a 2800     		movs	r0, r5
  59 000c FFF7FEFF 		bl	strlen
  60              	.LVL4:
  61              		.loc 1 131 21 discriminator 1 view .LVU10
  62 0010 A042     		cmp	r0, r4
  63 0012 08D9     		bls	.L11
 132:Core/Src/uartParser.c ****     if ((ascii[i] < 48 && ascii[i] != 0) || ascii[i] > 57) {
  64              		.loc 1 132 5 is_stmt 1 view .LVU11
  65              		.loc 1 132 15 is_stmt 0 view .LVU12
  66 0014 2A5D     		ldrb	r2, [r5, r4]
  67              		.loc 1 132 24 view .LVU13
  68 0016 531E     		subs	r3, r2, #1
  69 0018 DBB2     		uxtb	r3, r3
  70              		.loc 1 132 8 view .LVU14
  71 001a 2E2B     		cmp	r3, #46
  72 001c 2DD9     		bls	.L8
  73              		.loc 1 132 42 discriminator 1 view .LVU15
  74 001e 392A     		cmp	r2, #57
  75 0020 F2D9     		bls	.L12
 133:Core/Src/uartParser.c ****       return 255;
  76              		.loc 1 133 14 view .LVU16
  77 0022 FF20     		movs	r0, #255
  78 0024 13E0     		b	.L3
  79              	.L11:
  80              	.LBE6:
 134:Core/Src/uartParser.c ****     }
 135:Core/Src/uartParser.c ****   }
 136:Core/Src/uartParser.c ****   //3 digit number
 137:Core/Src/uartParser.c ****   if (ascii[2] != 0) {
  81              		.loc 1 137 3 is_stmt 1 view .LVU17
  82              		.loc 1 137 12 is_stmt 0 view .LVU18
  83 0026 A978     		ldrb	r1, [r5, #2]
  84              		.loc 1 137 6 view .LVU19
  85 0028 0029     		cmp	r1, #0
  86 002a 11D0     		beq	.L5
 138:Core/Src/uartParser.c ****     hundreds = ascii[0] - 48;
  87              		.loc 1 138 5 is_stmt 1 view .LVU20
  88              		.loc 1 138 21 is_stmt 0 view .LVU21
  89 002c 2A78     		ldrb	r2, [r5]
  90              		.loc 1 138 14 view .LVU22
  91 002e 303A     		subs	r2, r2, #48
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 5


  92 0030 D2B2     		uxtb	r2, r2
  93              	.LVL5:
 139:Core/Src/uartParser.c ****     tens = ascii[1] - 48;
  94              		.loc 1 139 5 is_stmt 1 view .LVU23
  95              		.loc 1 139 17 is_stmt 0 view .LVU24
  96 0032 6B78     		ldrb	r3, [r5, #1]
  97              		.loc 1 139 10 view .LVU25
  98 0034 303B     		subs	r3, r3, #48
  99 0036 DBB2     		uxtb	r3, r3
 100              	.LVL6:
 140:Core/Src/uartParser.c ****     ones = ascii[2] - 48;
 101              		.loc 1 140 5 is_stmt 1 view .LVU26
 102              		.loc 1 140 10 is_stmt 0 view .LVU27
 103 0038 3039     		subs	r1, r1, #48
 104 003a CCB2     		uxtb	r4, r1
 105              	.LVL7:
 106              	.L6:
 141:Core/Src/uartParser.c ****   } else {
 142:Core/Src/uartParser.c ****     hundreds = 0;
 143:Core/Src/uartParser.c ****     //2 digit number
 144:Core/Src/uartParser.c ****     if (ascii[1] != 0) {
 145:Core/Src/uartParser.c ****       tens = ascii[0] - 48;
 146:Core/Src/uartParser.c ****       ones = ascii[1] - 48;
 147:Core/Src/uartParser.c ****     }
 148:Core/Src/uartParser.c ****     else {
 149:Core/Src/uartParser.c ****       tens = 0;
 150:Core/Src/uartParser.c ****       //1 digit number
 151:Core/Src/uartParser.c ****       if (ascii[0] != 0) {
 152:Core/Src/uartParser.c ****         ones = ascii[0] - 48;
 153:Core/Src/uartParser.c ****       }
 154:Core/Src/uartParser.c ****       else {
 155:Core/Src/uartParser.c ****         ones = 0;
 156:Core/Src/uartParser.c ****       }
 157:Core/Src/uartParser.c ****     }
 158:Core/Src/uartParser.c ****   }
 159:Core/Src/uartParser.c ****   return hundreds*100 + tens*10 + ones;
 107              		.loc 1 159 3 is_stmt 1 view .LVU28
 108              		.loc 1 159 23 is_stmt 0 view .LVU29
 109 003c 6420     		movs	r0, #100
 110 003e 5043     		muls	r0, r2
 111 0040 9A00     		lsls	r2, r3, #2
 112              	.LVL8:
 113              		.loc 1 159 23 view .LVU30
 114 0042 9B18     		adds	r3, r3, r2
 115              	.LVL9:
 116              		.loc 1 159 23 view .LVU31
 117 0044 5B00     		lsls	r3, r3, #1
 118 0046 C018     		adds	r0, r0, r3
 119 0048 C0B2     		uxtb	r0, r0
 120              		.loc 1 159 33 view .LVU32
 121 004a 0019     		adds	r0, r0, r4
 122 004c C0B2     		uxtb	r0, r0
 123              	.LVL10:
 124              	.L3:
 160:Core/Src/uartParser.c **** }
 125              		.loc 1 160 1 view .LVU33
 126              		@ sp needed
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 6


 127              	.LVL11:
 128              		.loc 1 160 1 view .LVU34
 129 004e 70BD     		pop	{r4, r5, r6, pc}
 130              	.LVL12:
 131              	.L5:
 142:Core/Src/uartParser.c ****     //2 digit number
 132              		.loc 1 142 5 is_stmt 1 view .LVU35
 144:Core/Src/uartParser.c ****       tens = ascii[0] - 48;
 133              		.loc 1 144 5 view .LVU36
 144:Core/Src/uartParser.c ****       tens = ascii[0] - 48;
 134              		.loc 1 144 14 is_stmt 0 view .LVU37
 135 0050 6878     		ldrb	r0, [r5, #1]
 144:Core/Src/uartParser.c ****       tens = ascii[0] - 48;
 136              		.loc 1 144 8 view .LVU38
 137 0052 0028     		cmp	r0, #0
 138 0054 06D0     		beq	.L7
 145:Core/Src/uartParser.c ****       ones = ascii[1] - 48;
 139              		.loc 1 145 7 is_stmt 1 view .LVU39
 145:Core/Src/uartParser.c ****       ones = ascii[1] - 48;
 140              		.loc 1 145 19 is_stmt 0 view .LVU40
 141 0056 2B78     		ldrb	r3, [r5]
 145:Core/Src/uartParser.c ****       ones = ascii[1] - 48;
 142              		.loc 1 145 12 view .LVU41
 143 0058 303B     		subs	r3, r3, #48
 144 005a DBB2     		uxtb	r3, r3
 145              	.LVL13:
 146:Core/Src/uartParser.c ****     }
 146              		.loc 1 146 7 is_stmt 1 view .LVU42
 146:Core/Src/uartParser.c ****     }
 147              		.loc 1 146 12 is_stmt 0 view .LVU43
 148 005c 3038     		subs	r0, r0, #48
 149 005e C4B2     		uxtb	r4, r0
 150              	.LVL14:
 142:Core/Src/uartParser.c ****     //2 digit number
 151              		.loc 1 142 14 view .LVU44
 152 0060 0A00     		movs	r2, r1
 153 0062 EBE7     		b	.L6
 154              	.LVL15:
 155              	.L7:
 149:Core/Src/uartParser.c ****       //1 digit number
 156              		.loc 1 149 7 is_stmt 1 view .LVU45
 151:Core/Src/uartParser.c ****         ones = ascii[0] - 48;
 157              		.loc 1 151 7 view .LVU46
 151:Core/Src/uartParser.c ****         ones = ascii[0] - 48;
 158              		.loc 1 151 16 is_stmt 0 view .LVU47
 159 0064 2A78     		ldrb	r2, [r5]
 151:Core/Src/uartParser.c ****         ones = ascii[0] - 48;
 160              		.loc 1 151 10 view .LVU48
 161 0066 002A     		cmp	r2, #0
 162 0068 04D0     		beq	.L10
 152:Core/Src/uartParser.c ****       }
 163              		.loc 1 152 9 is_stmt 1 view .LVU49
 152:Core/Src/uartParser.c ****       }
 164              		.loc 1 152 14 is_stmt 0 view .LVU50
 165 006a 303A     		subs	r2, r2, #48
 166 006c D4B2     		uxtb	r4, r2
 167              	.LVL16:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 7


 149:Core/Src/uartParser.c ****       //1 digit number
 168              		.loc 1 149 12 view .LVU51
 169 006e 0200     		movs	r2, r0
 142:Core/Src/uartParser.c ****     //2 digit number
 170              		.loc 1 142 14 view .LVU52
 171 0070 0300     		movs	r3, r0
 172 0072 E3E7     		b	.L6
 173              	.LVL17:
 174              	.L10:
 155:Core/Src/uartParser.c ****       }
 175              		.loc 1 155 14 view .LVU53
 176 0074 1400     		movs	r4, r2
 177              	.LVL18:
 149:Core/Src/uartParser.c ****       //1 digit number
 178              		.loc 1 149 12 view .LVU54
 179 0076 1300     		movs	r3, r2
 180 0078 E0E7     		b	.L6
 181              	.LVL19:
 182              	.L8:
 183              	.LBB7:
 133:Core/Src/uartParser.c ****     }
 184              		.loc 1 133 14 view .LVU55
 185 007a FF20     		movs	r0, #255
 186 007c E7E7     		b	.L3
 187              	.LBE7:
 188              		.cfi_endproc
 189              	.LFE45:
 191              		.section	.text.transmitOneChar,"ax",%progbits
 192              		.align	1
 193              		.global	transmitOneChar
 194              		.syntax unified
 195              		.code	16
 196              		.thumb_func
 198              	transmitOneChar:
 199              	.LFB49:
 161:Core/Src/uartParser.c **** 
 162:Core/Src/uartParser.c **** /* UART CODE BEGIN Header_StartLEDTask */
 163:Core/Src/uartParser.c **** /**
 164:Core/Src/uartParser.c ****   * @brief  Function implementing the LEDTask thread.
 165:Core/Src/uartParser.c ****   * @param  argument: Not used
 166:Core/Src/uartParser.c ****   * @retval None
 167:Core/Src/uartParser.c ****   */
 168:Core/Src/uartParser.c **** /* USER CODE END Header_StartLEDTask */
 169:Core/Src/uartParser.c **** void StartParseUartTask(void *argument) {
 170:Core/Src/uartParser.c ****   // TODO: add a timer to limit the max execution time
 171:Core/Src/uartParser.c **** 
 172:Core/Src/uartParser.c ****   while (1) {
 173:Core/Src/uartParser.c ****     //transmitCharArray("Waiting to get sem02.\n");
 174:Core/Src/uartParser.c ****     osSemaphoreAcquire(binarySem02UartParserHandle, osWaitForever);
 175:Core/Src/uartParser.c ****     //transmitCharArray("get sem02!\n");
 176:Core/Src/uartParser.c ****     while (1) {
 177:Core/Src/uartParser.c ****       while((USART3->ISR & USART_ISR_RXNE) == 0) {
 178:Core/Src/uartParser.c **** 	    }
 179:Core/Src/uartParser.c ****       //Pull character from UART
 180:Core/Src/uartParser.c **** 	    volatile uint8_t usartReceivedData = USART3->RDR;
 181:Core/Src/uartParser.c ****       transmitOneChar(usartReceivedData);
 182:Core/Src/uartParser.c ****       //Command string terminated with enter key
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 8


 183:Core/Src/uartParser.c **** 	    if (usartReceivedData == '\r') {
 184:Core/Src/uartParser.c ****         uint8_t error = parseCmd();
 185:Core/Src/uartParser.c ****         //Command syntax correct
 186:Core/Src/uartParser.c ****         if (error == 0) {
 187:Core/Src/uartParser.c ****           // Store the commandOut in queue
 188:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 189:Core/Src/uartParser.c ****             transmitCharArray("Push command to queue success.\n");
 190:Core/Src/uartParser.c ****             transmitCharArray(tmpStr);
 191:Core/Src/uartParser.c ****             sendUint16BinToUart(commandOut);
 192:Core/Src/uartParser.c ****           } else {
 193:Core/Src/uartParser.c ****             transmitCharArray("Fail to push command to queue, try again.\n");
 194:Core/Src/uartParser.c ****           }
 195:Core/Src/uartParser.c ****         //Command syntax malformed
 196:Core/Src/uartParser.c ****         } else {
 197:Core/Src/uartParser.c ****           transmitCharArray("Command not recognized");
 198:Core/Src/uartParser.c ****           transmitCharArray(tmpStr);
 199:Core/Src/uartParser.c ****           
 200:Core/Src/uartParser.c ****         }
 201:Core/Src/uartParser.c ****         //Reset command string and index
 202:Core/Src/uartParser.c ****         strIndex = 0;
 203:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 204:Core/Src/uartParser.c ****           tmpStr[i] = '\0';
 205:Core/Src/uartParser.c ****           cmd[0][i] = '\0';
 206:Core/Src/uartParser.c ****           cmd[1][i] = '\0';
 207:Core/Src/uartParser.c ****           cmd[2][i] = '\0';
 208:Core/Src/uartParser.c ****           cmd[3][i] = '\0';
 209:Core/Src/uartParser.c ****         }
 210:Core/Src/uartParser.c **** 
 211:Core/Src/uartParser.c ****         //Reset commandOut before starting next command receive
 212:Core/Src/uartParser.c ****         commandOut = 0;
 213:Core/Src/uartParser.c ****         break;
 214:Core/Src/uartParser.c ****       //Allow backspace/delete key to undo last character
 215:Core/Src/uartParser.c **** 	    } else if (usartReceivedData == 8 || usartReceivedData == 127) {
 216:Core/Src/uartParser.c ****           if (strIndex > 0) {
 217:Core/Src/uartParser.c ****             strIndex -= 1;
 218:Core/Src/uartParser.c ****             tmpStr[strIndex] = '\0';
 219:Core/Src/uartParser.c ****           }
 220:Core/Src/uartParser.c ****       } 
 221:Core/Src/uartParser.c ****       else {
 222:Core/Src/uartParser.c ****         tmpStr[strIndex] = usartReceivedData;
 223:Core/Src/uartParser.c ****         strIndex += 1;
 224:Core/Src/uartParser.c ****         //Command too long
 225:Core/Src/uartParser.c ****         if (strIndex == TMP_STR_LEN) {
 226:Core/Src/uartParser.c ****       	  transmitCharArray("Command is too long!");
 227:Core/Src/uartParser.c ****           strIndex = 0;
 228:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 229:Core/Src/uartParser.c ****             tmpStr[i] = '\0';
 230:Core/Src/uartParser.c ****           }
 231:Core/Src/uartParser.c ****           break;
 232:Core/Src/uartParser.c ****         }
 233:Core/Src/uartParser.c ****       }
 234:Core/Src/uartParser.c ****     }
 235:Core/Src/uartParser.c ****     uartStatus = 0;
 236:Core/Src/uartParser.c ****     //transmitCharArray("Enable Uart RX interrupt");
 237:Core/Src/uartParser.c ****     USART3->CR1 |= USART_CR1_RXNEIE;
 238:Core/Src/uartParser.c ****   }
 239:Core/Src/uartParser.c **** /*
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 9


 240:Core/Src/uartParser.c ****   // test queue pop
 241:Core/Src/uartParser.c ****   uint16_t item = queuePop(cmdQueue);
 242:Core/Src/uartParser.c ****   transmitCharArray("Pop items from queue\n");
 243:Core/Src/uartParser.c ****   while (item != 0xffff) {
 244:Core/Src/uartParser.c ****     sendUint16BinToUart(item);
 245:Core/Src/uartParser.c ****     item = queuePop(cmdQueue);
 246:Core/Src/uartParser.c ****   }*/
 247:Core/Src/uartParser.c **** }
 248:Core/Src/uartParser.c **** 
 249:Core/Src/uartParser.c **** //Initialize USART3 - PC4 TX, PC5 RX
 250:Core/Src/uartParser.c **** void initUsart3(void) {
 251:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 252:Core/Src/uartParser.c ****   // set pc4 to AF mode, 0x10
 253:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 254:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 255:Core/Src/uartParser.c ****   // set pc5 to AF mode, 0x10
 256:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 257:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 258:Core/Src/uartParser.c **** 
 259:Core/Src/uartParser.c ****   // set PC4 AFRL to 0001: AF1
 260:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 261:Core/Src/uartParser.c ****   // set PC5 AFRL to 0001: AF1
 262:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 263:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 264:Core/Src/uartParser.c **** 
 265:Core/Src/uartParser.c ****   uint32_t fClk = HAL_RCC_GetHCLKFreq();
 266:Core/Src/uartParser.c **** 
 267:Core/Src/uartParser.c ****   // set baud rate
 268:Core/Src/uartParser.c ****   uint32_t baudRate = 115200;
 269:Core/Src/uartParser.c ****   uint32_t usartBRR = fClk / baudRate;
 270:Core/Src/uartParser.c ****   USART3->BRR = usartBRR;
 271:Core/Src/uartParser.c **** 
 272:Core/Src/uartParser.c ****   // enable the transmitter and receiver hardware of USART3
 273:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 274:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 275:Core/Src/uartParser.c **** 
 276:Core/Src/uartParser.c ****   // Enable USART peripheral.
 277:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 278:Core/Src/uartParser.c ****   transmitCharArray("UART enabled");
 279:Core/Src/uartParser.c **** 
 280:Core/Src/uartParser.c ****   // Enable the receive register not empty interrupt.
 281:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 282:Core/Src/uartParser.c ****   // Enable and set the USART interrupt priority in the NVIC.
 283:Core/Src/uartParser.c ****   NVIC_EnableIRQ(USART3_4_IRQn);
 284:Core/Src/uartParser.c ****   NVIC_SetPriority(USART3_4_IRQn, 3);
 285:Core/Src/uartParser.c ****   /* Create the semaphores(s) */
 286:Core/Src/uartParser.c ****   /* definition and creation of myBinarySem02 */
 287:Core/Src/uartParser.c ****   // The semaphore is created with an initial count of 0 
 288:Core/Src/uartParser.c ****   // ,which means it is not available initially. 
 289:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
 290:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 291:Core/Src/uartParser.c **** }
 292:Core/Src/uartParser.c **** 
 293:Core/Src/uartParser.c **** // Handle uart RX with interrupt
 294:Core/Src/uartParser.c **** void USART3_4_IRQHandler(void) {
 295:Core/Src/uartParser.c ****   transmitCharArray("UART RX interrupt.");
 296:Core/Src/uartParser.c ****   if (uartStatus == 0) {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 10


 297:Core/Src/uartParser.c ****     while((USART3->ISR & USART_ISR_RXNE) == 0) {
 298:Core/Src/uartParser.c **** 	  }
 299:Core/Src/uartParser.c ****     //transmitCharArray("Release sem02\n");
 300:Core/Src/uartParser.c ****     osSemaphoreRelease(binarySem02UartParserHandle);
 301:Core/Src/uartParser.c ****     volatile uint8_t usartReceivedData = USART3->RDR;
 302:Core/Src/uartParser.c ****     transmitCharArray("cmd:\n");
 303:Core/Src/uartParser.c ****     transmitOneChar(usartReceivedData);
 304:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 305:Core/Src/uartParser.c **** 		strIndex++;
 306:Core/Src/uartParser.c ****     uartStatus = 1;
 307:Core/Src/uartParser.c ****     // Disable the receive register not empty interrupt.
 308:Core/Src/uartParser.c ****     USART3->CR1 &= ~USART_CR1_RXNEIE;
 309:Core/Src/uartParser.c ****   }
 310:Core/Src/uartParser.c **** }
 311:Core/Src/uartParser.c **** 
 312:Core/Src/uartParser.c **** void transmitOneChar(uint8_t ch) {
 200              		.loc 1 312 34 is_stmt 1 view -0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204              		@ link register save eliminated.
 205              	.LVL20:
 206              	.L14:
 313:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 314:Core/Src/uartParser.c ****   }
 207              		.loc 1 314 3 view .LVU57
 313:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 208              		.loc 1 313 40 discriminator 1 view .LVU58
 313:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 209              		.loc 1 313 17 is_stmt 0 discriminator 1 view .LVU59
 210 0000 034B     		ldr	r3, .L16
 211 0002 DB69     		ldr	r3, [r3, #28]
 313:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 212              		.loc 1 313 40 discriminator 1 view .LVU60
 213 0004 1B06     		lsls	r3, r3, #24
 214 0006 FBD5     		bpl	.L14
 315:Core/Src/uartParser.c ****   USART3->TDR = ch;
 215              		.loc 1 315 3 is_stmt 1 view .LVU61
 216              		.loc 1 315 15 is_stmt 0 view .LVU62
 217 0008 014B     		ldr	r3, .L16
 218 000a 1885     		strh	r0, [r3, #40]
 316:Core/Src/uartParser.c **** }
 219              		.loc 1 316 1 view .LVU63
 220              		@ sp needed
 221 000c 7047     		bx	lr
 222              	.L17:
 223 000e C046     		.align	2
 224              	.L16:
 225 0010 00480040 		.word	1073760256
 226              		.cfi_endproc
 227              	.LFE49:
 229              		.section	.text.transmitCharArray,"ax",%progbits
 230              		.align	1
 231              		.global	transmitCharArray
 232              		.syntax unified
 233              		.code	16
 234              		.thumb_func
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 11


 236              	transmitCharArray:
 237              	.LVL21:
 238              	.LFB50:
 317:Core/Src/uartParser.c **** 
 318:Core/Src/uartParser.c **** void transmitCharArray (char *arr) {
 239              		.loc 1 318 36 is_stmt 1 view -0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 243              		.loc 1 318 36 is_stmt 0 view .LVU65
 244 0000 10B5     		push	{r4, lr}
 245              	.LCFI1:
 246              		.cfi_def_cfa_offset 8
 247              		.cfi_offset 4, -8
 248              		.cfi_offset 14, -4
 249 0002 0400     		movs	r4, r0
 319:Core/Src/uartParser.c ****   while (*arr != '\0') {
 250              		.loc 1 319 3 is_stmt 1 view .LVU66
 251              		.loc 1 319 9 is_stmt 0 view .LVU67
 252 0004 02E0     		b	.L19
 253              	.LVL22:
 254              	.L20:
 320:Core/Src/uartParser.c **** 		transmitOneChar(*arr);
 255              		.loc 1 320 3 is_stmt 1 view .LVU68
 256 0006 FFF7FEFF 		bl	transmitOneChar
 257              	.LVL23:
 321:Core/Src/uartParser.c **** 		arr++;
 258              		.loc 1 321 3 view .LVU69
 259              		.loc 1 321 6 is_stmt 0 view .LVU70
 260 000a 0134     		adds	r4, r4, #1
 261              	.LVL24:
 262              	.L19:
 319:Core/Src/uartParser.c ****   while (*arr != '\0') {
 263              		.loc 1 319 15 is_stmt 1 view .LVU71
 319:Core/Src/uartParser.c ****   while (*arr != '\0') {
 264              		.loc 1 319 10 is_stmt 0 view .LVU72
 265 000c 2078     		ldrb	r0, [r4]
 319:Core/Src/uartParser.c ****   while (*arr != '\0') {
 266              		.loc 1 319 15 view .LVU73
 267 000e 0028     		cmp	r0, #0
 268 0010 F9D1     		bne	.L20
 322:Core/Src/uartParser.c **** 	}
 323:Core/Src/uartParser.c ****   transmitOneChar('\n');
 269              		.loc 1 323 3 is_stmt 1 view .LVU74
 270 0012 0A30     		adds	r0, r0, #10
 271 0014 FFF7FEFF 		bl	transmitOneChar
 272              	.LVL25:
 324:Core/Src/uartParser.c ****   transmitOneChar('\r');
 273              		.loc 1 324 3 view .LVU75
 274 0018 0D20     		movs	r0, #13
 275 001a FFF7FEFF 		bl	transmitOneChar
 276              	.LVL26:
 325:Core/Src/uartParser.c **** }...
 277              		.loc 1 325 1 is_stmt 0 view .LVU76
 278              		@ sp needed
 279              	.LVL27:
 280              		.loc 1 325 1 view .LVU77
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 12


 281 001e 10BD     		pop	{r4, pc}
 282              		.cfi_endproc
 283              	.LFE50:
 285              		.section	.text.sendUint16BinToUart,"ax",%progbits
 286              		.align	1
 287              		.global	sendUint16BinToUart
 288              		.syntax unified
 289              		.code	16
 290              		.thumb_func
 292              	sendUint16BinToUart:
 293              	.LVL28:
 294              	.LFB43:
  28:Core/Src/uartParser.c **** void sendUint16BinToUart(uint16_t x) {
 295              		.loc 1 28 38 is_stmt 1 view -0
 296              		.cfi_startproc
 297              		@ args = 0, pretend = 0, frame = 16
 298              		@ frame_needed = 0, uses_anonymous_args = 0
  28:Core/Src/uartParser.c **** void sendUint16BinToUart(uint16_t x) {
 299              		.loc 1 28 38 is_stmt 0 view .LVU79
 300 0000 10B5     		push	{r4, lr}
 301              	.LCFI2:
 302              		.cfi_def_cfa_offset 8
 303              		.cfi_offset 4, -8
 304              		.cfi_offset 14, -4
 305 0002 84B0     		sub	sp, sp, #16
 306              	.LCFI3:
 307              		.cfi_def_cfa_offset 24
  29:Core/Src/uartParser.c **** 	char str[16];
 308              		.loc 1 29 2 is_stmt 1 view .LVU80
  30:Core/Src/uartParser.c **** 	uint8_t i = 0;
 309              		.loc 1 30 2 view .LVU81
 310              	.LVL29:
  31:Core/Src/uartParser.c **** 	while (i < 16) {
 311              		.loc 1 31 2 view .LVU82
  30:Core/Src/uartParser.c **** 	uint8_t i = 0;
 312              		.loc 1 30 10 is_stmt 0 view .LVU83
 313 0004 0023     		movs	r3, #0
  31:Core/Src/uartParser.c **** 	while (i < 16) {
 314              		.loc 1 31 8 view .LVU84
 315 0006 0AE0     		b	.L22
 316              	.LVL30:
 317              	.L23:
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 318              		.loc 1 32 3 is_stmt 1 view .LVU85
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 319              		.loc 1 32 25 is_stmt 0 view .LVU86
 320 0008 0100     		movs	r1, r0
 321 000a 1941     		asrs	r1, r1, r3
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 322              		.loc 1 32 31 view .LVU87
 323 000c 0122     		movs	r2, #1
 324 000e 0A40     		ands	r2, r1
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 325              		.loc 1 32 9 view .LVU88
 326 0010 0F21     		movs	r1, #15
 327 0012 C91A     		subs	r1, r1, r3
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 13


 328              		.loc 1 32 19 view .LVU89
 329 0014 3032     		adds	r2, r2, #48
  32:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 330              		.loc 1 32 13 view .LVU90
 331 0016 6C46     		mov	r4, sp
 332 0018 6254     		strb	r2, [r4, r1]
  33:Core/Src/uartParser.c **** 	  i++;
 333              		.loc 1 33 4 is_stmt 1 view .LVU91
  33:Core/Src/uartParser.c **** 	  i++;
 334              		.loc 1 33 5 is_stmt 0 view .LVU92
 335 001a 0133     		adds	r3, r3, #1
 336              	.LVL31:
  33:Core/Src/uartParser.c **** 	  i++;
 337              		.loc 1 33 5 view .LVU93
 338 001c DBB2     		uxtb	r3, r3
 339              	.LVL32:
 340              	.L22:
  31:Core/Src/uartParser.c **** 	while (i < 16) {
 341              		.loc 1 31 11 is_stmt 1 view .LVU94
 342 001e 0F2B     		cmp	r3, #15
 343 0020 F2D9     		bls	.L23
  35:Core/Src/uartParser.c **** 	transmitCharArray(str);
 344              		.loc 1 35 2 view .LVU95
 345 0022 6846     		mov	r0, sp
 346              	.LVL33:
  35:Core/Src/uartParser.c **** 	transmitCharArray(str);
 347              		.loc 1 35 2 is_stmt 0 view .LVU96
 348 0024 FFF7FEFF 		bl	transmitCharArray
 349              	.LVL34:
  36:Core/Src/uartParser.c **** }
 350              		.loc 1 36 1 view .LVU97
 351 0028 04B0     		add	sp, sp, #16
 352              		@ sp needed
 353 002a 10BD     		pop	{r4, pc}
 354              		.cfi_endproc
 355              	.LFE43:
 357              		.section	.rodata.parseCmd.str1.4,"aMS",%progbits,1
 358              		.align	2
 359              	.LC5:
 360 0000 6C656400 		.ascii	"led\000"
 361              		.align	2
 362              	.LC8:
 363 0004 72656400 		.ascii	"red\000"
 364              		.align	2
 365              	.LC11:
 366 0008 67726565 		.ascii	"green\000"
 366      6E00
 367 000e 0000     		.align	2
 368              	.LC13:
 369 0010 626C7565 		.ascii	"blue\000"
 369      00
 370 0015 000000   		.align	2
 371              	.LC15:
 372 0018 6F72616E 		.ascii	"orange\000"
 372      676500
 373 001f 00       		.align	2
 374              	.LC17:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 14


 375 0020 6F6E00   		.ascii	"on\000"
 376 0023 00       		.align	2
 377              	.LC20:
 378 0024 6F666600 		.ascii	"off\000"
 379              		.align	2
 380              	.LC22:
 381 0028 746F6767 		.ascii	"toggle\000"
 381      6C6500
 382 002f 00       		.align	2
 383              	.LC24:
 384 0030 626C696E 		.ascii	"blink\000"
 384      6B00
 385 0036 0000     		.align	2
 386              	.LC27:
 387 0038 426C696E 		.ascii	"Blink speed limited to 1500 ms\000"
 387      6B207370 
 387      65656420 
 387      6C696D69 
 387      74656420 
 388 0057 00       		.align	2
 389              	.LC29:
 390 0058 6D6F746F 		.ascii	"motor\000"
 390      7200
 391 005e 0000     		.align	2
 392              	.LC31:
 393 0060 73706565 		.ascii	"speed\000"
 393      6400
 394 0066 0000     		.align	2
 395              	.LC33:
 396 0068 4D6F746F 		.ascii	"Motor speed limited to 100 RPM\000"
 396      72207370 
 396      65656420 
 396      6C696D69 
 396      74656420 
 397              		.section	.text.parseCmd,"ax",%progbits
 398              		.align	1
 399              		.global	parseCmd
 400              		.syntax unified
 401              		.code	16
 402              		.thumb_func
 404              	parseCmd:
 405              	.LFB44:
  38:Core/Src/uartParser.c **** uint8_t parseCmd(void) {
 406              		.loc 1 38 24 is_stmt 1 view -0
 407              		.cfi_startproc
 408              		@ args = 0, pretend = 0, frame = 8
 409              		@ frame_needed = 0, uses_anonymous_args = 0
 410 0000 30B5     		push	{r4, r5, lr}
 411              	.LCFI4:
 412              		.cfi_def_cfa_offset 12
 413              		.cfi_offset 4, -12
 414              		.cfi_offset 5, -8
 415              		.cfi_offset 14, -4
 416 0002 83B0     		sub	sp, sp, #12
 417              	.LCFI5:
 418              		.cfi_def_cfa_offset 24
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 15


 419              		.loc 1 39 3 view .LVU99
 420              	.LVL35:
  40:Core/Src/uartParser.c ****   uint8_t speed = 0;
 421              		.loc 1 40 3 view .LVU100
  42:Core/Src/uartParser.c ****   volatile uint8_t strLen = strIndex + 1;
 422              		.loc 1 42 3 view .LVU101
  42:Core/Src/uartParser.c ****   volatile uint8_t strLen = strIndex + 1;
 423              		.loc 1 42 38 is_stmt 0 view .LVU102
 424 0004 954A     		ldr	r2, .L55
 425 0006 1378     		ldrb	r3, [r2]
 426 0008 0133     		adds	r3, r3, #1
 427 000a DBB2     		uxtb	r3, r3
  42:Core/Src/uartParser.c ****   volatile uint8_t strLen = strIndex + 1;
 428              		.loc 1 42 20 view .LVU103
 429 000c 6946     		mov	r1, sp
 430 000e CB71     		strb	r3, [r1, #7]
  43:Core/Src/uartParser.c ****   strIndex = 0;
 431              		.loc 1 43 3 is_stmt 1 view .LVU104
  43:Core/Src/uartParser.c ****   strIndex = 0;
 432              		.loc 1 43 12 is_stmt 0 view .LVU105
 433 0010 0023     		movs	r3, #0
 434 0012 1370     		strb	r3, [r2]
  44:Core/Src/uartParser.c ****   cmdStrIndex = 0;
 435              		.loc 1 44 3 is_stmt 1 view .LVU106
  44:Core/Src/uartParser.c ****   cmdStrIndex = 0;
 436              		.loc 1 44 15 is_stmt 0 view .LVU107
 437 0014 924A     		ldr	r2, .L55+4
 438 0016 1370     		strb	r3, [r2]
  45:Core/Src/uartParser.c ****   cmdIndex = 0;
 439              		.loc 1 45 3 is_stmt 1 view .LVU108
  45:Core/Src/uartParser.c ****   cmdIndex = 0;
 440              		.loc 1 45 12 is_stmt 0 view .LVU109
 441 0018 924A     		ldr	r2, .L55+8
 442 001a 1370     		strb	r3, [r2]
  46:Core/Src/uartParser.c ****   while (strIndex < strLen) {
 443              		.loc 1 46 3 is_stmt 1 view .LVU110
  46:Core/Src/uartParser.c ****   while (strIndex < strLen) {
 444              		.loc 1 46 9 is_stmt 0 view .LVU111
 445 001c 0CE0     		b	.L25
 446              	.L52:
  48:Core/Src/uartParser.c ****       cmdIndex++;
 447              		.loc 1 48 7 is_stmt 1 view .LVU112
  48:Core/Src/uartParser.c ****       cmdIndex++;
 448              		.loc 1 48 15 is_stmt 0 view .LVU113
 449 001e 914A     		ldr	r2, .L55+8
 450 0020 1378     		ldrb	r3, [r2]
 451 0022 0133     		adds	r3, r3, #1
 452 0024 DBB2     		uxtb	r3, r3
 453 0026 1370     		strb	r3, [r2]
  49:Core/Src/uartParser.c ****       cmdStrIndex = 0;
 454              		.loc 1 49 7 is_stmt 1 view .LVU114
  49:Core/Src/uartParser.c ****       cmdStrIndex = 0;
 455              		.loc 1 49 19 is_stmt 0 view .LVU115
 456 0028 8D4B     		ldr	r3, .L55+4
 457 002a 0022     		movs	r2, #0
 458 002c 1A70     		strb	r2, [r3]
 459              	.L27:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 16


  54:Core/Src/uartParser.c ****     strIndex++;
 460              		.loc 1 54 5 is_stmt 1 view .LVU116
  54:Core/Src/uartParser.c ****     strIndex++;
 461              		.loc 1 54 13 is_stmt 0 view .LVU117
 462 002e 8B4A     		ldr	r2, .L55
 463 0030 1378     		ldrb	r3, [r2]
 464 0032 0133     		adds	r3, r3, #1
 465 0034 DBB2     		uxtb	r3, r3
 466 0036 1370     		strb	r3, [r2]
 467              	.L25:
  46:Core/Src/uartParser.c ****   while (strIndex < strLen) {
 468              		.loc 1 46 19 is_stmt 1 view .LVU118
 469 0038 884B     		ldr	r3, .L55
 470 003a 1A78     		ldrb	r2, [r3]
 471 003c D2B2     		uxtb	r2, r2
 472 003e 6B46     		mov	r3, sp
 473 0040 0733     		adds	r3, r3, #7
 474 0042 1B78     		ldrb	r3, [r3]
 475 0044 DBB2     		uxtb	r3, r3
 476 0046 9A42     		cmp	r2, r3
 477 0048 1CD2     		bcs	.L51
  47:Core/Src/uartParser.c ****     if (tmpStr[strIndex] == ' ') {
 478              		.loc 1 47 5 view .LVU119
  47:Core/Src/uartParser.c ****     if (tmpStr[strIndex] == ' ') {
 479              		.loc 1 47 15 is_stmt 0 view .LVU120
 480 004a 844B     		ldr	r3, .L55
 481 004c 1B78     		ldrb	r3, [r3]
 482 004e DBB2     		uxtb	r3, r3
 483 0050 854A     		ldr	r2, .L55+12
 484 0052 D35C     		ldrb	r3, [r2, r3]
  47:Core/Src/uartParser.c ****     if (tmpStr[strIndex] == ' ') {
 485              		.loc 1 47 8 view .LVU121
 486 0054 202B     		cmp	r3, #32
 487 0056 E2D0     		beq	.L52
  51:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 488              		.loc 1 51 7 is_stmt 1 view .LVU122
  51:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 489              		.loc 1 51 42 is_stmt 0 view .LVU123
 490 0058 804B     		ldr	r3, .L55
 491 005a 1A78     		ldrb	r2, [r3]
 492 005c D2B2     		uxtb	r2, r2
  51:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 493              		.loc 1 51 20 view .LVU124
 494 005e 814B     		ldr	r3, .L55+8
 495 0060 1B78     		ldrb	r3, [r3]
 496 0062 7F49     		ldr	r1, .L55+4
 497 0064 0878     		ldrb	r0, [r1]
 498 0066 C0B2     		uxtb	r0, r0
  51:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 499              		.loc 1 51 42 view .LVU125
 500 0068 7F4C     		ldr	r4, .L55+12
 501 006a A45C     		ldrb	r4, [r4, r2]
 502 006c E4B2     		uxtb	r4, r4
  51:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 503              		.loc 1 51 34 view .LVU126
 504 006e 7F4A     		ldr	r2, .L55+16
 505 0070 9D00     		lsls	r5, r3, #2
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 17


 506 0072 5B19     		adds	r3, r3, r5
 507 0074 9B00     		lsls	r3, r3, #2
 508 0076 D218     		adds	r2, r2, r3
 509 0078 1454     		strb	r4, [r2, r0]
  52:Core/Src/uartParser.c ****       cmdStrIndex++;
 510              		.loc 1 52 7 is_stmt 1 view .LVU127
  52:Core/Src/uartParser.c ****       cmdStrIndex++;
 511              		.loc 1 52 18 is_stmt 0 view .LVU128
 512 007a 0B78     		ldrb	r3, [r1]
 513 007c 0133     		adds	r3, r3, #1
 514 007e DBB2     		uxtb	r3, r3
 515 0080 0B70     		strb	r3, [r1]
 516 0082 D4E7     		b	.L27
 517              	.L51:
  58:Core/Src/uartParser.c ****   if (strcmp(cmd[0], "led") == 0) {
 518              		.loc 1 58 3 is_stmt 1 view .LVU129
  58:Core/Src/uartParser.c ****   if (strcmp(cmd[0], "led") == 0) {
 519              		.loc 1 58 7 is_stmt 0 view .LVU130
 520 0084 7A49     		ldr	r1, .L55+20
 521 0086 7948     		ldr	r0, .L55+16
 522 0088 FFF7FEFF 		bl	strcmp
 523              	.LVL36:
  58:Core/Src/uartParser.c ****   if (strcmp(cmd[0], "led") == 0) {
 524              		.loc 1 58 6 discriminator 1 view .LVU131
 525 008c 0028     		cmp	r0, #0
 526 008e 00D0     		beq	.LCB425
 527 0090 8EE0     		b	.L29	@long jump
 528              	.LCB425:
  59:Core/Src/uartParser.c ****     commandOut |= 0xA000;
 529              		.loc 1 59 5 is_stmt 1 view .LVU132
  59:Core/Src/uartParser.c ****     commandOut |= 0xA000;
 530              		.loc 1 59 16 is_stmt 0 view .LVU133
 531 0092 784A     		ldr	r2, .L55+24
 532 0094 1388     		ldrh	r3, [r2]
 533 0096 7849     		ldr	r1, .L55+28
 534 0098 0B43     		orrs	r3, r1
 535 009a 9BB2     		uxth	r3, r3
 536 009c 1380     		strh	r3, [r2]
  61:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "red") == 0) {
 537              		.loc 1 61 5 is_stmt 1 view .LVU134
  61:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "red") == 0) {
 538              		.loc 1 61 9 is_stmt 0 view .LVU135
 539 009e 7749     		ldr	r1, .L55+32
 540 00a0 7748     		ldr	r0, .L55+36
 541 00a2 FFF7FEFF 		bl	strcmp
 542              	.LVL37:
  61:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "red") == 0) {
 543              		.loc 1 61 8 discriminator 1 view .LVU136
 544 00a6 0028     		cmp	r0, #0
 545 00a8 1CD1     		bne	.L30
  62:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 546              		.loc 1 62 7 is_stmt 1 view .LVU137
  62:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 547              		.loc 1 62 18 is_stmt 0 view .LVU138
 548 00aa 724A     		ldr	r2, .L55+24
 549 00ac 1388     		ldrh	r3, [r2]
 550 00ae 8021     		movs	r1, #128
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 18


 551 00b0 4900     		lsls	r1, r1, #1
 552 00b2 0B43     		orrs	r3, r1
 553 00b4 1380     		strh	r3, [r2]
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
 554              		.loc 1 39 11 view .LVU139
 555 00b6 0024     		movs	r4, #0
 556              	.L31:
 557              	.LVL38:
  73:Core/Src/uartParser.c ****     if (strcmp(cmd[2], "on") == 0) {
 558              		.loc 1 73 5 is_stmt 1 view .LVU140
  73:Core/Src/uartParser.c ****     if (strcmp(cmd[2], "on") == 0) {
 559              		.loc 1 73 9 is_stmt 0 view .LVU141
 560 00b8 7249     		ldr	r1, .L55+40
 561 00ba 7348     		ldr	r0, .L55+44
 562 00bc FFF7FEFF 		bl	strcmp
 563              	.LVL39:
  73:Core/Src/uartParser.c ****     if (strcmp(cmd[2], "on") == 0) {
 564              		.loc 1 73 8 discriminator 1 view .LVU142
 565 00c0 0028     		cmp	r0, #0
 566 00c2 3BD1     		bne	.L34
  74:Core/Src/uartParser.c ****       commandOut |= 0x0010;
 567              		.loc 1 74 7 is_stmt 1 view .LVU143
  74:Core/Src/uartParser.c ****       commandOut |= 0x0010;
 568              		.loc 1 74 18 is_stmt 0 view .LVU144
 569 00c4 6B4A     		ldr	r2, .L55+24
 570 00c6 1388     		ldrh	r3, [r2]
 571 00c8 1021     		movs	r1, #16
 572 00ca 0B43     		orrs	r3, r1
 573 00cc 9BB2     		uxth	r3, r3
 574 00ce 1380     		strh	r3, [r2]
  87:Core/Src/uartParser.c ****     if (speed == 255)
 575              		.loc 1 87 5 is_stmt 1 view .LVU145
 576              	.LVL40:
 577              	.L35:
  90:Core/Src/uartParser.c ****       if (speed > 15) {
 578              		.loc 1 90 7 view .LVU146
  90:Core/Src/uartParser.c ****       if (speed > 15) {
 579              		.loc 1 90 10 is_stmt 0 view .LVU147
 580 00d0 0F28     		cmp	r0, #15
 581 00d2 63D8     		bhi	.L53
  95:Core/Src/uartParser.c ****         commandOut |= speed;
 582              		.loc 1 95 9 is_stmt 1 view .LVU148
  95:Core/Src/uartParser.c ****         commandOut |= speed;
 583              		.loc 1 95 20 is_stmt 0 view .LVU149
 584 00d4 674A     		ldr	r2, .L55+24
 585 00d6 1388     		ldrh	r3, [r2]
 586 00d8 0343     		orrs	r3, r0
 587 00da 9BB2     		uxth	r3, r3
 588 00dc 1380     		strh	r3, [r2]
 589              	.L38:
 590              	.LVL41:
 124:Core/Src/uartParser.c ****   return error;
 591              		.loc 1 124 3 is_stmt 1 view .LVU150
 125:Core/Src/uartParser.c **** }
 592              		.loc 1 125 1 is_stmt 0 view .LVU151
 593 00de 2000     		movs	r0, r4
 594 00e0 03B0     		add	sp, sp, #12
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 19


 595              		@ sp needed
 596              	.LVL42:
 125:Core/Src/uartParser.c **** }
 597              		.loc 1 125 1 view .LVU152
 598 00e2 30BD     		pop	{r4, r5, pc}
 599              	.LVL43:
 600              	.L30:
  63:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "green") == 0) {
 601              		.loc 1 63 12 is_stmt 1 view .LVU153
  63:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "green") == 0) {
 602              		.loc 1 63 16 is_stmt 0 view .LVU154
 603 00e4 6949     		ldr	r1, .L55+48
 604 00e6 6648     		ldr	r0, .L55+36
 605 00e8 FFF7FEFF 		bl	strcmp
 606              	.LVL44:
  63:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "green") == 0) {
 607              		.loc 1 63 15 discriminator 1 view .LVU155
 608 00ec 0028     		cmp	r0, #0
 609 00ee 07D1     		bne	.L32
  64:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 610              		.loc 1 64 7 is_stmt 1 view .LVU156
  64:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 611              		.loc 1 64 18 is_stmt 0 view .LVU157
 612 00f0 604A     		ldr	r2, .L55+24
 613 00f2 1388     		ldrh	r3, [r2]
 614 00f4 8021     		movs	r1, #128
 615 00f6 8900     		lsls	r1, r1, #2
 616 00f8 0B43     		orrs	r3, r1
 617 00fa 1380     		strh	r3, [r2]
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
 618              		.loc 1 39 11 view .LVU158
 619 00fc 0024     		movs	r4, #0
 620 00fe DBE7     		b	.L31
 621              	.L32:
  65:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "blue") == 0) {
 622              		.loc 1 65 12 is_stmt 1 view .LVU159
  65:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "blue") == 0) {
 623              		.loc 1 65 16 is_stmt 0 view .LVU160
 624 0100 6349     		ldr	r1, .L55+52
 625 0102 5F48     		ldr	r0, .L55+36
 626 0104 FFF7FEFF 		bl	strcmp
 627              	.LVL45:
  65:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "blue") == 0) {
 628              		.loc 1 65 15 discriminator 1 view .LVU161
 629 0108 0028     		cmp	r0, #0
 630 010a 07D1     		bne	.L33
  66:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 631              		.loc 1 66 7 is_stmt 1 view .LVU162
  66:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 632              		.loc 1 66 18 is_stmt 0 view .LVU163
 633 010c 594A     		ldr	r2, .L55+24
 634 010e 1388     		ldrh	r3, [r2]
 635 0110 C021     		movs	r1, #192
 636 0112 8900     		lsls	r1, r1, #2
 637 0114 0B43     		orrs	r3, r1
 638 0116 1380     		strh	r3, [r2]
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 20


 639              		.loc 1 39 11 view .LVU164
 640 0118 0024     		movs	r4, #0
 641 011a CDE7     		b	.L31
 642              	.L33:
  67:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "orange") == 0) {
 643              		.loc 1 67 12 is_stmt 1 view .LVU165
  67:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "orange") == 0) {
 644              		.loc 1 67 16 is_stmt 0 view .LVU166
 645 011c 5D49     		ldr	r1, .L55+56
 646 011e 5848     		ldr	r0, .L55+36
 647 0120 FFF7FEFF 		bl	strcmp
 648              	.LVL46:
  67:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "orange") == 0) {
 649              		.loc 1 67 15 discriminator 1 view .LVU167
 650 0124 0028     		cmp	r0, #0
 651 0126 07D1     		bne	.L45
  68:Core/Src/uartParser.c ****       commandOut |= 0x0400;
 652              		.loc 1 68 7 is_stmt 1 view .LVU168
  68:Core/Src/uartParser.c ****       commandOut |= 0x0400;
 653              		.loc 1 68 18 is_stmt 0 view .LVU169
 654 0128 524A     		ldr	r2, .L55+24
 655 012a 1388     		ldrh	r3, [r2]
 656 012c 8021     		movs	r1, #128
 657 012e C900     		lsls	r1, r1, #3
 658 0130 0B43     		orrs	r3, r1
 659 0132 1380     		strh	r3, [r2]
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
 660              		.loc 1 39 11 view .LVU170
 661 0134 0024     		movs	r4, #0
 662 0136 BFE7     		b	.L31
 663              	.L45:
  70:Core/Src/uartParser.c ****       error = 1;
 664              		.loc 1 70 13 view .LVU171
 665 0138 0124     		movs	r4, #1
 666 013a BDE7     		b	.L31
 667              	.LVL47:
 668              	.L34:
  75:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "off") == 0) {
 669              		.loc 1 75 12 is_stmt 1 view .LVU172
  75:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "off") == 0) {
 670              		.loc 1 75 16 is_stmt 0 view .LVU173
 671 013c 5649     		ldr	r1, .L55+60
 672 013e 5248     		ldr	r0, .L55+44
 673 0140 FFF7FEFF 		bl	strcmp
 674              	.LVL48:
  75:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "off") == 0) {
 675              		.loc 1 75 15 discriminator 1 view .LVU174
 676 0144 0028     		cmp	r0, #0
 677 0146 06D1     		bne	.L36
  76:Core/Src/uartParser.c ****       commandOut |= 0x0020;
 678              		.loc 1 76 7 is_stmt 1 view .LVU175
  76:Core/Src/uartParser.c ****       commandOut |= 0x0020;
 679              		.loc 1 76 18 is_stmt 0 view .LVU176
 680 0148 4A4A     		ldr	r2, .L55+24
 681 014a 1388     		ldrh	r3, [r2]
 682 014c 2021     		movs	r1, #32
 683 014e 0B43     		orrs	r3, r1
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 21


 684 0150 9BB2     		uxth	r3, r3
 685 0152 1380     		strh	r3, [r2]
  87:Core/Src/uartParser.c ****     if (speed == 255)
 686              		.loc 1 87 5 is_stmt 1 view .LVU177
 687 0154 BCE7     		b	.L35
 688              	.L36:
  77:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "toggle") == 0) {
 689              		.loc 1 77 12 view .LVU178
  77:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "toggle") == 0) {
 690              		.loc 1 77 16 is_stmt 0 view .LVU179
 691 0156 5149     		ldr	r1, .L55+64
 692 0158 4B48     		ldr	r0, .L55+44
 693 015a FFF7FEFF 		bl	strcmp
 694              	.LVL49:
  77:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "toggle") == 0) {
 695              		.loc 1 77 15 discriminator 1 view .LVU180
 696 015e 0028     		cmp	r0, #0
 697 0160 06D1     		bne	.L37
  78:Core/Src/uartParser.c ****       commandOut |= 0x0030;
 698              		.loc 1 78 7 is_stmt 1 view .LVU181
  78:Core/Src/uartParser.c ****       commandOut |= 0x0030;
 699              		.loc 1 78 18 is_stmt 0 view .LVU182
 700 0162 444A     		ldr	r2, .L55+24
 701 0164 1388     		ldrh	r3, [r2]
 702 0166 3021     		movs	r1, #48
 703 0168 0B43     		orrs	r3, r1
 704 016a 9BB2     		uxth	r3, r3
 705 016c 1380     		strh	r3, [r2]
  87:Core/Src/uartParser.c ****     if (speed == 255)
 706              		.loc 1 87 5 is_stmt 1 view .LVU183
 707 016e AFE7     		b	.L35
 708              	.L37:
  79:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "blink") == 0) {
 709              		.loc 1 79 12 view .LVU184
  79:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "blink") == 0) {
 710              		.loc 1 79 16 is_stmt 0 view .LVU185
 711 0170 4B49     		ldr	r1, .L55+68
 712 0172 4548     		ldr	r0, .L55+44
 713 0174 FFF7FEFF 		bl	strcmp
 714              	.LVL50:
  79:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "blink") == 0) {
 715              		.loc 1 79 15 discriminator 1 view .LVU186
 716 0178 0028     		cmp	r0, #0
 717 017a 0CD1     		bne	.L46
  80:Core/Src/uartParser.c ****       commandOut |= 0x0040;
 718              		.loc 1 80 7 is_stmt 1 view .LVU187
  80:Core/Src/uartParser.c ****       commandOut |= 0x0040;
 719              		.loc 1 80 18 is_stmt 0 view .LVU188
 720 017c 3D4A     		ldr	r2, .L55+24
 721 017e 1388     		ldrh	r3, [r2]
 722 0180 4021     		movs	r1, #64
 723 0182 0B43     		orrs	r3, r1
 724 0184 9BB2     		uxth	r3, r3
 725 0186 1380     		strh	r3, [r2]
  81:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[3]);
 726              		.loc 1 81 7 is_stmt 1 view .LVU189
  81:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[3]);
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 22


 727              		.loc 1 81 15 is_stmt 0 view .LVU190
 728 0188 4648     		ldr	r0, .L55+72
 729 018a FFF7FEFF 		bl	convertSpeed
 730              	.LVL51:
  87:Core/Src/uartParser.c ****     if (speed == 255)
 731              		.loc 1 87 5 is_stmt 1 view .LVU191
  87:Core/Src/uartParser.c ****     if (speed == 255)
 732              		.loc 1 87 8 is_stmt 0 view .LVU192
 733 018e FF28     		cmp	r0, #255
 734 0190 9ED1     		bne	.L35
  88:Core/Src/uartParser.c ****       error = 1;
 735              		.loc 1 88 13 view .LVU193
 736 0192 0124     		movs	r4, #1
 737              	.LVL52:
  88:Core/Src/uartParser.c ****       error = 1;
 738              		.loc 1 88 13 view .LVU194
 739 0194 A3E7     		b	.L38
 740              	.LVL53:
 741              	.L46:
  40:Core/Src/uartParser.c ****   uint8_t speed = 0;
 742              		.loc 1 40 11 view .LVU195
 743 0196 0020     		movs	r0, #0
  83:Core/Src/uartParser.c ****       error = 1;
 744              		.loc 1 83 13 view .LVU196
 745 0198 0124     		movs	r4, #1
 746              	.LVL54:
  83:Core/Src/uartParser.c ****       error = 1;
 747              		.loc 1 83 13 view .LVU197
 748 019a 99E7     		b	.L35
 749              	.LVL55:
 750              	.L53:
  91:Core/Src/uartParser.c ****         transmitCharArray("Blink speed limited to 1500 ms");
 751              		.loc 1 91 9 is_stmt 1 view .LVU198
 752 019c 4248     		ldr	r0, .L55+76
 753 019e FFF7FEFF 		bl	transmitCharArray
 754              	.LVL56:
  92:Core/Src/uartParser.c ****         commandOut |= 15U;
 755              		.loc 1 92 9 view .LVU199
  92:Core/Src/uartParser.c ****         commandOut |= 15U;
 756              		.loc 1 92 20 is_stmt 0 view .LVU200
 757 01a2 344A     		ldr	r2, .L55+24
 758 01a4 1388     		ldrh	r3, [r2]
 759 01a6 0F21     		movs	r1, #15
 760 01a8 0B43     		orrs	r3, r1
 761 01aa 9BB2     		uxth	r3, r3
 762 01ac 1380     		strh	r3, [r2]
 763 01ae 96E7     		b	.L38
 764              	.LVL57:
 765              	.L29:
  97:Core/Src/uartParser.c ****   } else if (strcmp(cmd[0], "motor") == 0) {
 766              		.loc 1 97 10 is_stmt 1 view .LVU201
  97:Core/Src/uartParser.c ****   } else if (strcmp(cmd[0], "motor") == 0) {
 767              		.loc 1 97 14 is_stmt 0 view .LVU202
 768 01b0 3E49     		ldr	r1, .L55+80
 769 01b2 2E48     		ldr	r0, .L55+16
 770 01b4 FFF7FEFF 		bl	strcmp
 771              	.LVL58:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 23


  97:Core/Src/uartParser.c ****   } else if (strcmp(cmd[0], "motor") == 0) {
 772              		.loc 1 97 13 discriminator 1 view .LVU203
 773 01b8 0028     		cmp	r0, #0
 774 01ba 4AD1     		bne	.L48
  98:Core/Src/uartParser.c ****     commandOut |= 0xB000;
 775              		.loc 1 98 5 is_stmt 1 view .LVU204
  98:Core/Src/uartParser.c ****     commandOut |= 0xB000;
 776              		.loc 1 98 16 is_stmt 0 view .LVU205
 777 01bc 2D4A     		ldr	r2, .L55+24
 778 01be 1388     		ldrh	r3, [r2]
 779 01c0 3B49     		ldr	r1, .L55+84
 780 01c2 0B43     		orrs	r3, r1
 781 01c4 9BB2     		uxth	r3, r3
 782 01c6 1380     		strh	r3, [r2]
 100:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "on") == 0) {
 783              		.loc 1 100 5 is_stmt 1 view .LVU206
 100:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "on") == 0) {
 784              		.loc 1 100 9 is_stmt 0 view .LVU207
 785 01c8 2E49     		ldr	r1, .L55+40
 786 01ca 2D48     		ldr	r0, .L55+36
 787 01cc FFF7FEFF 		bl	strcmp
 788              	.LVL59:
 100:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "on") == 0) {
 789              		.loc 1 100 8 discriminator 1 view .LVU208
 790 01d0 0028     		cmp	r0, #0
 791 01d2 13D1     		bne	.L40
 101:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 792              		.loc 1 101 7 is_stmt 1 view .LVU209
 101:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 793              		.loc 1 101 18 is_stmt 0 view .LVU210
 794 01d4 274A     		ldr	r2, .L55+24
 795 01d6 1388     		ldrh	r3, [r2]
 796 01d8 8021     		movs	r1, #128
 797 01da 4900     		lsls	r1, r1, #1
 798 01dc 0B43     		orrs	r3, r1
 799 01de 1380     		strh	r3, [r2]
 102:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 800              		.loc 1 102 7 is_stmt 1 view .LVU211
 102:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 801              		.loc 1 102 15 is_stmt 0 view .LVU212
 802 01e0 2948     		ldr	r0, .L55+44
 803 01e2 FFF7FEFF 		bl	convertSpeed
 804              	.LVL60:
 805              	.L41:
 112:Core/Src/uartParser.c ****     if (speed == 255)
 806              		.loc 1 112 5 is_stmt 1 view .LVU213
 112:Core/Src/uartParser.c ****     if (speed == 255)
 807              		.loc 1 112 8 is_stmt 0 view .LVU214
 808 01e6 FF28     		cmp	r0, #255
 809 01e8 35D0     		beq	.L50
 810 01ea 0024     		movs	r4, #0
 811              	.LVL61:
 812              	.L43:
 115:Core/Src/uartParser.c ****       if (speed > 100) {
 813              		.loc 1 115 7 is_stmt 1 view .LVU215
 115:Core/Src/uartParser.c ****       if (speed > 100) {
 814              		.loc 1 115 10 is_stmt 0 view .LVU216
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 24


 815 01ec 6428     		cmp	r0, #100
 816 01ee 26D8     		bhi	.L54
 120:Core/Src/uartParser.c ****         commandOut |= speed;
 817              		.loc 1 120 9 is_stmt 1 view .LVU217
 120:Core/Src/uartParser.c ****         commandOut |= speed;
 818              		.loc 1 120 20 is_stmt 0 view .LVU218
 819 01f0 204A     		ldr	r2, .L55+24
 820 01f2 1388     		ldrh	r3, [r2]
 821 01f4 0343     		orrs	r3, r0
 822 01f6 9BB2     		uxth	r3, r3
 823 01f8 1380     		strh	r3, [r2]
 824 01fa 70E7     		b	.L38
 825              	.LVL62:
 826              	.L40:
 103:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "off") == 0) {
 827              		.loc 1 103 12 is_stmt 1 view .LVU219
 103:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "off") == 0) {
 828              		.loc 1 103 16 is_stmt 0 view .LVU220
 829 01fc 2649     		ldr	r1, .L55+60
 830 01fe 2048     		ldr	r0, .L55+36
 831 0200 FFF7FEFF 		bl	strcmp
 832              	.LVL63:
 103:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "off") == 0) {
 833              		.loc 1 103 15 discriminator 1 view .LVU221
 834 0204 0028     		cmp	r0, #0
 835 0206 07D1     		bne	.L42
 104:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 836              		.loc 1 104 7 is_stmt 1 view .LVU222
 104:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 837              		.loc 1 104 18 is_stmt 0 view .LVU223
 838 0208 1A4A     		ldr	r2, .L55+24
 839 020a 1388     		ldrh	r3, [r2]
 840 020c 8021     		movs	r1, #128
 841 020e 8900     		lsls	r1, r1, #2
 842 0210 0B43     		orrs	r3, r1
 843 0212 1380     		strh	r3, [r2]
 112:Core/Src/uartParser.c ****     if (speed == 255)
 844              		.loc 1 112 5 is_stmt 1 view .LVU224
  39:Core/Src/uartParser.c ****   uint8_t error = 0;
 845              		.loc 1 39 11 is_stmt 0 view .LVU225
 846 0214 0024     		movs	r4, #0
 847 0216 E9E7     		b	.L43
 848              	.L42:
 105:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "speed") == 0) {
 849              		.loc 1 105 12 is_stmt 1 view .LVU226
 105:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "speed") == 0) {
 850              		.loc 1 105 16 is_stmt 0 view .LVU227
 851 0218 2649     		ldr	r1, .L55+88
 852 021a 1948     		ldr	r0, .L55+36
 853 021c FFF7FEFF 		bl	strcmp
 854              	.LVL64:
 105:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "speed") == 0) {
 855              		.loc 1 105 15 discriminator 1 view .LVU228
 856 0220 0028     		cmp	r0, #0
 857 0222 09D1     		bne	.L49
 106:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 858              		.loc 1 106 7 is_stmt 1 view .LVU229
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 25


 106:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 859              		.loc 1 106 18 is_stmt 0 view .LVU230
 860 0224 134A     		ldr	r2, .L55+24
 861 0226 1388     		ldrh	r3, [r2]
 862 0228 C021     		movs	r1, #192
 863 022a 8900     		lsls	r1, r1, #2
 864 022c 0B43     		orrs	r3, r1
 865 022e 1380     		strh	r3, [r2]
 107:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 866              		.loc 1 107 7 is_stmt 1 view .LVU231
 107:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 867              		.loc 1 107 15 is_stmt 0 view .LVU232
 868 0230 1548     		ldr	r0, .L55+44
 869 0232 FFF7FEFF 		bl	convertSpeed
 870              	.LVL65:
 107:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 871              		.loc 1 107 15 view .LVU233
 872 0236 D6E7     		b	.L41
 873              	.LVL66:
 874              	.L49:
  40:Core/Src/uartParser.c ****   uint8_t speed = 0;
 875              		.loc 1 40 11 view .LVU234
 876 0238 0020     		movs	r0, #0
 109:Core/Src/uartParser.c ****       error = 1;
 877              		.loc 1 109 13 view .LVU235
 878 023a 0124     		movs	r4, #1
 879 023c D6E7     		b	.L43
 880              	.LVL67:
 881              	.L54:
 116:Core/Src/uartParser.c ****         transmitCharArray("Motor speed limited to 100 RPM");
 882              		.loc 1 116 9 is_stmt 1 view .LVU236
 883 023e 1E48     		ldr	r0, .L55+92
 884 0240 FFF7FEFF 		bl	transmitCharArray
 885              	.LVL68:
 117:Core/Src/uartParser.c ****         commandOut |= 100U;
 886              		.loc 1 117 9 view .LVU237
 117:Core/Src/uartParser.c ****         commandOut |= 100U;
 887              		.loc 1 117 20 is_stmt 0 view .LVU238
 888 0244 0B4A     		ldr	r2, .L55+24
 889 0246 1388     		ldrh	r3, [r2]
 890 0248 6421     		movs	r1, #100
 891 024a 0B43     		orrs	r3, r1
 892 024c 9BB2     		uxth	r3, r3
 893 024e 1380     		strh	r3, [r2]
 894 0250 45E7     		b	.L38
 895              	.LVL69:
 896              	.L48:
 122:Core/Src/uartParser.c ****     error = 1;
 897              		.loc 1 122 11 view .LVU239
 898 0252 0124     		movs	r4, #1
 899 0254 43E7     		b	.L38
 900              	.LVL70:
 901              	.L50:
 113:Core/Src/uartParser.c ****       error = 1;
 902              		.loc 1 113 13 view .LVU240
 903 0256 0124     		movs	r4, #1
 904 0258 41E7     		b	.L38
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 26


 905              	.L56:
 906 025a C046     		.align	2
 907              	.L55:
 908 025c 00000000 		.word	strIndex
 909 0260 00000000 		.word	cmdStrIndex
 910 0264 00000000 		.word	cmdIndex
 911 0268 00000000 		.word	tmpStr
 912 026c 00000000 		.word	cmd
 913 0270 00000000 		.word	.LC5
 914 0274 00000000 		.word	commandOut
 915 0278 00A0FFFF 		.word	-24576
 916 027c 04000000 		.word	.LC8
 917 0280 14000000 		.word	cmd+20
 918 0284 20000000 		.word	.LC17
 919 0288 28000000 		.word	cmd+40
 920 028c 08000000 		.word	.LC11
 921 0290 10000000 		.word	.LC13
 922 0294 18000000 		.word	.LC15
 923 0298 24000000 		.word	.LC20
 924 029c 28000000 		.word	.LC22
 925 02a0 30000000 		.word	.LC24
 926 02a4 3C000000 		.word	cmd+60
 927 02a8 38000000 		.word	.LC27
 928 02ac 58000000 		.word	.LC29
 929 02b0 00B0FFFF 		.word	-20480
 930 02b4 60000000 		.word	.LC31
 931 02b8 68000000 		.word	.LC33
 932              		.cfi_endproc
 933              	.LFE44:
 935              		.section	.rodata.StartParseUartTask.str1.4,"aMS",%progbits,1
 936              		.align	2
 937              	.LC38:
 938 0000 50757368 		.ascii	"Push command to queue success.\012\000"
 938      20636F6D 
 938      6D616E64 
 938      20746F20 
 938      71756575 
 939              		.align	2
 940              	.LC41:
 941 0020 4661696C 		.ascii	"Fail to push command to queue, try again.\012\000"
 941      20746F20 
 941      70757368 
 941      20636F6D 
 941      6D616E64 
 942 004b 00       		.align	2
 943              	.LC43:
 944 004c 436F6D6D 		.ascii	"Command not recognized\000"
 944      616E6420 
 944      6E6F7420 
 944      7265636F 
 944      676E697A 
 945 0063 00       		.align	2
 946              	.LC47:
 947 0064 436F6D6D 		.ascii	"Command is too long!\000"
 947      616E6420 
 947      69732074 
 947      6F6F206C 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 27


 947      6F6E6721 
 948              		.section	.text.StartParseUartTask,"ax",%progbits
 949              		.align	1
 950              		.global	StartParseUartTask
 951              		.syntax unified
 952              		.code	16
 953              		.thumb_func
 955              	StartParseUartTask:
 956              	.LFB46:
 169:Core/Src/uartParser.c **** void StartParseUartTask(void *argument) {
 957              		.loc 1 169 41 is_stmt 1 view -0
 958              		.cfi_startproc
 959              		@ args = 0, pretend = 0, frame = 8
 960              		@ frame_needed = 0, uses_anonymous_args = 0
 961              	.LVL71:
 169:Core/Src/uartParser.c **** void StartParseUartTask(void *argument) {
 962              		.loc 1 169 41 is_stmt 0 view .LVU242
 963 0000 10B5     		push	{r4, lr}
 964              	.LCFI6:
 965              		.cfi_def_cfa_offset 8
 966              		.cfi_offset 4, -8
 967              		.cfi_offset 14, -4
 968 0002 82B0     		sub	sp, sp, #8
 969              	.LCFI7:
 970              		.cfi_def_cfa_offset 16
 971 0004 41E0     		b	.L72
 972              	.LVL72:
 973              	.L74:
 974              	.LBB8:
 975              	.LBB9:
 184:Core/Src/uartParser.c ****         uint8_t error = parseCmd();
 976              		.loc 1 184 9 is_stmt 1 view .LVU243
 184:Core/Src/uartParser.c ****         uint8_t error = parseCmd();
 977              		.loc 1 184 25 is_stmt 0 view .LVU244
 978 0006 FFF7FEFF 		bl	parseCmd
 979              	.LVL73:
 186:Core/Src/uartParser.c ****         if (error == 0) {
 980              		.loc 1 186 9 is_stmt 1 view .LVU245
 186:Core/Src/uartParser.c ****         if (error == 0) {
 981              		.loc 1 186 12 is_stmt 0 view .LVU246
 982 000a 0028     		cmp	r0, #0
 983 000c 18D1     		bne	.L61
 188:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 984              		.loc 1 188 11 is_stmt 1 view .LVU247
 188:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 985              		.loc 1 188 15 is_stmt 0 view .LVU248
 986 000e 474B     		ldr	r3, .L75
 987 0010 1988     		ldrh	r1, [r3]
 988 0012 89B2     		uxth	r1, r1
 989 0014 464B     		ldr	r3, .L75+4
 990 0016 1868     		ldr	r0, [r3]
 991              	.LVL74:
 188:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 992              		.loc 1 188 15 view .LVU249
 993 0018 FFF7FEFF 		bl	queuePush
 994              	.LVL75:
 188:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 28


 995              		.loc 1 188 14 discriminator 1 view .LVU250
 996 001c 0130     		adds	r0, r0, #1
 997 001e 0BD0     		beq	.L62
 189:Core/Src/uartParser.c ****             transmitCharArray("Push command to queue success.\n");
 998              		.loc 1 189 13 is_stmt 1 view .LVU251
 999 0020 4448     		ldr	r0, .L75+8
 1000 0022 FFF7FEFF 		bl	transmitCharArray
 1001              	.LVL76:
 190:Core/Src/uartParser.c ****             transmitCharArray(tmpStr);
 1002              		.loc 1 190 13 view .LVU252
 1003 0026 4448     		ldr	r0, .L75+12
 1004 0028 FFF7FEFF 		bl	transmitCharArray
 1005              	.LVL77:
 191:Core/Src/uartParser.c ****             sendUint16BinToUart(commandOut);
 1006              		.loc 1 191 13 view .LVU253
 1007 002c 3F4B     		ldr	r3, .L75
 1008 002e 1888     		ldrh	r0, [r3]
 1009 0030 80B2     		uxth	r0, r0
 1010 0032 FFF7FEFF 		bl	sendUint16BinToUart
 1011              	.LVL78:
 1012 0036 09E0     		b	.L63
 1013              	.L62:
 193:Core/Src/uartParser.c ****             transmitCharArray("Fail to push command to queue, try again.\n");
 1014              		.loc 1 193 13 view .LVU254
 1015 0038 4048     		ldr	r0, .L75+16
 1016 003a FFF7FEFF 		bl	transmitCharArray
 1017              	.LVL79:
 1018 003e 05E0     		b	.L63
 1019              	.LVL80:
 1020              	.L61:
 197:Core/Src/uartParser.c ****           transmitCharArray("Command not recognized");
 1021              		.loc 1 197 11 view .LVU255
 1022 0040 3F48     		ldr	r0, .L75+20
 1023              	.LVL81:
 197:Core/Src/uartParser.c ****           transmitCharArray("Command not recognized");
 1024              		.loc 1 197 11 is_stmt 0 view .LVU256
 1025 0042 FFF7FEFF 		bl	transmitCharArray
 1026              	.LVL82:
 198:Core/Src/uartParser.c ****           transmitCharArray(tmpStr);
 1027              		.loc 1 198 11 is_stmt 1 view .LVU257
 1028 0046 3C48     		ldr	r0, .L75+12
 1029 0048 FFF7FEFF 		bl	transmitCharArray
 1030              	.LVL83:
 1031              	.L63:
 202:Core/Src/uartParser.c ****         strIndex = 0;
 1032              		.loc 1 202 9 view .LVU258
 202:Core/Src/uartParser.c ****         strIndex = 0;
 1033              		.loc 1 202 18 is_stmt 0 view .LVU259
 1034 004c 3D4B     		ldr	r3, .L75+24
 1035 004e 0022     		movs	r2, #0
 1036 0050 1A70     		strb	r2, [r3]
 203:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1037              		.loc 1 203 9 is_stmt 1 view .LVU260
 1038              	.LBB10:
 203:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1039              		.loc 1 203 14 view .LVU261
 1040              	.LVL84:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 29


 203:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1041              		.loc 1 203 9 is_stmt 0 view .LVU262
 1042 0052 0DE0     		b	.L64
 1043              	.LVL85:
 1044              	.L65:
 204:Core/Src/uartParser.c ****           tmpStr[i] = '\0';
 1045              		.loc 1 204 11 is_stmt 1 view .LVU263
 204:Core/Src/uartParser.c ****           tmpStr[i] = '\0';
 1046              		.loc 1 204 21 is_stmt 0 view .LVU264
 1047 0054 384B     		ldr	r3, .L75+12
 1048 0056 0021     		movs	r1, #0
 1049 0058 9954     		strb	r1, [r3, r2]
 205:Core/Src/uartParser.c ****           cmd[0][i] = '\0';
 1050              		.loc 1 205 11 is_stmt 1 view .LVU265
 205:Core/Src/uartParser.c ****           cmd[0][i] = '\0';
 1051              		.loc 1 205 21 is_stmt 0 view .LVU266
 1052 005a 3B4B     		ldr	r3, .L75+28
 1053 005c 9954     		strb	r1, [r3, r2]
 206:Core/Src/uartParser.c ****           cmd[1][i] = '\0';
 1054              		.loc 1 206 11 is_stmt 1 view .LVU267
 206:Core/Src/uartParser.c ****           cmd[1][i] = '\0';
 1055              		.loc 1 206 21 is_stmt 0 view .LVU268
 1056 005e 9B18     		adds	r3, r3, r2
 1057 0060 1975     		strb	r1, [r3, #20]
 207:Core/Src/uartParser.c ****           cmd[2][i] = '\0';
 1058              		.loc 1 207 11 is_stmt 1 view .LVU269
 207:Core/Src/uartParser.c ****           cmd[2][i] = '\0';
 1059              		.loc 1 207 21 is_stmt 0 view .LVU270
 1060 0062 1800     		movs	r0, r3
 1061 0064 2830     		adds	r0, r0, #40
 1062 0066 0170     		strb	r1, [r0]
 208:Core/Src/uartParser.c ****           cmd[3][i] = '\0';
 1063              		.loc 1 208 11 is_stmt 1 view .LVU271
 208:Core/Src/uartParser.c ****           cmd[3][i] = '\0';
 1064              		.loc 1 208 21 is_stmt 0 view .LVU272
 1065 0068 3C33     		adds	r3, r3, #60
 1066 006a 1970     		strb	r1, [r3]
 203:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1067              		.loc 1 203 47 is_stmt 1 discriminator 3 view .LVU273
 1068 006c 0132     		adds	r2, r2, #1
 1069              	.LVL86:
 203:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1070              		.loc 1 203 47 is_stmt 0 discriminator 3 view .LVU274
 1071 006e D2B2     		uxtb	r2, r2
 1072              	.LVL87:
 1073              	.L64:
 203:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 1074              		.loc 1 203 31 is_stmt 1 discriminator 1 view .LVU275
 1075 0070 132A     		cmp	r2, #19
 1076 0072 EFD9     		bls	.L65
 1077              	.LBE10:
 212:Core/Src/uartParser.c ****         commandOut = 0;
 1078              		.loc 1 212 9 view .LVU276
 212:Core/Src/uartParser.c ****         commandOut = 0;
 1079              		.loc 1 212 20 is_stmt 0 view .LVU277
 1080 0074 2D4B     		ldr	r3, .L75
 1081 0076 0022     		movs	r2, #0
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 30


 1082              	.LVL88:
 212:Core/Src/uartParser.c ****         commandOut = 0;
 1083              		.loc 1 212 20 view .LVU278
 1084 0078 1A80     		strh	r2, [r3]
 213:Core/Src/uartParser.c ****         break;
 1085              		.loc 1 213 9 is_stmt 1 view .LVU279
 1086              	.LVL89:
 1087              	.L66:
 213:Core/Src/uartParser.c ****         break;
 1088              		.loc 1 213 9 is_stmt 0 view .LVU280
 1089              	.LBE9:
 1090              	.LBE8:
 235:Core/Src/uartParser.c ****     uartStatus = 0;
 1091              		.loc 1 235 5 is_stmt 1 view .LVU281
 235:Core/Src/uartParser.c ****     uartStatus = 0;
 1092              		.loc 1 235 16 is_stmt 0 view .LVU282
 1093 007a 344B     		ldr	r3, .L75+32
 1094 007c 0022     		movs	r2, #0
 1095 007e 1A70     		strb	r2, [r3]
 237:Core/Src/uartParser.c ****     USART3->CR1 |= USART_CR1_RXNEIE;
 1096              		.loc 1 237 5 is_stmt 1 view .LVU283
 237:Core/Src/uartParser.c ****     USART3->CR1 |= USART_CR1_RXNEIE;
 1097              		.loc 1 237 11 is_stmt 0 view .LVU284
 1098 0080 334A     		ldr	r2, .L75+36
 1099 0082 1368     		ldr	r3, [r2]
 237:Core/Src/uartParser.c ****     USART3->CR1 |= USART_CR1_RXNEIE;
 1100              		.loc 1 237 17 view .LVU285
 1101 0084 2021     		movs	r1, #32
 1102 0086 0B43     		orrs	r3, r1
 1103 0088 1360     		str	r3, [r2]
 172:Core/Src/uartParser.c ****   while (1) {
 1104              		.loc 1 172 9 is_stmt 1 view .LVU286
 1105              	.L72:
 172:Core/Src/uartParser.c ****   while (1) {
 1106              		.loc 1 172 3 view .LVU287
 174:Core/Src/uartParser.c ****     osSemaphoreAcquire(binarySem02UartParserHandle, osWaitForever);
 1107              		.loc 1 174 5 view .LVU288
 1108 008a 0121     		movs	r1, #1
 1109 008c 314B     		ldr	r3, .L75+40
 1110 008e 1868     		ldr	r0, [r3]
 1111 0090 4942     		rsbs	r1, r1, #0
 1112 0092 FFF7FEFF 		bl	osSemaphoreAcquire
 1113              	.LVL90:
 1114 0096 0DE0     		b	.L59
 1115              	.L67:
 1116              	.LBB12:
 216:Core/Src/uartParser.c ****           if (strIndex > 0) {
 1117              		.loc 1 216 11 view .LVU289
 216:Core/Src/uartParser.c ****           if (strIndex > 0) {
 1118              		.loc 1 216 24 is_stmt 0 view .LVU290
 1119 0098 2A4B     		ldr	r3, .L75+24
 1120 009a 1B78     		ldrb	r3, [r3]
 216:Core/Src/uartParser.c ****           if (strIndex > 0) {
 1121              		.loc 1 216 14 view .LVU291
 1122 009c 002B     		cmp	r3, #0
 1123 009e 09D0     		beq	.L59
 217:Core/Src/uartParser.c ****             strIndex -= 1;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 31


 1124              		.loc 1 217 13 is_stmt 1 view .LVU292
 217:Core/Src/uartParser.c ****             strIndex -= 1;
 1125              		.loc 1 217 22 is_stmt 0 view .LVU293
 1126 00a0 284A     		ldr	r2, .L75+24
 1127 00a2 1378     		ldrb	r3, [r2]
 1128 00a4 013B     		subs	r3, r3, #1
 1129 00a6 DBB2     		uxtb	r3, r3
 1130 00a8 1370     		strb	r3, [r2]
 218:Core/Src/uartParser.c ****             tmpStr[strIndex] = '\0';
 1131              		.loc 1 218 13 is_stmt 1 view .LVU294
 218:Core/Src/uartParser.c ****             tmpStr[strIndex] = '\0';
 1132              		.loc 1 218 19 is_stmt 0 view .LVU295
 1133 00aa 1378     		ldrb	r3, [r2]
 1134 00ac DBB2     		uxtb	r3, r3
 218:Core/Src/uartParser.c ****             tmpStr[strIndex] = '\0';
 1135              		.loc 1 218 30 view .LVU296
 1136 00ae 224A     		ldr	r2, .L75+12
 1137 00b0 0021     		movs	r1, #0
 1138 00b2 D154     		strb	r1, [r2, r3]
 1139              	.L59:
 178:Core/Src/uartParser.c **** 	    }
 1140              		.loc 1 178 6 is_stmt 1 view .LVU297
 177:Core/Src/uartParser.c ****       while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1141              		.loc 1 177 44 discriminator 1 view .LVU298
 177:Core/Src/uartParser.c ****       while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1142              		.loc 1 177 20 is_stmt 0 discriminator 1 view .LVU299
 1143 00b4 264B     		ldr	r3, .L75+36
 1144 00b6 DB69     		ldr	r3, [r3, #28]
 177:Core/Src/uartParser.c ****       while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1145              		.loc 1 177 44 discriminator 1 view .LVU300
 1146 00b8 9B06     		lsls	r3, r3, #26
 1147 00ba FBD5     		bpl	.L59
 180:Core/Src/uartParser.c **** 	    volatile uint8_t usartReceivedData = USART3->RDR;
 1148              		.loc 1 180 6 is_stmt 1 view .LVU301
 180:Core/Src/uartParser.c **** 	    volatile uint8_t usartReceivedData = USART3->RDR;
 1149              		.loc 1 180 49 is_stmt 0 view .LVU302
 1150 00bc 244B     		ldr	r3, .L75+36
 1151 00be 9B8C     		ldrh	r3, [r3, #36]
 180:Core/Src/uartParser.c **** 	    volatile uint8_t usartReceivedData = USART3->RDR;
 1152              		.loc 1 180 23 view .LVU303
 1153 00c0 DBB2     		uxtb	r3, r3
 1154 00c2 6A46     		mov	r2, sp
 1155 00c4 D41D     		adds	r4, r2, #7
 1156 00c6 D371     		strb	r3, [r2, #7]
 181:Core/Src/uartParser.c ****       transmitOneChar(usartReceivedData);
 1157              		.loc 1 181 7 is_stmt 1 view .LVU304
 1158 00c8 D079     		ldrb	r0, [r2, #7]
 1159 00ca C0B2     		uxtb	r0, r0
 1160 00cc FFF7FEFF 		bl	transmitOneChar
 1161              	.LVL91:
 183:Core/Src/uartParser.c **** 	    if (usartReceivedData == '\r') {
 1162              		.loc 1 183 6 view .LVU305
 183:Core/Src/uartParser.c **** 	    if (usartReceivedData == '\r') {
 1163              		.loc 1 183 28 is_stmt 0 view .LVU306
 1164 00d0 2378     		ldrb	r3, [r4]
 183:Core/Src/uartParser.c **** 	    if (usartReceivedData == '\r') {
 1165              		.loc 1 183 9 view .LVU307
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 32


 1166 00d2 0D2B     		cmp	r3, #13
 1167 00d4 97D0     		beq	.L74
 215:Core/Src/uartParser.c **** 	    } else if (usartReceivedData == 8 || usartReceivedData == 127) {
 1168              		.loc 1 215 13 is_stmt 1 view .LVU308
 215:Core/Src/uartParser.c **** 	    } else if (usartReceivedData == 8 || usartReceivedData == 127) {
 1169              		.loc 1 215 35 is_stmt 0 view .LVU309
 1170 00d6 6B46     		mov	r3, sp
 1171 00d8 0733     		adds	r3, r3, #7
 1172 00da 1B78     		ldrb	r3, [r3]
 215:Core/Src/uartParser.c **** 	    } else if (usartReceivedData == 8 || usartReceivedData == 127) {
 1173              		.loc 1 215 16 view .LVU310
 1174 00dc 082B     		cmp	r3, #8
 1175 00de DBD0     		beq	.L67
 215:Core/Src/uartParser.c **** 	    } else if (usartReceivedData == 8 || usartReceivedData == 127) {
 1176              		.loc 1 215 61 discriminator 1 view .LVU311
 1177 00e0 6B46     		mov	r3, sp
 1178 00e2 0733     		adds	r3, r3, #7
 1179 00e4 1B78     		ldrb	r3, [r3]
 215:Core/Src/uartParser.c **** 	    } else if (usartReceivedData == 8 || usartReceivedData == 127) {
 1180              		.loc 1 215 40 discriminator 1 view .LVU312
 1181 00e6 7F2B     		cmp	r3, #127
 1182 00e8 D6D0     		beq	.L67
 222:Core/Src/uartParser.c ****         tmpStr[strIndex] = usartReceivedData;
 1183              		.loc 1 222 9 is_stmt 1 view .LVU313
 222:Core/Src/uartParser.c ****         tmpStr[strIndex] = usartReceivedData;
 1184              		.loc 1 222 15 is_stmt 0 view .LVU314
 1185 00ea 164A     		ldr	r2, .L75+24
 1186 00ec 1378     		ldrb	r3, [r2]
 1187 00ee DBB2     		uxtb	r3, r3
 222:Core/Src/uartParser.c ****         tmpStr[strIndex] = usartReceivedData;
 1188              		.loc 1 222 26 view .LVU315
 1189 00f0 6946     		mov	r1, sp
 1190 00f2 0731     		adds	r1, r1, #7
 1191 00f4 0978     		ldrb	r1, [r1]
 1192 00f6 C9B2     		uxtb	r1, r1
 1193 00f8 0F48     		ldr	r0, .L75+12
 1194 00fa C154     		strb	r1, [r0, r3]
 223:Core/Src/uartParser.c ****         strIndex += 1;
 1195              		.loc 1 223 9 is_stmt 1 view .LVU316
 223:Core/Src/uartParser.c ****         strIndex += 1;
 1196              		.loc 1 223 18 is_stmt 0 view .LVU317
 1197 00fc 1378     		ldrb	r3, [r2]
 1198 00fe 0133     		adds	r3, r3, #1
 1199 0100 DBB2     		uxtb	r3, r3
 1200 0102 1370     		strb	r3, [r2]
 225:Core/Src/uartParser.c ****         if (strIndex == TMP_STR_LEN) {
 1201              		.loc 1 225 9 is_stmt 1 view .LVU318
 225:Core/Src/uartParser.c ****         if (strIndex == TMP_STR_LEN) {
 1202              		.loc 1 225 22 is_stmt 0 view .LVU319
 1203 0104 1378     		ldrb	r3, [r2]
 225:Core/Src/uartParser.c ****         if (strIndex == TMP_STR_LEN) {
 1204              		.loc 1 225 12 view .LVU320
 1205 0106 142B     		cmp	r3, #20
 1206 0108 D4D1     		bne	.L59
 226:Core/Src/uartParser.c ****       	  transmitCharArray("Command is too long!");
 1207              		.loc 1 226 10 is_stmt 1 view .LVU321
 1208 010a 1348     		ldr	r0, .L75+44
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 33


 1209 010c FFF7FEFF 		bl	transmitCharArray
 1210              	.LVL92:
 227:Core/Src/uartParser.c ****           strIndex = 0;
 1211              		.loc 1 227 11 view .LVU322
 227:Core/Src/uartParser.c ****           strIndex = 0;
 1212              		.loc 1 227 20 is_stmt 0 view .LVU323
 1213 0110 0C4B     		ldr	r3, .L75+24
 1214 0112 0022     		movs	r2, #0
 1215 0114 1A70     		strb	r2, [r3]
 228:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1216              		.loc 1 228 11 is_stmt 1 view .LVU324
 1217              	.LBB11:
 228:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1218              		.loc 1 228 16 view .LVU325
 1219              	.LVL93:
 228:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1220              		.loc 1 228 24 is_stmt 0 view .LVU326
 1221 0116 0023     		movs	r3, #0
 228:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1222              		.loc 1 228 11 view .LVU327
 1223 0118 04E0     		b	.L70
 1224              	.LVL94:
 1225              	.L71:
 229:Core/Src/uartParser.c ****             tmpStr[i] = '\0';
 1226              		.loc 1 229 13 is_stmt 1 view .LVU328
 229:Core/Src/uartParser.c ****             tmpStr[i] = '\0';
 1227              		.loc 1 229 23 is_stmt 0 view .LVU329
 1228 011a 074A     		ldr	r2, .L75+12
 1229 011c 0021     		movs	r1, #0
 1230 011e D154     		strb	r1, [r2, r3]
 228:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1231              		.loc 1 228 49 is_stmt 1 discriminator 3 view .LVU330
 1232 0120 0133     		adds	r3, r3, #1
 1233              	.LVL95:
 228:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1234              		.loc 1 228 49 is_stmt 0 discriminator 3 view .LVU331
 1235 0122 DBB2     		uxtb	r3, r3
 1236              	.LVL96:
 1237              	.L70:
 228:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1238              		.loc 1 228 33 is_stmt 1 discriminator 1 view .LVU332
 1239 0124 132B     		cmp	r3, #19
 1240 0126 F8D9     		bls	.L71
 1241 0128 A7E7     		b	.L66
 1242              	.L76:
 1243 012a C046     		.align	2
 1244              	.L75:
 1245 012c 00000000 		.word	commandOut
 1246 0130 00000000 		.word	cmdQueue
 1247 0134 00000000 		.word	.LC38
 1248 0138 00000000 		.word	tmpStr
 1249 013c 20000000 		.word	.LC41
 1250 0140 4C000000 		.word	.LC43
 1251 0144 00000000 		.word	strIndex
 1252 0148 00000000 		.word	cmd
 1253 014c 00000000 		.word	uartStatus
 1254 0150 00480040 		.word	1073760256
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 34


 1255 0154 00000000 		.word	binarySem02UartParserHandle
 1256 0158 64000000 		.word	.LC47
 1257              	.LBE11:
 1258              	.LBE12:
 1259              		.cfi_endproc
 1260              	.LFE46:
 1262              		.global	__aeabi_uidiv
 1263              		.section	.rodata.initUsart3.str1.4,"aMS",%progbits,1
 1264              		.align	2
 1265              	.LC50:
 1266 0000 55415254 		.ascii	"UART enabled\000"
 1266      20656E61 
 1266      626C6564 
 1266      00
 1267              		.section	.text.initUsart3,"ax",%progbits
 1268              		.align	1
 1269              		.global	initUsart3
 1270              		.syntax unified
 1271              		.code	16
 1272              		.thumb_func
 1274              	initUsart3:
 1275              	.LFB47:
 250:Core/Src/uartParser.c **** void initUsart3(void) {
 1276              		.loc 1 250 23 view -0
 1277              		.cfi_startproc
 1278              		@ args = 0, pretend = 0, frame = 0
 1279              		@ frame_needed = 0, uses_anonymous_args = 0
 1280 0000 10B5     		push	{r4, lr}
 1281              	.LCFI8:
 1282              		.cfi_def_cfa_offset 8
 1283              		.cfi_offset 4, -8
 1284              		.cfi_offset 14, -4
 251:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 1285              		.loc 1 251 3 view .LVU334
 251:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 1286              		.loc 1 251 6 is_stmt 0 view .LVU335
 1287 0002 2F4A     		ldr	r2, .L78
 1288 0004 5169     		ldr	r1, [r2, #20]
 251:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 1289              		.loc 1 251 15 view .LVU336
 1290 0006 8023     		movs	r3, #128
 1291 0008 1B03     		lsls	r3, r3, #12
 1292 000a 0B43     		orrs	r3, r1
 1293 000c 5361     		str	r3, [r2, #20]
 253:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 1294              		.loc 1 253 3 is_stmt 1 view .LVU337
 253:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 1295              		.loc 1 253 8 is_stmt 0 view .LVU338
 1296 000e 2D4B     		ldr	r3, .L78+4
 1297 0010 1868     		ldr	r0, [r3]
 253:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 1298              		.loc 1 253 16 view .LVU339
 1299 0012 8021     		movs	r1, #128
 1300 0014 8900     		lsls	r1, r1, #2
 1301 0016 0143     		orrs	r1, r0
 1302 0018 1960     		str	r1, [r3]
 254:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 35


 1303              		.loc 1 254 3 is_stmt 1 view .LVU340
 254:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 1304              		.loc 1 254 8 is_stmt 0 view .LVU341
 1305 001a 1968     		ldr	r1, [r3]
 254:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 1306              		.loc 1 254 16 view .LVU342
 1307 001c 2A48     		ldr	r0, .L78+8
 1308 001e 0140     		ands	r1, r0
 1309 0020 1960     		str	r1, [r3]
 256:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 1310              		.loc 1 256 3 is_stmt 1 view .LVU343
 256:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 1311              		.loc 1 256 8 is_stmt 0 view .LVU344
 1312 0022 1868     		ldr	r0, [r3]
 256:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 1313              		.loc 1 256 16 view .LVU345
 1314 0024 8021     		movs	r1, #128
 1315 0026 0901     		lsls	r1, r1, #4
 1316 0028 0143     		orrs	r1, r0
 1317 002a 1960     		str	r1, [r3]
 257:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 1318              		.loc 1 257 3 is_stmt 1 view .LVU346
 257:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 1319              		.loc 1 257 8 is_stmt 0 view .LVU347
 1320 002c 1968     		ldr	r1, [r3]
 257:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 1321              		.loc 1 257 16 view .LVU348
 1322 002e 2748     		ldr	r0, .L78+12
 1323 0030 0140     		ands	r1, r0
 1324 0032 1960     		str	r1, [r3]
 260:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 1325              		.loc 1 260 3 is_stmt 1 view .LVU349
 260:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 1326              		.loc 1 260 13 is_stmt 0 view .LVU350
 1327 0034 186A     		ldr	r0, [r3, #32]
 260:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 1328              		.loc 1 260 17 view .LVU351
 1329 0036 8021     		movs	r1, #128
 1330 0038 4902     		lsls	r1, r1, #9
 1331 003a 0143     		orrs	r1, r0
 1332 003c 1962     		str	r1, [r3, #32]
 262:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 1333              		.loc 1 262 3 is_stmt 1 view .LVU352
 262:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 1334              		.loc 1 262 13 is_stmt 0 view .LVU353
 1335 003e 186A     		ldr	r0, [r3, #32]
 262:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 1336              		.loc 1 262 17 view .LVU354
 1337 0040 8021     		movs	r1, #128
 1338 0042 4903     		lsls	r1, r1, #13
 1339 0044 0143     		orrs	r1, r0
 1340 0046 1962     		str	r1, [r3, #32]
 263:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 1341              		.loc 1 263 3 is_stmt 1 view .LVU355
 263:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 1342              		.loc 1 263 6 is_stmt 0 view .LVU356
 1343 0048 D169     		ldr	r1, [r2, #28]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 36


 263:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 1344              		.loc 1 263 16 view .LVU357
 1345 004a 8023     		movs	r3, #128
 1346 004c DB02     		lsls	r3, r3, #11
 1347 004e 0B43     		orrs	r3, r1
 1348 0050 D361     		str	r3, [r2, #28]
 265:Core/Src/uartParser.c ****   uint32_t fClk = HAL_RCC_GetHCLKFreq();
 1349              		.loc 1 265 3 is_stmt 1 view .LVU358
 265:Core/Src/uartParser.c ****   uint32_t fClk = HAL_RCC_GetHCLKFreq();
 1350              		.loc 1 265 19 is_stmt 0 view .LVU359
 1351 0052 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1352              	.LVL97:
 268:Core/Src/uartParser.c ****   uint32_t baudRate = 115200;
 1353              		.loc 1 268 3 is_stmt 1 view .LVU360
 269:Core/Src/uartParser.c ****   uint32_t usartBRR = fClk / baudRate;
 1354              		.loc 1 269 3 view .LVU361
 269:Core/Src/uartParser.c ****   uint32_t usartBRR = fClk / baudRate;
 1355              		.loc 1 269 12 is_stmt 0 view .LVU362
 1356 0056 E121     		movs	r1, #225
 1357 0058 4902     		lsls	r1, r1, #9
 1358 005a FFF7FEFF 		bl	__aeabi_uidiv
 1359              	.LVL98:
 270:Core/Src/uartParser.c ****   USART3->BRR = usartBRR;
 1360              		.loc 1 270 3 is_stmt 1 view .LVU363
 270:Core/Src/uartParser.c ****   USART3->BRR = usartBRR;
 1361              		.loc 1 270 15 is_stmt 0 view .LVU364
 1362 005e 1C4C     		ldr	r4, .L78+16
 1363 0060 E060     		str	r0, [r4, #12]
 273:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 1364              		.loc 1 273 3 is_stmt 1 view .LVU365
 273:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 1365              		.loc 1 273 9 is_stmt 0 view .LVU366
 1366 0062 2368     		ldr	r3, [r4]
 273:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 1367              		.loc 1 273 15 view .LVU367
 1368 0064 0822     		movs	r2, #8
 1369 0066 1343     		orrs	r3, r2
 1370 0068 2360     		str	r3, [r4]
 274:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 1371              		.loc 1 274 3 is_stmt 1 view .LVU368
 274:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 1372              		.loc 1 274 9 is_stmt 0 view .LVU369
 1373 006a 2368     		ldr	r3, [r4]
 274:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 1374              		.loc 1 274 15 view .LVU370
 1375 006c 043A     		subs	r2, r2, #4
 1376 006e 1343     		orrs	r3, r2
 1377 0070 2360     		str	r3, [r4]
 277:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 1378              		.loc 1 277 3 is_stmt 1 view .LVU371
 277:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 1379              		.loc 1 277 9 is_stmt 0 view .LVU372
 1380 0072 2368     		ldr	r3, [r4]
 277:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 1381              		.loc 1 277 15 view .LVU373
 1382 0074 033A     		subs	r2, r2, #3
 1383 0076 1343     		orrs	r3, r2
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 37


 1384 0078 2360     		str	r3, [r4]
 278:Core/Src/uartParser.c ****   transmitCharArray("UART enabled");
 1385              		.loc 1 278 3 is_stmt 1 view .LVU374
 1386 007a 1648     		ldr	r0, .L78+20
 1387              	.LVL99:
 278:Core/Src/uartParser.c ****   transmitCharArray("UART enabled");
 1388              		.loc 1 278 3 is_stmt 0 view .LVU375
 1389 007c FFF7FEFF 		bl	transmitCharArray
 1390              	.LVL100:
 281:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 1391              		.loc 1 281 3 is_stmt 1 view .LVU376
 281:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 1392              		.loc 1 281 9 is_stmt 0 view .LVU377
 1393 0080 2368     		ldr	r3, [r4]
 281:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 1394              		.loc 1 281 15 view .LVU378
 1395 0082 2022     		movs	r2, #32
 1396 0084 1343     		orrs	r3, r2
 1397 0086 2360     		str	r3, [r4]
 283:Core/Src/uartParser.c ****   NVIC_EnableIRQ(USART3_4_IRQn);
 1398              		.loc 1 283 3 is_stmt 1 view .LVU379
 1399              	.LVL101:
 1400              	.LBB13:
 1401              	.LBI13:
 1402              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 38


  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 39


  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 40


 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 41


 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 42


 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 43


 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 44


 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 45


 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 46


 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 47


 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 48


 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 1403              		.loc 2 623 22 view .LVU380
 1404              	.LBB14:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1405              		.loc 2 625 3 view .LVU381
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1406              		.loc 2 627 5 view .LVU382
 1407              		.loc 2 627 20 is_stmt 0 view .LVU383
 1408 0088 134B     		ldr	r3, .L78+24
 1409 008a 8022     		movs	r2, #128
 1410 008c 9205     		lsls	r2, r2, #22
 1411 008e 1A60     		str	r2, [r3]
 1412              	.LVL102:
 1413              		.loc 2 627 20 view .LVU384
 1414              	.LBE14:
 1415              	.LBE13:
 284:Core/Src/uartParser.c ****   NVIC_SetPriority(USART3_4_IRQn, 3);
 1416              		.loc 1 284 3 is_stmt 1 view .LVU385
 1417              	.LBB15:
 1418              	.LBI15:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 49


 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 50


 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 1419              		.loc 2 730 22 view .LVU386
 1420              	.LBB16:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1421              		.loc 2 732 3 view .LVU387
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1422              		.loc 2 734 5 view .LVU388
 1423              		.loc 2 734 52 is_stmt 0 view .LVU389
 1424 0090 C720     		movs	r0, #199
 1425 0092 8000     		lsls	r0, r0, #2
 1426 0094 1958     		ldr	r1, [r3, r0]
 1427              		.loc 2 734 33 view .LVU390
 1428 0096 114A     		ldr	r2, .L78+28
 1429 0098 1140     		ands	r1, r2
 1430              		.loc 2 734 102 view .LVU391
 1431 009a C022     		movs	r2, #192
 1432 009c 1202     		lsls	r2, r2, #8
 1433 009e 0A43     		orrs	r2, r1
 1434              		.loc 2 734 30 view .LVU392
 1435 00a0 1A50     		str	r2, [r3, r0]
 1436              	.LVL103:
 1437              		.loc 2 734 30 view .LVU393
 1438              	.LBE16:
 1439              	.LBE15:
 289:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 51


 1440              		.loc 1 289 3 is_stmt 1 view .LVU394
 289:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
 1441              		.loc 1 289 33 is_stmt 0 view .LVU395
 1442 00a2 0F4A     		ldr	r2, .L78+32
 1443 00a4 0021     		movs	r1, #0
 1444 00a6 0120     		movs	r0, #1
 1445 00a8 FFF7FEFF 		bl	osSemaphoreNew
 1446              	.LVL104:
 289:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
 1447              		.loc 1 289 31 discriminator 1 view .LVU396
 1448 00ac 0D4B     		ldr	r3, .L78+36
 1449 00ae 1860     		str	r0, [r3]
 290:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 1450              		.loc 1 290 3 is_stmt 1 view .LVU397
 290:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 1451              		.loc 1 290 14 is_stmt 0 view .LVU398
 1452 00b0 0221     		movs	r1, #2
 1453 00b2 0520     		movs	r0, #5
 1454 00b4 FFF7FEFF 		bl	createQueue
 1455              	.LVL105:
 290:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 1456              		.loc 1 290 12 discriminator 1 view .LVU399
 1457 00b8 0B4B     		ldr	r3, .L78+40
 1458 00ba 1860     		str	r0, [r3]
 291:Core/Src/uartParser.c **** }
 1459              		.loc 1 291 1 view .LVU400
 1460              		@ sp needed
 1461 00bc 10BD     		pop	{r4, pc}
 1462              	.L79:
 1463 00be C046     		.align	2
 1464              	.L78:
 1465 00c0 00100240 		.word	1073876992
 1466 00c4 00080048 		.word	1207961600
 1467 00c8 FFFEFFFF 		.word	-257
 1468 00cc FFFBFFFF 		.word	-1025
 1469 00d0 00480040 		.word	1073760256
 1470 00d4 00000000 		.word	.LC50
 1471 00d8 00E100E0 		.word	-536813312
 1472 00dc FF00FFFF 		.word	-65281
 1473 00e0 00000000 		.word	semAttr_SEM1
 1474 00e4 00000000 		.word	binarySem02UartParserHandle
 1475 00e8 00000000 		.word	cmdQueue
 1476              		.cfi_endproc
 1477              	.LFE47:
 1479              		.section	.rodata.USART3_4_IRQHandler.str1.4,"aMS",%progbits,1
 1480              		.align	2
 1481              	.LC55:
 1482 0000 55415254 		.ascii	"UART RX interrupt.\000"
 1482      20525820 
 1482      696E7465 
 1482      72727570 
 1482      742E00
 1483 0013 00       		.align	2
 1484              	.LC59:
 1485 0014 636D643A 		.ascii	"cmd:\012\000"
 1485      0A00
 1486              		.section	.text.USART3_4_IRQHandler,"ax",%progbits
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 52


 1487              		.align	1
 1488              		.global	USART3_4_IRQHandler
 1489              		.syntax unified
 1490              		.code	16
 1491              		.thumb_func
 1493              	USART3_4_IRQHandler:
 1494              	.LFB48:
 294:Core/Src/uartParser.c **** void USART3_4_IRQHandler(void) {
 1495              		.loc 1 294 32 is_stmt 1 view -0
 1496              		.cfi_startproc
 1497              		@ args = 0, pretend = 0, frame = 8
 1498              		@ frame_needed = 0, uses_anonymous_args = 0
 1499 0000 30B5     		push	{r4, r5, lr}
 1500              	.LCFI9:
 1501              		.cfi_def_cfa_offset 12
 1502              		.cfi_offset 4, -12
 1503              		.cfi_offset 5, -8
 1504              		.cfi_offset 14, -4
 1505 0002 83B0     		sub	sp, sp, #12
 1506              	.LCFI10:
 1507              		.cfi_def_cfa_offset 24
 295:Core/Src/uartParser.c ****   transmitCharArray("UART RX interrupt.");
 1508              		.loc 1 295 3 view .LVU402
 1509 0004 1748     		ldr	r0, .L84
 1510 0006 FFF7FEFF 		bl	transmitCharArray
 1511              	.LVL106:
 296:Core/Src/uartParser.c ****   if (uartStatus == 0) {
 1512              		.loc 1 296 3 view .LVU403
 296:Core/Src/uartParser.c ****   if (uartStatus == 0) {
 1513              		.loc 1 296 18 is_stmt 0 view .LVU404
 1514 000a 174B     		ldr	r3, .L84+4
 1515 000c 1B78     		ldrb	r3, [r3]
 296:Core/Src/uartParser.c ****   if (uartStatus == 0) {
 1516              		.loc 1 296 6 view .LVU405
 1517 000e 002B     		cmp	r3, #0
 1518 0010 26D1     		bne	.L80
 1519              	.L82:
 1520              	.LBB17:
 298:Core/Src/uartParser.c **** 	  }
 1521              		.loc 1 298 4 is_stmt 1 view .LVU406
 297:Core/Src/uartParser.c ****     while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1522              		.loc 1 297 42 discriminator 1 view .LVU407
 297:Core/Src/uartParser.c ****     while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1523              		.loc 1 297 18 is_stmt 0 discriminator 1 view .LVU408
 1524 0012 164B     		ldr	r3, .L84+8
 1525 0014 DB69     		ldr	r3, [r3, #28]
 297:Core/Src/uartParser.c ****     while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1526              		.loc 1 297 42 discriminator 1 view .LVU409
 1527 0016 9B06     		lsls	r3, r3, #26
 1528 0018 FBD5     		bpl	.L82
 300:Core/Src/uartParser.c ****     osSemaphoreRelease(binarySem02UartParserHandle);
 1529              		.loc 1 300 5 is_stmt 1 view .LVU410
 1530 001a 154B     		ldr	r3, .L84+12
 1531 001c 1868     		ldr	r0, [r3]
 1532 001e FFF7FEFF 		bl	osSemaphoreRelease
 1533              	.LVL107:
 301:Core/Src/uartParser.c ****     volatile uint8_t usartReceivedData = USART3->RDR;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 53


 1534              		.loc 1 301 5 view .LVU411
 301:Core/Src/uartParser.c ****     volatile uint8_t usartReceivedData = USART3->RDR;
 1535              		.loc 1 301 48 is_stmt 0 view .LVU412
 1536 0022 124C     		ldr	r4, .L84+8
 1537 0024 A38C     		ldrh	r3, [r4, #36]
 301:Core/Src/uartParser.c ****     volatile uint8_t usartReceivedData = USART3->RDR;
 1538              		.loc 1 301 22 view .LVU413
 1539 0026 DBB2     		uxtb	r3, r3
 1540 0028 6A46     		mov	r2, sp
 1541 002a D51D     		adds	r5, r2, #7
 1542 002c D371     		strb	r3, [r2, #7]
 302:Core/Src/uartParser.c ****     transmitCharArray("cmd:\n");
 1543              		.loc 1 302 5 is_stmt 1 view .LVU414
 1544 002e 1148     		ldr	r0, .L84+16
 1545 0030 FFF7FEFF 		bl	transmitCharArray
 1546              	.LVL108:
 303:Core/Src/uartParser.c ****     transmitOneChar(usartReceivedData);
 1547              		.loc 1 303 5 view .LVU415
 1548 0034 2878     		ldrb	r0, [r5]
 1549 0036 C0B2     		uxtb	r0, r0
 1550 0038 FFF7FEFF 		bl	transmitOneChar
 1551              	.LVL109:
 304:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 1552              		.loc 1 304 5 view .LVU416
 304:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 1553              		.loc 1 304 11 is_stmt 0 view .LVU417
 1554 003c 0E4A     		ldr	r2, .L84+20
 1555 003e 1378     		ldrb	r3, [r2]
 1556 0040 DBB2     		uxtb	r3, r3
 304:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 1557              		.loc 1 304 22 view .LVU418
 1558 0042 2978     		ldrb	r1, [r5]
 1559 0044 C9B2     		uxtb	r1, r1
 1560 0046 0D48     		ldr	r0, .L84+24
 1561 0048 C154     		strb	r1, [r0, r3]
 305:Core/Src/uartParser.c **** 		strIndex++;
 1562              		.loc 1 305 3 is_stmt 1 view .LVU419
 305:Core/Src/uartParser.c **** 		strIndex++;
 1563              		.loc 1 305 11 is_stmt 0 view .LVU420
 1564 004a 1378     		ldrb	r3, [r2]
 1565 004c 0133     		adds	r3, r3, #1
 1566 004e DBB2     		uxtb	r3, r3
 1567 0050 1370     		strb	r3, [r2]
 306:Core/Src/uartParser.c ****     uartStatus = 1;
 1568              		.loc 1 306 5 is_stmt 1 view .LVU421
 306:Core/Src/uartParser.c ****     uartStatus = 1;
 1569              		.loc 1 306 16 is_stmt 0 view .LVU422
 1570 0052 054B     		ldr	r3, .L84+4
 1571 0054 0122     		movs	r2, #1
 1572 0056 1A70     		strb	r2, [r3]
 308:Core/Src/uartParser.c ****     USART3->CR1 &= ~USART_CR1_RXNEIE;
 1573              		.loc 1 308 5 is_stmt 1 view .LVU423
 308:Core/Src/uartParser.c ****     USART3->CR1 &= ~USART_CR1_RXNEIE;
 1574              		.loc 1 308 11 is_stmt 0 view .LVU424
 1575 0058 2368     		ldr	r3, [r4]
 308:Core/Src/uartParser.c ****     USART3->CR1 &= ~USART_CR1_RXNEIE;
 1576              		.loc 1 308 17 view .LVU425
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 54


 1577 005a 1F32     		adds	r2, r2, #31
 1578 005c 9343     		bics	r3, r2
 1579 005e 2360     		str	r3, [r4]
 1580              	.L80:
 1581              	.LBE17:
 310:Core/Src/uartParser.c **** }
 1582              		.loc 1 310 1 view .LVU426
 1583 0060 03B0     		add	sp, sp, #12
 1584              		@ sp needed
 1585 0062 30BD     		pop	{r4, r5, pc}
 1586              	.L85:
 1587              		.align	2
 1588              	.L84:
 1589 0064 00000000 		.word	.LC55
 1590 0068 00000000 		.word	uartStatus
 1591 006c 00480040 		.word	1073760256
 1592 0070 00000000 		.word	binarySem02UartParserHandle
 1593 0074 14000000 		.word	.LC59
 1594 0078 00000000 		.word	strIndex
 1595 007c 00000000 		.word	tmpStr
 1596              		.cfi_endproc
 1597              	.LFE48:
 1599              		.global	UARTTask_attributes
 1600              		.section	.rodata.str1.4,"aMS",%progbits,1
 1601              		.align	2
 1602              	.LC63:
 1603 0000 55415254 		.ascii	"UARTParseTask\000"
 1603      50617273 
 1603      65546173 
 1603      6B00
 1604              		.section	.rodata.UARTTask_attributes,"a"
 1605              		.align	2
 1608              	UARTTask_attributes:
 1609 0000 00000000 		.word	.LC63
 1610 0004 00000000 		.space	16
 1610      00000000 
 1610      00000000 
 1610      00000000 
 1611 0014 00020000 		.word	512
 1612 0018 19000000 		.word	25
 1613 001c 00000000 		.space	8
 1613      00000000 
 1614              		.global	uartStatus
 1615              		.section	.bss.uartStatus,"aw",%nobits
 1618              	uartStatus:
 1619 0000 00       		.space	1
 1620              		.global	commandOut
 1621              		.section	.bss.commandOut,"aw",%nobits
 1622              		.align	1
 1625              	commandOut:
 1626 0000 0000     		.space	2
 1627              		.global	cmd
 1628              		.section	.bss.cmd,"aw",%nobits
 1629              		.align	2
 1632              	cmd:
 1633 0000 00000000 		.space	80
 1633      00000000 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 55


 1633      00000000 
 1633      00000000 
 1633      00000000 
 1634              		.global	tmpStr
 1635              		.section	.bss.tmpStr,"aw",%nobits
 1636              		.align	2
 1639              	tmpStr:
 1640 0000 00000000 		.space	20
 1640      00000000 
 1640      00000000 
 1640      00000000 
 1640      00000000 
 1641              		.global	cmdStrIndex
 1642              		.section	.bss.cmdStrIndex,"aw",%nobits
 1645              	cmdStrIndex:
 1646 0000 00       		.space	1
 1647              		.global	cmdIndex
 1648              		.section	.bss.cmdIndex,"aw",%nobits
 1651              	cmdIndex:
 1652 0000 00       		.space	1
 1653              		.global	strIndex
 1654              		.section	.bss.strIndex,"aw",%nobits
 1657              	strIndex:
 1658 0000 00       		.space	1
 1659              		.section	.rodata.str1.4
 1660 000e 0000     		.align	2
 1661              	.LC64:
 1662 0010 53454D30 		.ascii	"SEM02\000"
 1662      3200
 1663              		.section	.rodata.semAttr_SEM1,"a"
 1664              		.align	2
 1667              	semAttr_SEM1:
 1668 0000 10000000 		.word	.LC64
 1669 0004 00000000 		.space	12
 1669      00000000 
 1669      00000000 
 1670              		.global	binarySem02UartParserHandle
 1671              		.section	.bss.binarySem02UartParserHandle,"aw",%nobits
 1672              		.align	2
 1675              	binarySem02UartParserHandle:
 1676 0000 00000000 		.space	4
 1677              		.global	cmdQueue
 1678              		.section	.bss.cmdQueue,"aw",%nobits
 1679              		.align	2
 1682              	cmdQueue:
 1683 0000 00000000 		.space	4
 1684              		.global	UARTTaskHandle
 1685              		.section	.bss.UARTTaskHandle,"aw",%nobits
 1686              		.align	2
 1689              	UARTTaskHandle:
 1690 0000 00000000 		.space	4
 1691              		.text
 1692              	.Letext0:
 1693              		.file 3 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 1694              		.file 4 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/lib/gcc/arm-none-eabi/13.2.1/includ
 1695              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1696              		.file 6 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 56


 1697              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 1698              		.file 8 "Core/Inc/cmdQueue.h"
 1699              		.file 9 "Core/Inc/uartParser.h"
 1700              		.file 10 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/string.h"
 1701              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 57


DEFINED SYMBOLS
                            *ABS*:00000000 uartParser.c
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:19     .text.convertSpeed:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:25     .text.convertSpeed:00000000 convertSpeed
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:192    .text.transmitOneChar:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:198    .text.transmitOneChar:00000000 transmitOneChar
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:225    .text.transmitOneChar:00000010 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:230    .text.transmitCharArray:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:236    .text.transmitCharArray:00000000 transmitCharArray
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:286    .text.sendUint16BinToUart:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:292    .text.sendUint16BinToUart:00000000 sendUint16BinToUart
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:358    .rodata.parseCmd.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:398    .text.parseCmd:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:404    .text.parseCmd:00000000 parseCmd
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:908    .text.parseCmd:0000025c $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1657   .bss.strIndex:00000000 strIndex
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1645   .bss.cmdStrIndex:00000000 cmdStrIndex
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1651   .bss.cmdIndex:00000000 cmdIndex
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1639   .bss.tmpStr:00000000 tmpStr
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1632   .bss.cmd:00000000 cmd
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1625   .bss.commandOut:00000000 commandOut
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:936    .rodata.StartParseUartTask.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:949    .text.StartParseUartTask:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:955    .text.StartParseUartTask:00000000 StartParseUartTask
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1245   .text.StartParseUartTask:0000012c $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1682   .bss.cmdQueue:00000000 cmdQueue
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1618   .bss.uartStatus:00000000 uartStatus
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1675   .bss.binarySem02UartParserHandle:00000000 binarySem02UartParserHandle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1264   .rodata.initUsart3.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1268   .text.initUsart3:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1274   .text.initUsart3:00000000 initUsart3
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1465   .text.initUsart3:000000c0 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1667   .rodata.semAttr_SEM1:00000000 semAttr_SEM1
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1480   .rodata.USART3_4_IRQHandler.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1487   .text.USART3_4_IRQHandler:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1493   .text.USART3_4_IRQHandler:00000000 USART3_4_IRQHandler
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1589   .text.USART3_4_IRQHandler:00000064 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1608   .rodata.UARTTask_attributes:00000000 UARTTask_attributes
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1601   .rodata.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1605   .rodata.UARTTask_attributes:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1619   .bss.uartStatus:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1622   .bss.commandOut:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1629   .bss.cmd:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1636   .bss.tmpStr:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1646   .bss.cmdStrIndex:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1652   .bss.cmdIndex:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1658   .bss.strIndex:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1664   .rodata.semAttr_SEM1:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1672   .bss.binarySem02UartParserHandle:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1679   .bss.cmdQueue:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1689   .bss.UARTTaskHandle:00000000 UARTTaskHandle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s:1686   .bss.UARTTaskHandle:00000000 $d

UNDEFINED SYMBOLS
strlen
strcmp
queuePush
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccnOYIl1.s 			page 58


osSemaphoreAcquire
__aeabi_uidiv
HAL_RCC_GetHCLKFreq
osSemaphoreNew
createQueue
osSemaphoreRelease
