ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"uartParser.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/uartParser.c"
  18              		.section	.rodata.convertSpeed.str1.4,"aMS",%progbits,1
  19              		.align	2
  20              	.LC0:
  21 0000 31303000 		.ascii	"100\000"
  22              		.section	.text.convertSpeed,"ax",%progbits
  23              		.align	1
  24              		.global	convertSpeed
  25              		.syntax unified
  26              		.code	16
  27              		.thumb_func
  29              	convertSpeed:
  30              	.LVL0:
  31              	.LFB45:
   1:Core/Src/uartParser.c **** #include "uartParser.h"
   2:Core/Src/uartParser.c **** #include "cmsis_os2.h"
   3:Core/Src/uartParser.c **** #include <string.h>
   4:Core/Src/uartParser.c **** 
   5:Core/Src/uartParser.c **** osThreadId_t UARTTaskHandle;
   6:Core/Src/uartParser.c **** Cmd_Queue * cmdQueue = NULL;
   7:Core/Src/uartParser.c **** osSemaphoreId_t binarySem02UartParserHandle;
   8:Core/Src/uartParser.c **** static const osSemaphoreAttr_t semAttr_SEM1 = {
   9:Core/Src/uartParser.c ****   .name = "SEM02",
  10:Core/Src/uartParser.c **** };
  11:Core/Src/uartParser.c **** 
  12:Core/Src/uartParser.c **** volatile uint8_t strIndex = 0;
  13:Core/Src/uartParser.c **** volatile uint8_t cmdIndex = 0;
  14:Core/Src/uartParser.c **** volatile uint8_t cmdStrIndex = 0;
  15:Core/Src/uartParser.c **** volatile char tmpStr[TMP_STR_LEN];
  16:Core/Src/uartParser.c **** volatile char cmd[4][TMP_STR_LEN];
  17:Core/Src/uartParser.c **** volatile uint16_t commandOut = 0x0000;
  18:Core/Src/uartParser.c **** 
  19:Core/Src/uartParser.c **** volatile uint16_t commandLED = 0;
  20:Core/Src/uartParser.c **** 
  21:Core/Src/uartParser.c **** // 0 not working, 1 working
  22:Core/Src/uartParser.c **** volatile uint8_t uartStatus = 0;
  23:Core/Src/uartParser.c **** 
  24:Core/Src/uartParser.c **** const osThreadAttr_t UARTTask_attributes = {
  25:Core/Src/uartParser.c ****   .name = "UARTParseTask",
  26:Core/Src/uartParser.c ****   .stack_size = 128 * 4,
  27:Core/Src/uartParser.c ****   .priority = (osPriority_t) osPriorityNormal1, // higher priority than osPriorityNormal
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 2


  28:Core/Src/uartParser.c **** };
  29:Core/Src/uartParser.c **** 
  30:Core/Src/uartParser.c **** void sendUint16BinToUart(uint16_t x) {
  31:Core/Src/uartParser.c **** 	char str[16];
  32:Core/Src/uartParser.c **** 	uint8_t i = 0;
  33:Core/Src/uartParser.c **** 	while (i < 16) {
  34:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
  35:Core/Src/uartParser.c **** 	  i++;
  36:Core/Src/uartParser.c **** 	}
  37:Core/Src/uartParser.c **** 	transmitCharArray(str);
  38:Core/Src/uartParser.c **** }
  39:Core/Src/uartParser.c **** 
  40:Core/Src/uartParser.c **** uint8_t parseCmd(void) {
  41:Core/Src/uartParser.c ****   uint8_t error = 0;
  42:Core/Src/uartParser.c ****   uint8_t speed = 0;
  43:Core/Src/uartParser.c ****   //Parse words from received command string
  44:Core/Src/uartParser.c ****   volatile uint8_t strLen = strIndex + 1;
  45:Core/Src/uartParser.c ****   strIndex = 0;
  46:Core/Src/uartParser.c ****   cmdStrIndex = 0;
  47:Core/Src/uartParser.c ****   cmdIndex = 0;
  48:Core/Src/uartParser.c ****   while (strIndex < strLen) {
  49:Core/Src/uartParser.c ****     if (tmpStr[strIndex] == ' ') {
  50:Core/Src/uartParser.c ****       cmdIndex++;
  51:Core/Src/uartParser.c ****       cmdStrIndex = 0;
  52:Core/Src/uartParser.c ****     } else {
  53:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
  54:Core/Src/uartParser.c ****       cmdStrIndex++;
  55:Core/Src/uartParser.c ****     }
  56:Core/Src/uartParser.c ****     strIndex++;
  57:Core/Src/uartParser.c ****   } 
  58:Core/Src/uartParser.c ****   //Convert words into command format
  59:Core/Src/uartParser.c ****   //First digit
  60:Core/Src/uartParser.c ****   if (strcmp(cmd[0], "led") == 0) {
  61:Core/Src/uartParser.c ****     commandOut |= 0xA000;
  62:Core/Src/uartParser.c ****     //Second digit - LED
  63:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "red") == 0) {
  64:Core/Src/uartParser.c ****       commandOut |= 0x0100;
  65:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "green") == 0) {
  66:Core/Src/uartParser.c ****       commandOut |= 0x0200;
  67:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "blue") == 0) {
  68:Core/Src/uartParser.c ****       commandOut |= 0x0300;
  69:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "orange") == 0) {
  70:Core/Src/uartParser.c ****       commandOut |= 0x0400;
  71:Core/Src/uartParser.c ****     } else {
  72:Core/Src/uartParser.c ****       error = 1;
  73:Core/Src/uartParser.c ****     }
  74:Core/Src/uartParser.c ****     //Third digit - LED
  75:Core/Src/uartParser.c ****     if (strcmp(cmd[2], "on") == 0) {
  76:Core/Src/uartParser.c ****       commandOut |= 0x0010;
  77:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "off") == 0) {
  78:Core/Src/uartParser.c ****       commandOut |= 0x0020;
  79:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "toggle") == 0) {
  80:Core/Src/uartParser.c ****       commandOut |= 0x0030;
  81:Core/Src/uartParser.c ****     } else {
  82:Core/Src/uartParser.c ****       error = 1;
  83:Core/Src/uartParser.c ****     }
  84:Core/Src/uartParser.c ****   } else if (strcmp(cmd[0], "motor") == 0) {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 3


  85:Core/Src/uartParser.c ****     commandOut |= 0xB000;
  86:Core/Src/uartParser.c ****     //Second digit - Motor
  87:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "on") == 0) {
  88:Core/Src/uartParser.c ****       commandOut |= 0x0100;
  89:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
  90:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "off") == 0) {
  91:Core/Src/uartParser.c ****       commandOut |= 0x0200;
  92:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "speed") == 0) {
  93:Core/Src/uartParser.c ****       commandOut |= 0x0300;
  94:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
  95:Core/Src/uartParser.c ****     } else {
  96:Core/Src/uartParser.c ****       error = 1;
  97:Core/Src/uartParser.c ****     }
  98:Core/Src/uartParser.c ****     //Motor speed
  99:Core/Src/uartParser.c ****     if (speed == 255)
 100:Core/Src/uartParser.c ****       error = 1;
 101:Core/Src/uartParser.c ****     else
 102:Core/Src/uartParser.c ****       if (speed == 101) {
 103:Core/Src/uartParser.c ****         transmitCharArray("Speed limited to 100 RPM");
 104:Core/Src/uartParser.c ****         commandOut |= 100U;
 105:Core/Src/uartParser.c ****       }
 106:Core/Src/uartParser.c ****       else
 107:Core/Src/uartParser.c ****         commandOut |= speed;
 108:Core/Src/uartParser.c ****   } else {
 109:Core/Src/uartParser.c ****     error = 1;
 110:Core/Src/uartParser.c ****   }
 111:Core/Src/uartParser.c ****   return error;
 112:Core/Src/uartParser.c **** }
 113:Core/Src/uartParser.c **** 
 114:Core/Src/uartParser.c **** //Convert UART ascii sped into into uint8 to add to command
 115:Core/Src/uartParser.c **** uint8_t convertSpeed(char *ascii) {
  32              		.loc 1 115 35 view -0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 0
  35              		@ frame_needed = 0, uses_anonymous_args = 0
  36              		.loc 1 115 35 is_stmt 0 view .LVU1
  37 0000 70B5     		push	{r4, r5, r6, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 16
  40              		.cfi_offset 4, -16
  41              		.cfi_offset 5, -12
  42              		.cfi_offset 6, -8
  43              		.cfi_offset 14, -4
  44 0002 0500     		movs	r5, r0
 116:Core/Src/uartParser.c ****   uint8_t tens = 0, ones = 0;
  45              		.loc 1 116 3 is_stmt 1 view .LVU2
  46              	.LVL1:
 117:Core/Src/uartParser.c ****   //Throw error if speed is not a number
 118:Core/Src/uartParser.c ****   for (int i = 0; i < strlen(ascii); i ++){
  47              		.loc 1 118 3 view .LVU3
  48              	.LBB6:
  49              		.loc 1 118 8 view .LVU4
  50              		.loc 1 118 12 is_stmt 0 view .LVU5
  51 0004 0024     		movs	r4, #0
  52              		.loc 1 118 3 view .LVU6
  53 0006 00E0     		b	.L2
  54              	.LVL2:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 4


  55              	.L12:
  56              		.loc 1 118 40 is_stmt 1 discriminator 2 view .LVU7
  57 0008 0134     		adds	r4, r4, #1
  58              	.LVL3:
  59              	.L2:
  60              		.loc 1 118 21 discriminator 1 view .LVU8
  61              		.loc 1 118 23 is_stmt 0 discriminator 1 view .LVU9
  62 000a 2800     		movs	r0, r5
  63 000c FFF7FEFF 		bl	strlen
  64              	.LVL4:
  65              		.loc 1 118 21 discriminator 1 view .LVU10
  66 0010 A042     		cmp	r0, r4
  67 0012 08D9     		bls	.L11
 119:Core/Src/uartParser.c ****     if ((ascii[i] < 48 && ascii[i] != 0) || ascii[i] > 57) {
  68              		.loc 1 119 5 is_stmt 1 view .LVU11
  69              		.loc 1 119 15 is_stmt 0 view .LVU12
  70 0014 2A5D     		ldrb	r2, [r5, r4]
  71              		.loc 1 119 24 view .LVU13
  72 0016 531E     		subs	r3, r2, #1
  73 0018 DBB2     		uxtb	r3, r3
  74              		.loc 1 119 8 view .LVU14
  75 001a 2E2B     		cmp	r3, #46
  76 001c 23D9     		bls	.L8
  77              		.loc 1 119 42 discriminator 1 view .LVU15
  78 001e 392A     		cmp	r2, #57
  79 0020 F2D9     		bls	.L12
 120:Core/Src/uartParser.c ****       return 255;
  80              		.loc 1 120 14 view .LVU16
  81 0022 FF20     		movs	r0, #255
  82 0024 20E0     		b	.L3
  83              	.L11:
  84              	.LBE6:
 121:Core/Src/uartParser.c ****     }
 122:Core/Src/uartParser.c ****   }
 123:Core/Src/uartParser.c ****   //input >100 gets clamped to 100
 124:Core/Src/uartParser.c ****   if (ascii[2] != 0) {
  85              		.loc 1 124 3 is_stmt 1 view .LVU17
  86              		.loc 1 124 12 is_stmt 0 view .LVU18
  87 0026 AB78     		ldrb	r3, [r5, #2]
  88              		.loc 1 124 6 view .LVU19
  89 0028 002B     		cmp	r3, #0
  90 002a 07D0     		beq	.L5
 125:Core/Src/uartParser.c ****     if (strcmp(ascii, "100") == 0)
  91              		.loc 1 125 5 is_stmt 1 view .LVU20
  92              		.loc 1 125 9 is_stmt 0 view .LVU21
  93 002c 1049     		ldr	r1, .L13
  94 002e 2800     		movs	r0, r5
  95 0030 FFF7FEFF 		bl	strcmp
  96              	.LVL5:
  97              		.loc 1 125 8 discriminator 1 view .LVU22
  98 0034 0028     		cmp	r0, #0
  99 0036 18D1     		bne	.L10
 126:Core/Src/uartParser.c ****       return 100;
 100              		.loc 1 126 14 view .LVU23
 101 0038 6430     		adds	r0, r0, #100
 102 003a 15E0     		b	.L3
 103              	.L5:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 5


 127:Core/Src/uartParser.c ****     else
 128:Core/Src/uartParser.c ****       return 101;
 129:Core/Src/uartParser.c ****   }
 130:Core/Src/uartParser.c ****   else {
 131:Core/Src/uartParser.c ****     //Convert input <100
 132:Core/Src/uartParser.c ****     if (ascii[1] == 0) {
 104              		.loc 1 132 5 is_stmt 1 view .LVU24
 105              		.loc 1 132 14 is_stmt 0 view .LVU25
 106 003c 6A78     		ldrb	r2, [r5, #1]
 107              		.loc 1 132 8 view .LVU26
 108 003e 002A     		cmp	r2, #0
 109 0040 06D1     		bne	.L6
 133:Core/Src/uartParser.c ****       tens = 0;
 110              		.loc 1 133 7 is_stmt 1 view .LVU27
 134:Core/Src/uartParser.c ****       if (ascii[0] == 0)
 111              		.loc 1 134 7 view .LVU28
 112              		.loc 1 134 16 is_stmt 0 view .LVU29
 113 0042 2878     		ldrb	r0, [r5]
 114              		.loc 1 134 10 view .LVU30
 115 0044 0028     		cmp	r0, #0
 116 0046 0FD0     		beq	.L3
 135:Core/Src/uartParser.c ****         return 0;
 136:Core/Src/uartParser.c ****       else
 137:Core/Src/uartParser.c ****       ones = ascii[0] - 48;
 117              		.loc 1 137 7 is_stmt 1 view .LVU31
 118              		.loc 1 137 12 is_stmt 0 view .LVU32
 119 0048 3038     		subs	r0, r0, #48
 120 004a C0B2     		uxtb	r0, r0
 121              	.LVL6:
 133:Core/Src/uartParser.c ****       if (ascii[0] == 0)
 122              		.loc 1 133 12 view .LVU33
 123 004c 1300     		movs	r3, r2
 124 004e 04E0     		b	.L7
 125              	.LVL7:
 126              	.L6:
 138:Core/Src/uartParser.c ****     }
 139:Core/Src/uartParser.c ****     else {
 140:Core/Src/uartParser.c ****       tens = ascii[0] - 48;
 127              		.loc 1 140 7 is_stmt 1 view .LVU34
 128              		.loc 1 140 19 is_stmt 0 view .LVU35
 129 0050 2B78     		ldrb	r3, [r5]
 130              		.loc 1 140 12 view .LVU36
 131 0052 303B     		subs	r3, r3, #48
 132 0054 DBB2     		uxtb	r3, r3
 133              	.LVL8:
 141:Core/Src/uartParser.c ****       ones = ascii[1] - 48;
 134              		.loc 1 141 7 is_stmt 1 view .LVU37
 135              		.loc 1 141 12 is_stmt 0 view .LVU38
 136 0056 303A     		subs	r2, r2, #48
 137 0058 D0B2     		uxtb	r0, r2
 138              	.LVL9:
 139              	.L7:
 142:Core/Src/uartParser.c ****     } 
 143:Core/Src/uartParser.c ****     return tens*10 + ones;
 140              		.loc 1 143 5 is_stmt 1 view .LVU39
 141              		.loc 1 143 20 is_stmt 0 view .LVU40
 142 005a 9A00     		lsls	r2, r3, #2
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 6


 143 005c 9B18     		adds	r3, r3, r2
 144              	.LVL10:
 145              		.loc 1 143 20 view .LVU41
 146 005e 5B00     		lsls	r3, r3, #1
 147 0060 C018     		adds	r0, r0, r3
 148              	.LVL11:
 149              		.loc 1 143 20 view .LVU42
 150 0062 C0B2     		uxtb	r0, r0
 151 0064 00E0     		b	.L3
 152              	.LVL12:
 153              	.L8:
 154              	.LBB7:
 120:Core/Src/uartParser.c ****     }
 155              		.loc 1 120 14 view .LVU43
 156 0066 FF20     		movs	r0, #255
 157              	.LVL13:
 158              	.L3:
 120:Core/Src/uartParser.c ****     }
 159              		.loc 1 120 14 view .LVU44
 160              	.LBE7:
 144:Core/Src/uartParser.c ****   }
 145:Core/Src/uartParser.c **** }
 161              		.loc 1 145 1 view .LVU45
 162              		@ sp needed
 163              	.LVL14:
 164              	.LVL15:
 165              		.loc 1 145 1 view .LVU46
 166 0068 70BD     		pop	{r4, r5, r6, pc}
 167              	.LVL16:
 168              	.L10:
 128:Core/Src/uartParser.c ****   }
 169              		.loc 1 128 14 view .LVU47
 170 006a 6520     		movs	r0, #101
 171 006c FCE7     		b	.L3
 172              	.L14:
 173 006e C046     		.align	2
 174              	.L13:
 175 0070 00000000 		.word	.LC0
 176              		.cfi_endproc
 177              	.LFE45:
 179              		.section	.text.transmitOneChar,"ax",%progbits
 180              		.align	1
 181              		.global	transmitOneChar
 182              		.syntax unified
 183              		.code	16
 184              		.thumb_func
 186              	transmitOneChar:
 187              	.LFB49:
 146:Core/Src/uartParser.c **** 
 147:Core/Src/uartParser.c **** /* UART CODE BEGIN Header_StartLEDTask */
 148:Core/Src/uartParser.c **** /**
 149:Core/Src/uartParser.c ****   * @brief  Function implementing the LEDTask thread.
 150:Core/Src/uartParser.c ****   * @param  argument: Not used
 151:Core/Src/uartParser.c ****   * @retval None
 152:Core/Src/uartParser.c ****   */
 153:Core/Src/uartParser.c **** /* USER CODE END Header_StartLEDTask */
 154:Core/Src/uartParser.c **** void StartParseUartTask(void *argument) {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 7


 155:Core/Src/uartParser.c ****   // TODO: add a timer to limit the max execution time
 156:Core/Src/uartParser.c **** 
 157:Core/Src/uartParser.c ****   while (1) {
 158:Core/Src/uartParser.c ****     //transmitCharArray("Waiting to get sem02.\n");
 159:Core/Src/uartParser.c ****     osSemaphoreAcquire(binarySem02UartParserHandle, osWaitForever);
 160:Core/Src/uartParser.c ****     //transmitCharArray("get sem02!\n");
 161:Core/Src/uartParser.c ****     while (1) {
 162:Core/Src/uartParser.c ****       while((USART3->ISR & USART_ISR_RXNE) == 0) {
 163:Core/Src/uartParser.c **** 	    }
 164:Core/Src/uartParser.c ****       //Pull character from UART
 165:Core/Src/uartParser.c **** 	    volatile uint8_t usartReceivedData = USART3->RDR;
 166:Core/Src/uartParser.c ****       transmitOneChar(usartReceivedData);
 167:Core/Src/uartParser.c ****       //Command string terminated with enter key
 168:Core/Src/uartParser.c **** 	    if (usartReceivedData == '\r') {
 169:Core/Src/uartParser.c ****         uint8_t error = parseCmd();
 170:Core/Src/uartParser.c ****         //Command syntax correct
 171:Core/Src/uartParser.c ****         if (error == 0) {
 172:Core/Src/uartParser.c ****           // Store the commandOut in queue
 173:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 174:Core/Src/uartParser.c ****             transmitCharArray("Push command to queue success.\n");
 175:Core/Src/uartParser.c ****             transmitCharArray(tmpStr);
 176:Core/Src/uartParser.c ****             sendUint16BinToUart(commandOut);
 177:Core/Src/uartParser.c ****           } else {
 178:Core/Src/uartParser.c ****             transmitCharArray("Fail to push command to queue, try again.\n");
 179:Core/Src/uartParser.c ****           }
 180:Core/Src/uartParser.c ****         //Command syntax malformed
 181:Core/Src/uartParser.c ****         } else {
 182:Core/Src/uartParser.c ****           transmitCharArray("Command not recognized");
 183:Core/Src/uartParser.c ****           transmitCharArray(tmpStr);
 184:Core/Src/uartParser.c ****           
 185:Core/Src/uartParser.c ****         }
 186:Core/Src/uartParser.c ****         //Reset command string and index
 187:Core/Src/uartParser.c ****         strIndex = 0;
 188:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 189:Core/Src/uartParser.c ****           tmpStr[i] = '\0';
 190:Core/Src/uartParser.c ****           cmd[0][i] = '\0';
 191:Core/Src/uartParser.c ****           cmd[1][i] = '\0';
 192:Core/Src/uartParser.c ****           cmd[2][i] = '\0';
 193:Core/Src/uartParser.c ****           cmd[3][i] = '\0';
 194:Core/Src/uartParser.c ****         }
 195:Core/Src/uartParser.c **** 
 196:Core/Src/uartParser.c ****         //Reset commandOut before starting next command receive
 197:Core/Src/uartParser.c ****         commandOut = 0;
 198:Core/Src/uartParser.c ****         //transmitCharArray("break\n");
 199:Core/Src/uartParser.c ****         break;
 200:Core/Src/uartParser.c **** 	    } else {
 201:Core/Src/uartParser.c ****         tmpStr[strIndex] = usartReceivedData;
 202:Core/Src/uartParser.c ****         strIndex += 1;
 203:Core/Src/uartParser.c ****         //Command too long
 204:Core/Src/uartParser.c ****         if (strIndex == TMP_STR_LEN) {
 205:Core/Src/uartParser.c ****       	  transmitCharArray("Command is too long!");
 206:Core/Src/uartParser.c ****           strIndex = 0;
 207:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 208:Core/Src/uartParser.c ****             tmpStr[i] = '\0';
 209:Core/Src/uartParser.c ****           }
 210:Core/Src/uartParser.c ****           break;
 211:Core/Src/uartParser.c ****         }
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 8


 212:Core/Src/uartParser.c ****       }
 213:Core/Src/uartParser.c ****     }
 214:Core/Src/uartParser.c ****     uartStatus = 0;
 215:Core/Src/uartParser.c ****     //transmitCharArray("Enable Uart RX interrupt");
 216:Core/Src/uartParser.c ****     USART3->CR1 |= USART_CR1_RXNEIE;
 217:Core/Src/uartParser.c ****   }
 218:Core/Src/uartParser.c **** /*
 219:Core/Src/uartParser.c ****   // test queue pop
 220:Core/Src/uartParser.c ****   uint16_t item = queuePop(cmdQueue);
 221:Core/Src/uartParser.c ****   transmitCharArray("Pop items from queue\n");
 222:Core/Src/uartParser.c ****   while (item != 0xffff) {
 223:Core/Src/uartParser.c ****     sendUint16BinToUart(item);
 224:Core/Src/uartParser.c ****     item = queuePop(cmdQueue);
 225:Core/Src/uartParser.c ****   }*/
 226:Core/Src/uartParser.c **** }
 227:Core/Src/uartParser.c **** 
 228:Core/Src/uartParser.c **** //Initialize USART3 - PC4 TX, PC5 RX
 229:Core/Src/uartParser.c **** void initUsart3(void) {
 230:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 231:Core/Src/uartParser.c ****   // set pc4 to AF mode, 0x10
 232:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 233:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 234:Core/Src/uartParser.c ****   // set pc5 to AF mode, 0x10
 235:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 236:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 237:Core/Src/uartParser.c **** 
 238:Core/Src/uartParser.c ****   // set PC4 AFRL to 0001: AF1
 239:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 240:Core/Src/uartParser.c ****   // set PC5 AFRL to 0001: AF1
 241:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 242:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 243:Core/Src/uartParser.c **** 
 244:Core/Src/uartParser.c ****   uint32_t fClk = HAL_RCC_GetHCLKFreq();
 245:Core/Src/uartParser.c **** 
 246:Core/Src/uartParser.c ****   // set baud rate
 247:Core/Src/uartParser.c ****   uint32_t baudRate = 115200;
 248:Core/Src/uartParser.c ****   uint32_t usartBRR = fClk / baudRate;
 249:Core/Src/uartParser.c ****   USART3->BRR = usartBRR;
 250:Core/Src/uartParser.c **** 
 251:Core/Src/uartParser.c ****   // enable the transmitter and receiver hardware of USART3
 252:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 253:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 254:Core/Src/uartParser.c **** 
 255:Core/Src/uartParser.c ****   // Enable USART peripheral.
 256:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 257:Core/Src/uartParser.c ****   transmitCharArray("UART enabled");
 258:Core/Src/uartParser.c **** 
 259:Core/Src/uartParser.c ****   // Enable the receive register not empty interrupt.
 260:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 261:Core/Src/uartParser.c ****   // Enable and set the USART interrupt priority in the NVIC.
 262:Core/Src/uartParser.c ****   NVIC_EnableIRQ(USART3_4_IRQn);
 263:Core/Src/uartParser.c ****   NVIC_SetPriority(USART3_4_IRQn, 3);
 264:Core/Src/uartParser.c ****   /* Create the semaphores(s) */
 265:Core/Src/uartParser.c ****   /* definition and creation of myBinarySem02 */
 266:Core/Src/uartParser.c ****   // The semaphore is created with an initial count of 0 
 267:Core/Src/uartParser.c ****   // ,which means it is not available initially. 
 268:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 9


 269:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 270:Core/Src/uartParser.c **** }
 271:Core/Src/uartParser.c **** 
 272:Core/Src/uartParser.c **** // Handle uart RX with interrupt
 273:Core/Src/uartParser.c **** void USART3_4_IRQHandler(void) {
 274:Core/Src/uartParser.c ****   transmitCharArray("UART RX interrupt.");
 275:Core/Src/uartParser.c ****   if (uartStatus == 0) {
 276:Core/Src/uartParser.c ****     while((USART3->ISR & USART_ISR_RXNE) == 0) {
 277:Core/Src/uartParser.c **** 	  }
 278:Core/Src/uartParser.c ****     //transmitCharArray("Release sem02\n");
 279:Core/Src/uartParser.c ****     osSemaphoreRelease(binarySem02UartParserHandle);
 280:Core/Src/uartParser.c ****     volatile uint8_t usartReceivedData = USART3->RDR;
 281:Core/Src/uartParser.c ****     transmitCharArray("cmd:\n");
 282:Core/Src/uartParser.c ****     transmitOneChar(usartReceivedData);
 283:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 284:Core/Src/uartParser.c **** 		strIndex++;
 285:Core/Src/uartParser.c ****     uartStatus = 1;
 286:Core/Src/uartParser.c ****     // Disable the receive register not empty interrupt.
 287:Core/Src/uartParser.c ****     USART3->CR1 &= ~USART_CR1_RXNEIE;
 288:Core/Src/uartParser.c ****   }
 289:Core/Src/uartParser.c **** }
 290:Core/Src/uartParser.c **** 
 291:Core/Src/uartParser.c **** void transmitOneChar(uint8_t ch) {
 188              		.loc 1 291 34 is_stmt 1 view -0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 192              		@ link register save eliminated.
 193              	.LVL17:
 194              	.L16:
 292:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 293:Core/Src/uartParser.c ****   }
 195              		.loc 1 293 3 view .LVU49
 292:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 196              		.loc 1 292 40 discriminator 1 view .LVU50
 292:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 197              		.loc 1 292 17 is_stmt 0 discriminator 1 view .LVU51
 198 0000 034B     		ldr	r3, .L18
 199 0002 DB69     		ldr	r3, [r3, #28]
 292:Core/Src/uartParser.c ****   while ((USART3->ISR & USART_ISR_TXE) == 0) {
 200              		.loc 1 292 40 discriminator 1 view .LVU52
 201 0004 1B06     		lsls	r3, r3, #24
 202 0006 FBD5     		bpl	.L16
 294:Core/Src/uartParser.c ****   USART3->TDR = ch;
 203              		.loc 1 294 3 is_stmt 1 view .LVU53
 204              		.loc 1 294 15 is_stmt 0 view .LVU54
 205 0008 014B     		ldr	r3, .L18
 206 000a 1885     		strh	r0, [r3, #40]
 295:Core/Src/uartParser.c **** }
 207              		.loc 1 295 1 view .LVU55
 208              		@ sp needed
 209 000c 7047     		bx	lr
 210              	.L19:
 211 000e C046     		.align	2
 212              	.L18:
 213 0010 00480040 		.word	1073760256
 214              		.cfi_endproc
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 10


 215              	.LFE49:
 217              		.section	.text.transmitCharArray,"ax",%progbits
 218              		.align	1
 219              		.global	transmitCharArray
 220              		.syntax unified
 221              		.code	16
 222              		.thumb_func
 224              	transmitCharArray:
 225              	.LVL18:
 226              	.LFB50:
 296:Core/Src/uartParser.c **** 
 297:Core/Src/uartParser.c **** void transmitCharArray (char *arr) {
 227              		.loc 1 297 36 is_stmt 1 view -0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 0
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231              		.loc 1 297 36 is_stmt 0 view .LVU57
 232 0000 10B5     		push	{r4, lr}
 233              	.LCFI1:
 234              		.cfi_def_cfa_offset 8
 235              		.cfi_offset 4, -8
 236              		.cfi_offset 14, -4
 237 0002 0400     		movs	r4, r0
 298:Core/Src/uartParser.c ****   while (*arr != '\0') {
 238              		.loc 1 298 3 is_stmt 1 view .LVU58
 239              		.loc 1 298 9 is_stmt 0 view .LVU59
 240 0004 02E0     		b	.L21
 241              	.LVL19:
 242              	.L22:
 299:Core/Src/uartParser.c **** 		transmitOneChar(*arr);
 243              		.loc 1 299 3 is_stmt 1 view .LVU60
 244 0006 FFF7FEFF 		bl	transmitOneChar
 245              	.LVL20:
 300:Core/Src/uartParser.c **** 		arr++;
 246              		.loc 1 300 3 view .LVU61
 247              		.loc 1 300 6 is_stmt 0 view .LVU62
 248 000a 0134     		adds	r4, r4, #1
 249              	.LVL21:
 250              	.L21:
 298:Core/Src/uartParser.c ****   while (*arr != '\0') {
 251              		.loc 1 298 15 is_stmt 1 view .LVU63
 298:Core/Src/uartParser.c ****   while (*arr != '\0') {
 252              		.loc 1 298 10 is_stmt 0 view .LVU64
 253 000c 2078     		ldrb	r0, [r4]
 298:Core/Src/uartParser.c ****   while (*arr != '\0') {
 254              		.loc 1 298 15 view .LVU65
 255 000e 0028     		cmp	r0, #0
 256 0010 F9D1     		bne	.L22
 301:Core/Src/uartParser.c **** 	}
 302:Core/Src/uartParser.c ****   transmitOneChar('\n');
 257              		.loc 1 302 3 is_stmt 1 view .LVU66
 258 0012 0A30     		adds	r0, r0, #10
 259 0014 FFF7FEFF 		bl	transmitOneChar
 260              	.LVL22:
 303:Core/Src/uartParser.c ****   transmitOneChar('\r');
 261              		.loc 1 303 3 view .LVU67
 262 0018 0D20     		movs	r0, #13
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 11


 263 001a FFF7FEFF 		bl	transmitOneChar
 264              	.LVL23:
 304:Core/Src/uartParser.c **** }...
 265              		.loc 1 304 1 is_stmt 0 view .LVU68
 266              		@ sp needed
 267              	.LVL24:
 268              		.loc 1 304 1 view .LVU69
 269 001e 10BD     		pop	{r4, pc}
 270              		.cfi_endproc
 271              	.LFE50:
 273              		.section	.text.sendUint16BinToUart,"ax",%progbits
 274              		.align	1
 275              		.global	sendUint16BinToUart
 276              		.syntax unified
 277              		.code	16
 278              		.thumb_func
 280              	sendUint16BinToUart:
 281              	.LVL25:
 282              	.LFB43:
  30:Core/Src/uartParser.c **** void sendUint16BinToUart(uint16_t x) {
 283              		.loc 1 30 38 is_stmt 1 view -0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 16
 286              		@ frame_needed = 0, uses_anonymous_args = 0
  30:Core/Src/uartParser.c **** void sendUint16BinToUart(uint16_t x) {
 287              		.loc 1 30 38 is_stmt 0 view .LVU71
 288 0000 10B5     		push	{r4, lr}
 289              	.LCFI2:
 290              		.cfi_def_cfa_offset 8
 291              		.cfi_offset 4, -8
 292              		.cfi_offset 14, -4
 293 0002 84B0     		sub	sp, sp, #16
 294              	.LCFI3:
 295              		.cfi_def_cfa_offset 24
  31:Core/Src/uartParser.c **** 	char str[16];
 296              		.loc 1 31 2 is_stmt 1 view .LVU72
  32:Core/Src/uartParser.c **** 	uint8_t i = 0;
 297              		.loc 1 32 2 view .LVU73
 298              	.LVL26:
  33:Core/Src/uartParser.c **** 	while (i < 16) {
 299              		.loc 1 33 2 view .LVU74
  32:Core/Src/uartParser.c **** 	uint8_t i = 0;
 300              		.loc 1 32 10 is_stmt 0 view .LVU75
 301 0004 0023     		movs	r3, #0
  33:Core/Src/uartParser.c **** 	while (i < 16) {
 302              		.loc 1 33 8 view .LVU76
 303 0006 0AE0     		b	.L24
 304              	.LVL27:
 305              	.L25:
  34:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 306              		.loc 1 34 3 is_stmt 1 view .LVU77
  34:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 307              		.loc 1 34 25 is_stmt 0 view .LVU78
 308 0008 0100     		movs	r1, r0
 309 000a 1941     		asrs	r1, r1, r3
  34:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 310              		.loc 1 34 31 view .LVU79
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 12


 311 000c 0122     		movs	r2, #1
 312 000e 0A40     		ands	r2, r1
  34:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 313              		.loc 1 34 9 view .LVU80
 314 0010 0F21     		movs	r1, #15
 315 0012 C91A     		subs	r1, r1, r3
  34:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 316              		.loc 1 34 19 view .LVU81
 317 0014 3032     		adds	r2, r2, #48
  34:Core/Src/uartParser.c **** 		str[15-i] = '0' + ((x >> i) & 0x1);
 318              		.loc 1 34 13 view .LVU82
 319 0016 6C46     		mov	r4, sp
 320 0018 6254     		strb	r2, [r4, r1]
  35:Core/Src/uartParser.c **** 	  i++;
 321              		.loc 1 35 4 is_stmt 1 view .LVU83
  35:Core/Src/uartParser.c **** 	  i++;
 322              		.loc 1 35 5 is_stmt 0 view .LVU84
 323 001a 0133     		adds	r3, r3, #1
 324              	.LVL28:
  35:Core/Src/uartParser.c **** 	  i++;
 325              		.loc 1 35 5 view .LVU85
 326 001c DBB2     		uxtb	r3, r3
 327              	.LVL29:
 328              	.L24:
  33:Core/Src/uartParser.c **** 	while (i < 16) {
 329              		.loc 1 33 11 is_stmt 1 view .LVU86
 330 001e 0F2B     		cmp	r3, #15
 331 0020 F2D9     		bls	.L25
  37:Core/Src/uartParser.c **** 	transmitCharArray(str);
 332              		.loc 1 37 2 view .LVU87
 333 0022 6846     		mov	r0, sp
 334              	.LVL30:
  37:Core/Src/uartParser.c **** 	transmitCharArray(str);
 335              		.loc 1 37 2 is_stmt 0 view .LVU88
 336 0024 FFF7FEFF 		bl	transmitCharArray
 337              	.LVL31:
  38:Core/Src/uartParser.c **** }
 338              		.loc 1 38 1 view .LVU89
 339 0028 04B0     		add	sp, sp, #16
 340              		@ sp needed
 341 002a 10BD     		pop	{r4, pc}
 342              		.cfi_endproc
 343              	.LFE43:
 345              		.section	.rodata.parseCmd.str1.4,"aMS",%progbits,1
 346              		.align	2
 347              	.LC7:
 348 0000 6C656400 		.ascii	"led\000"
 349              		.align	2
 350              	.LC10:
 351 0004 72656400 		.ascii	"red\000"
 352              		.align	2
 353              	.LC13:
 354 0008 67726565 		.ascii	"green\000"
 354      6E00
 355 000e 0000     		.align	2
 356              	.LC15:
 357 0010 626C7565 		.ascii	"blue\000"
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 13


 357      00
 358 0015 000000   		.align	2
 359              	.LC17:
 360 0018 6F72616E 		.ascii	"orange\000"
 360      676500
 361 001f 00       		.align	2
 362              	.LC19:
 363 0020 6F6E00   		.ascii	"on\000"
 364 0023 00       		.align	2
 365              	.LC22:
 366 0024 6F666600 		.ascii	"off\000"
 367              		.align	2
 368              	.LC24:
 369 0028 746F6767 		.ascii	"toggle\000"
 369      6C6500
 370 002f 00       		.align	2
 371              	.LC26:
 372 0030 6D6F746F 		.ascii	"motor\000"
 372      7200
 373 0036 0000     		.align	2
 374              	.LC28:
 375 0038 73706565 		.ascii	"speed\000"
 375      6400
 376 003e 0000     		.align	2
 377              	.LC30:
 378 0040 53706565 		.ascii	"Speed limited to 100 RPM\000"
 378      64206C69 
 378      6D697465 
 378      6420746F 
 378      20313030 
 379              		.section	.text.parseCmd,"ax",%progbits
 380              		.align	1
 381              		.global	parseCmd
 382              		.syntax unified
 383              		.code	16
 384              		.thumb_func
 386              	parseCmd:
 387              	.LFB44:
  40:Core/Src/uartParser.c **** uint8_t parseCmd(void) {
 388              		.loc 1 40 24 is_stmt 1 view -0
 389              		.cfi_startproc
 390              		@ args = 0, pretend = 0, frame = 8
 391              		@ frame_needed = 0, uses_anonymous_args = 0
 392 0000 30B5     		push	{r4, r5, lr}
 393              	.LCFI4:
 394              		.cfi_def_cfa_offset 12
 395              		.cfi_offset 4, -12
 396              		.cfi_offset 5, -8
 397              		.cfi_offset 14, -4
 398 0002 83B0     		sub	sp, sp, #12
 399              	.LCFI5:
 400              		.cfi_def_cfa_offset 24
  41:Core/Src/uartParser.c ****   uint8_t error = 0;
 401              		.loc 1 41 3 view .LVU91
 402              	.LVL32:
  42:Core/Src/uartParser.c ****   uint8_t speed = 0;
 403              		.loc 1 42 3 view .LVU92
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 14


  44:Core/Src/uartParser.c ****   volatile uint8_t strLen = strIndex + 1;
 404              		.loc 1 44 3 view .LVU93
  44:Core/Src/uartParser.c ****   volatile uint8_t strLen = strIndex + 1;
 405              		.loc 1 44 38 is_stmt 0 view .LVU94
 406 0004 824A     		ldr	r2, .L52
 407 0006 1378     		ldrb	r3, [r2]
 408 0008 0133     		adds	r3, r3, #1
 409 000a DBB2     		uxtb	r3, r3
  44:Core/Src/uartParser.c ****   volatile uint8_t strLen = strIndex + 1;
 410              		.loc 1 44 20 view .LVU95
 411 000c 6946     		mov	r1, sp
 412 000e CB71     		strb	r3, [r1, #7]
  45:Core/Src/uartParser.c ****   strIndex = 0;
 413              		.loc 1 45 3 is_stmt 1 view .LVU96
  45:Core/Src/uartParser.c ****   strIndex = 0;
 414              		.loc 1 45 12 is_stmt 0 view .LVU97
 415 0010 0023     		movs	r3, #0
 416 0012 1370     		strb	r3, [r2]
  46:Core/Src/uartParser.c ****   cmdStrIndex = 0;
 417              		.loc 1 46 3 is_stmt 1 view .LVU98
  46:Core/Src/uartParser.c ****   cmdStrIndex = 0;
 418              		.loc 1 46 15 is_stmt 0 view .LVU99
 419 0014 7F4A     		ldr	r2, .L52+4
 420 0016 1370     		strb	r3, [r2]
  47:Core/Src/uartParser.c ****   cmdIndex = 0;
 421              		.loc 1 47 3 is_stmt 1 view .LVU100
  47:Core/Src/uartParser.c ****   cmdIndex = 0;
 422              		.loc 1 47 12 is_stmt 0 view .LVU101
 423 0018 7F4A     		ldr	r2, .L52+8
 424 001a 1370     		strb	r3, [r2]
  48:Core/Src/uartParser.c ****   while (strIndex < strLen) {
 425              		.loc 1 48 3 is_stmt 1 view .LVU102
  48:Core/Src/uartParser.c ****   while (strIndex < strLen) {
 426              		.loc 1 48 9 is_stmt 0 view .LVU103
 427 001c 0CE0     		b	.L27
 428              	.L50:
  50:Core/Src/uartParser.c ****       cmdIndex++;
 429              		.loc 1 50 7 is_stmt 1 view .LVU104
  50:Core/Src/uartParser.c ****       cmdIndex++;
 430              		.loc 1 50 15 is_stmt 0 view .LVU105
 431 001e 7E4A     		ldr	r2, .L52+8
 432 0020 1378     		ldrb	r3, [r2]
 433 0022 0133     		adds	r3, r3, #1
 434 0024 DBB2     		uxtb	r3, r3
 435 0026 1370     		strb	r3, [r2]
  51:Core/Src/uartParser.c ****       cmdStrIndex = 0;
 436              		.loc 1 51 7 is_stmt 1 view .LVU106
  51:Core/Src/uartParser.c ****       cmdStrIndex = 0;
 437              		.loc 1 51 19 is_stmt 0 view .LVU107
 438 0028 7A4B     		ldr	r3, .L52+4
 439 002a 0022     		movs	r2, #0
 440 002c 1A70     		strb	r2, [r3]
 441              	.L29:
  56:Core/Src/uartParser.c ****     strIndex++;
 442              		.loc 1 56 5 is_stmt 1 view .LVU108
  56:Core/Src/uartParser.c ****     strIndex++;
 443              		.loc 1 56 13 is_stmt 0 view .LVU109
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 15


 444 002e 784A     		ldr	r2, .L52
 445 0030 1378     		ldrb	r3, [r2]
 446 0032 0133     		adds	r3, r3, #1
 447 0034 DBB2     		uxtb	r3, r3
 448 0036 1370     		strb	r3, [r2]
 449              	.L27:
  48:Core/Src/uartParser.c ****   while (strIndex < strLen) {
 450              		.loc 1 48 19 is_stmt 1 view .LVU110
 451 0038 754B     		ldr	r3, .L52
 452 003a 1A78     		ldrb	r2, [r3]
 453 003c D2B2     		uxtb	r2, r2
 454 003e 6B46     		mov	r3, sp
 455 0040 0733     		adds	r3, r3, #7
 456 0042 1B78     		ldrb	r3, [r3]
 457 0044 DBB2     		uxtb	r3, r3
 458 0046 9A42     		cmp	r2, r3
 459 0048 1CD2     		bcs	.L49
  49:Core/Src/uartParser.c ****     if (tmpStr[strIndex] == ' ') {
 460              		.loc 1 49 5 view .LVU111
  49:Core/Src/uartParser.c ****     if (tmpStr[strIndex] == ' ') {
 461              		.loc 1 49 15 is_stmt 0 view .LVU112
 462 004a 714B     		ldr	r3, .L52
 463 004c 1B78     		ldrb	r3, [r3]
 464 004e DBB2     		uxtb	r3, r3
 465 0050 724A     		ldr	r2, .L52+12
 466 0052 D35C     		ldrb	r3, [r2, r3]
  49:Core/Src/uartParser.c ****     if (tmpStr[strIndex] == ' ') {
 467              		.loc 1 49 8 view .LVU113
 468 0054 202B     		cmp	r3, #32
 469 0056 E2D0     		beq	.L50
  53:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 470              		.loc 1 53 7 is_stmt 1 view .LVU114
  53:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 471              		.loc 1 53 42 is_stmt 0 view .LVU115
 472 0058 6D4B     		ldr	r3, .L52
 473 005a 1A78     		ldrb	r2, [r3]
 474 005c D2B2     		uxtb	r2, r2
  53:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 475              		.loc 1 53 20 view .LVU116
 476 005e 6E4B     		ldr	r3, .L52+8
 477 0060 1B78     		ldrb	r3, [r3]
 478 0062 6C49     		ldr	r1, .L52+4
 479 0064 0878     		ldrb	r0, [r1]
 480 0066 C0B2     		uxtb	r0, r0
  53:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 481              		.loc 1 53 42 view .LVU117
 482 0068 6C4C     		ldr	r4, .L52+12
 483 006a A45C     		ldrb	r4, [r4, r2]
 484 006c E4B2     		uxtb	r4, r4
  53:Core/Src/uartParser.c ****       cmd[cmdIndex][cmdStrIndex] = tmpStr[strIndex];
 485              		.loc 1 53 34 view .LVU118
 486 006e 6C4A     		ldr	r2, .L52+16
 487 0070 9D00     		lsls	r5, r3, #2
 488 0072 5B19     		adds	r3, r3, r5
 489 0074 9B00     		lsls	r3, r3, #2
 490 0076 D218     		adds	r2, r2, r3
 491 0078 1454     		strb	r4, [r2, r0]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 16


  54:Core/Src/uartParser.c ****       cmdStrIndex++;
 492              		.loc 1 54 7 is_stmt 1 view .LVU119
  54:Core/Src/uartParser.c ****       cmdStrIndex++;
 493              		.loc 1 54 18 is_stmt 0 view .LVU120
 494 007a 0B78     		ldrb	r3, [r1]
 495 007c 0133     		adds	r3, r3, #1
 496 007e DBB2     		uxtb	r3, r3
 497 0080 0B70     		strb	r3, [r1]
 498 0082 D4E7     		b	.L29
 499              	.L49:
  60:Core/Src/uartParser.c ****   if (strcmp(cmd[0], "led") == 0) {
 500              		.loc 1 60 3 is_stmt 1 view .LVU121
  60:Core/Src/uartParser.c ****   if (strcmp(cmd[0], "led") == 0) {
 501              		.loc 1 60 7 is_stmt 0 view .LVU122
 502 0084 6749     		ldr	r1, .L52+20
 503 0086 6648     		ldr	r0, .L52+16
 504 0088 FFF7FEFF 		bl	strcmp
 505              	.LVL33:
  60:Core/Src/uartParser.c ****   if (strcmp(cmd[0], "led") == 0) {
 506              		.loc 1 60 6 discriminator 1 view .LVU123
 507 008c 0028     		cmp	r0, #0
 508 008e 00D0     		beq	.LCB405
 509 0090 67E0     		b	.L31	@long jump
 510              	.LCB405:
  61:Core/Src/uartParser.c ****     commandOut |= 0xA000;
 511              		.loc 1 61 5 is_stmt 1 view .LVU124
  61:Core/Src/uartParser.c ****     commandOut |= 0xA000;
 512              		.loc 1 61 16 is_stmt 0 view .LVU125
 513 0092 654A     		ldr	r2, .L52+24
 514 0094 1388     		ldrh	r3, [r2]
 515 0096 6549     		ldr	r1, .L52+28
 516 0098 0B43     		orrs	r3, r1
 517 009a 9BB2     		uxth	r3, r3
 518 009c 1380     		strh	r3, [r2]
  63:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "red") == 0) {
 519              		.loc 1 63 5 is_stmt 1 view .LVU126
  63:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "red") == 0) {
 520              		.loc 1 63 9 is_stmt 0 view .LVU127
 521 009e 6449     		ldr	r1, .L52+32
 522 00a0 6448     		ldr	r0, .L52+36
 523 00a2 FFF7FEFF 		bl	strcmp
 524              	.LVL34:
  63:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "red") == 0) {
 525              		.loc 1 63 8 discriminator 1 view .LVU128
 526 00a6 0028     		cmp	r0, #0
 527 00a8 15D1     		bne	.L32
  64:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 528              		.loc 1 64 7 is_stmt 1 view .LVU129
  64:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 529              		.loc 1 64 18 is_stmt 0 view .LVU130
 530 00aa 5F4A     		ldr	r2, .L52+24
 531 00ac 1388     		ldrh	r3, [r2]
 532 00ae 8021     		movs	r1, #128
 533 00b0 4900     		lsls	r1, r1, #1
 534 00b2 0B43     		orrs	r3, r1
 535 00b4 1380     		strh	r3, [r2]
  41:Core/Src/uartParser.c ****   uint8_t error = 0;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 17


 536              		.loc 1 41 11 view .LVU131
 537 00b6 0024     		movs	r4, #0
 538              	.L33:
 539              	.LVL35:
  75:Core/Src/uartParser.c ****     if (strcmp(cmd[2], "on") == 0) {
 540              		.loc 1 75 5 is_stmt 1 view .LVU132
  75:Core/Src/uartParser.c ****     if (strcmp(cmd[2], "on") == 0) {
 541              		.loc 1 75 9 is_stmt 0 view .LVU133
 542 00b8 5F49     		ldr	r1, .L52+40
 543 00ba 6048     		ldr	r0, .L52+44
 544 00bc FFF7FEFF 		bl	strcmp
 545              	.LVL36:
  75:Core/Src/uartParser.c ****     if (strcmp(cmd[2], "on") == 0) {
 546              		.loc 1 75 8 discriminator 1 view .LVU134
 547 00c0 0028     		cmp	r0, #0
 548 00c2 34D1     		bne	.L36
  76:Core/Src/uartParser.c ****       commandOut |= 0x0010;
 549              		.loc 1 76 7 is_stmt 1 view .LVU135
  76:Core/Src/uartParser.c ****       commandOut |= 0x0010;
 550              		.loc 1 76 18 is_stmt 0 view .LVU136
 551 00c4 584A     		ldr	r2, .L52+24
 552 00c6 1388     		ldrh	r3, [r2]
 553 00c8 1021     		movs	r1, #16
 554 00ca 0B43     		orrs	r3, r1
 555 00cc 9BB2     		uxth	r3, r3
 556 00ce 1380     		strh	r3, [r2]
 557              	.LVL37:
 558              	.L37:
 111:Core/Src/uartParser.c ****   return error;
 559              		.loc 1 111 3 is_stmt 1 view .LVU137
 112:Core/Src/uartParser.c **** }
 560              		.loc 1 112 1 is_stmt 0 view .LVU138
 561 00d0 2000     		movs	r0, r4
 562 00d2 03B0     		add	sp, sp, #12
 563              		@ sp needed
 564              	.LVL38:
 112:Core/Src/uartParser.c **** }
 565              		.loc 1 112 1 view .LVU139
 566 00d4 30BD     		pop	{r4, r5, pc}
 567              	.LVL39:
 568              	.L32:
  65:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "green") == 0) {
 569              		.loc 1 65 12 is_stmt 1 view .LVU140
  65:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "green") == 0) {
 570              		.loc 1 65 16 is_stmt 0 view .LVU141
 571 00d6 5A49     		ldr	r1, .L52+48
 572 00d8 5648     		ldr	r0, .L52+36
 573 00da FFF7FEFF 		bl	strcmp
 574              	.LVL40:
  65:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "green") == 0) {
 575              		.loc 1 65 15 discriminator 1 view .LVU142
 576 00de 0028     		cmp	r0, #0
 577 00e0 07D1     		bne	.L34
  66:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 578              		.loc 1 66 7 is_stmt 1 view .LVU143
  66:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 579              		.loc 1 66 18 is_stmt 0 view .LVU144
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 18


 580 00e2 514A     		ldr	r2, .L52+24
 581 00e4 1388     		ldrh	r3, [r2]
 582 00e6 8021     		movs	r1, #128
 583 00e8 8900     		lsls	r1, r1, #2
 584 00ea 0B43     		orrs	r3, r1
 585 00ec 1380     		strh	r3, [r2]
  41:Core/Src/uartParser.c ****   uint8_t error = 0;
 586              		.loc 1 41 11 view .LVU145
 587 00ee 0024     		movs	r4, #0
 588 00f0 E2E7     		b	.L33
 589              	.L34:
  67:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "blue") == 0) {
 590              		.loc 1 67 12 is_stmt 1 view .LVU146
  67:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "blue") == 0) {
 591              		.loc 1 67 16 is_stmt 0 view .LVU147
 592 00f2 5449     		ldr	r1, .L52+52
 593 00f4 4F48     		ldr	r0, .L52+36
 594 00f6 FFF7FEFF 		bl	strcmp
 595              	.LVL41:
  67:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "blue") == 0) {
 596              		.loc 1 67 15 discriminator 1 view .LVU148
 597 00fa 0028     		cmp	r0, #0
 598 00fc 07D1     		bne	.L35
  68:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 599              		.loc 1 68 7 is_stmt 1 view .LVU149
  68:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 600              		.loc 1 68 18 is_stmt 0 view .LVU150
 601 00fe 4A4A     		ldr	r2, .L52+24
 602 0100 1388     		ldrh	r3, [r2]
 603 0102 C021     		movs	r1, #192
 604 0104 8900     		lsls	r1, r1, #2
 605 0106 0B43     		orrs	r3, r1
 606 0108 1380     		strh	r3, [r2]
  41:Core/Src/uartParser.c ****   uint8_t error = 0;
 607              		.loc 1 41 11 view .LVU151
 608 010a 0024     		movs	r4, #0
 609 010c D4E7     		b	.L33
 610              	.L35:
  69:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "orange") == 0) {
 611              		.loc 1 69 12 is_stmt 1 view .LVU152
  69:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "orange") == 0) {
 612              		.loc 1 69 16 is_stmt 0 view .LVU153
 613 010e 4E49     		ldr	r1, .L52+56
 614 0110 4848     		ldr	r0, .L52+36
 615 0112 FFF7FEFF 		bl	strcmp
 616              	.LVL42:
  69:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "orange") == 0) {
 617              		.loc 1 69 15 discriminator 1 view .LVU154
 618 0116 0028     		cmp	r0, #0
 619 0118 07D1     		bne	.L44
  70:Core/Src/uartParser.c ****       commandOut |= 0x0400;
 620              		.loc 1 70 7 is_stmt 1 view .LVU155
  70:Core/Src/uartParser.c ****       commandOut |= 0x0400;
 621              		.loc 1 70 18 is_stmt 0 view .LVU156
 622 011a 434A     		ldr	r2, .L52+24
 623 011c 1388     		ldrh	r3, [r2]
 624 011e 8021     		movs	r1, #128
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 19


 625 0120 C900     		lsls	r1, r1, #3
 626 0122 0B43     		orrs	r3, r1
 627 0124 1380     		strh	r3, [r2]
  41:Core/Src/uartParser.c ****   uint8_t error = 0;
 628              		.loc 1 41 11 view .LVU157
 629 0126 0024     		movs	r4, #0
 630 0128 C6E7     		b	.L33
 631              	.L44:
  72:Core/Src/uartParser.c ****       error = 1;
 632              		.loc 1 72 13 view .LVU158
 633 012a 0124     		movs	r4, #1
 634 012c C4E7     		b	.L33
 635              	.LVL43:
 636              	.L36:
  77:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "off") == 0) {
 637              		.loc 1 77 12 is_stmt 1 view .LVU159
  77:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "off") == 0) {
 638              		.loc 1 77 16 is_stmt 0 view .LVU160
 639 012e 4749     		ldr	r1, .L52+60
 640 0130 4248     		ldr	r0, .L52+44
 641 0132 FFF7FEFF 		bl	strcmp
 642              	.LVL44:
  77:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "off") == 0) {
 643              		.loc 1 77 15 discriminator 1 view .LVU161
 644 0136 0028     		cmp	r0, #0
 645 0138 06D1     		bne	.L38
  78:Core/Src/uartParser.c ****       commandOut |= 0x0020;
 646              		.loc 1 78 7 is_stmt 1 view .LVU162
  78:Core/Src/uartParser.c ****       commandOut |= 0x0020;
 647              		.loc 1 78 18 is_stmt 0 view .LVU163
 648 013a 3B4A     		ldr	r2, .L52+24
 649 013c 1388     		ldrh	r3, [r2]
 650 013e 2021     		movs	r1, #32
 651 0140 0B43     		orrs	r3, r1
 652 0142 9BB2     		uxth	r3, r3
 653 0144 1380     		strh	r3, [r2]
 654 0146 C3E7     		b	.L37
 655              	.L38:
  79:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "toggle") == 0) {
 656              		.loc 1 79 12 is_stmt 1 view .LVU164
  79:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "toggle") == 0) {
 657              		.loc 1 79 16 is_stmt 0 view .LVU165
 658 0148 4149     		ldr	r1, .L52+64
 659 014a 3C48     		ldr	r0, .L52+44
 660 014c FFF7FEFF 		bl	strcmp
 661              	.LVL45:
  79:Core/Src/uartParser.c ****     } else if (strcmp(cmd[2], "toggle") == 0) {
 662              		.loc 1 79 15 discriminator 1 view .LVU166
 663 0150 0028     		cmp	r0, #0
 664 0152 57D1     		bne	.L45
  80:Core/Src/uartParser.c ****       commandOut |= 0x0030;
 665              		.loc 1 80 7 is_stmt 1 view .LVU167
  80:Core/Src/uartParser.c ****       commandOut |= 0x0030;
 666              		.loc 1 80 18 is_stmt 0 view .LVU168
 667 0154 344A     		ldr	r2, .L52+24
 668 0156 1388     		ldrh	r3, [r2]
 669 0158 3021     		movs	r1, #48
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 20


 670 015a 0B43     		orrs	r3, r1
 671 015c 9BB2     		uxth	r3, r3
 672 015e 1380     		strh	r3, [r2]
 673 0160 B6E7     		b	.L37
 674              	.LVL46:
 675              	.L31:
  84:Core/Src/uartParser.c ****   } else if (strcmp(cmd[0], "motor") == 0) {
 676              		.loc 1 84 10 is_stmt 1 view .LVU169
  84:Core/Src/uartParser.c ****   } else if (strcmp(cmd[0], "motor") == 0) {
 677              		.loc 1 84 14 is_stmt 0 view .LVU170
 678 0162 3C49     		ldr	r1, .L52+68
 679 0164 2E48     		ldr	r0, .L52+16
 680 0166 FFF7FEFF 		bl	strcmp
 681              	.LVL47:
  84:Core/Src/uartParser.c ****   } else if (strcmp(cmd[0], "motor") == 0) {
 682              		.loc 1 84 13 discriminator 1 view .LVU171
 683 016a 0028     		cmp	r0, #0
 684 016c 4CD1     		bne	.L46
  85:Core/Src/uartParser.c ****     commandOut |= 0xB000;
 685              		.loc 1 85 5 is_stmt 1 view .LVU172
  85:Core/Src/uartParser.c ****     commandOut |= 0xB000;
 686              		.loc 1 85 16 is_stmt 0 view .LVU173
 687 016e 2E4A     		ldr	r2, .L52+24
 688 0170 1388     		ldrh	r3, [r2]
 689 0172 3949     		ldr	r1, .L52+72
 690 0174 0B43     		orrs	r3, r1
 691 0176 9BB2     		uxth	r3, r3
 692 0178 1380     		strh	r3, [r2]
  87:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "on") == 0) {
 693              		.loc 1 87 5 is_stmt 1 view .LVU174
  87:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "on") == 0) {
 694              		.loc 1 87 9 is_stmt 0 view .LVU175
 695 017a 2F49     		ldr	r1, .L52+40
 696 017c 2D48     		ldr	r0, .L52+36
 697 017e FFF7FEFF 		bl	strcmp
 698              	.LVL48:
  87:Core/Src/uartParser.c ****     if (strcmp(cmd[1], "on") == 0) {
 699              		.loc 1 87 8 discriminator 1 view .LVU176
 700 0182 0028     		cmp	r0, #0
 701 0184 13D1     		bne	.L39
  88:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 702              		.loc 1 88 7 is_stmt 1 view .LVU177
  88:Core/Src/uartParser.c ****       commandOut |= 0x0100;
 703              		.loc 1 88 18 is_stmt 0 view .LVU178
 704 0186 284A     		ldr	r2, .L52+24
 705 0188 1388     		ldrh	r3, [r2]
 706 018a 8021     		movs	r1, #128
 707 018c 4900     		lsls	r1, r1, #1
 708 018e 0B43     		orrs	r3, r1
 709 0190 1380     		strh	r3, [r2]
  89:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 710              		.loc 1 89 7 is_stmt 1 view .LVU179
  89:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 711              		.loc 1 89 15 is_stmt 0 view .LVU180
 712 0192 2A48     		ldr	r0, .L52+44
 713 0194 FFF7FEFF 		bl	convertSpeed
 714              	.LVL49:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 21


 715              	.L40:
  99:Core/Src/uartParser.c ****     if (speed == 255)
 716              		.loc 1 99 5 is_stmt 1 view .LVU181
  99:Core/Src/uartParser.c ****     if (speed == 255)
 717              		.loc 1 99 8 is_stmt 0 view .LVU182
 718 0198 FF28     		cmp	r0, #255
 719 019a 37D0     		beq	.L48
 720 019c 0024     		movs	r4, #0
 721              	.LVL50:
 722              	.L42:
 102:Core/Src/uartParser.c ****       if (speed == 101) {
 723              		.loc 1 102 7 is_stmt 1 view .LVU183
 102:Core/Src/uartParser.c ****       if (speed == 101) {
 724              		.loc 1 102 10 is_stmt 0 view .LVU184
 725 019e 6528     		cmp	r0, #101
 726 01a0 26D0     		beq	.L51
 107:Core/Src/uartParser.c ****         commandOut |= speed;
 727              		.loc 1 107 9 is_stmt 1 view .LVU185
 107:Core/Src/uartParser.c ****         commandOut |= speed;
 728              		.loc 1 107 20 is_stmt 0 view .LVU186
 729 01a2 214A     		ldr	r2, .L52+24
 730 01a4 1388     		ldrh	r3, [r2]
 731 01a6 0343     		orrs	r3, r0
 732 01a8 9BB2     		uxth	r3, r3
 733 01aa 1380     		strh	r3, [r2]
 734 01ac 90E7     		b	.L37
 735              	.LVL51:
 736              	.L39:
  90:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "off") == 0) {
 737              		.loc 1 90 12 is_stmt 1 view .LVU187
  90:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "off") == 0) {
 738              		.loc 1 90 16 is_stmt 0 view .LVU188
 739 01ae 2749     		ldr	r1, .L52+60
 740 01b0 2048     		ldr	r0, .L52+36
 741 01b2 FFF7FEFF 		bl	strcmp
 742              	.LVL52:
  90:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "off") == 0) {
 743              		.loc 1 90 15 discriminator 1 view .LVU189
 744 01b6 0028     		cmp	r0, #0
 745 01b8 07D1     		bne	.L41
  91:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 746              		.loc 1 91 7 is_stmt 1 view .LVU190
  91:Core/Src/uartParser.c ****       commandOut |= 0x0200;
 747              		.loc 1 91 18 is_stmt 0 view .LVU191
 748 01ba 1B4A     		ldr	r2, .L52+24
 749 01bc 1388     		ldrh	r3, [r2]
 750 01be 8021     		movs	r1, #128
 751 01c0 8900     		lsls	r1, r1, #2
 752 01c2 0B43     		orrs	r3, r1
 753 01c4 1380     		strh	r3, [r2]
  99:Core/Src/uartParser.c ****     if (speed == 255)
 754              		.loc 1 99 5 is_stmt 1 view .LVU192
  41:Core/Src/uartParser.c ****   uint8_t error = 0;
 755              		.loc 1 41 11 is_stmt 0 view .LVU193
 756 01c6 0024     		movs	r4, #0
 757 01c8 E9E7     		b	.L42
 758              	.L41:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 22


  92:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "speed") == 0) {
 759              		.loc 1 92 12 is_stmt 1 view .LVU194
  92:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "speed") == 0) {
 760              		.loc 1 92 16 is_stmt 0 view .LVU195
 761 01ca 2449     		ldr	r1, .L52+76
 762 01cc 1948     		ldr	r0, .L52+36
 763 01ce FFF7FEFF 		bl	strcmp
 764              	.LVL53:
  92:Core/Src/uartParser.c ****     } else if (strcmp(cmd[1], "speed") == 0) {
 765              		.loc 1 92 15 discriminator 1 view .LVU196
 766 01d2 0028     		cmp	r0, #0
 767 01d4 09D1     		bne	.L47
  93:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 768              		.loc 1 93 7 is_stmt 1 view .LVU197
  93:Core/Src/uartParser.c ****       commandOut |= 0x0300;
 769              		.loc 1 93 18 is_stmt 0 view .LVU198
 770 01d6 144A     		ldr	r2, .L52+24
 771 01d8 1388     		ldrh	r3, [r2]
 772 01da C021     		movs	r1, #192
 773 01dc 8900     		lsls	r1, r1, #2
 774 01de 0B43     		orrs	r3, r1
 775 01e0 1380     		strh	r3, [r2]
  94:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 776              		.loc 1 94 7 is_stmt 1 view .LVU199
  94:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 777              		.loc 1 94 15 is_stmt 0 view .LVU200
 778 01e2 1648     		ldr	r0, .L52+44
 779 01e4 FFF7FEFF 		bl	convertSpeed
 780              	.LVL54:
  94:Core/Src/uartParser.c ****       speed = convertSpeed(cmd[2]);
 781              		.loc 1 94 15 view .LVU201
 782 01e8 D6E7     		b	.L40
 783              	.LVL55:
 784              	.L47:
  42:Core/Src/uartParser.c ****   uint8_t speed = 0;
 785              		.loc 1 42 11 view .LVU202
 786 01ea 0020     		movs	r0, #0
  96:Core/Src/uartParser.c ****       error = 1;
 787              		.loc 1 96 13 view .LVU203
 788 01ec 0124     		movs	r4, #1
 789 01ee D6E7     		b	.L42
 790              	.LVL56:
 791              	.L51:
 103:Core/Src/uartParser.c ****         transmitCharArray("Speed limited to 100 RPM");
 792              		.loc 1 103 9 is_stmt 1 view .LVU204
 793 01f0 1B48     		ldr	r0, .L52+80
 794 01f2 FFF7FEFF 		bl	transmitCharArray
 795              	.LVL57:
 104:Core/Src/uartParser.c ****         commandOut |= 100U;
 796              		.loc 1 104 9 view .LVU205
 104:Core/Src/uartParser.c ****         commandOut |= 100U;
 797              		.loc 1 104 20 is_stmt 0 view .LVU206
 798 01f6 0C4A     		ldr	r2, .L52+24
 799 01f8 1388     		ldrh	r3, [r2]
 800 01fa 6421     		movs	r1, #100
 801 01fc 0B43     		orrs	r3, r1
 802 01fe 9BB2     		uxth	r3, r3
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 23


 803 0200 1380     		strh	r3, [r2]
 804 0202 65E7     		b	.L37
 805              	.LVL58:
 806              	.L45:
  82:Core/Src/uartParser.c ****       error = 1;
 807              		.loc 1 82 13 view .LVU207
 808 0204 0124     		movs	r4, #1
 809              	.LVL59:
  82:Core/Src/uartParser.c ****       error = 1;
 810              		.loc 1 82 13 view .LVU208
 811 0206 63E7     		b	.L37
 812              	.LVL60:
 813              	.L46:
 109:Core/Src/uartParser.c ****     error = 1;
 814              		.loc 1 109 11 view .LVU209
 815 0208 0124     		movs	r4, #1
 816 020a 61E7     		b	.L37
 817              	.LVL61:
 818              	.L48:
 100:Core/Src/uartParser.c ****       error = 1;
 819              		.loc 1 100 13 view .LVU210
 820 020c 0124     		movs	r4, #1
 821 020e 5FE7     		b	.L37
 822              	.L53:
 823              		.align	2
 824              	.L52:
 825 0210 00000000 		.word	strIndex
 826 0214 00000000 		.word	cmdStrIndex
 827 0218 00000000 		.word	cmdIndex
 828 021c 00000000 		.word	tmpStr
 829 0220 00000000 		.word	cmd
 830 0224 00000000 		.word	.LC7
 831 0228 00000000 		.word	commandOut
 832 022c 00A0FFFF 		.word	-24576
 833 0230 04000000 		.word	.LC10
 834 0234 14000000 		.word	cmd+20
 835 0238 20000000 		.word	.LC19
 836 023c 28000000 		.word	cmd+40
 837 0240 08000000 		.word	.LC13
 838 0244 10000000 		.word	.LC15
 839 0248 18000000 		.word	.LC17
 840 024c 24000000 		.word	.LC22
 841 0250 28000000 		.word	.LC24
 842 0254 30000000 		.word	.LC26
 843 0258 00B0FFFF 		.word	-20480
 844 025c 38000000 		.word	.LC28
 845 0260 40000000 		.word	.LC30
 846              		.cfi_endproc
 847              	.LFE44:
 849              		.section	.rodata.StartParseUartTask.str1.4,"aMS",%progbits,1
 850              		.align	2
 851              	.LC35:
 852 0000 50757368 		.ascii	"Push command to queue success.\012\000"
 852      20636F6D 
 852      6D616E64 
 852      20746F20 
 852      71756575 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 24


 853              		.align	2
 854              	.LC38:
 855 0020 4661696C 		.ascii	"Fail to push command to queue, try again.\012\000"
 855      20746F20 
 855      70757368 
 855      20636F6D 
 855      6D616E64 
 856 004b 00       		.align	2
 857              	.LC40:
 858 004c 436F6D6D 		.ascii	"Command not recognized\000"
 858      616E6420 
 858      6E6F7420 
 858      7265636F 
 858      676E697A 
 859 0063 00       		.align	2
 860              	.LC44:
 861 0064 436F6D6D 		.ascii	"Command is too long!\000"
 861      616E6420 
 861      69732074 
 861      6F6F206C 
 861      6F6E6721 
 862              		.section	.text.StartParseUartTask,"ax",%progbits
 863              		.align	1
 864              		.global	StartParseUartTask
 865              		.syntax unified
 866              		.code	16
 867              		.thumb_func
 869              	StartParseUartTask:
 870              	.LFB46:
 154:Core/Src/uartParser.c **** void StartParseUartTask(void *argument) {
 871              		.loc 1 154 41 is_stmt 1 view -0
 872              		.cfi_startproc
 873              		@ args = 0, pretend = 0, frame = 8
 874              		@ frame_needed = 0, uses_anonymous_args = 0
 875              	.LVL62:
 154:Core/Src/uartParser.c **** void StartParseUartTask(void *argument) {
 876              		.loc 1 154 41 is_stmt 0 view .LVU212
 877 0000 10B5     		push	{r4, lr}
 878              	.LCFI6:
 879              		.cfi_def_cfa_offset 8
 880              		.cfi_offset 4, -8
 881              		.cfi_offset 14, -4
 882 0002 82B0     		sub	sp, sp, #8
 883              	.LCFI7:
 884              		.cfi_def_cfa_offset 16
 885 0004 41E0     		b	.L66
 886              	.LVL63:
 887              	.L68:
 888              	.LBB8:
 889              	.LBB9:
 169:Core/Src/uartParser.c ****         uint8_t error = parseCmd();
 890              		.loc 1 169 9 is_stmt 1 view .LVU213
 169:Core/Src/uartParser.c ****         uint8_t error = parseCmd();
 891              		.loc 1 169 25 is_stmt 0 view .LVU214
 892 0006 FFF7FEFF 		bl	parseCmd
 893              	.LVL64:
 171:Core/Src/uartParser.c ****         if (error == 0) {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 25


 894              		.loc 1 171 9 is_stmt 1 view .LVU215
 171:Core/Src/uartParser.c ****         if (error == 0) {
 895              		.loc 1 171 12 is_stmt 0 view .LVU216
 896 000a 0028     		cmp	r0, #0
 897 000c 18D1     		bne	.L57
 173:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 898              		.loc 1 173 11 is_stmt 1 view .LVU217
 173:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 899              		.loc 1 173 15 is_stmt 0 view .LVU218
 900 000e 3A4B     		ldr	r3, .L69
 901 0010 1988     		ldrh	r1, [r3]
 902 0012 89B2     		uxth	r1, r1
 903 0014 394B     		ldr	r3, .L69+4
 904 0016 1868     		ldr	r0, [r3]
 905              	.LVL65:
 173:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 906              		.loc 1 173 15 view .LVU219
 907 0018 FFF7FEFF 		bl	queuePush
 908              	.LVL66:
 173:Core/Src/uartParser.c ****           if (queuePush(cmdQueue, commandOut) != -1) {
 909              		.loc 1 173 14 discriminator 1 view .LVU220
 910 001c 0130     		adds	r0, r0, #1
 911 001e 0BD0     		beq	.L58
 174:Core/Src/uartParser.c ****             transmitCharArray("Push command to queue success.\n");
 912              		.loc 1 174 13 is_stmt 1 view .LVU221
 913 0020 3748     		ldr	r0, .L69+8
 914 0022 FFF7FEFF 		bl	transmitCharArray
 915              	.LVL67:
 175:Core/Src/uartParser.c ****             transmitCharArray(tmpStr);
 916              		.loc 1 175 13 view .LVU222
 917 0026 3748     		ldr	r0, .L69+12
 918 0028 FFF7FEFF 		bl	transmitCharArray
 919              	.LVL68:
 176:Core/Src/uartParser.c ****             sendUint16BinToUart(commandOut);
 920              		.loc 1 176 13 view .LVU223
 921 002c 324B     		ldr	r3, .L69
 922 002e 1888     		ldrh	r0, [r3]
 923 0030 80B2     		uxth	r0, r0
 924 0032 FFF7FEFF 		bl	sendUint16BinToUart
 925              	.LVL69:
 926 0036 09E0     		b	.L59
 927              	.L58:
 178:Core/Src/uartParser.c ****             transmitCharArray("Fail to push command to queue, try again.\n");
 928              		.loc 1 178 13 view .LVU224
 929 0038 3348     		ldr	r0, .L69+16
 930 003a FFF7FEFF 		bl	transmitCharArray
 931              	.LVL70:
 932 003e 05E0     		b	.L59
 933              	.LVL71:
 934              	.L57:
 182:Core/Src/uartParser.c ****           transmitCharArray("Command not recognized");
 935              		.loc 1 182 11 view .LVU225
 936 0040 3248     		ldr	r0, .L69+20
 937              	.LVL72:
 182:Core/Src/uartParser.c ****           transmitCharArray("Command not recognized");
 938              		.loc 1 182 11 is_stmt 0 view .LVU226
 939 0042 FFF7FEFF 		bl	transmitCharArray
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 26


 940              	.LVL73:
 183:Core/Src/uartParser.c ****           transmitCharArray(tmpStr);
 941              		.loc 1 183 11 is_stmt 1 view .LVU227
 942 0046 2F48     		ldr	r0, .L69+12
 943 0048 FFF7FEFF 		bl	transmitCharArray
 944              	.LVL74:
 945              	.L59:
 187:Core/Src/uartParser.c ****         strIndex = 0;
 946              		.loc 1 187 9 view .LVU228
 187:Core/Src/uartParser.c ****         strIndex = 0;
 947              		.loc 1 187 18 is_stmt 0 view .LVU229
 948 004c 304B     		ldr	r3, .L69+24
 949 004e 0022     		movs	r2, #0
 950 0050 1A70     		strb	r2, [r3]
 188:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 951              		.loc 1 188 9 is_stmt 1 view .LVU230
 952              	.LBB10:
 188:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 953              		.loc 1 188 14 view .LVU231
 954              	.LVL75:
 188:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 955              		.loc 1 188 9 is_stmt 0 view .LVU232
 956 0052 0DE0     		b	.L60
 957              	.LVL76:
 958              	.L61:
 189:Core/Src/uartParser.c ****           tmpStr[i] = '\0';
 959              		.loc 1 189 11 is_stmt 1 view .LVU233
 189:Core/Src/uartParser.c ****           tmpStr[i] = '\0';
 960              		.loc 1 189 21 is_stmt 0 view .LVU234
 961 0054 2B4B     		ldr	r3, .L69+12
 962 0056 0021     		movs	r1, #0
 963 0058 9954     		strb	r1, [r3, r2]
 190:Core/Src/uartParser.c ****           cmd[0][i] = '\0';
 964              		.loc 1 190 11 is_stmt 1 view .LVU235
 190:Core/Src/uartParser.c ****           cmd[0][i] = '\0';
 965              		.loc 1 190 21 is_stmt 0 view .LVU236
 966 005a 2E4B     		ldr	r3, .L69+28
 967 005c 9954     		strb	r1, [r3, r2]
 191:Core/Src/uartParser.c ****           cmd[1][i] = '\0';
 968              		.loc 1 191 11 is_stmt 1 view .LVU237
 191:Core/Src/uartParser.c ****           cmd[1][i] = '\0';
 969              		.loc 1 191 21 is_stmt 0 view .LVU238
 970 005e 9B18     		adds	r3, r3, r2
 971 0060 1975     		strb	r1, [r3, #20]
 192:Core/Src/uartParser.c ****           cmd[2][i] = '\0';
 972              		.loc 1 192 11 is_stmt 1 view .LVU239
 192:Core/Src/uartParser.c ****           cmd[2][i] = '\0';
 973              		.loc 1 192 21 is_stmt 0 view .LVU240
 974 0062 1800     		movs	r0, r3
 975 0064 2830     		adds	r0, r0, #40
 976 0066 0170     		strb	r1, [r0]
 193:Core/Src/uartParser.c ****           cmd[3][i] = '\0';
 977              		.loc 1 193 11 is_stmt 1 view .LVU241
 193:Core/Src/uartParser.c ****           cmd[3][i] = '\0';
 978              		.loc 1 193 21 is_stmt 0 view .LVU242
 979 0068 3C33     		adds	r3, r3, #60
 980 006a 1970     		strb	r1, [r3]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 27


 188:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 981              		.loc 1 188 47 is_stmt 1 discriminator 3 view .LVU243
 982 006c 0132     		adds	r2, r2, #1
 983              	.LVL77:
 188:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 984              		.loc 1 188 47 is_stmt 0 discriminator 3 view .LVU244
 985 006e D2B2     		uxtb	r2, r2
 986              	.LVL78:
 987              	.L60:
 188:Core/Src/uartParser.c ****         for (uint8_t i = 0; i < TMP_STR_LEN; i++) {
 988              		.loc 1 188 31 is_stmt 1 discriminator 1 view .LVU245
 989 0070 132A     		cmp	r2, #19
 990 0072 EFD9     		bls	.L61
 991              	.LBE10:
 197:Core/Src/uartParser.c ****         commandOut = 0;
 992              		.loc 1 197 9 view .LVU246
 197:Core/Src/uartParser.c ****         commandOut = 0;
 993              		.loc 1 197 20 is_stmt 0 view .LVU247
 994 0074 204B     		ldr	r3, .L69
 995 0076 0022     		movs	r2, #0
 996              	.LVL79:
 197:Core/Src/uartParser.c ****         commandOut = 0;
 997              		.loc 1 197 20 view .LVU248
 998 0078 1A80     		strh	r2, [r3]
 199:Core/Src/uartParser.c ****         break;
 999              		.loc 1 199 9 is_stmt 1 view .LVU249
 1000              	.LVL80:
 1001              	.L62:
 199:Core/Src/uartParser.c ****         break;
 1002              		.loc 1 199 9 is_stmt 0 view .LVU250
 1003              	.LBE9:
 1004              	.LBE8:
 214:Core/Src/uartParser.c ****     uartStatus = 0;
 1005              		.loc 1 214 5 is_stmt 1 view .LVU251
 214:Core/Src/uartParser.c ****     uartStatus = 0;
 1006              		.loc 1 214 16 is_stmt 0 view .LVU252
 1007 007a 274B     		ldr	r3, .L69+32
 1008 007c 0022     		movs	r2, #0
 1009 007e 1A70     		strb	r2, [r3]
 216:Core/Src/uartParser.c ****     USART3->CR1 |= USART_CR1_RXNEIE;
 1010              		.loc 1 216 5 is_stmt 1 view .LVU253
 216:Core/Src/uartParser.c ****     USART3->CR1 |= USART_CR1_RXNEIE;
 1011              		.loc 1 216 11 is_stmt 0 view .LVU254
 1012 0080 264A     		ldr	r2, .L69+36
 1013 0082 1368     		ldr	r3, [r2]
 216:Core/Src/uartParser.c ****     USART3->CR1 |= USART_CR1_RXNEIE;
 1014              		.loc 1 216 17 view .LVU255
 1015 0084 2021     		movs	r1, #32
 1016 0086 0B43     		orrs	r3, r1
 1017 0088 1360     		str	r3, [r2]
 157:Core/Src/uartParser.c ****   while (1) {
 1018              		.loc 1 157 9 is_stmt 1 view .LVU256
 1019              	.L66:
 157:Core/Src/uartParser.c ****   while (1) {
 1020              		.loc 1 157 3 view .LVU257
 159:Core/Src/uartParser.c ****     osSemaphoreAcquire(binarySem02UartParserHandle, osWaitForever);
 1021              		.loc 1 159 5 view .LVU258
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 28


 1022 008a 0121     		movs	r1, #1
 1023 008c 244B     		ldr	r3, .L69+40
 1024 008e 1868     		ldr	r0, [r3]
 1025 0090 4942     		rsbs	r1, r1, #0
 1026 0092 FFF7FEFF 		bl	osSemaphoreAcquire
 1027              	.LVL81:
 1028              	.L55:
 1029              	.LBB12:
 163:Core/Src/uartParser.c **** 	    }
 1030              		.loc 1 163 6 view .LVU259
 162:Core/Src/uartParser.c ****       while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1031              		.loc 1 162 44 discriminator 1 view .LVU260
 162:Core/Src/uartParser.c ****       while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1032              		.loc 1 162 20 is_stmt 0 discriminator 1 view .LVU261
 1033 0096 214B     		ldr	r3, .L69+36
 1034 0098 DB69     		ldr	r3, [r3, #28]
 162:Core/Src/uartParser.c ****       while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1035              		.loc 1 162 44 discriminator 1 view .LVU262
 1036 009a 9B06     		lsls	r3, r3, #26
 1037 009c FBD5     		bpl	.L55
 165:Core/Src/uartParser.c **** 	    volatile uint8_t usartReceivedData = USART3->RDR;
 1038              		.loc 1 165 6 is_stmt 1 view .LVU263
 165:Core/Src/uartParser.c **** 	    volatile uint8_t usartReceivedData = USART3->RDR;
 1039              		.loc 1 165 49 is_stmt 0 view .LVU264
 1040 009e 1F4B     		ldr	r3, .L69+36
 1041 00a0 9B8C     		ldrh	r3, [r3, #36]
 165:Core/Src/uartParser.c **** 	    volatile uint8_t usartReceivedData = USART3->RDR;
 1042              		.loc 1 165 23 view .LVU265
 1043 00a2 DBB2     		uxtb	r3, r3
 1044 00a4 6A46     		mov	r2, sp
 1045 00a6 D41D     		adds	r4, r2, #7
 1046 00a8 D371     		strb	r3, [r2, #7]
 166:Core/Src/uartParser.c ****       transmitOneChar(usartReceivedData);
 1047              		.loc 1 166 7 is_stmt 1 view .LVU266
 1048 00aa D079     		ldrb	r0, [r2, #7]
 1049 00ac C0B2     		uxtb	r0, r0
 1050 00ae FFF7FEFF 		bl	transmitOneChar
 1051              	.LVL82:
 168:Core/Src/uartParser.c **** 	    if (usartReceivedData == '\r') {
 1052              		.loc 1 168 6 view .LVU267
 168:Core/Src/uartParser.c **** 	    if (usartReceivedData == '\r') {
 1053              		.loc 1 168 28 is_stmt 0 view .LVU268
 1054 00b2 2378     		ldrb	r3, [r4]
 168:Core/Src/uartParser.c **** 	    if (usartReceivedData == '\r') {
 1055              		.loc 1 168 9 view .LVU269
 1056 00b4 0D2B     		cmp	r3, #13
 1057 00b6 A6D0     		beq	.L68
 201:Core/Src/uartParser.c ****         tmpStr[strIndex] = usartReceivedData;
 1058              		.loc 1 201 9 is_stmt 1 view .LVU270
 201:Core/Src/uartParser.c ****         tmpStr[strIndex] = usartReceivedData;
 1059              		.loc 1 201 15 is_stmt 0 view .LVU271
 1060 00b8 154A     		ldr	r2, .L69+24
 1061 00ba 1378     		ldrb	r3, [r2]
 1062 00bc DBB2     		uxtb	r3, r3
 201:Core/Src/uartParser.c ****         tmpStr[strIndex] = usartReceivedData;
 1063              		.loc 1 201 26 view .LVU272
 1064 00be 6946     		mov	r1, sp
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 29


 1065 00c0 0731     		adds	r1, r1, #7
 1066 00c2 0978     		ldrb	r1, [r1]
 1067 00c4 C9B2     		uxtb	r1, r1
 1068 00c6 0F48     		ldr	r0, .L69+12
 1069 00c8 C154     		strb	r1, [r0, r3]
 202:Core/Src/uartParser.c ****         strIndex += 1;
 1070              		.loc 1 202 9 is_stmt 1 view .LVU273
 202:Core/Src/uartParser.c ****         strIndex += 1;
 1071              		.loc 1 202 18 is_stmt 0 view .LVU274
 1072 00ca 1378     		ldrb	r3, [r2]
 1073 00cc 0133     		adds	r3, r3, #1
 1074 00ce DBB2     		uxtb	r3, r3
 1075 00d0 1370     		strb	r3, [r2]
 204:Core/Src/uartParser.c ****         if (strIndex == TMP_STR_LEN) {
 1076              		.loc 1 204 9 is_stmt 1 view .LVU275
 204:Core/Src/uartParser.c ****         if (strIndex == TMP_STR_LEN) {
 1077              		.loc 1 204 22 is_stmt 0 view .LVU276
 1078 00d2 1378     		ldrb	r3, [r2]
 204:Core/Src/uartParser.c ****         if (strIndex == TMP_STR_LEN) {
 1079              		.loc 1 204 12 view .LVU277
 1080 00d4 142B     		cmp	r3, #20
 1081 00d6 DED1     		bne	.L55
 205:Core/Src/uartParser.c ****       	  transmitCharArray("Command is too long!");
 1082              		.loc 1 205 10 is_stmt 1 view .LVU278
 1083 00d8 1248     		ldr	r0, .L69+44
 1084 00da FFF7FEFF 		bl	transmitCharArray
 1085              	.LVL83:
 206:Core/Src/uartParser.c ****           strIndex = 0;
 1086              		.loc 1 206 11 view .LVU279
 206:Core/Src/uartParser.c ****           strIndex = 0;
 1087              		.loc 1 206 20 is_stmt 0 view .LVU280
 1088 00de 0C4B     		ldr	r3, .L69+24
 1089 00e0 0022     		movs	r2, #0
 1090 00e2 1A70     		strb	r2, [r3]
 207:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1091              		.loc 1 207 11 is_stmt 1 view .LVU281
 1092              	.LBB11:
 207:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1093              		.loc 1 207 16 view .LVU282
 1094              	.LVL84:
 207:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1095              		.loc 1 207 24 is_stmt 0 view .LVU283
 1096 00e4 0023     		movs	r3, #0
 207:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1097              		.loc 1 207 11 view .LVU284
 1098 00e6 04E0     		b	.L64
 1099              	.LVL85:
 1100              	.L65:
 208:Core/Src/uartParser.c ****             tmpStr[i] = '\0';
 1101              		.loc 1 208 13 is_stmt 1 view .LVU285
 208:Core/Src/uartParser.c ****             tmpStr[i] = '\0';
 1102              		.loc 1 208 23 is_stmt 0 view .LVU286
 1103 00e8 064A     		ldr	r2, .L69+12
 1104 00ea 0021     		movs	r1, #0
 1105 00ec D154     		strb	r1, [r2, r3]
 207:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1106              		.loc 1 207 49 is_stmt 1 discriminator 3 view .LVU287
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 30


 1107 00ee 0133     		adds	r3, r3, #1
 1108              	.LVL86:
 207:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1109              		.loc 1 207 49 is_stmt 0 discriminator 3 view .LVU288
 1110 00f0 DBB2     		uxtb	r3, r3
 1111              	.LVL87:
 1112              	.L64:
 207:Core/Src/uartParser.c ****           for (uint8_t i = 0; i < TMP_STR_LEN; i++){
 1113              		.loc 1 207 33 is_stmt 1 discriminator 1 view .LVU289
 1114 00f2 132B     		cmp	r3, #19
 1115 00f4 F8D9     		bls	.L65
 1116 00f6 C0E7     		b	.L62
 1117              	.L70:
 1118              		.align	2
 1119              	.L69:
 1120 00f8 00000000 		.word	commandOut
 1121 00fc 00000000 		.word	cmdQueue
 1122 0100 00000000 		.word	.LC35
 1123 0104 00000000 		.word	tmpStr
 1124 0108 20000000 		.word	.LC38
 1125 010c 4C000000 		.word	.LC40
 1126 0110 00000000 		.word	strIndex
 1127 0114 00000000 		.word	cmd
 1128 0118 00000000 		.word	uartStatus
 1129 011c 00480040 		.word	1073760256
 1130 0120 00000000 		.word	binarySem02UartParserHandle
 1131 0124 64000000 		.word	.LC44
 1132              	.LBE11:
 1133              	.LBE12:
 1134              		.cfi_endproc
 1135              	.LFE46:
 1137              		.global	__aeabi_uidiv
 1138              		.section	.rodata.initUsart3.str1.4,"aMS",%progbits,1
 1139              		.align	2
 1140              	.LC47:
 1141 0000 55415254 		.ascii	"UART enabled\000"
 1141      20656E61 
 1141      626C6564 
 1141      00
 1142              		.section	.text.initUsart3,"ax",%progbits
 1143              		.align	1
 1144              		.global	initUsart3
 1145              		.syntax unified
 1146              		.code	16
 1147              		.thumb_func
 1149              	initUsart3:
 1150              	.LFB47:
 229:Core/Src/uartParser.c **** void initUsart3(void) {
 1151              		.loc 1 229 23 view -0
 1152              		.cfi_startproc
 1153              		@ args = 0, pretend = 0, frame = 0
 1154              		@ frame_needed = 0, uses_anonymous_args = 0
 1155 0000 10B5     		push	{r4, lr}
 1156              	.LCFI8:
 1157              		.cfi_def_cfa_offset 8
 1158              		.cfi_offset 4, -8
 1159              		.cfi_offset 14, -4
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 31


 230:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 1160              		.loc 1 230 3 view .LVU291
 230:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 1161              		.loc 1 230 6 is_stmt 0 view .LVU292
 1162 0002 2F4A     		ldr	r2, .L72
 1163 0004 5169     		ldr	r1, [r2, #20]
 230:Core/Src/uartParser.c ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable peripheral clock to PC
 1164              		.loc 1 230 15 view .LVU293
 1165 0006 8023     		movs	r3, #128
 1166 0008 1B03     		lsls	r3, r3, #12
 1167 000a 0B43     		orrs	r3, r1
 1168 000c 5361     		str	r3, [r2, #20]
 232:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 1169              		.loc 1 232 3 is_stmt 1 view .LVU294
 232:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 1170              		.loc 1 232 8 is_stmt 0 view .LVU295
 1171 000e 2D4B     		ldr	r3, .L72+4
 1172 0010 1868     		ldr	r0, [r3]
 232:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 9);
 1173              		.loc 1 232 16 view .LVU296
 1174 0012 8021     		movs	r1, #128
 1175 0014 8900     		lsls	r1, r1, #2
 1176 0016 0143     		orrs	r1, r0
 1177 0018 1960     		str	r1, [r3]
 233:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 1178              		.loc 1 233 3 is_stmt 1 view .LVU297
 233:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 1179              		.loc 1 233 8 is_stmt 0 view .LVU298
 1180 001a 1968     		ldr	r1, [r3]
 233:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 8);
 1181              		.loc 1 233 16 view .LVU299
 1182 001c 2A48     		ldr	r0, .L72+8
 1183 001e 0140     		ands	r1, r0
 1184 0020 1960     		str	r1, [r3]
 235:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 1185              		.loc 1 235 3 is_stmt 1 view .LVU300
 235:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 1186              		.loc 1 235 8 is_stmt 0 view .LVU301
 1187 0022 1868     		ldr	r0, [r3]
 235:Core/Src/uartParser.c ****   GPIOC->MODER |= (1 << 11);
 1188              		.loc 1 235 16 view .LVU302
 1189 0024 8021     		movs	r1, #128
 1190 0026 0901     		lsls	r1, r1, #4
 1191 0028 0143     		orrs	r1, r0
 1192 002a 1960     		str	r1, [r3]
 236:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 1193              		.loc 1 236 3 is_stmt 1 view .LVU303
 236:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 1194              		.loc 1 236 8 is_stmt 0 view .LVU304
 1195 002c 1968     		ldr	r1, [r3]
 236:Core/Src/uartParser.c ****   GPIOC->MODER &= ~(1 << 10);
 1196              		.loc 1 236 16 view .LVU305
 1197 002e 2748     		ldr	r0, .L72+12
 1198 0030 0140     		ands	r1, r0
 1199 0032 1960     		str	r1, [r3]
 239:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 1200              		.loc 1 239 3 is_stmt 1 view .LVU306
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 32


 239:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 1201              		.loc 1 239 13 is_stmt 0 view .LVU307
 1202 0034 186A     		ldr	r0, [r3, #32]
 239:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL4_Pos);
 1203              		.loc 1 239 17 view .LVU308
 1204 0036 8021     		movs	r1, #128
 1205 0038 4902     		lsls	r1, r1, #9
 1206 003a 0143     		orrs	r1, r0
 1207 003c 1962     		str	r1, [r3, #32]
 241:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 1208              		.loc 1 241 3 is_stmt 1 view .LVU309
 241:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 1209              		.loc 1 241 13 is_stmt 0 view .LVU310
 1210 003e 186A     		ldr	r0, [r3, #32]
 241:Core/Src/uartParser.c ****   GPIOC->AFR[0] |= (0x1 << GPIO_AFRL_AFRL5_Pos);
 1211              		.loc 1 241 17 view .LVU311
 1212 0040 8021     		movs	r1, #128
 1213 0042 4903     		lsls	r1, r1, #13
 1214 0044 0143     		orrs	r1, r0
 1215 0046 1962     		str	r1, [r3, #32]
 242:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 1216              		.loc 1 242 3 is_stmt 1 view .LVU312
 242:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 1217              		.loc 1 242 6 is_stmt 0 view .LVU313
 1218 0048 D169     		ldr	r1, [r2, #28]
 242:Core/Src/uartParser.c ****   RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 1219              		.loc 1 242 16 view .LVU314
 1220 004a 8023     		movs	r3, #128
 1221 004c DB02     		lsls	r3, r3, #11
 1222 004e 0B43     		orrs	r3, r1
 1223 0050 D361     		str	r3, [r2, #28]
 244:Core/Src/uartParser.c ****   uint32_t fClk = HAL_RCC_GetHCLKFreq();
 1224              		.loc 1 244 3 is_stmt 1 view .LVU315
 244:Core/Src/uartParser.c ****   uint32_t fClk = HAL_RCC_GetHCLKFreq();
 1225              		.loc 1 244 19 is_stmt 0 view .LVU316
 1226 0052 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1227              	.LVL88:
 247:Core/Src/uartParser.c ****   uint32_t baudRate = 115200;
 1228              		.loc 1 247 3 is_stmt 1 view .LVU317
 248:Core/Src/uartParser.c ****   uint32_t usartBRR = fClk / baudRate;
 1229              		.loc 1 248 3 view .LVU318
 248:Core/Src/uartParser.c ****   uint32_t usartBRR = fClk / baudRate;
 1230              		.loc 1 248 12 is_stmt 0 view .LVU319
 1231 0056 E121     		movs	r1, #225
 1232 0058 4902     		lsls	r1, r1, #9
 1233 005a FFF7FEFF 		bl	__aeabi_uidiv
 1234              	.LVL89:
 249:Core/Src/uartParser.c ****   USART3->BRR = usartBRR;
 1235              		.loc 1 249 3 is_stmt 1 view .LVU320
 249:Core/Src/uartParser.c ****   USART3->BRR = usartBRR;
 1236              		.loc 1 249 15 is_stmt 0 view .LVU321
 1237 005e 1C4C     		ldr	r4, .L72+16
 1238 0060 E060     		str	r0, [r4, #12]
 252:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 1239              		.loc 1 252 3 is_stmt 1 view .LVU322
 252:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 1240              		.loc 1 252 9 is_stmt 0 view .LVU323
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 33


 1241 0062 2368     		ldr	r3, [r4]
 252:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_TE;
 1242              		.loc 1 252 15 view .LVU324
 1243 0064 0822     		movs	r2, #8
 1244 0066 1343     		orrs	r3, r2
 1245 0068 2360     		str	r3, [r4]
 253:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 1246              		.loc 1 253 3 is_stmt 1 view .LVU325
 253:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 1247              		.loc 1 253 9 is_stmt 0 view .LVU326
 1248 006a 2368     		ldr	r3, [r4]
 253:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RE;
 1249              		.loc 1 253 15 view .LVU327
 1250 006c 043A     		subs	r2, r2, #4
 1251 006e 1343     		orrs	r3, r2
 1252 0070 2360     		str	r3, [r4]
 256:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 1253              		.loc 1 256 3 is_stmt 1 view .LVU328
 256:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 1254              		.loc 1 256 9 is_stmt 0 view .LVU329
 1255 0072 2368     		ldr	r3, [r4]
 256:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_UE;
 1256              		.loc 1 256 15 view .LVU330
 1257 0074 033A     		subs	r2, r2, #3
 1258 0076 1343     		orrs	r3, r2
 1259 0078 2360     		str	r3, [r4]
 257:Core/Src/uartParser.c ****   transmitCharArray("UART enabled");
 1260              		.loc 1 257 3 is_stmt 1 view .LVU331
 1261 007a 1648     		ldr	r0, .L72+20
 1262              	.LVL90:
 257:Core/Src/uartParser.c ****   transmitCharArray("UART enabled");
 1263              		.loc 1 257 3 is_stmt 0 view .LVU332
 1264 007c FFF7FEFF 		bl	transmitCharArray
 1265              	.LVL91:
 260:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 1266              		.loc 1 260 3 is_stmt 1 view .LVU333
 260:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 1267              		.loc 1 260 9 is_stmt 0 view .LVU334
 1268 0080 2368     		ldr	r3, [r4]
 260:Core/Src/uartParser.c ****   USART3->CR1 |= USART_CR1_RXNEIE;
 1269              		.loc 1 260 15 view .LVU335
 1270 0082 2022     		movs	r2, #32
 1271 0084 1343     		orrs	r3, r2
 1272 0086 2360     		str	r3, [r4]
 262:Core/Src/uartParser.c ****   NVIC_EnableIRQ(USART3_4_IRQn);
 1273              		.loc 1 262 3 is_stmt 1 view .LVU336
 1274              	.LVL92:
 1275              	.LBB13:
 1276              	.LBI13:
 1277              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 34


   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 35


  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 36


 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 37


 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 38


 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 39


 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 40


 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 41


 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 42


 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 43


 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 44


 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 1278              		.loc 2 623 22 view .LVU337
 1279              	.LBB14:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1280              		.loc 2 625 3 view .LVU338
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1281              		.loc 2 627 5 view .LVU339
 1282              		.loc 2 627 20 is_stmt 0 view .LVU340
 1283 0088 134B     		ldr	r3, .L72+24
 1284 008a 8022     		movs	r2, #128
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 45


 1285 008c 9205     		lsls	r2, r2, #22
 1286 008e 1A60     		str	r2, [r3]
 1287              	.LVL93:
 1288              		.loc 2 627 20 view .LVU341
 1289              	.LBE14:
 1290              	.LBE13:
 263:Core/Src/uartParser.c ****   NVIC_SetPriority(USART3_4_IRQn, 3);
 1291              		.loc 1 263 3 is_stmt 1 view .LVU342
 1292              	.LBB15:
 1293              	.LBI15:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 46


 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 1294              		.loc 2 730 22 view .LVU343
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 47


 1295              	.LBB16:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1296              		.loc 2 732 3 view .LVU344
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 1297              		.loc 2 734 5 view .LVU345
 1298              		.loc 2 734 52 is_stmt 0 view .LVU346
 1299 0090 C720     		movs	r0, #199
 1300 0092 8000     		lsls	r0, r0, #2
 1301 0094 1958     		ldr	r1, [r3, r0]
 1302              		.loc 2 734 33 view .LVU347
 1303 0096 114A     		ldr	r2, .L72+28
 1304 0098 1140     		ands	r1, r2
 1305              		.loc 2 734 102 view .LVU348
 1306 009a C022     		movs	r2, #192
 1307 009c 1202     		lsls	r2, r2, #8
 1308 009e 0A43     		orrs	r2, r1
 1309              		.loc 2 734 30 view .LVU349
 1310 00a0 1A50     		str	r2, [r3, r0]
 1311              	.LVL94:
 1312              		.loc 2 734 30 view .LVU350
 1313              	.LBE16:
 1314              	.LBE15:
 268:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
 1315              		.loc 1 268 3 is_stmt 1 view .LVU351
 268:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
 1316              		.loc 1 268 33 is_stmt 0 view .LVU352
 1317 00a2 0F4A     		ldr	r2, .L72+32
 1318 00a4 0021     		movs	r1, #0
 1319 00a6 0120     		movs	r0, #1
 1320 00a8 FFF7FEFF 		bl	osSemaphoreNew
 1321              	.LVL95:
 268:Core/Src/uartParser.c ****   binarySem02UartParserHandle = osSemaphoreNew(1, 0, &semAttr_SEM1);
 1322              		.loc 1 268 31 discriminator 1 view .LVU353
 1323 00ac 0D4B     		ldr	r3, .L72+36
 1324 00ae 1860     		str	r0, [r3]
 269:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 1325              		.loc 1 269 3 is_stmt 1 view .LVU354
 269:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 1326              		.loc 1 269 14 is_stmt 0 view .LVU355
 1327 00b0 0221     		movs	r1, #2
 1328 00b2 1420     		movs	r0, #20
 1329 00b4 FFF7FEFF 		bl	createQueue
 1330              	.LVL96:
 269:Core/Src/uartParser.c ****   cmdQueue = createQueue(CMD_QUEUE_CAPACITY, 2);
 1331              		.loc 1 269 12 discriminator 1 view .LVU356
 1332 00b8 0B4B     		ldr	r3, .L72+40
 1333 00ba 1860     		str	r0, [r3]
 270:Core/Src/uartParser.c **** }
 1334              		.loc 1 270 1 view .LVU357
 1335              		@ sp needed
 1336 00bc 10BD     		pop	{r4, pc}
 1337              	.L73:
 1338 00be C046     		.align	2
 1339              	.L72:
 1340 00c0 00100240 		.word	1073876992
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 48


 1341 00c4 00080048 		.word	1207961600
 1342 00c8 FFFEFFFF 		.word	-257
 1343 00cc FFFBFFFF 		.word	-1025
 1344 00d0 00480040 		.word	1073760256
 1345 00d4 00000000 		.word	.LC47
 1346 00d8 00E100E0 		.word	-536813312
 1347 00dc FF00FFFF 		.word	-65281
 1348 00e0 00000000 		.word	semAttr_SEM1
 1349 00e4 00000000 		.word	binarySem02UartParserHandle
 1350 00e8 00000000 		.word	cmdQueue
 1351              		.cfi_endproc
 1352              	.LFE47:
 1354              		.section	.rodata.USART3_4_IRQHandler.str1.4,"aMS",%progbits,1
 1355              		.align	2
 1356              	.LC52:
 1357 0000 55415254 		.ascii	"UART RX interrupt.\000"
 1357      20525820 
 1357      696E7465 
 1357      72727570 
 1357      742E00
 1358 0013 00       		.align	2
 1359              	.LC56:
 1360 0014 636D643A 		.ascii	"cmd:\012\000"
 1360      0A00
 1361              		.section	.text.USART3_4_IRQHandler,"ax",%progbits
 1362              		.align	1
 1363              		.global	USART3_4_IRQHandler
 1364              		.syntax unified
 1365              		.code	16
 1366              		.thumb_func
 1368              	USART3_4_IRQHandler:
 1369              	.LFB48:
 273:Core/Src/uartParser.c **** void USART3_4_IRQHandler(void) {
 1370              		.loc 1 273 32 is_stmt 1 view -0
 1371              		.cfi_startproc
 1372              		@ args = 0, pretend = 0, frame = 8
 1373              		@ frame_needed = 0, uses_anonymous_args = 0
 1374 0000 30B5     		push	{r4, r5, lr}
 1375              	.LCFI9:
 1376              		.cfi_def_cfa_offset 12
 1377              		.cfi_offset 4, -12
 1378              		.cfi_offset 5, -8
 1379              		.cfi_offset 14, -4
 1380 0002 83B0     		sub	sp, sp, #12
 1381              	.LCFI10:
 1382              		.cfi_def_cfa_offset 24
 274:Core/Src/uartParser.c ****   transmitCharArray("UART RX interrupt.");
 1383              		.loc 1 274 3 view .LVU359
 1384 0004 1748     		ldr	r0, .L78
 1385 0006 FFF7FEFF 		bl	transmitCharArray
 1386              	.LVL97:
 275:Core/Src/uartParser.c ****   if (uartStatus == 0) {
 1387              		.loc 1 275 3 view .LVU360
 275:Core/Src/uartParser.c ****   if (uartStatus == 0) {
 1388              		.loc 1 275 18 is_stmt 0 view .LVU361
 1389 000a 174B     		ldr	r3, .L78+4
 1390 000c 1B78     		ldrb	r3, [r3]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 49


 275:Core/Src/uartParser.c ****   if (uartStatus == 0) {
 1391              		.loc 1 275 6 view .LVU362
 1392 000e 002B     		cmp	r3, #0
 1393 0010 26D1     		bne	.L74
 1394              	.L76:
 1395              	.LBB17:
 277:Core/Src/uartParser.c **** 	  }
 1396              		.loc 1 277 4 is_stmt 1 view .LVU363
 276:Core/Src/uartParser.c ****     while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1397              		.loc 1 276 42 discriminator 1 view .LVU364
 276:Core/Src/uartParser.c ****     while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1398              		.loc 1 276 18 is_stmt 0 discriminator 1 view .LVU365
 1399 0012 164B     		ldr	r3, .L78+8
 1400 0014 DB69     		ldr	r3, [r3, #28]
 276:Core/Src/uartParser.c ****     while((USART3->ISR & USART_ISR_RXNE) == 0) {
 1401              		.loc 1 276 42 discriminator 1 view .LVU366
 1402 0016 9B06     		lsls	r3, r3, #26
 1403 0018 FBD5     		bpl	.L76
 279:Core/Src/uartParser.c ****     osSemaphoreRelease(binarySem02UartParserHandle);
 1404              		.loc 1 279 5 is_stmt 1 view .LVU367
 1405 001a 154B     		ldr	r3, .L78+12
 1406 001c 1868     		ldr	r0, [r3]
 1407 001e FFF7FEFF 		bl	osSemaphoreRelease
 1408              	.LVL98:
 280:Core/Src/uartParser.c ****     volatile uint8_t usartReceivedData = USART3->RDR;
 1409              		.loc 1 280 5 view .LVU368
 280:Core/Src/uartParser.c ****     volatile uint8_t usartReceivedData = USART3->RDR;
 1410              		.loc 1 280 48 is_stmt 0 view .LVU369
 1411 0022 124C     		ldr	r4, .L78+8
 1412 0024 A38C     		ldrh	r3, [r4, #36]
 280:Core/Src/uartParser.c ****     volatile uint8_t usartReceivedData = USART3->RDR;
 1413              		.loc 1 280 22 view .LVU370
 1414 0026 DBB2     		uxtb	r3, r3
 1415 0028 6A46     		mov	r2, sp
 1416 002a D51D     		adds	r5, r2, #7
 1417 002c D371     		strb	r3, [r2, #7]
 281:Core/Src/uartParser.c ****     transmitCharArray("cmd:\n");
 1418              		.loc 1 281 5 is_stmt 1 view .LVU371
 1419 002e 1148     		ldr	r0, .L78+16
 1420 0030 FFF7FEFF 		bl	transmitCharArray
 1421              	.LVL99:
 282:Core/Src/uartParser.c ****     transmitOneChar(usartReceivedData);
 1422              		.loc 1 282 5 view .LVU372
 1423 0034 2878     		ldrb	r0, [r5]
 1424 0036 C0B2     		uxtb	r0, r0
 1425 0038 FFF7FEFF 		bl	transmitOneChar
 1426              	.LVL100:
 283:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 1427              		.loc 1 283 5 view .LVU373
 283:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 1428              		.loc 1 283 11 is_stmt 0 view .LVU374
 1429 003c 0E4A     		ldr	r2, .L78+20
 1430 003e 1378     		ldrb	r3, [r2]
 1431 0040 DBB2     		uxtb	r3, r3
 283:Core/Src/uartParser.c ****     tmpStr[strIndex] = usartReceivedData;
 1432              		.loc 1 283 22 view .LVU375
 1433 0042 2978     		ldrb	r1, [r5]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 50


 1434 0044 C9B2     		uxtb	r1, r1
 1435 0046 0D48     		ldr	r0, .L78+24
 1436 0048 C154     		strb	r1, [r0, r3]
 284:Core/Src/uartParser.c **** 		strIndex++;
 1437              		.loc 1 284 3 is_stmt 1 view .LVU376
 284:Core/Src/uartParser.c **** 		strIndex++;
 1438              		.loc 1 284 11 is_stmt 0 view .LVU377
 1439 004a 1378     		ldrb	r3, [r2]
 1440 004c 0133     		adds	r3, r3, #1
 1441 004e DBB2     		uxtb	r3, r3
 1442 0050 1370     		strb	r3, [r2]
 285:Core/Src/uartParser.c ****     uartStatus = 1;
 1443              		.loc 1 285 5 is_stmt 1 view .LVU378
 285:Core/Src/uartParser.c ****     uartStatus = 1;
 1444              		.loc 1 285 16 is_stmt 0 view .LVU379
 1445 0052 054B     		ldr	r3, .L78+4
 1446 0054 0122     		movs	r2, #1
 1447 0056 1A70     		strb	r2, [r3]
 287:Core/Src/uartParser.c ****     USART3->CR1 &= ~USART_CR1_RXNEIE;
 1448              		.loc 1 287 5 is_stmt 1 view .LVU380
 287:Core/Src/uartParser.c ****     USART3->CR1 &= ~USART_CR1_RXNEIE;
 1449              		.loc 1 287 11 is_stmt 0 view .LVU381
 1450 0058 2368     		ldr	r3, [r4]
 287:Core/Src/uartParser.c ****     USART3->CR1 &= ~USART_CR1_RXNEIE;
 1451              		.loc 1 287 17 view .LVU382
 1452 005a 1F32     		adds	r2, r2, #31
 1453 005c 9343     		bics	r3, r2
 1454 005e 2360     		str	r3, [r4]
 1455              	.L74:
 1456              	.LBE17:
 289:Core/Src/uartParser.c **** }
 1457              		.loc 1 289 1 view .LVU383
 1458 0060 03B0     		add	sp, sp, #12
 1459              		@ sp needed
 1460 0062 30BD     		pop	{r4, r5, pc}
 1461              	.L79:
 1462              		.align	2
 1463              	.L78:
 1464 0064 00000000 		.word	.LC52
 1465 0068 00000000 		.word	uartStatus
 1466 006c 00480040 		.word	1073760256
 1467 0070 00000000 		.word	binarySem02UartParserHandle
 1468 0074 14000000 		.word	.LC56
 1469 0078 00000000 		.word	strIndex
 1470 007c 00000000 		.word	tmpStr
 1471              		.cfi_endproc
 1472              	.LFE48:
 1474              		.global	UARTTask_attributes
 1475              		.section	.rodata.str1.4,"aMS",%progbits,1
 1476              		.align	2
 1477              	.LC60:
 1478 0000 55415254 		.ascii	"UARTParseTask\000"
 1478      50617273 
 1478      65546173 
 1478      6B00
 1479              		.section	.rodata.UARTTask_attributes,"a"
 1480              		.align	2
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 51


 1483              	UARTTask_attributes:
 1484 0000 00000000 		.word	.LC60
 1485 0004 00000000 		.space	16
 1485      00000000 
 1485      00000000 
 1485      00000000 
 1486 0014 00020000 		.word	512
 1487 0018 19000000 		.word	25
 1488 001c 00000000 		.space	8
 1488      00000000 
 1489              		.global	uartStatus
 1490              		.section	.bss.uartStatus,"aw",%nobits
 1493              	uartStatus:
 1494 0000 00       		.space	1
 1495              		.global	commandLED
 1496              		.section	.bss.commandLED,"aw",%nobits
 1497              		.align	1
 1500              	commandLED:
 1501 0000 0000     		.space	2
 1502              		.global	commandOut
 1503              		.section	.bss.commandOut,"aw",%nobits
 1504              		.align	1
 1507              	commandOut:
 1508 0000 0000     		.space	2
 1509              		.global	cmd
 1510              		.section	.bss.cmd,"aw",%nobits
 1511              		.align	2
 1514              	cmd:
 1515 0000 00000000 		.space	80
 1515      00000000 
 1515      00000000 
 1515      00000000 
 1515      00000000 
 1516              		.global	tmpStr
 1517              		.section	.bss.tmpStr,"aw",%nobits
 1518              		.align	2
 1521              	tmpStr:
 1522 0000 00000000 		.space	20
 1522      00000000 
 1522      00000000 
 1522      00000000 
 1522      00000000 
 1523              		.global	cmdStrIndex
 1524              		.section	.bss.cmdStrIndex,"aw",%nobits
 1527              	cmdStrIndex:
 1528 0000 00       		.space	1
 1529              		.global	cmdIndex
 1530              		.section	.bss.cmdIndex,"aw",%nobits
 1533              	cmdIndex:
 1534 0000 00       		.space	1
 1535              		.global	strIndex
 1536              		.section	.bss.strIndex,"aw",%nobits
 1539              	strIndex:
 1540 0000 00       		.space	1
 1541              		.section	.rodata.str1.4
 1542 000e 0000     		.align	2
 1543              	.LC61:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 52


 1544 0010 53454D30 		.ascii	"SEM02\000"
 1544      3200
 1545              		.section	.rodata.semAttr_SEM1,"a"
 1546              		.align	2
 1549              	semAttr_SEM1:
 1550 0000 10000000 		.word	.LC61
 1551 0004 00000000 		.space	12
 1551      00000000 
 1551      00000000 
 1552              		.global	binarySem02UartParserHandle
 1553              		.section	.bss.binarySem02UartParserHandle,"aw",%nobits
 1554              		.align	2
 1557              	binarySem02UartParserHandle:
 1558 0000 00000000 		.space	4
 1559              		.global	cmdQueue
 1560              		.section	.bss.cmdQueue,"aw",%nobits
 1561              		.align	2
 1564              	cmdQueue:
 1565 0000 00000000 		.space	4
 1566              		.global	UARTTaskHandle
 1567              		.section	.bss.UARTTaskHandle,"aw",%nobits
 1568              		.align	2
 1571              	UARTTaskHandle:
 1572 0000 00000000 		.space	4
 1573              		.text
 1574              	.Letext0:
 1575              		.file 3 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 1576              		.file 4 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/lib/gcc/arm-none-eabi/13.2.1/includ
 1577              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1578              		.file 6 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 1579              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 1580              		.file 8 "Core/Inc/cmdQueue.h"
 1581              		.file 9 "Core/Inc/uartParser.h"
 1582              		.file 10 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/string.h"
 1583              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 53


DEFINED SYMBOLS
                            *ABS*:00000000 uartParser.c
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:19     .rodata.convertSpeed.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:23     .text.convertSpeed:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:29     .text.convertSpeed:00000000 convertSpeed
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:175    .text.convertSpeed:00000070 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:180    .text.transmitOneChar:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:186    .text.transmitOneChar:00000000 transmitOneChar
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:213    .text.transmitOneChar:00000010 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:218    .text.transmitCharArray:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:224    .text.transmitCharArray:00000000 transmitCharArray
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:274    .text.sendUint16BinToUart:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:280    .text.sendUint16BinToUart:00000000 sendUint16BinToUart
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:346    .rodata.parseCmd.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:380    .text.parseCmd:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:386    .text.parseCmd:00000000 parseCmd
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:825    .text.parseCmd:00000210 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1539   .bss.strIndex:00000000 strIndex
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1527   .bss.cmdStrIndex:00000000 cmdStrIndex
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1533   .bss.cmdIndex:00000000 cmdIndex
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1521   .bss.tmpStr:00000000 tmpStr
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1514   .bss.cmd:00000000 cmd
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1507   .bss.commandOut:00000000 commandOut
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:850    .rodata.StartParseUartTask.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:863    .text.StartParseUartTask:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:869    .text.StartParseUartTask:00000000 StartParseUartTask
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1120   .text.StartParseUartTask:000000f8 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1564   .bss.cmdQueue:00000000 cmdQueue
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1493   .bss.uartStatus:00000000 uartStatus
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1557   .bss.binarySem02UartParserHandle:00000000 binarySem02UartParserHandle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1139   .rodata.initUsart3.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1143   .text.initUsart3:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1149   .text.initUsart3:00000000 initUsart3
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1340   .text.initUsart3:000000c0 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1549   .rodata.semAttr_SEM1:00000000 semAttr_SEM1
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1355   .rodata.USART3_4_IRQHandler.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1362   .text.USART3_4_IRQHandler:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1368   .text.USART3_4_IRQHandler:00000000 USART3_4_IRQHandler
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1464   .text.USART3_4_IRQHandler:00000064 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1483   .rodata.UARTTask_attributes:00000000 UARTTask_attributes
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1476   .rodata.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1480   .rodata.UARTTask_attributes:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1494   .bss.uartStatus:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1500   .bss.commandLED:00000000 commandLED
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1497   .bss.commandLED:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1504   .bss.commandOut:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1511   .bss.cmd:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1518   .bss.tmpStr:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1528   .bss.cmdStrIndex:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1534   .bss.cmdIndex:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1540   .bss.strIndex:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1546   .rodata.semAttr_SEM1:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1554   .bss.binarySem02UartParserHandle:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1561   .bss.cmdQueue:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1571   .bss.UARTTaskHandle:00000000 UARTTaskHandle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s:1568   .bss.UARTTaskHandle:00000000 $d

ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccxnlPHq.s 			page 54


UNDEFINED SYMBOLS
strlen
strcmp
queuePush
osSemaphoreAcquire
__aeabi_uidiv
HAL_RCC_GetHCLKFreq
osSemaphoreNew
createQueue
osSemaphoreRelease
